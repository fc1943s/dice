#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_9c940d83 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::ofArray as ofArray_1;
        use fable_library_rust::List_::List;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::getNull;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Hash,
            PartialEq,
            PartialOrd,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::ArcRwSignal<bool>,
            pub l1: leptos::prelude::ArcRwSignal<bool>,
            pub l2: leptos::prelude::ArcRwSignal<std::string::String>,
            pub l3: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::ArcRwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US2 {
            US2_0(std::sync::Arc<rexie::Rexie>),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US3_1,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(wasm_bindgen::JsValue),
            US4_1,
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(serde_json::Value),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US6_1(std::string::String),
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(LrcPtr<Dice_ui::Heap3>),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(Dice_ui::US8),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Option<web_sys::Storage>),
            US9_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(web_sys::Storage),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Dice_ui::US11),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(Option<std::string::String>),
            US12_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::string::String),
            US14_1,
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Dice_ui::US14),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(Dice_ui::US14),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(leptos::prelude::ArcRwSignal<bool>),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(bool),
            US17_1,
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US19 {
            US19_0,
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0,
            US18_1(Dice_ui::US19),
            US18_2,
            US18_3,
            US18_4,
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(leptos_router::location::Url),
            US20_1(std::string::String),
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US21 {
            US21_0(Dice_ui::US18),
            US21_1,
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(leptos::prelude::Fragment),
            US22_1,
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US23 {
            US23_0,
            US23_1,
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH0 {
            UH0_0,
            UH0_1(
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
                LrcPtr<Dice_ui::UH0>,
            ),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(Vec<string>, LrcPtr<Dice_ui::UH1>),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(LrcPtr<Dice_ui::Heap4>),
            US25_1,
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US26 {
            US26_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US26_1,
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Vec<Dice_ui::US25>),
            US28_1(std::string::String),
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Dice_ui::US28),
            US27_1,
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US31 {
            US31_0(string),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1(std::string::String),
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Dice_ui::US30),
            US29_1,
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(Dice_ui::US25),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Option<string>),
            US33_1(std::string::String),
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Vec<()>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Array<Dice_ui::US25>),
            US36_1(std::string::String),
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Dice_ui::US36),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Result<Vec<Option<string>>, std::string::String>),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Vec<Option<string>>),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US38 {
            US38_0(Dice_ui::US39),
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Vec<Dice_ui::US31>),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Dice_ui::US41),
            US40_1,
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Dice_ui::US31),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(Dice_ui::US45),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US47_1,
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(Dice_ui::US47),
            US46_1(std::string::String),
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US49_1,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Dice_ui::US49),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
                LrcPtr<Dice_ui::UH2>,
            ),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<LrcPtr<Dice_ui::UH2>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US55 {
            US55_0(Array<(string, Dice_ui::US23, string, bool, bool)>),
            US55_1,
        }
        impl core::fmt::Display for US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Dice_ui::US55),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(Option<Array<(string, Dice_ui::US23, string, bool, bool)>>),
            US56_1(std::string::String),
        }
        impl core::fmt::Display for US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Dice_ui::US14),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US59_1,
        }
        impl core::fmt::Display for US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(Dice_ui::US59),
            US58_1(std::string::String),
        }
        impl core::fmt::Display for US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(crate::model::near::rpc::RpcResponse),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(Dice_ui::US58),
            US62_1,
        }
        impl core::fmt::Display for US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US63_1(std::string::String),
        }
        impl core::fmt::Display for US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US64_1,
        }
        impl core::fmt::Display for US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(leptos::prelude::ArcMemo<Dice_ui::US31>),
            US65_1,
        }
        impl core::fmt::Display for US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            ),
            US66_1,
        }
        impl core::fmt::Display for US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(chrono::DateTime<chrono::Utc>),
            US68_1,
        }
        impl core::fmt::Display for US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US69 {
            US69_0(string),
            US69_1(string),
        }
        impl core::fmt::Display for US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US31>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0(std::string::String),
            US70_1(std::string::String),
        }
        impl core::fmt::Display for US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method6() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure6((), v))
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method7() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure7((), v))
        }
        pub fn method8(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if (v2) <= (v0_1) {
                v1.clone()
            } else {
                let v9: f64 = (v0_1 as f64) / 2.0_f64;
                let v14: i64 = v9.ceil() as i64;
                let v21: i64 = v9.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some(((v14) - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some(((v2) - (v21)) as i32), Some(((v2) - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn closure8(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
                                            */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v8: */
                std::sync::Arc<rexie::Rexie>, /* = fable_library_rust::Native_::getZero();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v14: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v16: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v18: &std::sync::Arc<rexie::Rexie> = &v16.0;
                    let v20: &std::sync::Arc<rexie::Rexie> = &v14.0;
                    let v22: bool = std::sync::Arc::ptr_eq(v20, v18);
                    v22 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US2 {
            Dice_ui::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US2> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure9((), v))
        }
        pub fn method10(
            v0_1: Func1<string, std::string::String>,
        ) -> Func1<string, std::string::String> {
            v0_1
        }
        pub fn closure10(
            v0_1: Func1<string, std::string::String>,
            v1: string,
        ) -> std::string::String {
            let v2: Func1<string, std::string::String> = Dice_ui::method10(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method11(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure11(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method12() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure11((), v))
        }
        pub fn method13() -> string {
            string("store")
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method14() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn method15() -> string {
            string("core-state-heap")
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method16() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn closure14(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method17() -> Func1<wasm_bindgen::JsValue, Dice_ui::US4> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure14((), v))
        }
        pub fn method18(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure15(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method19() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method20() -> Func1<serde_json::Value, Dice_ui::US5> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v))
        }
        pub fn method21(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method22() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method23() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure18((), v))
        }
        pub fn closure19(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method24() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US6> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: std::string::String) -> Dice_ui::US6 {
            Dice_ui::US6::US6_1(v0_1)
        }
        pub fn method25() -> Func1<std::string::String, Dice_ui::US6> {
            Func1::new(move |v: std::string::String| Dice_ui::closure20((), v))
        }
        pub fn closure21(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method26() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US3> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method27() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US8> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure22((), v))
        }
        pub fn method28() -> web_sys::Window {
            leptos::prelude::window()
        }
        pub fn method29(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure23(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method30() -> Func1<Option<web_sys::Storage>, Dice_ui::US9> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US9 {
            Dice_ui::US9::US9_1(v0_1)
        }
        pub fn method31() -> Func1<wasm_bindgen::JsValue, Dice_ui::US9> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure24((), v))
        }
        pub fn closure25(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US11 {
            Dice_ui::US11::US11_0(v0_1)
        }
        pub fn method32() -> Func1<web_sys::Storage, Dice_ui::US11> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure25((), v))
        }
        pub fn closure26(unitVar: (), v0_1: Dice_ui::US8) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method33() -> Func1<Dice_ui::US8, Dice_ui::US7> {
            Func1::new(move |v: Dice_ui::US8| Dice_ui::closure26((), v))
        }
        pub fn method34(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method35() -> string {
            string("core-state-heap")
        }
        pub fn closure27(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method36() -> Func1<Option<std::string::String>, Dice_ui::US12> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure27((), v))
        }
        pub fn closure28(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US12 {
            Dice_ui::US12::US12_1(v0_1)
        }
        pub fn method37() -> Func1<wasm_bindgen::JsValue, Dice_ui::US12> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure28((), v))
        }
        pub fn method38(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure29(unitVar: (), v0_1: std::string::String) -> Dice_ui::US14 {
            Dice_ui::US14::US14_0(v0_1)
        }
        pub fn method39() -> Func1<std::string::String, Dice_ui::US14> {
            Func1::new(move |v: std::string::String| Dice_ui::closure29((), v))
        }
        pub fn method41(v0_1: string) -> string {
            v0_1
        }
        pub fn closure31(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method42() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure31((), v))
        }
        pub fn closure30(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            let v3: string = Dice_ui::method41(fable_library_rust::String_::fromString(v0_1));
            let v12: &str = &*v3;
            let v38: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v12);
            let v39 = Dice_ui::method42();
            let v45: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v38.map_err(|x| v39(x));
            let v60: Option<LrcPtr<Dice_ui::Heap3>> = v45.ok();
            defaultValue(Dice_ui::US8::US8_1, map(Dice_ui::method27(), v60))
        }
        pub fn method40() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure30((), v))
        }
        pub fn closure32(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure33(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l1
        }
        pub fn closure34(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l2.clone()
        }
        pub fn closure35(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure36(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading new_arc_memo")
            );
            let v6: std::pin::Pin<
                Box<
                    leptos::prelude::ArcRwSignal<
                        std::collections::HashMap<
                            std::string::String,
                            leptos::prelude::ArcRwSignal<bool>,
                        >,
                    >,
                >,
            > = Box::pin(v0_1.l1.clone());
            leptos::prelude::ArcRwSignal::get_untracked(&v6)
        }
        pub fn method43() -> string {
            string("core-state-heap")
        }
        pub fn method44(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
        ) -> Func1<LrcPtr<Dice_ui::Heap3>, std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>>
        {
            v0_1
        }
        pub fn closure37(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = Dice_ui::method44(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method45(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure38(unitVar: (), v0_1: leptos::prelude::ArcRwSignal<bool>) -> Dice_ui::US16 {
            Dice_ui::US16::US16_0(v0_1)
        }
        pub fn method46() -> Func1<leptos::prelude::ArcRwSignal<bool>, Dice_ui::US16> {
            Func1::new(move |v: leptos::prelude::ArcRwSignal<bool>| Dice_ui::closure38((), v))
        }
        pub fn closure39(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method47(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method48() -> string {
            string("core-state-heap")
        }
        pub fn method49(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure40(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method50(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure40(v0_1.clone(), ())
            })
        }
        pub fn closure41(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = leptos::prelude::Memo::get(&v2);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = leptos::prelude::Memo::get(&v8);
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                (v6),
                (if (v12.clone()) == string("") {
                    string("")
                } else {
                    concat(new_array(&[string("?"), v12]))
                }),
            )
        }
        pub fn method51(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method52(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure42(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US20 {
            Dice_ui::US20::US20_0(v0_1)
        }
        pub fn method53() -> Func1<leptos_router::location::Url, Dice_ui::US20> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure42((), v))
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Dice_ui::US20 {
            Dice_ui::US20::US20_1(v0_1)
        }
        pub fn method54() -> Func1<std::string::String, Dice_ui::US20> {
            Func1::new(move |v: std::string::String| Dice_ui::closure43((), v))
        }
        pub fn closure45(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method55() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure45((), arg10_0040)
            })
        }
        pub fn method56(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure44(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v5.l3.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v8);
            let v13: bool = true;
            let _vec_map: Vec<_> = v10
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    //;
                    let v15: LrcPtr<(bool, std::string::String)> = x;
                    let v25: bool = true;
                    v15.0.clone()
                })
                .collect::<Vec<_>>();
            let v27: Vec<(bool, std::string::String)> = _vec_map;
            let v28 = Dice_ui::method55();
            let v29: Vec<(bool, std::string::String)> = Dice_ui::method56(v27);
            let v31: Vec<(bool, std::string::String)> = v29
                .into_iter()
                .filter(|x| v28(x.clone().clone()))
                .collect::<Vec<_>>();
            let v33: bool = true;
            let _vec_map: Vec<_> = v31
                .into_iter()
                .map(|x| {
                    //;
                    let patternInput: (bool, std::string::String) = x;
                    let v38: bool = true;
                    patternInput.1.clone()
                })
                .collect::<Vec<_>>();
            let v40: Vec<std::string::String> = _vec_map;
            let v42: bool = true;
            let _vec_map: Vec<_> = v40
                .into_iter()
                .map(|x| {
                    //;
                    let v44: std::string::String = x;
                    let v46: string = fable_library_rust::String_::fromString(v44);
                    let v48: bool = true;
                    v46
                })
                .collect::<Vec<_>>();
            let v50: Vec<string> = _vec_map;
            let v57: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("use_transactions.render (2) / accounts new_arc_memo / result: "),
                        sprintf!("{:?}", v50.clone()),
                    )),
                    string(""),
                ),
            );
            let v59: bool = true;
            leptos::logging::log!("{}", v57);
            v50
        }
        pub fn method57(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure47(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
            v1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<string, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method57(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn closure46(
            v0_1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<string> = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v8: string = append(
                    (append(string("https://api3.nearblocks.io/v1/account/"), (value))),
                    string(""),
                );
                let v13: bool = true;
                (v8, Dice_ui::US23::US23_0, string(""), false, true) /*;
                                                                     let v15: bool = */
            }); //;
            let v17: Func1<string, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v3;
            let v20: Vec<(string, Dice_ui::US23, string, bool, bool)> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v17 = v17.clone();
                        move |v: string| Dice_ui::closure47(v17.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<(string, Dice_ui::US23, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v20.clone());
            let v29: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (3) / accounts_metadata new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v22.clone()))),
                                        string("")));
            let v31: bool = true;
            leptos::logging::log!("{}", v29);
            v22
        }
        pub fn method59(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method58(v0_1: LrcPtr<Dice_ui::Heap0>) -> Vec<i32> {
            let v1: i32 = v0_1.l3;
            let v2: Array<i32> = new_init(&0_i32, v1);
            let v3: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method59(v1, v3.clone()) {
                let v5: i32 = v3.l0.get().clone();
                v2.get_mut()[v5 as usize] = v5;
                {
                    let v6: i32 = (v5) + 1_i32;
                    v3.l0.set(v6);
                    ()
                }
            }
            v2.clone().to_vec()
        }
        pub fn method60(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<i32, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure49(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
            v1: i32,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method60(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn method61(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
        ) -> Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            v0_1
        }
        pub fn closure50(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) {
            let v2: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                Dice_ui::method61(v0_1);
            let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure48(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v6.l3.clone());
            let v11: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v9);
            let v13: Vec<string> = leptos::prelude::ArcMemo::get(&v1);
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: string = value;
                let v19: Vec<i32> = Dice_ui::method58(v11);
                let v22: bool = true;
                let _func1_from_v20 = Func1::from(move |value| {
                    //;
                    let v26: string = append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string("https://api3.nearblocks.io/v1/account/"),
                                            (v18.clone()),
                                        )),
                                        string("/txns?&order=desc&page="),
                                    )),
                                    (toString((value) + 1_i32)),
                                )),
                                string("&per_page="),
                            )),
                            (toString(25_i32)),
                        )),
                        string(""),
                    );
                    let v31: bool = true;
                    (v26, Dice_ui::US23::US23_0, string(""), false, true) /*;
                                                                          let v33: bool = */
                }); //;
                let v35: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v20;
                let v38: Vec<(string, Dice_ui::US23, string, bool, bool)> = v19
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v35 = v35.clone();
                            move |v: i32| Dice_ui::closure49(v35.clone(), v)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v41: bool = true;
                (v18, v38) /*;
                           let v43: bool = */
            }); //;
            let v45: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                _func1_from_v14;
            let v48: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v45 = v45.clone();
                        move |v_1: string| Dice_ui::closure50(v45.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v55: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (4) / accounts_requests new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v48.clone()))),
                                        string("")));
            let v57: bool = true;
            leptos::logging::log!("{}", v55);
            v48
        }
        pub fn method62(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
        ) -> Func1<
            (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
        > {
            v0_1
        }
        pub fn closure52(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v3: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = Dice_ui::method62(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure54(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
            v1: LrcPtr<Dice_ui::UH0>,
        ) -> LrcPtr<Dice_ui::UH0> {
            LrcPtr::new(Dice_ui::UH0::UH0_1(v0_1, v1))
        }
        pub fn closure53(
            unitVar: (),
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH0>| Dice_ui::closure54(v0_1.clone(), v)
            })
        }
        pub fn method63() -> Func1<
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
            Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>>,
        > {
            Func1::new(move |v: Vec<(string, Dice_ui::US23, string, bool, bool)>| {
                Dice_ui::closure53((), v)
            })
        }
        pub fn method65(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method66(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method64(
            v0_1: LrcPtr<Dice_ui::UH0>,
            v1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH0>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                MutCell::new(v1.clone());
            '_method64: loop {
                break '_method64 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH0::UH0_0 => v1.get().clone(),
                    Dice_ui::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method65(
                                match v0_1.get().clone().as_ref() {
                                    Dice_ui::UH0::UH0_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            );
                        let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method66(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH0> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH0::UH0_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<(string, Dice_ui::US23, string, bool, bool)> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method64;
                        }
                    }
                });
            }
        }
        pub fn closure51(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                patternInput.1.clone() /*;
                                       let v13: bool = */
            }); //;
            let v15: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = _func1_from_v3;
            let v18: Vec<Vec<(string, Dice_ui::US23, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v15 = v15.clone();
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure52(v15.clone(), arg10_0040)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v21: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US23, string, bool, bool)>().to_vec();
            let v25: List<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v18.clone()));
            let v59: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method64(
                foldBack(
                    Func2::new(
                        move |b0: Vec<(string, Dice_ui::US23, string, bool, bool)>,
                              b1: LrcPtr<Dice_ui::UH0>| {
                            (Dice_ui::method63())(b0)(b1)
                        },
                    ),
                    v25,
                    LrcPtr::new(Dice_ui::UH0::UH0_0),
                ),
                v21,
            );
            let v66: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (5) / txns_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v59.clone()),
                    )),
                    string(""),
                ),
            );
            let v68: bool = true;
            leptos::logging::log!("{}", v66);
            v59
        }
        pub fn method67(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
        ) -> Func1<(string, Dice_ui::US23, string, bool, bool), string> {
            v0_1
        }
        pub fn closure56(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> string {
            let v6: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                Dice_ui::method67(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method68(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
        ) -> Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>
        {
            v0_1
        }
        pub fn closure57(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<string> {
            let v3: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>> =
                Dice_ui::method68(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure59(v0_1: Vec<string>, v1: LrcPtr<Dice_ui::UH1>) -> LrcPtr<Dice_ui::UH1> {
            LrcPtr::new(Dice_ui::UH1::UH1_1(v0_1, v1))
        }
        pub fn closure58(
            unitVar: (),
            v0_1: Vec<string>,
        ) -> Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH1>| Dice_ui::closure59(v0_1.clone(), v)
            })
        }
        pub fn method69() -> Func1<Vec<string>, Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>>> {
            Func1::new(move |v: Vec<string>| Dice_ui::closure58((), v))
        }
        pub fn method71(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method72(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method70(v0_1: LrcPtr<Dice_ui::UH1>, v1: Vec<string>) -> Vec<string> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH1>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<string>> = MutCell::new(v1.clone());
            '_method70: loop {
                break '_method70 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH1::UH1_0 => v1.get().clone(),
                    Dice_ui::UH1::UH1_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<string> = Dice_ui::method71(
                            match v0_1.get().clone().as_ref() {
                                Dice_ui::UH1::UH1_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v5: Vec<string> = Dice_ui::method72(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH1> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH1::UH1_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<string> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method70;
                        }
                    }
                });
            }
        }
        pub fn closure55(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                let _func1_from_v9 = Func1::from(move |value| {
                    //;
                    let patternInput_1: (string, Dice_ui::US23, string, bool, bool) = value;
                    let v20: bool = true;
                    patternInput.0.clone() /*;
                                           let v22: bool = */
                }); //;
                let v24: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                    _func1_from_v9;
                let v27: Vec<string> = patternInput
                    .1
                    .clone()
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v24 = v24.clone();
                            move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                                Dice_ui::closure56(v24.clone(), arg10_0040)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v30: bool = true;
                v27 /*;
                    let v32: bool = */
            }); //;
            let v34: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<string>,
            > = _func1_from_v3;
            let v37: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v34 = v34.clone();
                        move |arg10_0040_1: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure57(v34.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v40: Vec<string> = new_empty::<string>().to_vec();
            let v44: List<Vec<string>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v37.clone()));
            let v78: Vec<string> = Dice_ui::method70(
                foldBack(
                    Func2::new(move |b0: Vec<string>, b1: LrcPtr<Dice_ui::UH1>| {
                        (Dice_ui::method69())(b0)(b1)
                    }),
                    v44,
                    LrcPtr::new(Dice_ui::UH1::UH1_0),
                ),
                v40,
            );
            let v80: Array<string> = fable_library_rust::NativeArray_::array_from(v78.clone());
            let v87: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (6) / urls_accounts new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v80.clone()),
                    )),
                    string(""),
                ),
            );
            let v89: bool = true;
            leptos::logging::log!("{}", v87);
            v80
        }
        pub fn method73(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Action,
            (std::string::String, Option<std::string::String>),
        > {
            v0_1
        }
        pub fn closure61(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
            v1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            let v2: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            > = Dice_ui::method73(v0_1);
            let patternInput: (std::string::String, Option<std::string::String>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method74(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure62(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1.clone())
        }
        pub fn method75() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure62((), v))
        }
        pub fn method76(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Txn,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure63(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method76(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
            )
        }
        pub fn method77(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure60(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::nearblocks::Txn = value;
                let v9: std::string::String = v7.clone().receipt_id;
                let v11: std::string::String = v7.clone().predecessor_account_id;
                let v13: std::string::String = v7.clone().receiver_account_id;
                let v15: std::string::String = v7.clone().transaction_hash;
                let v17: std::string::String = v7.clone().included_in_block_hash;
                let v19: std::string::String = v7.clone().block_timestamp;
                let v21: crate::model::near::nearblocks::Block = v7.clone().block;
                let v23: u32 = v21.block_height;
                let v25: Vec<crate::model::near::nearblocks::Action> = v7.clone().actions;
                let v28: bool = true;
                let _func1_from_v26 = Func1::from(move |value| {
                    //;
                    let v30: crate::model::near::nearblocks::Action = value;
                    let v32: std::string::String = v30.clone().action;
                    let v34: Option<std::string::String> = v30.method;
                    let v37: bool = true;
                    (v32, v34) /*;
                               let v39: bool = */
                }); //;
                let v41: Func1<
                    crate::model::near::nearblocks::Action,
                    (std::string::String, Option<std::string::String>),
                > = _func1_from_v26;
                let v44: Vec<(std::string::String, Option<std::string::String>)> = v25
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v41 = v41.clone();
                            move |v: crate::model::near::nearblocks::Action| {
                                Dice_ui::closure61(v41.clone(), v)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v47: Array<(std::string::String, Option<std::string::String>)> =
                    Dice_ui::method74(fable_library_rust::NativeArray_::array_from(v44.clone()));
                let v49: crate::model::near::nearblocks::ActionsAgg = v7.clone().actions_agg;
                let v51: f64 = v49.deposit;
                let v53: crate::model::near::nearblocks::Outcomes = v7.clone().outcomes;
                let v55: bool = v53.status;
                let v57: crate::model::near::nearblocks::OutcomesAgg = v7.clone().outcomes_agg;
                let v59: f64 = v57.transaction_fee;
                let v61: Option<Vec<std::string::String>> = v7.logs;
                let v79: Array<std::string::String> = defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method75(), v61),
                );
                let v84: bool = true;
                (v9, v11, v13, v15, v17, v19, v23, v47, v51, v55, v59, v79) /*;
                                                                            let v86: bool = */
            }); //;
            let v88: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = _func1_from_v3;
            let v91: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v88 = v88.clone();
                        move |v_1: crate::model::near::nearblocks::Txn| {
                            Dice_ui::closure63(v88.clone(), v_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method77(fable_library_rust::NativeArray_::array_from(v91.clone()))
        }
        pub fn closure64(
            v0_1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone());
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn method79(v0_1: string) -> string {
            v0_1
        }
        pub fn method80(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure65(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            > = Dice_ui::method80(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method81(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure66(
            v0_1: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method29(Dice_ui::method28());
            let v6 = Dice_ui::method30();
            let v7 = Dice_ui::method31();
            let v8: Dice_ui::US9 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v34: Dice_ui::US10 = match &v8 {
                Dice_ui::US9::US9_0(v8_0_0) => Dice_ui::US10::US10_0(defaultValue(
                    Dice_ui::US11::US11_1,
                    map(Dice_ui::method32(), v8_0_0.clone()),
                )),
                Dice_ui::US9::US9_1(v8_1_0) => Dice_ui::US10::US10_1(v8_1_0.clone()),
            };
            let v42: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US10::US10_0(v34_0_0) = &v34 {
                    if let Dice_ui::US11::US11_0(v34_0_0) = &v34_0_0 {
                        Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone())
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v49: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v42.clone()),
                    )),
                    string(""),
                ),
            );
            let v51: bool = true;
            leptos::logging::log!("{}", v49);
            v42
        }
        pub fn closure67(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method82(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US26>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure67((), v)
                },
            )
        }
        pub fn closure68(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US24 {
            Dice_ui::US24::US24_0(v0_1)
        }
        pub fn method83() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US24> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure68((), v))
        }
        pub fn closure69(unitVar: (), v0_1: std::string::String) -> Dice_ui::US24 {
            Dice_ui::US24::US24_1(v0_1)
        }
        pub fn method84() -> Func1<std::string::String, Dice_ui::US24> {
            Func1::new(move |v: std::string::String| Dice_ui::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method85() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US25> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure70((), v))
        }
        pub fn closure73(unitVar: (), v0_1: Dice_ui::US25) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method87() -> Func1<Dice_ui::US25, Dice_ui::US32> {
            Func1::new(move |v: Dice_ui::US25| Dice_ui::closure73((), v))
        }
        pub fn method88(v0_1: Dice_ui::US23) -> Dice_ui::US23 {
            v0_1
        }
        pub fn method89(v0_1: string) -> string {
            v0_1
        }
        pub fn method90(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method91(v0_1: string) -> string {
            v0_1
        }
        pub fn method92(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method93(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method94(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure74(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method95() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure74((), v))
        }
        pub fn closure72(
            v0_1: Dice_ui::US27,
            v1: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US23 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(
                /*;
                let v10: bool = */
                async move {
                    /*;
                    let v12: bool = */
                    ();
                    let v61: Dice_ui::US29 = match &v0_1 {
                        Dice_ui::US27::US27_0(v0_1_0_0) => {
                            let v13: Dice_ui::US28 = match &v0_1 {
                                Dice_ui::US27::US27_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            Dice_ui::US29::US29_0(match &v13 {
                                Dice_ui::US28::US28_0(v13_0_0) => {
                                    let v17: Option<Dice_ui::US25> = tryItem(
                                        v1,
                                        fable_library_rust::NativeArray_::array_from(
                                            v13_0_0.clone().clone(),
                                        ),
                                    );
                                    let v34: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method87(), v17),
                                    );
                                    let v44: Dice_ui::US25 =
                                        if let Dice_ui::US32::US32_0(v34_0_0) = &v34 {
                                            let v38: Dice_ui::US25 = v34_0_0.clone();
                                            if let Dice_ui::US25::US25_0(v38_0_0) = &v38 {
                                                Dice_ui::US25::US25_0(v38_0_0.clone())
                                            } else {
                                                Dice_ui::US25::US25_1
                                            }
                                        } else {
                                            Dice_ui::US25::US25_1
                                        };
                                    Dice_ui::US30::US30_0(match &v44 {
                                        Dice_ui::US25::US25_0(v44_0_0) => Dice_ui::US31::US31_0(
                                            fable_library_rust::String_::fromString(
                                                (match &v44 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                                .l0
                                                .clone(),
                                            ),
                                        ),
                                        _ => Dice_ui::US31::US31_1,
                                    })
                                }
                                Dice_ui::US28::US28_1(v13_1_0) => {
                                    Dice_ui::US30::US30_1(v13_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_1,
                    };
                    let v67: string =
                        Dice_ui::method8(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                    let v73: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v0_1.clone()));
                    let v79: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v61.clone()));
                    let v104: bool = if v6 {
                        true
                    } else {
                        if let Dice_ui::US27::US27_0(v0_1_0_0) = &v0_1 {
                            let v80: Dice_ui::US28 = v0_1_0_0.clone();
                            if let Dice_ui::US28::US28_0(v80_0_0) = &v80 {
                                if (get_Count(fable_library_rust::NativeArray_::array_from(
                                    v80_0_0.clone().clone(),
                                ))) == 0_i32
                                {
                                    false
                                } else {
                                    if let Dice_ui::US29::US29_0(v61_0_0) = &v61 {
                                        let v86: Dice_ui::US30 = v61_0_0.clone();
                                        if let Dice_ui::US30::US30_0(v86_0_0) = &v86 {
                                            if let Dice_ui::US31::US31_1 = &v86_0_0 {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US29::US29_0(v61_0_0) = &v61 {
                                    let v92: Dice_ui::US30 = v61_0_0.clone();
                                    if let Dice_ui::US30::US30_0(v92_0_0) = &v92 {
                                        if let Dice_ui::US31::US31_1 = &v92_0_0 {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US29::US29_0(v61_0_0) = &v61 {
                                let v98: Dice_ui::US30 = v61_0_0.clone();
                                if let Dice_ui::US30::US30_0(v98_0_0) = &v98 {
                                    if let Dice_ui::US31::US31_1 = &v98_0_0 {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v105: string =
                append((append((append((append((append((append((append((append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                               (v73))),
                                                                       string(" / state_data\': "))),
                                                               (v79))),
                                                       string(" / request: "))),
                                               (v67))),
                                       string(" / should_fetch: "))),
                               (ofBoolean(v104)))), string(""));
                    let v107: bool = true;
                    leptos::logging::log!("{}", v105);
                    let v518: Dice_ui::US33 = if (v104) == false {
                        Dice_ui::US33::US33_0(None::<string>)
                    } else {
                        let v111: Dice_ui::US23 = Dice_ui::method88(v3);
                        let v253: reqwest_wasm::RequestBuilder = match &v111 {
                            Dice_ui::US23::US23_1 => {
                                let v182: string = Dice_ui::method91(v2.clone());
                                let v191: &str = &*v182;
                                let v249: std::string::String =
                                    Dice_ui::method92(String::from(v191));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .post(v249)
                            }
                            _ => {
                                let v112: string = Dice_ui::method89(v2.clone());
                                let v121: &str = &*v112;
                                let v179: std::string::String =
                                    Dice_ui::method90(String::from(v121));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .get(v179)
                            }
                        };
                        let v262: &str = &*_arg.2.clone();
                        let v295: std::string::String = String::from(v262);
                        let v321: reqwest_wasm::RequestBuilder =
                            reqwest_wasm::RequestBuilder::body(v253, v295);
                        let v466: reqwest_wasm::RequestBuilder =
                            Dice_ui::method94(if (v5) == false {
                                v321
                            } else {
                                let v326: std::string::String =
                                    reqwest_wasm::header::CONTENT_TYPE.to_string();
                                let v328: string = fable_library_rust::String_::fromString(v326);
                                let v329: reqwest_wasm::RequestBuilder = Dice_ui::method93(v321);
                                let v338: &str = &*v328;
                                let v371: std::string::String = String::from(v338);
                                let v405: &str = &*string("application/json");
                                let v438: std::string::String = String::from(v405);
                                reqwest_wasm::RequestBuilder::header(v329, v371, v438)
                            });
                        let v468: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::RequestBuilder::send(v466));
                        let v470: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v468.await;
                        let v471 = Dice_ui::method95();
                        let v477: Result<reqwest_wasm::Response, std::string::String> =
                            v470.map_err(|x| v471(x));
                        let v488: reqwest_wasm::Response = v477?;
                        let v490: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<std::string::String, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::Response::text(v488));
                        let v492: Result<std::string::String, reqwest_wasm::Error> = v490.await;
                        let v493 = Dice_ui::method95();
                        let v499: Result<std::string::String, std::string::String> =
                            v492.map_err(|x| v493(x));
                        let v510: std::string::String = v499?;
                        Dice_ui::US33::US33_0(Some(fable_library_rust::String_::fromString(v510)))
                    };
                    let v524: Result<Option<string>, std::string::String> = match &v518 {
                        Dice_ui::US33::US33_0(v518_0_0) => {
                            Ok::<Option<string>, std::string::String>(v518_0_0.clone())
                        }
                        Dice_ui::US33::US33_1(v518_1_0) => {
                            Err::<Option<string>, std::string::String>(v518_1_0.clone())
                        }
                    };
                    let v527: string = string("}");
                    let v534: bool = true;
                    let _fix_closure_v529 = v524;
                    let v539: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v529 "), (v527))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v540: bool = true;
                    _fix_closure_v529
                },
            ); // rust.fix_closure';
            let v542 = __future_init;
            v542
        }
        pub fn closure71(
            v0_1: Dice_ui::US27,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure72(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method86(
            v0_1: Dice_ui::US27,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure71(v0_1.clone(), v)
            })
        }
        pub fn method96(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method97(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method98(v0_1: string) -> string {
            v0_1
        }
        pub fn closure75(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method99() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure75((), v))
        }
        pub fn method100(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            > = Dice_ui::method100(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method101(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method102(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap4>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure77(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = Dice_ui::method102(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US37 {
            Dice_ui::US37::US37_0(v0_1)
        }
        pub fn method103() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US37>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure79((), v)
            })
        }
        pub fn closure80(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US39 {
            Dice_ui::US39::US39_0(v0_1)
        }
        pub fn method104() -> Func1<Vec<Option<string>>, Dice_ui::US39> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure80((), v))
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US39 {
            Dice_ui::US39::US39_1(v0_1)
        }
        pub fn method105() -> Func1<std::string::String, Dice_ui::US39> {
            Func1::new(move |v: std::string::String| Dice_ui::closure81((), v))
        }
        pub fn closure82(unitVar: (), v0_1: string) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn method106() -> Func1<string, Dice_ui::US31> {
            Func1::new(move |v: string| Dice_ui::closure82((), v))
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US31) -> Dice_ui::US42 {
            Dice_ui::US42::US42_0(v0_1)
        }
        pub fn method108() -> Func1<Dice_ui::US31, Dice_ui::US42> {
            Func1::new(move |v: Dice_ui::US31| Dice_ui::closure85((), v))
        }
        pub fn closure86(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method109(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure86((), v))
        }
        pub fn method110(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v54: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v27: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v37: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v27_0_0) = &v27 {
                                let v31: Dice_ui::US25 = v27_0_0.clone();
                                if let Dice_ui::US25::US25_0(v31_0_0) = &v31 {
                                    Dice_ui::US25::US25_0(v31_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v37 {
                                Dice_ui::US25::US25_0(v37_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v37 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v67: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v54.clone()))),
                )),
                string(""),
            );
            let v69: bool = true;
            leptos::logging::log!("{}", v67);
            let v76: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v78: bool = true;
            leptos::logging::log!("{}", v76);
            let v113: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v82: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v99: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v82));
                    if let Dice_ui::US42::US42_0(v99_0_0) = &v99 {
                        let v103: Dice_ui::US31 = v99_0_0.clone();
                        if let Dice_ui::US31::US31_0(v103_0_0) = &v103 {
                            Dice_ui::US31::US31_0(v103_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v113_0_0) = &v113 {
                let v115: string = Dice_ui::method41(v113_0_0.clone());
                let v124: &str = &*v115;
                let v150: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v124);
                let v151 = Dice_ui::method42();
                let v157: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v150.map_err(|x| v151(x));
                let v167 = Dice_ui::method109();
                let v168: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method110(v157);
                v168.map(|x| v167(x))
            } else {
                if let Dice_ui::US29::US29_0(v54_0_0) = &v54 {
                    let v171: Dice_ui::US30 = v54_0_0.clone();
                    if let Dice_ui::US30::US30_0(v171_0_0) = &v171 {
                        let v172: Dice_ui::US31 = v171_0_0.clone();
                        if let Dice_ui::US31::US31_0(v172_0_0) = &v172 {
                            let v174: string = Dice_ui::method41(v172_0_0.clone());
                            let v183: &str = &*v174;
                            let v209: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v183);
                            let v210 = Dice_ui::method42();
                            let v216: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v209.map_err(|x| v210(x));
                            let v226 = Dice_ui::method109();
                            let v227: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method110(v216);
                            v227.map(|x| v226(x))
                        } else {
                            let v234: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v113.clone(), v54.clone())),
                                )),
                                string(""),
                            );
                            let v236: bool = true;
                            leptos::logging::log!("{}", v234);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v244: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v113.clone(), v54.clone())),
                            )),
                            string(""),
                        );
                        let v246: bool = true;
                        leptos::logging::log!("{}", v244);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v254: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v113.clone(), v54.clone())),
                        )),
                        string(""),
                    );
                    let v256: bool = true;
                    leptos::logging::log!("{}", v254);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure83(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure84(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method107(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v31: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v78: Dice_ui::US35 = match &v31 {
                Dice_ui::US26::US26_0(v31_0_0) => {
                    let v35: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v31 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v36 = Dice_ui::method83();
                    let v37 = Dice_ui::method84();
                    let v38: Dice_ui::US24 = match &v35 {
                        Err(v35_1_0) => v37(v35_1_0.clone()),
                        Ok(v35_0_0) => v36(v35_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v38 {
                        Dice_ui::US24::US24_0(v38_0_0) => {
                            let v41: bool = true;
                            let _vec_map: Vec<_> = v38_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v43: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v60: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v43),
                                    );
                                    let v65: bool = true;
                                    v60
                                })
                                .collect::<Vec<_>>();
                            let v67: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v67.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v38_1_0) => Dice_ui::US36::US36_1(v38_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v85: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v78.clone()))),
                )),
                string(""),
            );
            let v87: bool = true;
            leptos::logging::log!("{}", v85);
            let v89: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v106: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v89));
            let v117: Dice_ui::US38 = match &v106 {
                Dice_ui::US37::US37_0(v106_0_0) => {
                    let v110: Result<Vec<Option<string>>, std::string::String> = match &v106 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v111 = Dice_ui::method104();
                    let v112 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v110 {
                        Err(v110_1_0) => v112(v110_1_0.clone()),
                        Ok(v110_0_0) => v111(v110_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v156: Dice_ui::US40 = match &v117 {
                Dice_ui::US38::US38_0(v117_0_0) => {
                    let v118: Dice_ui::US39 = match &v117 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v118 {
                        Dice_ui::US39::US39_0(v118_0_0) => {
                            let v121: bool = true;
                            let _vec_map: Vec<_> = v118_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v123: Option<string> = x;
                                    let v140: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v123),
                                    );
                                    let v145: bool = true;
                                    v140
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v118_1_0) => Dice_ui::US41::US41_1(v118_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v159: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v163: Dice_ui::US41 = match &v156 {
                Dice_ui::US40::US40_0(v156_0_0) => match &v156 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v159.clone()),
            };
            let v246: bool = match &v163 {
                Dice_ui::US41::US41_0(v163_0_0) => {
                    let v166: bool = true;
                    v163_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v168: Dice_ui::US31 = x;
                        let v239: bool = if let Dice_ui::US31::US31_0(v168_0_0) = &v168 {
                            let v178: &str = &*v168_0_0.clone();
                            let v236: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v178),
                            });
                            let v238: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v236.clone());
                            true
                        } else {
                            false
                        };
                        let v241: bool = true;
                        let v243: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v247 = Dice_ui::method107(v78, v163.clone());
            let v248: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v250: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v248
                .iter()
                .enumerate()
                .map(|(i, x)| v247(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v252: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v250.clone());
            let v259: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v252.clone()),
                    )),
                    string(""),
                ),
            );
            let v261: bool = true;
            leptos::logging::log!("{}", v259);
            v252
        }
        pub fn method112(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure88(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method112(v0_1), v1)
        }
        pub fn method111(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure88(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method113(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn method114(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure89(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = Dice_ui::method114(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure87(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v30: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v35: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v52: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v35));
            let v99: Dice_ui::US35 = match &v52 {
                Dice_ui::US26::US26_0(v52_0_0) => {
                    let v56: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v52 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v57 = Dice_ui::method83();
                    let v58 = Dice_ui::method84();
                    let v59: Dice_ui::US24 = match &v56 {
                        Err(v56_1_0) => v58(v56_1_0.clone()),
                        Ok(v56_0_0) => v57(v56_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v59 {
                        Dice_ui::US24::US24_0(v59_0_0) => {
                            let v62: bool = true;
                            let _vec_map: Vec<_> = v59_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v64: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v81: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v64),
                                    );
                                    let v86: bool = true;
                                    v81
                                })
                                .collect::<Vec<_>>();
                            let v88: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v88.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v59_1_0) => Dice_ui::US36::US36_1(v59_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v105: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v30));
            let v111: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v99));
            let v112: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v105))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v111))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v114: bool = true;
            leptos::logging::log!("{}", v112);
            let v116: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v118: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v116.to_vec();
            let v121: bool = true;
            let _func1_from_v119 = Func1::from(move |value| {
                //;
                let v123: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = value;
                let v124 = Dice_ui::method111(v0_1);
                let v125: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = Dice_ui::method113(v123);
                let v127: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = v125.map(|x| v124(x));
                let v130: bool = true;
                v127 /*;
                     let v132: bool = */
            }); //;
            let v134: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = _func1_from_v119;
            let v137: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v118
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v134 = v134.clone();
                        move |v: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure89(v134.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v144: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v137.clone()),
                    )),
                    string(""),
                ),
            );
            let v146: bool = true;
            leptos::logging::log!("{}", v144);
            v137
        }
        pub fn method78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v63: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v64: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v66 = __future_init;
                        let v68: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v66;
                        let v70: Result<rexie::Rexie, std::string::String> = v68.await;
                        let v76: rexie::Rexie = v70.unwrap();
                        let v87: rexie::Rexie = (Dice_ui::method7())(v76);
                        let v89: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v87);
                        let v96: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v89.clone()))),
                                        string("")));
                        let v98: bool = true;
                        leptos::logging::log!("{}", v96);
                        let v99: string = string("}");
                        let v106: bool = true;
                        let _fix_closure_v101 = v89;
                        let v111: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v101 "), (v99))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v112: bool = true;
                        _fix_closure_v101
                    },
                ); // rust.fix_closure';
                let v114 = __future_init;
                let v116: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v114;
                let v118: bool = true;
                v116 /*;
                     let v120: bool = */
            }); //;
            let v122: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v124: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v122().await });
            let v127: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v124 = v124.clone();
                    move || Dice_ui::closure64(v124.clone(), ())
                })()
            });
            let v130: bool = true;
            let _func0_from_v128 = Func0::from(move || {
                //;
                let v132: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124.clone()), |x| {
                        x.clone()
                    });
                let v134: bool = true;
                let _optionm_map_ = v132.map(|x| {
                    //;
                    let v136: std::sync::Arc<rexie::Rexie> = x;
                    let v139: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v136);
                    let v141: bool = true;
                    v139
                });
                let v143: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v145: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v147: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v149: bool = */
                    async move {
                        /*;
                        let v151: bool = */
                        ();
                        let v153: string = sprintf!("{:?}", v143.clone());
                        let v162: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v145.clone()))))),
                                       string(" / database: "))), (v153))),
                       string(""));
                        let v164: bool = true;
                        leptos::logging::log!("{}", v162);
                        let v166: bool = true;
                        let _optionm_map_ = v143.map(|x| {
                            //;
                            let v168: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v170: std::sync::Arc<rexie::Rexie> = v168.0;
                            let v172: bool = true;
                            v170
                        });
                        let v174: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v191: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v174));
                        let v669: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v191_0_0) = &v191 {
                            let v198: bool = true;
                            let _func1_from_v196 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v205: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v206: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v205.clone()),
                                    )),
                                    string(""),
                                );
                                let v208: bool = true;
                                leptos::logging::log!("{}", v206);
                                let v210: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v212: bool = */
                                    async {
                                        /*;
                                        let v214: bool = */
                                        ();
                                        let v216: Array<string> = new_array(&[string("store")]);
                                        let v218: Vec<string> = v216.to_vec();
                                        let v221: bool = true;
                                        let _func1_from_v219 = Func1::from(move |value| {
                                            //;
                                            let v223: string = value;
                                            let v232: &str = &*v223;
                                            let v265: std::string::String = String::from(v232);
                                            let v292: bool = true;
                                            v265 /*;
                                                 let v294: bool = */
                                        }); //;
                                        let v296: Func1<string, std::string::String> =
                                            _func1_from_v219;
                                        let v299: Vec<std::string::String> = v218
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v296 = v296.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v296.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v300: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v191_0_0.clone());
                                        let v302: Result<rexie::Transaction, rexie::Error> = v300
                                            .transaction(&v299, rexie::TransactionMode::ReadOnly);
                                        let v303 = Dice_ui::method12();
                                        let v309: Result<rexie::Transaction, std::string::String> =
                                            v302.map_err(|x| v303(x));
                                        let v320: rexie::Transaction = v309?;
                                        let v321: string = Dice_ui::method13();
                                        let v330: &str = &*v321;
                                        let v356: Result<rexie::Store, rexie::Error> =
                                            v320.store(v330);
                                        let v357 = Dice_ui::method14();
                                        let v363: Result<rexie::Store, std::string::String> =
                                            v356.map_err(|x| v357(x));
                                        let v374: rexie::Store = v363?;
                                        let v375: string = Dice_ui::method79(v205);
                                        let v384: &str = &*v375;
                                        let v410: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v384);
                                        let v412: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v374, v410));
                                        let v414: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v412.await;
                                        let v415 = Dice_ui::method16();
                                        let v421: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v414.map_err(|x| v415(x));
                                        let v432: Option<wasm_bindgen::JsValue> = v421?;
                                        let v449: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v432),
                                        );
                                        let v555: Dice_ui::US25 = match &v449 {
                                            Dice_ui::US4::US4_0(v449_0_0) => {
                                                let v454: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v449 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v456: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v454);
                                                let v457 = Dice_ui::method19();
                                                let v463: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v456.map_err(|x| v457(x));
                                                let v474: Option<serde_json::Value> = v463?;
                                                let v491: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v474),
                                                );
                                                match &v491 {
                                                    Dice_ui::US5::US5_0(v491_0_0) => {
                                                        let v496: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v491 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v498: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v496);
                                                        let v499 = Dice_ui::method22();
                                                        let v505: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v498.map_err(|x| v499(x));
                                                        let v516: Vec<u8> = v505?;
                                                        let v518: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v516.clone());
                                                        let v520: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v518.clone()))))),
                                                   string(""));
                                                        let v522: bool = true;
                                                        leptos::logging::log!("{}", v520);
                                                        let v524: Vec<u8> = v518.to_vec();
                                                        let v526: &[u8] = v524.as_slice();
                                                        let v528: bool = true;
                                                        let mut v526 = v526;
                                                        let v530: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v526,
                                                        );
                                                        let v531 = Dice_ui::method23();
                                                        let v537: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v530.map_err(|x| v531(x));
                                                        Dice_ui::US25::US25_0(v537?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v563: Option<LrcPtr<Dice_ui::Heap4>> = match &v555 {
                                            Dice_ui::US25::US25_0(v555_0_0) => Some(
                                                match &v555 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v565: string = string("}");
                                        let v572: bool = true;
                                        let _fix_closure_v567 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v563
                                        );
                                        let v577: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v567 "),
                                                        (v565),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v578: bool = true;
                                        _fix_closure_v567
                                    },
                                ); // rust.fix_closure';
                                let v580 = __future_init;
                                let v582: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v580;
                                let v585: bool = true;
                                v582 /*;
                                     let v587: bool = */
                            }); //;
                            let v589: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v196;
                            let v593: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v145.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v589 = v589.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v589.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v595: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v593);
                            let v597: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v595.await;
                            Dice_ui::US24::US24_0(v597?)
                        } else {
                            let v610: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v610))
                        };
                        let v675: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v669 {
                                Dice_ui::US24::US24_0(v669_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v669_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v669_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v669_1_0.clone(),
                                    )
                                }
                            };
                        let v682: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v675.clone()))),
                                        string("")));
                        let v684: bool = true;
                        leptos::logging::log!("{}", v682);
                        let v685: string = string("}");
                        let v692: bool = true;
                        let _fix_closure_v687 = v675;
                        let v697: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v687 "), (v685))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v698: bool = true;
                        _fix_closure_v687
                    },
                ); // rust.fix_closure';
                let v700 = __future_init;
                let v702: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v700;
                let v704: bool = true;
                v702 /*;
                     let v706: bool = */
            }); //;
            let v708: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v128;
            let v710: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v708().await });
            let v713: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v710 = v710.clone();
                    move || Dice_ui::closure66(v710.clone(), ())
                })()
            });
            let v716: bool = true;
            let _func0_from_v714 = Func0::from(move || {
                //;
                let v718: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v720: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v713.clone());
                let v727: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v718.clone()))),
                    )),
                    string(""),
                );
                let v729: bool = true;
                leptos::logging::log!("{}", v727);
                let v731: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v733: bool = */
                    async move {
                        /*;
                        let v735: bool = */
                        ();
                        let v752: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v720));
                        let v797: Dice_ui::US27 = match &v752 {
                            Dice_ui::US26::US26_0(v752_0_0) => {
                                let v756: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v752 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v757 = Dice_ui::method83();
                                let v758 = Dice_ui::method84();
                                let v759: Dice_ui::US24 = match &v756 {
                                    Err(v756_1_0) => v758(v756_1_0.clone()),
                                    Ok(v756_0_0) => v757(v756_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v759 {
                                    Dice_ui::US24::US24_0(v759_0_0) => {
                                        let v762: bool = true;
                                        let _vec_map: Vec<_> = v759_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v764: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v781: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v764),
                                                );
                                                let v786: bool = true;
                                                v781
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v759_1_0) => {
                                        Dice_ui::US28::US28_1(v759_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v804: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v797.clone()))),
                            )),
                            string(""),
                        );
                        let v806: bool = true;
                        leptos::logging::log!("{}", v804);
                        let v807 = Dice_ui::method86(v797);
                        let v808: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v718);
                        let v811: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v808.iter()
                                .enumerate()
                                .map(|(i, x)| v807(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v813: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v811);
                        let v815: Result<Vec<Option<string>>, std::string::String> = v813.await;
                        let v817: Vec<Option<string>> = v815?;
                        let v819: string = string("}");
                        let v826: bool = true;
                        let _fix_closure_v821 =
                            Ok::<Vec<Option<string>>, std::string::String>(v817);
                        let v831: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v821 "), (v819))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v832: bool = true;
                        _fix_closure_v821
                    },
                ); // rust.fix_closure';
                let v834 = __future_init;
                let v836: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v834;
                let v838: bool = true;
                v836 /*;
                     let v840: bool = */
            }); //;
            let v842: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v714;
            let v844: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v842().await });
            let v847: bool = true;
            let _func1_from_v845 = Func1::from(move |value| {
                //;
                let v849: LrcPtr<Dice_ui::Heap4> = value;
                let v855: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v849.clone())) as i64)),
                    )),
                    string(""),
                );
                let v857: bool = true;
                leptos::logging::log!("{}", v855);
                let v859: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v861: bool = */
                    async move {
                        /*;
                        let v863: bool = */
                        ();
                        let v865: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v867: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v865);
                        let v869: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v127);
                        let v871: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v869);
                        let v873: bool = true;
                        let _optionm_map_ = v871.map(|x| {
                            //;
                            let v875: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v877: std::sync::Arc<rexie::Rexie> = v875.0;
                            let v879: bool = true;
                            v877
                        });
                        let v881: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v898: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v881));
                        let v1069: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v898_0_0) = &v898 {
                            let v905: bool = true;
                            let _func1_from_v903 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v907: string = patternInput_1.0.clone();
                                let v913: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v915: bool = */
                                    async move {
                                        /*;
                                        let v917: bool = */
                                        ();
                                        let v918: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v907.clone()))), string(""));
                                        let v920: bool = true;
                                        leptos::logging::log!("{}", v918);
                                        let v921: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v907))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v927: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v849.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v929: bool = true;
                                        leptos::logging::log!("{}", v927);
                                        let v931: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v933: bool = */
                                            async move {
                                                /*;
                                                let v935: bool = */
                                                ();
                                                let v937: bool = true;
                                                let mut data = Vec::new();
                                                let v939: bool = true;
                                                borsh::BorshSerialize::serialize(&v849, &mut data)
                                                    .unwrap();
                                                let v941: Vec<u8> = data;
                                                let v943: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v941).unwrap();
                                                let v944: string = Dice_ui::method98(v921);
                                                let v953: &str = &*v944;
                                                let v979: rexie::Transaction =
                                                    v898_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v981: rexie::Store = v979.store("store")?;
                                                let v983: bool = true;
                                                v981.put(&v943, Some(&v953.into())).await?;
                                                let v985: bool = true;
                                                v979.done().await?;
                                                let v987: string = string("}");
                                                let v994: bool = true;
                                                let _fix_closure_v989 = Ok::<(), rexie::Error>(());
                                                let v999: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v989 "),
                                                                (v987),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1000: bool = true;
                                                _fix_closure_v989
                                            },
                                        ); // rust.fix_closure';
                                        let v1002 = __future_init;
                                        let v1004: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v1002;
                                        let v1006: Result<(), rexie::Error> = v1004.await;
                                        let v1007 = Dice_ui::method99();
                                        let v1013: Result<(), std::string::String> =
                                            v1006.map_err(|x| v1007(x));
                                        let v1024: bool = true;
                                        v1013?;
                                        let v1026: string = string("}");
                                        let v1033: bool = true;
                                        let _fix_closure_v1028 = Ok::<(), std::string::String>(());
                                        let v1038: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1028 "),
                                                        (v1026),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1039: bool = true;
                                        _fix_closure_v1028
                                    },
                                ); // rust.fix_closure';
                                let v1041 = __future_init;
                                let v1043: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                > = v1041;
                                let v1046: bool = true;
                                v1043 /*;
                                      let v1048: bool = */
                            }); //;
                            let v1050: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v903;
                            let v1054: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v867.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1050 = v1050.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1050.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1056: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1054);
                            let v1058: Result<Vec<()>, std::string::String> = v1056.await;
                            Dice_ui::US34::US34_0(v1058?)
                        } else {
                            let v1064: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1075: Result<Vec<()>, std::string::String> = match &v1069 {
                            Dice_ui::US34::US34_0(v1069_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1069_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1069_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1069_1_0.clone())
                            }
                        };
                        let v1076: string = string("}");
                        let v1083: bool = true;
                        let _fix_closure_v1078 = v1075;
                        let v1088: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1078 "), (v1076))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1089: bool = true;
                        _fix_closure_v1078
                    },
                ); // rust.fix_closure';
                let v1091 = __future_init;
                let v1093: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1091;
                let v1096: bool = true;
                v1093 /*;
                      let v1098: bool = */
            }); //;
            let v1100: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v845;
            let v1103: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1100 = v1100.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1100.clone(), v_1)
                })(value.clone())
            });
            let v1106: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1103 = v1103.clone();
                    let v713 = v713.clone();
                    let v844 = v844.clone();
                    move || {
                        Dice_ui::closure78(
                            v0_1.clone(),
                            v713.clone(),
                            v844.clone(),
                            v1103.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1106 = v1106.clone();
                    let v124 = v124.clone();
                    let v710 = v710.clone();
                    move || {
                        Dice_ui::closure87(
                            v1.clone(),
                            v124.clone(),
                            v710.clone(),
                            v1106.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method115() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US43,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure91((), v),
            )
        }
        pub fn closure92(unitVar: (), v0_1: std::string::String) -> Dice_ui::US43 {
            Dice_ui::US43::US43_1(v0_1)
        }
        pub fn method116() -> Func1<std::string::String, Dice_ui::US43> {
            Func1::new(move |v: std::string::String| Dice_ui::closure92((), v))
        }
        pub fn method117(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
        ) -> Func1<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
            Dice_ui::US43,
        > {
            v0_1
        }
        pub fn closure93(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
            v1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US43 {
            let v2: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = Dice_ui::method117(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure94(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn method118() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US45,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure94((), v),
            )
        }
        pub fn method119(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
        ) -> Func1<Dice_ui::US43, Dice_ui::US44> {
            v0_1
        }
        pub fn closure95(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
            v1: Dice_ui::US43,
        ) -> Dice_ui::US44 {
            let v2: Func1<Dice_ui::US43, Dice_ui::US44> = Dice_ui::method119(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure96(unitVar: (), v0_1: Dice_ui::US44) -> bool {
            if let Dice_ui::US44::US44_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US45::US45_1 = &v0_1_0_0 {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method120() -> Func1<Dice_ui::US44, bool> {
            Func1::new(move |v: Dice_ui::US44| Dice_ui::closure96((), v))
        }
        pub fn method121(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method123(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )>,
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure99(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1_: usize,
            v1__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method123(v0_1);
            let patternInput: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
                patternInput.12.clone(),
            )
        }
        pub fn method124(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
        ) -> Func1<
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
            (string, usize, LrcPtr<Dice_ui::Heap5>),
        > {
            v0_1
        }
        pub fn closure100(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            let v14: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            > = Dice_ui::method124(v0_1);
            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = (move |x| v14(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
                _arg.6.clone(),
                _arg.7.clone(),
                _arg.8.clone(),
                _arg.9.clone(),
                _arg.10.clone(),
                _arg.11.clone(),
                _arg.12.clone(),
            ));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure98(v0_1: Array<string>, v1: i32, v2: Dice_ui::US44) -> Dice_ui::US48 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US44::US44_0(v2_0_0) => {
                    let v4: Dice_ui::US45 = v2_0_0.clone();
                    Dice_ui::US48::US48_0(match &v4 {
                        Dice_ui::US45::US45_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US45::US45_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: bool = true;
                            let _func1_from_v14 = Func1::from(move |value| {
                                //;
                                let v18: LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )> = value;
                                let b: (
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = v18.1.clone();
                                let v73: bool = true;
                                (
                                    v18.0.clone(),
                                    b.0.clone(),
                                    b.1.clone(),
                                    b.2.clone(),
                                    b.3.clone(),
                                    b.4.clone(),
                                    b.5.clone(),
                                    b.6.clone(),
                                    b.7.clone(),
                                    b.8.clone(),
                                    b.9.clone(),
                                    b.10.clone(),
                                    b.11.clone(),
                                ) /*;
                                  let v75: bool = */
                            }); //;
                            let v77: Func1<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                            > = _func1_from_v14;
                            let v80: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new({
                                        let v77 = v77.clone();
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure99(
                                                v77.clone(),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        }
                                    })(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v82: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v80.clone());
                            let v84: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v82.to_vec();
                            let v87: bool = true;
                            let _func1_from_v85 = Func1::from(move |value| {
                                //;
                                let patternInput: (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = value;
                                let v103: usize = v1 as usize;
                                let v106: LrcPtr<Dice_ui::Heap5> = LrcPtr::new(Dice_ui::Heap5 {
                                    l0: patternInput.1.clone(),
                                    l1: patternInput.2.clone(),
                                    l2: patternInput.3.clone(),
                                    l3: patternInput.4.clone(),
                                    l4: patternInput.5.clone(),
                                    l5: patternInput.6.clone(),
                                    l6: patternInput.7.clone(),
                                    l7: patternInput.8.clone(),
                                    l8: patternInput.9.clone(),
                                    l9: patternInput.10.clone(),
                                    l10: patternInput.11.clone(),
                                    l11: patternInput.12.clone(),
                                });
                                let v109: bool = true;
                                (v3.clone(), v103, v106) /*;
                                                         let v111: bool = */
                            }); //;
                            let v113: Func1<
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                                (string, usize, LrcPtr<Dice_ui::Heap5>),
                            > = _func1_from_v85;
                            Dice_ui::US49::US49_0(
                                v84.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v113 = v113.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure100(v113.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US49::US49_1,
                    })
                }
                Dice_ui::US44::US44_1(v2_1_0) => Dice_ui::US48::US48_1(v2_1_0.clone()),
            }
        }
        pub fn closure97(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US44, Dice_ui::US48> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US44| Dice_ui::closure98(v0_1.clone(), v1, v)
            })
        }
        pub fn method122(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US44, Dice_ui::US48>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure97(v0_1.clone(), v)
            })
        }
        pub fn method125(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method126(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
        ) -> Func1<Dice_ui::US48, Dice_ui::US50> {
            v0_1
        }
        pub fn closure101(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
            v1: Dice_ui::US48,
        ) -> Dice_ui::US50 {
            let v2: Func1<Dice_ui::US48, Dice_ui::US50> = Dice_ui::method126(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method127(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func1<
            Dice_ui::US50,
            Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure102(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v1: Dice_ui::US50,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v2: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            > = Dice_ui::method127(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method128(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method130(
        ) -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US50> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure103((), v)
                },
            )
        }
        pub fn closure104(unitVar: (), v0_1: std::string::String) -> Dice_ui::US50 {
            Dice_ui::US50::US50_1(v0_1)
        }
        pub fn method131() -> Func1<std::string::String, Dice_ui::US50> {
            Func1::new(move |v: std::string::String| Dice_ui::closure104((), v))
        }
        pub fn closure105(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US49 {
            Dice_ui::US49::US49_0(v0_1)
        }
        pub fn method132() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US49> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure105((), v)
            })
        }
        pub fn method133(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method134(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method129(v0_1: LrcPtr<Dice_ui::UH2>, v1: Dice_ui::US51) -> Dice_ui::US51 {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH2>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Dice_ui::US51> = MutCell::new(v1.clone());
            '_method129: loop {
                break '_method129 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH2::UH2_0 => v1.get().clone(),
                    Dice_ui::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v2: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        > = match v0_1.get().clone().as_ref() {
                            Dice_ui::UH2::UH2_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v4 = Dice_ui::method130();
                        let v5 = Dice_ui::method131();
                        let v6: Dice_ui::US50 = match &v2 {
                            Err(v2_1_0) => v5(v2_1_0.clone()),
                            Ok(v2_0_0) => v4(v2_0_0.clone()),
                        };
                        let v32: Dice_ui::US48 = match &v6 {
                            Dice_ui::US50::US50_0(v6_0_0) => Dice_ui::US48::US48_0(defaultValue(
                                Dice_ui::US49::US49_1,
                                map(Dice_ui::method132(), v6_0_0.clone()),
                            )),
                            Dice_ui::US50::US50_1(v6_1_0) => Dice_ui::US48::US48_1(v6_1_0.clone()),
                        };
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH2> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Dice_ui::US51 = if let Dice_ui::US51::US51_0(v1_0_0) =
                                &v1.get().clone()
                            {
                                match &v32 {
                                    Dice_ui::US48::US48_0(v32_0_0) => {
                                        let v34: Dice_ui::US49 = v32_0_0.clone();
                                        if let Dice_ui::US49::US49_0(v34_0_0) = &v34 {
                                            let v36: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method133(v34_0_0.clone());
                                            let v37: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method134(v1_0_0.clone());
                                            let v39: bool = true;
                                            let mut v37 = v37;
                                            let v41: bool = true;
                                            v37.extend(v36);
                                            Dice_ui::US51::US51_0(v37)
                                        } else {
                                            v1.get().clone()
                                        }
                                    }
                                    Dice_ui::US48::US48_1(v32_1_0) => {
                                        Dice_ui::US51::US51_1(v32_1_0.clone())
                                    }
                                }
                            } else {
                                if let Dice_ui::US48::US48_1(v32_1_0) = &v32 {
                                    Dice_ui::US51::US51_1(v32_1_0.clone())
                                } else {
                                    v1.get().clone()
                                }
                            };
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method129;
                        }
                    }
                });
            }
        }
        pub fn method135(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure106(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method136() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure106((), arg10_0040)
            })
        }
        pub fn method137(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure90(
            v0_1: leptos::prelude::ArcMemo<Array<string>>,
            v1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = leptos::prelude::ArcMemo::get(&v1);
            let v6: bool = true;
            let _func1_from_v4 = Func1::from(move |value| {
                //;
                let v8: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = value;
                let v9 = Dice_ui::method115();
                let v10 = Dice_ui::method116();
                let v11: Dice_ui::US43 = match &v8 {
                    Err(v8_1_0) => v10(v8_1_0.clone()),
                    Ok(v8_0_0) => v9(v8_0_0.clone()),
                };
                let v14: bool = true;
                v11 /*;
                    let v16: bool = */
            }); //;
            let v18: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = _func1_from_v4;
            let v21: Vec<Dice_ui::US43> = v3
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v18 = v18.clone();
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure93(v18.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v24: bool = true;
            let _func1_from_v22 = Func1::from(move |value| {
                //;
                let v26: Dice_ui::US43 = value;
                let v52: Dice_ui::US44 = match &v26 {
                    Dice_ui::US43::US43_0(v26_0_0) => Dice_ui::US44::US44_0(defaultValue(
                        Dice_ui::US45::US45_1,
                        map(Dice_ui::method118(), v26_0_0.clone()),
                    )),
                    Dice_ui::US43::US43_1(v26_1_0) => Dice_ui::US44::US44_1(v26_1_0.clone()),
                };
                let v55: bool = true;
                v52 /*;
                    let v57: bool = */
            }); //;
            let v59: Func1<Dice_ui::US43, Dice_ui::US44> = _func1_from_v22;
            let v62: Vec<Dice_ui::US44> = v21
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v59 = v59.clone();
                        move |v_1: Dice_ui::US43| Dice_ui::closure95(v59.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v69: string = append(
                (append(
                    string("transactions.render (8) / txns move / root: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v62.clone()))),
                )),
                string(""),
            );
            let v71: bool = true;
            leptos::logging::log!("{}", v69);
            let v72 = Dice_ui::method120();
            let v73: Vec<Dice_ui::US44> = Dice_ui::method121(v62.clone());
            let v75: Vec<Dice_ui::US44> = v73
                .into_iter()
                .filter(|x| v72(x.clone().clone()))
                .collect::<Vec<_>>();
            let v82: bool = (get_Count(fable_library_rust::NativeArray_::array_from(v75.clone())))
                == (get_Count(fable_library_rust::NativeArray_::array_from(
                    v62.clone().clone(),
                )));
            let v197: Dice_ui::US46 = if v82 {
                Dice_ui::US46::US46_0(Dice_ui::US47::US47_1)
            } else {
                let v87 = Dice_ui::method122(leptos::prelude::ArcMemo::get(&v0_1));
                let v88: Vec<Dice_ui::US44> = Dice_ui::method125(v62);
                let v90: Vec<Dice_ui::US48> = v88
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v87(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v93: bool = true;
                let _func1_from_v91 = Func1::from(move |value| {
                    //;
                    let v95: Dice_ui::US48 = value;
                    let v109: Dice_ui::US50 = match &v95 {
                        Dice_ui::US48::US48_0(v95_0_0) => {
                            let v96: Dice_ui::US49 = v95_0_0.clone();
                            Dice_ui::US50::US50_0(match &v96 {
                                Dice_ui::US49::US49_0(v96_0_0) => Some(
                                    match &v96 {
                                        Dice_ui::US49::US49_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            })
                        }
                        Dice_ui::US48::US48_1(v95_1_0) => Dice_ui::US50::US50_1(v95_1_0.clone()),
                    };
                    let v112: bool = true;
                    v109 /*;
                         let v114: bool = */
                }); //;
                let v116: Func1<Dice_ui::US48, Dice_ui::US50> = _func1_from_v91;
                let v119: Vec<Dice_ui::US50> = v90
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v116 = v116.clone();
                            move |v_2: Dice_ui::US48| Dice_ui::closure101(v116.clone(), v_2)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v122: bool = true;
                let _func1_from_v120 = Func1::from(move |value| {
                    //;
                    let v124: Dice_ui::US50 = value;
                    let v130: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = match &v124 {
                        Dice_ui::US50::US50_0(v124_0_0) => {
                            Ok::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v124_0_0.clone())
                        }
                        Dice_ui::US50::US50_1(v124_1_0) => {
                            Err::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v124_1_0.clone())
                        }
                    };
                    let v133: bool = true;
                    v130 /*;
                         let v135: bool = */
                }); //;
                let v137: Func1<
                    Dice_ui::US50,
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = _func1_from_v120;
                let v140: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v119
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v137 = v137.clone();
                            move |v_3: Dice_ui::US50| Dice_ui::closure102(v137.clone(), v_3)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v143: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v145: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v140.clone());
                let v146: i32 = get_Count(v145.clone());
                let v148: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(LrcPtr::new(Dice_ui::UH2::UH2_0)),
                });
                while Dice_ui::method128(v146, v148.clone()) {
                    let v150: i32 = v148.l0.get().clone();
                    let v153: i32 = ((v150.wrapping_neg()) + (v146)) - 1_i32;
                    let v154: LrcPtr<Dice_ui::UH2> = v148.l1.get().clone();
                    let v155: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v145[v153].clone();
                    let v156: i32 = (v150) + 1_i32;
                    v148.l0.set(v156);
                    v148.l1.set(LrcPtr::new(Dice_ui::UH2::UH2_1(v155, v154)));
                    ()
                }
                {
                    let v160: Dice_ui::US51 =
                        Dice_ui::method129(v148.l1.get().clone(), Dice_ui::US51::US51_0(v143));
                    let v174: Dice_ui::US51 = match &v160 {
                        Dice_ui::US51::US51_0(v160_0_0) => {
                            let v162: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method135(v160_0_0.clone());
                            let v163 = Dice_ui::method136();
                            let v165: bool = true;
                            let mut v162 = v162;
                            let v167: bool = true;
                            v162.sort_by_key(|x| v163(x.clone()));
                            Dice_ui::US51::US51_0(v162)
                        }
                        Dice_ui::US51::US51_1(v160_1_0) => Dice_ui::US51::US51_1(v160_1_0.clone()),
                    };
                    let v189: Dice_ui::US52 = match &v174 {
                        Dice_ui::US51::US51_0(v174_0_0) => {
                            let v176: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method137(v174_0_0.clone());
                            let v178: bool = true;
                            let mut v176 = v176;
                            let v180: bool = true;
                            v176.reverse();
                            let v182: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v176;
                            Dice_ui::US52::US52_0(fable_library_rust::NativeArray_::array_from(
                                v182.clone(),
                            ))
                        }
                        Dice_ui::US51::US51_1(v174_1_0) => Dice_ui::US52::US52_1(v174_1_0.clone()),
                    };
                    match &v189 {
                        Dice_ui::US52::US52_0(v189_0_0) => {
                            Dice_ui::US46::US46_0(Dice_ui::US47::US47_0(v189_0_0.clone()))
                        }
                        Dice_ui::US52::US52_1(v189_1_0) => Dice_ui::US46::US46_1(v189_1_0.clone()),
                    }
                }
            };
            let v211: Dice_ui::US53 = match &v197 {
                Dice_ui::US46::US46_0(v197_0_0) => {
                    let v198: Dice_ui::US47 = v197_0_0.clone();
                    Dice_ui::US53::US53_0(match &v198 {
                        Dice_ui::US47::US47_0(v198_0_0) => Some(
                            match &v198 {
                                Dice_ui::US47::US47_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US46::US46_1(v197_1_0) => Dice_ui::US53::US53_1(v197_1_0.clone()),
            };
            let v217: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v211 {
                Dice_ui::US53::US53_0(v211_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v211_0_0.clone()),
                Dice_ui::US53::US53_1(v211_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v211_1_0.clone()),
            };
            let v224: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        (append(
                            (append(
                                string(
                                    "use_transactions.render (9) / txns new_arc_memo / result: ",
                                ),
                                sprintf!("{:?}", v217.clone()),
                            )),
                            string(" / loading: "),
                        )),
                        (ofBoolean(v82)),
                    )),
                    string(""),
                ),
            );
            let v226: bool = true;
            leptos::logging::log!("{}", v224);
            v217
        }
        pub fn closure108(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn method138(
        ) -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US53> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure108((), v)
                },
            )
        }
        pub fn closure109(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn method139() -> Func1<std::string::String, Dice_ui::US53> {
            Func1::new(move |v: std::string::String| Dice_ui::closure109((), v))
        }
        pub fn closure110(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US47 {
            Dice_ui::US47::US47_0(v0_1)
        }
        pub fn method140() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US47> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure110((), v)
            })
        }
        pub fn closure111(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method141() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure111((), v))
        }
        pub fn closure112(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn method142() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure112((), v))
        }
        pub fn method143(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure113(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US23::US23_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method144() -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure113((), v))
        }
        pub fn method145(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn method146(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
        ) -> Func1<
            (string, usize, LrcPtr<Dice_ui::Heap5>),
            Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
        > {
            v0_1
        }
        pub fn closure114(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US23, string, bool, bool), std::string::String> {
            let v4: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            > = Dice_ui::method146(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure107(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method138();
            let v4 = Dice_ui::method139();
            let v5: Dice_ui::US53 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v31: Dice_ui::US46 = match &v5 {
                Dice_ui::US53::US53_0(v5_0_0) => Dice_ui::US46::US46_0(defaultValue(
                    Dice_ui::US47::US47_1,
                    map(Dice_ui::method140(), v5_0_0.clone()),
                )),
                Dice_ui::US53::US53_1(v5_1_0) => Dice_ui::US46::US46_1(v5_1_0.clone()),
            };
            let v367: Dice_ui::US54 = match &v31 {
                Dice_ui::US46::US46_0(v31_0_0) => {
                    let v32: Dice_ui::US47 = v31_0_0.clone();
                    if let Dice_ui::US47::US47_0(v32_0_0) = &v32 {
                        let v35: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v32_0_0.clone().to_vec();
                        let v38: bool = true;
                        let _func1_from_v36 = Func1::from(move |value| {
                            //;
                            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = value;
                            let v52: &str = &*string("2.0");
                            let v85: std::string::String = String::from(v52);
                            let v119: &str = &*string("dontcare");
                            let v152: std::string::String = String::from(v119);
                            let v186: &str = &*string("EXPERIMENTAL_tx_status");
                            let v219: std::string::String = String::from(v186);
                            let v254: &str = &*string("bowen");
                            let v312: Array<std::string::String> = new_array(&[
                                (patternInput.2.clone()).l3.clone(),
                                String::from(v254),
                            ]);
                            let v314: Vec<std::string::String> = v312.to_vec();
                            let v316: crate::model::near::rpc::RpcInput =
                                crate::model::near::rpc::RpcInput {
                                    jsonrpc: v85,
                                    id: v152,
                                    method: v219,
                                    params: v314,
                                };
                            let v318: Result<std::string::String, serde_json::Error> =
                                serde_json::to_string(&v316);
                            let v319 = Dice_ui::method141();
                            let v325: Result<std::string::String, std::string::String> =
                                v318.map_err(|x| v319(x));
                            let v335 = Dice_ui::method142();
                            let v336: Result<std::string::String, std::string::String> =
                                Dice_ui::method143(v325);
                            let v338: Result<string, std::string::String> = v336.map(|x| v335(x));
                            let v339 = Dice_ui::method144();
                            let v340: Result<string, std::string::String> =
                                Dice_ui::method145(v338);
                            let v342: Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            > = v340.map(|x| v339(x));
                            let v345: bool = true;
                            v342 /*;
                                 let v347: bool = */
                        }); //;
                        let v349: Func1<
                            (string, usize, LrcPtr<Dice_ui::Heap5>),
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = _func1_from_v36;
                        let v352: Vec<
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = v35
                            .into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v349 = v349.clone();
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure114(v349.clone(), arg10_0040)
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v354: Result<
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                            std::string::String,
                        > = v352.into_iter().collect();
                        let v356: Vec<(string, Dice_ui::US23, string, bool, bool)> = v354?;
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_0(
                            fable_library_rust::NativeArray_::array_from(v356.clone()),
                        ))
                    } else {
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_1)
                    }
                }
                Dice_ui::US46::US46_1(v31_1_0) => Dice_ui::US54::US54_1(v31_1_0.clone()),
            };
            let v381: Dice_ui::US56 = match &v367 {
                Dice_ui::US54::US54_0(v367_0_0) => {
                    let v368: Dice_ui::US55 = v367_0_0.clone();
                    Dice_ui::US56::US56_0(match &v368 {
                        Dice_ui::US55::US55_0(v368_0_0) => Some(
                            match &v368 {
                                Dice_ui::US55::US55_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    })
                }
                Dice_ui::US54::US54_1(v367_1_0) => Dice_ui::US56::US56_1(v367_1_0.clone()),
            };
            let v387: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = match &v381 {
                Dice_ui::US56::US56_0(v381_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v381_0_0.clone()),
                Dice_ui::US56::US56_1(v381_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v381_1_0.clone()),
            };
            let v394: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (10) / rpc_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v387.clone()),
                    )),
                    string(""),
                ),
            );
            let v396: bool = true;
            leptos::logging::log!("{}", v394);
            v387
        }
        pub fn closure116(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method147(
        ) -> Func1<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, Dice_ui::US56>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>| {
                    Dice_ui::closure116((), v)
                },
            )
        }
        pub fn closure117(unitVar: (), v0_1: std::string::String) -> Dice_ui::US56 {
            Dice_ui::US56::US56_1(v0_1)
        }
        pub fn method148() -> Func1<std::string::String, Dice_ui::US56> {
            Func1::new(move |v: std::string::String| Dice_ui::closure117((), v))
        }
        pub fn closure118(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Dice_ui::US55 {
            Dice_ui::US55::US55_0(v0_1)
        }
        pub fn method149(
        ) -> Func1<Array<(string, Dice_ui::US23, string, bool, bool)>, Dice_ui::US55> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US23, string, bool, bool)>| {
                    Dice_ui::closure118((), v)
                },
            )
        }
        pub fn closure115(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method147();
            let v4 = Dice_ui::method148();
            let v5: Dice_ui::US56 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v31: Dice_ui::US54 = match &v5 {
                Dice_ui::US56::US56_0(v5_0_0) => Dice_ui::US54::US54_0(defaultValue(
                    Dice_ui::US55::US55_1,
                    map(Dice_ui::method149(), v5_0_0.clone()),
                )),
                Dice_ui::US56::US56_1(v5_1_0) => Dice_ui::US54::US54_1(v5_1_0.clone()),
            };
            let v37: Array<(string, Dice_ui::US23, string, bool, bool)> =
                if let Dice_ui::US54::US54_0(v31_0_0) = &v31 {
                    let v32: Dice_ui::US55 = v31_0_0.clone();
                    if let Dice_ui::US55::US55_0(v32_0_0) = &v32 {
                        v32_0_0.clone()
                    } else {
                        new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                };
            let v39: Vec<(string, Dice_ui::US23, string, bool, bool)> = v37.to_vec();
            let v46: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v39.clone()),
                    )),
                    string(""),
                ),
            );
            let v48: bool = true;
            leptos::logging::log!("{}", v46);
            v39
        }
        pub fn closure121(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn method151(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
        ) -> Func1<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
            std::collections::HashMap<
                std::string::String,
                (
                    std::string::String,
                    Option<std::string::String>,
                    Option<f64>,
                    Option<std::string::String>,
                ),
            >,
        > {
            v0_1
        }
        pub fn closure122(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            v1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            let v2: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = Dice_ui::method151(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method152(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::Receipt,
            (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure123(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method152(v0_1);
            let patternInput: (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
            )
        }
        pub fn method153(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::GasProfile,
            (
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure124(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method153(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method155(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
        ) -> Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>
        {
            v0_1
        }
        pub fn closure126(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
            v1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            let v2: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = Dice_ui::method155(v0_1);
            let patternInput: (std::string::String, std::string::String) = (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure125(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: bool = true;
            let _func1_from_v1 = Func1::from(move |value| {
                //;
                let v5: crate::model::near::rpc::Proof = value;
                let v7: std::string::String = v5.clone().direction;
                let v9: std::string::String = v5.hash;
                let v12: bool = true;
                (v7, v9) /*;
                         let v14: bool = */
            }); //;
            let v16: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = _func1_from_v1;
            let v19: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v16 = v16.clone();
                        move |v: crate::model::near::rpc::Proof| Dice_ui::closure126(v16.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v19.clone())
        }
        pub fn method154() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure125((), v))
        }
        pub fn method156(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::ReceiptsOutcome,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ),
        > {
            v0_1
        }
        pub fn closure127(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
            v1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = Dice_ui::method156(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
            )
        }
        pub fn closure120(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::rpc::Receipt = value;
                let v9: std::string::String = v7.clone().predecessor_id;
                let v11: crate::model::near::rpc::ReceiptDetail = v7.clone().receipt;
                let v13: crate::model::near::rpc::ActionDetail = v11.action;
                let v15: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                > = v13.clone().actions;
                let v18: bool = true;
                let _func1_from_v16 = Func1::from(move |value| {
                    //;
                    let v20: std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    > = value;
                    let v23: std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    > = v20
                        .into_iter()
                        .map(|(k, v)| {
                            (
                                k,
                                Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                                    Dice_ui::closure121((), v)
                                })(v),
                            )
                        })
                        .collect();
                    let v26: bool = true;
                    v23 /*;
                        let v28: bool = */
                }); //;
                let v30: Func1<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = _func1_from_v16;
                let v33: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = v15
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v30 = v30.clone();
                            move |v_1: std::collections::HashMap<
                                std::string::String,
                                crate::model::near::rpc::TransferDetail,
                            >| Dice_ui::closure122(v30.clone(), v_1)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v35: Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = fable_library_rust::NativeArray_::array_from(v33.clone());
                let v37: std::string::String = v13.clone().gas_price;
                let v39: Vec<std::string::String> = v13.clone().input_data_ids;
                let v41: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v39.clone());
                let v43: Vec<std::string::String> = v13.clone().output_data_receivers;
                let v45: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v43.clone());
                let v47: std::string::String = v13.clone().signer_id;
                let v49: std::string::String = v13.signer_public_key;
                let v51: std::string::String = v7.clone().receipt_id;
                let v53: std::string::String = v7.receiver_id;
                let v56: bool = true;
                (v9, v35, v37, v41, v45, v47, v49, v51, v53) /*;
                                                             let v58: bool = */
            }); //;
            let v60: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = _func1_from_v3;
            let v63: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v60 = v60.clone();
                        move |v_2: crate::model::near::rpc::Receipt| {
                            Dice_ui::closure123(v60.clone(), v_2)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v65: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v63.clone());
            let v67: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v70: bool = true;
            let _func1_from_v68 = Func1::from(move |value| {
                //;
                let v72: crate::model::near::rpc::ReceiptsOutcome = value;
                let v74: std::string::String = v72.clone().block_hash;
                let v76: std::string::String = v72.clone().id;
                let v78: crate::model::near::rpc::OutcomeDetail = v72.clone().outcome;
                let v80: std::string::String = v78.clone().executor_id;
                let v82: u64 = v78.clone().gas_burnt;
                let v84: Vec<std::string::String> = v78.clone().logs;
                let v86: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v84.clone());
                let v88: crate::model::near::rpc::Metadata = v78.clone().metadata;
                let v90: Vec<crate::model::near::rpc::GasProfile> = v88.clone().gas_profile;
                let v93: bool = true;
                let _func1_from_v91 = Func1::from(move |value| {
                    //;
                    let v95: crate::model::near::rpc::GasProfile = value;
                    let v97: std::string::String = v95.clone().cost;
                    let v99: std::string::String = v95.clone().cost_category;
                    let v101: std::string::String = v95.gas_used;
                    let v104: bool = true;
                    (v97, v99, v101) /*;
                                     let v106: bool = */
                }); //;
                let v108: Func1<
                    crate::model::near::rpc::GasProfile,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                > = _func1_from_v91;
                let v111: Vec<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = v90
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v108 = v108.clone();
                            move |v_3: crate::model::near::rpc::GasProfile| {
                                Dice_ui::closure124(v108.clone(), v_3)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v113: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = fable_library_rust::NativeArray_::array_from(v111.clone());
                let v115: u8 = v88.version;
                let v117: Vec<std::string::String> = v78.clone().receipt_ids;
                let v119: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v117.clone());
                let v121: std::collections::HashMap<std::string::String, std::string::String> =
                    v78.clone().status;
                let v123: Option<std::string::String> = v78.tokens_burnt;
                let v125: Option<Vec<crate::model::near::rpc::Proof>> = v72.proof;
                let v162: Array<(std::string::String, std::string::String)> = defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method154(), v125),
                );
                let v167: bool = true;
                (v74, v76, v80, v82, v86, v113, v115, v119, v121, v123, v162) /*;
                                                                              let v169: bool = */
            }); //;
            let v171: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = _func1_from_v68;
            let v174: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v67
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v171 = v171.clone();
                        move |v_4: crate::model::near::rpc::ReceiptsOutcome| {
                            Dice_ui::closure127(v171.clone(), v_4)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (
                v65,
                fable_library_rust::NativeArray_::array_from(v174.clone()),
            )
        }
        pub fn method150() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure120((), v)
            })
        }
        pub fn closure129(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method158() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure129((), v))
        }
        pub fn closure128(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method158(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method157() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure128((), v))
        }
        pub fn closure119(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v7: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method150(), v4);
            let v195: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v7, map(Dice_ui::method157(), v195), v0_1.id)
        }
        pub fn closure133(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method161(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure133((), v))
        }
        pub fn method162(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure132(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v54: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v27: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v37: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v27_0_0) = &v27 {
                                let v31: Dice_ui::US25 = v27_0_0.clone();
                                if let Dice_ui::US25::US25_0(v31_0_0) = &v31 {
                                    Dice_ui::US25::US25_0(v31_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v37 {
                                Dice_ui::US25::US25_0(v37_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v37 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v67: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v54.clone()))),
                )),
                string(""),
            );
            let v69: bool = true;
            leptos::logging::log!("{}", v67);
            let v76: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v78: bool = true;
            leptos::logging::log!("{}", v76);
            let v113: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v82: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v99: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v82));
                    if let Dice_ui::US42::US42_0(v99_0_0) = &v99 {
                        let v103: Dice_ui::US31 = v99_0_0.clone();
                        if let Dice_ui::US31::US31_0(v103_0_0) = &v103 {
                            Dice_ui::US31::US31_0(v103_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v113_0_0) = &v113 {
                let v115: string = Dice_ui::method41(v113_0_0.clone());
                let v124: &str = &*v115;
                let v150: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v124);
                let v151 = Dice_ui::method42();
                let v157: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v150.map_err(|x| v151(x));
                let v167 = Dice_ui::method161();
                let v168: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method162(v157);
                v168.map(|x| v167(x))
            } else {
                if let Dice_ui::US29::US29_0(v54_0_0) = &v54 {
                    let v171: Dice_ui::US30 = v54_0_0.clone();
                    if let Dice_ui::US30::US30_0(v171_0_0) = &v171 {
                        let v172: Dice_ui::US31 = v171_0_0.clone();
                        if let Dice_ui::US31::US31_0(v172_0_0) = &v172 {
                            let v174: string = Dice_ui::method41(v172_0_0.clone());
                            let v183: &str = &*v174;
                            let v209: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v183);
                            let v210 = Dice_ui::method42();
                            let v216: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v209.map_err(|x| v210(x));
                            let v226 = Dice_ui::method161();
                            let v227: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method162(v216);
                            v227.map(|x| v226(x))
                        } else {
                            let v234: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v113.clone(), v54.clone())),
                                )),
                                string(""),
                            );
                            let v236: bool = true;
                            leptos::logging::log!("{}", v234);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v244: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v113.clone(), v54.clone())),
                            )),
                            string(""),
                        );
                        let v246: bool = true;
                        leptos::logging::log!("{}", v244);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v254: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v113.clone(), v54.clone())),
                        )),
                        string(""),
                    );
                    let v256: bool = true;
                    leptos::logging::log!("{}", v254);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure131(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure132(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method160(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure131(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure130(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v31: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v78: Dice_ui::US35 = match &v31 {
                Dice_ui::US26::US26_0(v31_0_0) => {
                    let v35: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v31 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v36 = Dice_ui::method83();
                    let v37 = Dice_ui::method84();
                    let v38: Dice_ui::US24 = match &v35 {
                        Err(v35_1_0) => v37(v35_1_0.clone()),
                        Ok(v35_0_0) => v36(v35_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v38 {
                        Dice_ui::US24::US24_0(v38_0_0) => {
                            let v41: bool = true;
                            let _vec_map: Vec<_> = v38_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v43: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v60: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v43),
                                    );
                                    let v65: bool = true;
                                    v60
                                })
                                .collect::<Vec<_>>();
                            let v67: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v67.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v38_1_0) => Dice_ui::US36::US36_1(v38_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v85: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v78.clone()))),
                )),
                string(""),
            );
            let v87: bool = true;
            leptos::logging::log!("{}", v85);
            let v89: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v106: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v89));
            let v117: Dice_ui::US38 = match &v106 {
                Dice_ui::US37::US37_0(v106_0_0) => {
                    let v110: Result<Vec<Option<string>>, std::string::String> = match &v106 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v111 = Dice_ui::method104();
                    let v112 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v110 {
                        Err(v110_1_0) => v112(v110_1_0.clone()),
                        Ok(v110_0_0) => v111(v110_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v156: Dice_ui::US40 = match &v117 {
                Dice_ui::US38::US38_0(v117_0_0) => {
                    let v118: Dice_ui::US39 = match &v117 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v118 {
                        Dice_ui::US39::US39_0(v118_0_0) => {
                            let v121: bool = true;
                            let _vec_map: Vec<_> = v118_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v123: Option<string> = x;
                                    let v140: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v123),
                                    );
                                    let v145: bool = true;
                                    v140
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v118_1_0) => Dice_ui::US41::US41_1(v118_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v159: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v163: Dice_ui::US41 = match &v156 {
                Dice_ui::US40::US40_0(v156_0_0) => match &v156 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v159.clone()),
            };
            let v246: bool = match &v163 {
                Dice_ui::US41::US41_0(v163_0_0) => {
                    let v166: bool = true;
                    v163_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v168: Dice_ui::US31 = x;
                        let v239: bool = if let Dice_ui::US31::US31_0(v168_0_0) = &v168 {
                            let v178: &str = &*v168_0_0.clone();
                            let v236: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v178),
                            });
                            let v238: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v236.clone());
                            true
                        } else {
                            false
                        };
                        let v241: bool = true;
                        let v243: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v247 = Dice_ui::method160(v78, v163.clone());
            let v248: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v250: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v248
                .iter()
                .enumerate()
                .map(|(i, x)| v247(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v252: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v250.clone());
            let v259: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v252.clone()),
                    )),
                    string(""),
                ),
            );
            let v261: bool = true;
            leptos::logging::log!("{}", v259);
            v252
        }
        pub fn method164(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure135(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method164(v0_1), v1)
        }
        pub fn method163(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure135(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method165(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn method166(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure136(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = Dice_ui::method166(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure134(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v30: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v35: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v52: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v35));
            let v99: Dice_ui::US35 = match &v52 {
                Dice_ui::US26::US26_0(v52_0_0) => {
                    let v56: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v52 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v57 = Dice_ui::method83();
                    let v58 = Dice_ui::method84();
                    let v59: Dice_ui::US24 = match &v56 {
                        Err(v56_1_0) => v58(v56_1_0.clone()),
                        Ok(v56_0_0) => v57(v56_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v59 {
                        Dice_ui::US24::US24_0(v59_0_0) => {
                            let v62: bool = true;
                            let _vec_map: Vec<_> = v59_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v64: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v81: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v64),
                                    );
                                    let v86: bool = true;
                                    v81
                                })
                                .collect::<Vec<_>>();
                            let v88: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v88.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v59_1_0) => Dice_ui::US36::US36_1(v59_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v105: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v30));
            let v111: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v99));
            let v112: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v105))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v111))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v114: bool = true;
            leptos::logging::log!("{}", v112);
            let v116: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v118: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v116.to_vec();
            let v121: bool = true;
            let _func1_from_v119 = Func1::from(move |value| {
                //;
                let v123: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = value;
                let v124 = Dice_ui::method163(v0_1);
                let v125: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = Dice_ui::method165(v123);
                let v127: Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                > = v125.map(|x| v124(x));
                let v130: bool = true;
                v127 /*;
                     let v132: bool = */
            }); //;
            let v134: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = _func1_from_v119;
            let v137: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v118
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v134 = v134.clone();
                        move |v: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure136(v134.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v144: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v137.clone()),
                    )),
                    string(""),
                ),
            );
            let v146: bool = true;
            leptos::logging::log!("{}", v144);
            v137
        }
        pub fn method159(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v63: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v64: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v66 = __future_init;
                        let v68: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v66;
                        let v70: Result<rexie::Rexie, std::string::String> = v68.await;
                        let v76: rexie::Rexie = v70.unwrap();
                        let v87: rexie::Rexie = (Dice_ui::method7())(v76);
                        let v89: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v87);
                        let v96: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v89.clone()))),
                                        string("")));
                        let v98: bool = true;
                        leptos::logging::log!("{}", v96);
                        let v99: string = string("}");
                        let v106: bool = true;
                        let _fix_closure_v101 = v89;
                        let v111: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v101 "), (v99))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v112: bool = true;
                        _fix_closure_v101
                    },
                ); // rust.fix_closure';
                let v114 = __future_init;
                let v116: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v114;
                let v118: bool = true;
                v116 /*;
                     let v120: bool = */
            }); //;
            let v122: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v124: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v122().await });
            let v127: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v124 = v124.clone();
                    move || Dice_ui::closure64(v124.clone(), ())
                })()
            });
            let v130: bool = true;
            let _func0_from_v128 = Func0::from(move || {
                //;
                let v132: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124.clone()), |x| {
                        x.clone()
                    });
                let v134: bool = true;
                let _optionm_map_ = v132.map(|x| {
                    //;
                    let v136: std::sync::Arc<rexie::Rexie> = x;
                    let v139: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v136);
                    let v141: bool = true;
                    v139
                });
                let v143: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v145: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v147: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v149: bool = */
                    async move {
                        /*;
                        let v151: bool = */
                        ();
                        let v153: string = sprintf!("{:?}", v143.clone());
                        let v162: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v145.clone()))))),
                                       string(" / database: "))), (v153))),
                       string(""));
                        let v164: bool = true;
                        leptos::logging::log!("{}", v162);
                        let v166: bool = true;
                        let _optionm_map_ = v143.map(|x| {
                            //;
                            let v168: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v170: std::sync::Arc<rexie::Rexie> = v168.0;
                            let v172: bool = true;
                            v170
                        });
                        let v174: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v191: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v174));
                        let v669: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v191_0_0) = &v191 {
                            let v198: bool = true;
                            let _func1_from_v196 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v205: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v206: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v205.clone()),
                                    )),
                                    string(""),
                                );
                                let v208: bool = true;
                                leptos::logging::log!("{}", v206);
                                let v210: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v212: bool = */
                                    async {
                                        /*;
                                        let v214: bool = */
                                        ();
                                        let v216: Array<string> = new_array(&[string("store")]);
                                        let v218: Vec<string> = v216.to_vec();
                                        let v221: bool = true;
                                        let _func1_from_v219 = Func1::from(move |value| {
                                            //;
                                            let v223: string = value;
                                            let v232: &str = &*v223;
                                            let v265: std::string::String = String::from(v232);
                                            let v292: bool = true;
                                            v265 /*;
                                                 let v294: bool = */
                                        }); //;
                                        let v296: Func1<string, std::string::String> =
                                            _func1_from_v219;
                                        let v299: Vec<std::string::String> = v218
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v296 = v296.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v296.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v300: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v191_0_0.clone());
                                        let v302: Result<rexie::Transaction, rexie::Error> = v300
                                            .transaction(&v299, rexie::TransactionMode::ReadOnly);
                                        let v303 = Dice_ui::method12();
                                        let v309: Result<rexie::Transaction, std::string::String> =
                                            v302.map_err(|x| v303(x));
                                        let v320: rexie::Transaction = v309?;
                                        let v321: string = Dice_ui::method13();
                                        let v330: &str = &*v321;
                                        let v356: Result<rexie::Store, rexie::Error> =
                                            v320.store(v330);
                                        let v357 = Dice_ui::method14();
                                        let v363: Result<rexie::Store, std::string::String> =
                                            v356.map_err(|x| v357(x));
                                        let v374: rexie::Store = v363?;
                                        let v375: string = Dice_ui::method79(v205);
                                        let v384: &str = &*v375;
                                        let v410: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v384);
                                        let v412: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v374, v410));
                                        let v414: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v412.await;
                                        let v415 = Dice_ui::method16();
                                        let v421: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v414.map_err(|x| v415(x));
                                        let v432: Option<wasm_bindgen::JsValue> = v421?;
                                        let v449: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v432),
                                        );
                                        let v555: Dice_ui::US25 = match &v449 {
                                            Dice_ui::US4::US4_0(v449_0_0) => {
                                                let v454: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v449 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v456: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v454);
                                                let v457 = Dice_ui::method19();
                                                let v463: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v456.map_err(|x| v457(x));
                                                let v474: Option<serde_json::Value> = v463?;
                                                let v491: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v474),
                                                );
                                                match &v491 {
                                                    Dice_ui::US5::US5_0(v491_0_0) => {
                                                        let v496: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v491 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v498: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v496);
                                                        let v499 = Dice_ui::method22();
                                                        let v505: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v498.map_err(|x| v499(x));
                                                        let v516: Vec<u8> = v505?;
                                                        let v518: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v516.clone());
                                                        let v520: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v518.clone()))))),
                                                   string(""));
                                                        let v522: bool = true;
                                                        leptos::logging::log!("{}", v520);
                                                        let v524: Vec<u8> = v518.to_vec();
                                                        let v526: &[u8] = v524.as_slice();
                                                        let v528: bool = true;
                                                        let mut v526 = v526;
                                                        let v530: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v526,
                                                        );
                                                        let v531 = Dice_ui::method23();
                                                        let v537: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v530.map_err(|x| v531(x));
                                                        Dice_ui::US25::US25_0(v537?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v563: Option<LrcPtr<Dice_ui::Heap4>> = match &v555 {
                                            Dice_ui::US25::US25_0(v555_0_0) => Some(
                                                match &v555 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v565: string = string("}");
                                        let v572: bool = true;
                                        let _fix_closure_v567 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v563
                                        );
                                        let v577: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v567 "),
                                                        (v565),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v578: bool = true;
                                        _fix_closure_v567
                                    },
                                ); // rust.fix_closure';
                                let v580 = __future_init;
                                let v582: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v580;
                                let v585: bool = true;
                                v582 /*;
                                     let v587: bool = */
                            }); //;
                            let v589: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v196;
                            let v593: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v145.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v589 = v589.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v589.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v595: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v593);
                            let v597: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v595.await;
                            Dice_ui::US24::US24_0(v597?)
                        } else {
                            let v610: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v610))
                        };
                        let v675: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v669 {
                                Dice_ui::US24::US24_0(v669_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v669_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v669_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v669_1_0.clone(),
                                    )
                                }
                            };
                        let v682: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v675.clone()))),
                                        string("")));
                        let v684: bool = true;
                        leptos::logging::log!("{}", v682);
                        let v685: string = string("}");
                        let v692: bool = true;
                        let _fix_closure_v687 = v675;
                        let v697: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v687 "), (v685))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v698: bool = true;
                        _fix_closure_v687
                    },
                ); // rust.fix_closure';
                let v700 = __future_init;
                let v702: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v700;
                let v704: bool = true;
                v702 /*;
                     let v706: bool = */
            }); //;
            let v708: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v128;
            let v710: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v708().await });
            let v713: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v710 = v710.clone();
                    move || Dice_ui::closure66(v710.clone(), ())
                })()
            });
            let v716: bool = true;
            let _func0_from_v714 = Func0::from(move || {
                //;
                let v718: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v720: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v713.clone());
                let v727: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v718.clone()))),
                    )),
                    string(""),
                );
                let v729: bool = true;
                leptos::logging::log!("{}", v727);
                let v731: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v733: bool = */
                    async move {
                        /*;
                        let v735: bool = */
                        ();
                        let v752: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v720));
                        let v797: Dice_ui::US27 = match &v752 {
                            Dice_ui::US26::US26_0(v752_0_0) => {
                                let v756: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v752 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v757 = Dice_ui::method83();
                                let v758 = Dice_ui::method84();
                                let v759: Dice_ui::US24 = match &v756 {
                                    Err(v756_1_0) => v758(v756_1_0.clone()),
                                    Ok(v756_0_0) => v757(v756_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v759 {
                                    Dice_ui::US24::US24_0(v759_0_0) => {
                                        let v762: bool = true;
                                        let _vec_map: Vec<_> = v759_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v764: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v781: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v764),
                                                );
                                                let v786: bool = true;
                                                v781
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v759_1_0) => {
                                        Dice_ui::US28::US28_1(v759_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v804: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v797.clone()))),
                            )),
                            string(""),
                        );
                        let v806: bool = true;
                        leptos::logging::log!("{}", v804);
                        let v807 = Dice_ui::method86(v797);
                        let v808: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v718);
                        let v811: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v808.iter()
                                .enumerate()
                                .map(|(i, x)| v807(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v813: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v811);
                        let v815: Result<Vec<Option<string>>, std::string::String> = v813.await;
                        let v817: Vec<Option<string>> = v815?;
                        let v819: string = string("}");
                        let v826: bool = true;
                        let _fix_closure_v821 =
                            Ok::<Vec<Option<string>>, std::string::String>(v817);
                        let v831: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v821 "), (v819))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v832: bool = true;
                        _fix_closure_v821
                    },
                ); // rust.fix_closure';
                let v834 = __future_init;
                let v836: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v834;
                let v838: bool = true;
                v836 /*;
                     let v840: bool = */
            }); //;
            let v842: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v714;
            let v844: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v842().await });
            let v847: bool = true;
            let _func1_from_v845 = Func1::from(move |value| {
                //;
                let v849: LrcPtr<Dice_ui::Heap4> = value;
                let v855: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v849.clone())) as i64)),
                    )),
                    string(""),
                );
                let v857: bool = true;
                leptos::logging::log!("{}", v855);
                let v859: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v861: bool = */
                    async move {
                        /*;
                        let v863: bool = */
                        ();
                        let v865: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v867: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v865);
                        let v869: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v127);
                        let v871: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v869);
                        let v873: bool = true;
                        let _optionm_map_ = v871.map(|x| {
                            //;
                            let v875: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v877: std::sync::Arc<rexie::Rexie> = v875.0;
                            let v879: bool = true;
                            v877
                        });
                        let v881: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v898: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v881));
                        let v1069: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v898_0_0) = &v898 {
                            let v905: bool = true;
                            let _func1_from_v903 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v907: string = patternInput_1.0.clone();
                                let v913: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v915: bool = */
                                    async move {
                                        /*;
                                        let v917: bool = */
                                        ();
                                        let v918: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v907.clone()))), string(""));
                                        let v920: bool = true;
                                        leptos::logging::log!("{}", v918);
                                        let v921: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v907))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v927: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v849.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v929: bool = true;
                                        leptos::logging::log!("{}", v927);
                                        let v931: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v933: bool = */
                                            async move {
                                                /*;
                                                let v935: bool = */
                                                ();
                                                let v937: bool = true;
                                                let mut data = Vec::new();
                                                let v939: bool = true;
                                                borsh::BorshSerialize::serialize(&v849, &mut data)
                                                    .unwrap();
                                                let v941: Vec<u8> = data;
                                                let v943: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v941).unwrap();
                                                let v944: string = Dice_ui::method98(v921);
                                                let v953: &str = &*v944;
                                                let v979: rexie::Transaction =
                                                    v898_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v981: rexie::Store = v979.store("store")?;
                                                let v983: bool = true;
                                                v981.put(&v943, Some(&v953.into())).await?;
                                                let v985: bool = true;
                                                v979.done().await?;
                                                let v987: string = string("}");
                                                let v994: bool = true;
                                                let _fix_closure_v989 = Ok::<(), rexie::Error>(());
                                                let v999: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v989 "),
                                                                (v987),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1000: bool = true;
                                                _fix_closure_v989
                                            },
                                        ); // rust.fix_closure';
                                        let v1002 = __future_init;
                                        let v1004: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v1002;
                                        let v1006: Result<(), rexie::Error> = v1004.await;
                                        let v1007 = Dice_ui::method99();
                                        let v1013: Result<(), std::string::String> =
                                            v1006.map_err(|x| v1007(x));
                                        let v1024: bool = true;
                                        v1013?;
                                        let v1026: string = string("}");
                                        let v1033: bool = true;
                                        let _fix_closure_v1028 = Ok::<(), std::string::String>(());
                                        let v1038: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1028 "),
                                                        (v1026),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1039: bool = true;
                                        _fix_closure_v1028
                                    },
                                ); // rust.fix_closure';
                                let v1041 = __future_init;
                                let v1043: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                > = v1041;
                                let v1046: bool = true;
                                v1043 /*;
                                      let v1048: bool = */
                            }); //;
                            let v1050: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v903;
                            let v1054: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v867.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1050 = v1050.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1050.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1056: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1054);
                            let v1058: Result<Vec<()>, std::string::String> = v1056.await;
                            Dice_ui::US34::US34_0(v1058?)
                        } else {
                            let v1064: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1075: Result<Vec<()>, std::string::String> = match &v1069 {
                            Dice_ui::US34::US34_0(v1069_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1069_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1069_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1069_1_0.clone())
                            }
                        };
                        let v1076: string = string("}");
                        let v1083: bool = true;
                        let _fix_closure_v1078 = v1075;
                        let v1088: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1078 "), (v1076))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1089: bool = true;
                        _fix_closure_v1078
                    },
                ); // rust.fix_closure';
                let v1091 = __future_init;
                let v1093: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1091;
                let v1096: bool = true;
                v1093 /*;
                      let v1098: bool = */
            }); //;
            let v1100: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v845;
            let v1103: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1100 = v1100.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1100.clone(), v_1)
                })(value.clone())
            });
            let v1106: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1103 = v1103.clone();
                    let v713 = v713.clone();
                    let v844 = v844.clone();
                    move || {
                        Dice_ui::closure130(
                            v0_1.clone(),
                            v713.clone(),
                            v844.clone(),
                            v1103.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1106 = v1106.clone();
                    let v124 = v124.clone();
                    let v710 = v710.clone();
                    move || {
                        Dice_ui::closure134(
                            v1.clone(),
                            v124.clone(),
                            v710.clone(),
                            v1106.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn method167() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure137(unitVar: (), v0_1: Dice_ui::US14) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method168() -> Func1<Dice_ui::US14, Dice_ui::US57> {
            Func1::new(move |v: Dice_ui::US14| Dice_ui::closure137((), v))
        }
        pub fn closure138(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method169() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure138((), v))
        }
        pub fn closure139(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method170() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US60> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure139((), v))
        }
        pub fn closure140(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method171() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure140((), v))
        }
        pub fn method172(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap6>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure141(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            > = Dice_ui::method172(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure144(unitVar: (), v0_1: Dice_ui::US59) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(v0_1)
        }
        pub fn method174() -> Func1<Dice_ui::US59, Dice_ui::US58> {
            Func1::new(move |v: Dice_ui::US59| Dice_ui::closure144((), v))
        }
        pub fn closure145(unitVar: (), v0_1: std::string::String) -> Dice_ui::US58 {
            Dice_ui::US58::US58_1(v0_1)
        }
        pub fn method175() -> Func1<std::string::String, Dice_ui::US58> {
            Func1::new(move |v: std::string::String| Dice_ui::closure145((), v))
        }
        pub fn closure143(
            unitVar: (),
            v0_1: Result<Dice_ui::US59, std::string::String>,
        ) -> Dice_ui::US58 {
            let v1 = Dice_ui::method174();
            let v2 = Dice_ui::method175();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method173() -> Func1<Result<Dice_ui::US59, std::string::String>, Dice_ui::US58> {
            Func1::new(move |v: Result<Dice_ui::US59, std::string::String>| {
                Dice_ui::closure143((), v)
            })
        }
        pub fn closure146(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn method176() -> Func1<Dice_ui::US58, Dice_ui::US62> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure146((), v))
        }
        pub fn closure142(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::ArcRwSignal<
                Option<Result<Dice_ui::US59, std::string::String>>,
            > = leptos::prelude::ArcAction::value(&v0_1);
            let v4: Option<Result<Dice_ui::US59, std::string::String>> =
                leptos::prelude::ArcRwSignal::get(&v2);
            let v7: Option<Dice_ui::US58> = map(Dice_ui::method173(), v4);
            let v37: Dice_ui::US62 =
                defaultValue(Dice_ui::US62::US62_1, map(Dice_ui::method176(), v7));
            let v58: Dice_ui::US58 = if let Dice_ui::US62::US62_0(v37_0_0) = &v37 {
                let v41: Dice_ui::US58 = v37_0_0.clone();
                match &v41 {
                    Dice_ui::US58::US58_0(v41_0_0) => {
                        let v44: Dice_ui::US59 = v41_0_0.clone();
                        if let Dice_ui::US59::US59_0(v44_0_0, v44_0_1, v44_0_2, v44_0_3) = &v44 {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                v44_0_0.clone(),
                                v44_0_1.clone(),
                                v44_0_2.clone(),
                                v44_0_3.clone(),
                            ))
                        } else {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                        }
                    }
                    Dice_ui::US58::US58_1(v41_1_0) => Dice_ui::US58::US58_1(v41_1_0.clone()),
                }
            } else {
                Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
            };
            let v75: Dice_ui::US63 = match &v58 {
                Dice_ui::US58::US58_0(v58_0_0) => {
                    let v59: Dice_ui::US59 = v58_0_0.clone();
                    Dice_ui::US63::US63_0(match &v59 {
                        Dice_ui::US59::US59_0(v59_0_0, v59_0_1, v59_0_2, v59_0_3) => Some((
                            match &v59 {
                                Dice_ui::US59::US59_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v59 {
                                Dice_ui::US59::US59_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v59 {
                                Dice_ui::US59::US59_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v59 {
                                Dice_ui::US59::US59_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US58::US58_1(v58_1_0) => Dice_ui::US63::US63_1(v58_1_0.clone()),
            };
            let v81: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v75 {
                Dice_ui::US63::US63_0(v75_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v75_0_0.clone()),
                Dice_ui::US63::US63_1(v75_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v75_1_0.clone()),
            };
            let v88: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / roll new_arc_memo / result: "),
                        sprintf!("{:?}", v81.clone()),
                    )),
                    string(""),
                ),
            );
            let v90: bool = true;
            leptos::logging::log!("{}", v88);
            v81
        }
        pub fn closure148(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method177() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US63,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure148((), v),
            )
        }
        pub fn closure149(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn method178() -> Func1<std::string::String, Dice_ui::US63> {
            Func1::new(move |v: std::string::String| Dice_ui::closure149((), v))
        }
        pub fn closure150(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method179() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US59,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure150((), arg10_0040),
            )
        }
        pub fn closure151(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method180() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US64,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure151((), arg10_0040),
            )
        }
        pub fn closure147(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method177();
            let v4 = Dice_ui::method178();
            let v5: Dice_ui::US63 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v34: Dice_ui::US58 = match &v5 {
                Dice_ui::US63::US63_0(v5_0_0) => Dice_ui::US58::US58_0(defaultValue(
                    Dice_ui::US59::US59_1,
                    map(Dice_ui::method179(), v5_0_0.clone()),
                )),
                Dice_ui::US63::US63_1(v5_1_0) => Dice_ui::US58::US58_1(v5_1_0.clone()),
            };
            let v78: Dice_ui::US31 = if let Dice_ui::US58::US58_0(v34_0_0) = &v34 {
                let v35: Dice_ui::US59 = v34_0_0.clone();
                if let Dice_ui::US59::US59_0(v35_0_0, v35_0_1, v35_0_2, v35_0_3) = &v35 {
                    let v61: Dice_ui::US64 = defaultValue(
                        Dice_ui::US64::US64_1,
                        map(Dice_ui::method180(), v35_0_2.clone()),
                    );
                    if let Dice_ui::US64::US64_0(
                        v61_0_0,
                        v61_0_1,
                        v61_0_2,
                        v61_0_3,
                        v61_0_4,
                        v61_0_5,
                    ) = &v61
                    {
                        Dice_ui::US31::US31_0(append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append((toString(v61_0_0.clone())), string(": "))),
                                                (toString(v61_0_4.clone())),
                                            )),
                                            string(" - "),
                                        )),
                                        (toString(v61_0_5.clone())),
                                    )),
                                    string(" ("),
                                )),
                                (toString(v61_0_1.clone())),
                            )),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US31::US31_1
                    }
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            let v86: Option<string> = match &v78 {
                Dice_ui::US31::US31_0(v78_0_0) => Some(
                    match &v78 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => None::<string>,
            };
            let v93: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / error_message new_arc_memo / result: "),
                        sprintf!("{:?}", v86.clone()),
                    )),
                    string(""),
                ),
            );
            let v95: bool = true;
            leptos::logging::log!("{}", v93);
            v86
        }
        pub fn closure152(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US31 {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v26: Dice_ui::US14 = defaultValue(
                Dice_ui::US14::US14_1,
                map(Dice_ui::method39(), v8.l1.clone()),
            );
            match &v26 {
                Dice_ui::US14::US14_0(v26_0_0) => {
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                        match &v26 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US31::US31_1,
            }
        }
        pub fn method181(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> {
            v0_1
        }
        pub fn closure154(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
            v1_: bool,
            v1__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v2: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                Dice_ui::method181(v0_1);
            let patternInput: (bool, std::string::String) =
                (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method182(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
        ) -> Func1<(bool, std::string::String), std::string::String> {
            v0_1
        }
        pub fn closure155(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
            _arg: (bool, std::string::String),
        ) -> std::string::String {
            let v3: Func1<(bool, std::string::String), std::string::String> =
                Dice_ui::method182(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure157(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure156(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure157(v0_1, v)
            })
        }
        pub fn method183() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure156((), v))
        }
        pub fn method184(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure153(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let v14: LrcPtr<(bool, std::string::String)> = value;
                let v25: bool = true;
                (v14.0.clone(), v14.1.clone()) /*;
                                               let v27: bool = */
            }); //;
            let v29: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                _func1_from_v10;
            let v32: Vec<(bool, std::string::String)> = v8
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                            Dice_ui::closure154(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v33 = Dice_ui::method55();
            let v34: Vec<(bool, std::string::String)> = Dice_ui::method56(v32);
            let v36: Vec<(bool, std::string::String)> = v34
                .into_iter()
                .filter(|x| v33(x.clone().clone()))
                .collect::<Vec<_>>();
            let v39: bool = true;
            let _func1_from_v37 = Func1::from(move |value| {
                //;
                let patternInput: (bool, std::string::String) = value;
                let v45: bool = true;
                patternInput.1.clone() /*;
                                       let v47: bool = */
            }); //;
            let v49: Func1<(bool, std::string::String), std::string::String> = _func1_from_v37;
            let v52: Vec<std::string::String> = v36
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v49 = v49.clone();
                        move |arg10_0040_1: (bool, std::string::String)| {
                            Dice_ui::closure155(v49.clone(), arg10_0040_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v53 = Dice_ui::method183();
            let v54: Vec<std::string::String> = Dice_ui::method184(v52);
            v54.iter()
                .enumerate()
                .map(|(i, x)| v53(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method185(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure159(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<std::string::String>,
            leptos::prelude::WriteSignal<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = Dice_ui::method185(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method186(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
            (i32, leptos::prelude::ReadSignal<std::string::String>),
        > {
            v0_1
        }
        pub fn closure160(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::prelude::ReadSignal<std::string::String>) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = Dice_ui::method186(v0_1);
            let patternInput: (i32, leptos::prelude::ReadSignal<std::string::String>) =
                (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure158(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = v7.1.clone();
                let v22: bool = true;
                (v7.0.clone(), b.0.clone(), b.1.clone()) /*;
                                                         let v24: bool = */
            }); //;
            let v26: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = _func1_from_v3;
            let v29: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v26 = v26.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<std::string::String>,
                                leptos::prelude::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure159(
                                v26.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v32: bool = true;
            let _func1_from_v30 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = value;
                let v39: bool = true;
                (patternInput.0.clone(), patternInput.1.clone()) /*;
                                                                 let v41: bool = */
            }); //;
            let v43: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = _func1_from_v30;
            v29.into_iter()
                .map(|x| {
                    Func1::new({
                        let v43 = v43.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        )| Dice_ui::closure160(v43.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure161(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure162(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure163(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure164(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure165(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method187() -> Func0<string> {
            Func0::new(move || Dice_ui::closure165((), ()))
        }
        pub fn closure166(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure168(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure169(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure170(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure171(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure173(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<Dice_ui::US31>,
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(v0_1)
        }
        pub fn method189() -> Func1<leptos::prelude::ArcMemo<Dice_ui::US31>, Dice_ui::US65> {
            Func1::new(move |v: leptos::prelude::ArcMemo<Dice_ui::US31>| Dice_ui::closure173((), v))
        }
        pub fn closure172(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v19: Dice_ui::US65 =
                defaultValue(Dice_ui::US65::US65_1, map(Dice_ui::method189(), v1));
            let v29: Dice_ui::US42 = match &v19 {
                Dice_ui::US65::US65_0(v19_0_0) => {
                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                        &match &v19 {
                            Dice_ui::US65::US65_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US42::US42_1,
            };
            let v36: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v29_0_0) = &v29 {
                let v30: Dice_ui::US31 = v29_0_0.clone();
                if let Dice_ui::US31::US31_0(v30_0_0) = &v30 {
                    Dice_ui::US31::US31_0(v30_0_0.clone())
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            match &v36 {
                Dice_ui::US31::US31_0(v36_0_0) => match &v36 {
                    Dice_ui::US31::US31_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string("Select..."),
            }
        }
        pub fn method188(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure172(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure175(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method190() -> Func1<
            leptos::prelude::ArcMemo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US66,
        > {
            Func1::new(
                move |v: leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure175((), v),
            )
        }
        pub fn method192(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            v0_1
        }
        pub fn closure176(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            let v3: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> =
                Dice_ui::method192(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method191(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure176(v0_1.clone(), arg10_0040)
                }
            })
        }
        pub fn method193(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure177(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method194(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), leptos::prelude::AnyView>
        {
            v0_1
        }
        pub fn closure178(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v3: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            > = Dice_ui::method194(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure174(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v5: string = append(
                (append((append(string(" "), (v3))), string(""))),
                string(""),
            );
            let v22: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method190(), v0_1.clone()),
            );
            let v32: Dice_ui::US67 = match &v22 {
                Dice_ui::US66::US66_0(v22_0_0) => {
                    Dice_ui::US67::US67_0(leptos::prelude::ArcMemo::get(
                        &match &v22 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US67::US67_1,
            };
            let v35: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v38: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v32 {
                Dice_ui::US67::US67_0(v32_0_0) => match &v32 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => v35.clone(),
            };
            let v821: leptos::prelude::Fragment = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v38.clone()),
            ) as u64)
                == 0_u64
            {
                let v44: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v46: string = string(" class=\"[height:17px]\"");
                let v60: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v66: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v67: string = string("vec![]");
                let v68: Vec<leptos::prelude::AnyView> = vec![];
                let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
                let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
                let v75: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v66))),
                                    string(">move || { v72 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v72 }</path> };
                let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
                let v83: string = string("vec![v79]");
                let v84: Vec<leptos::prelude::AnyView> = vec![v79];
                let v86: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v84);
                let v88: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v86);
                let v91: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v60))),
                                    string(">move || { v88 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v93: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v88 }</svg> };
                let v95: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v93);
                let v99: string = string("vec![v95]");
                let v100: Vec<leptos::prelude::AnyView> = vec![v95];
                let v102: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v100);
                let v104: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v102);
                let v107: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v46))),
                                    string(">move || { v104 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v109: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v104 }</span> };
                let v111: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v109);
                let v113: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v123: &str = &*string("No data");
                let v156: std::string::String = String::from(v123);
                let v182: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v156));
                let v186: string = string("vec![v182]");
                let v187: Vec<leptos::prelude::AnyView> = vec![v182];
                let v189: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v187);
                let v191: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v189);
                let v194: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v113))),
                                    string(">move || { v191 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v196: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v191 }</pre> };
                let v198: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v196);
                let v206: string = string("vec![v111, v198]");
                let v207: Vec<leptos::prelude::AnyView> = vec![v111, v198];
                let v209: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v207);
                let v211: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v209);
                let v214: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v44))),
                                    string(">move || { v211 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v216: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v211 }</div> };
                let v218: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v216);
                let v222: string = string("vec![v218]");
                let v223: Vec<leptos::prelude::AnyView> = vec![v218];
                leptos::prelude::Fragment::new(v223)
            } else {
                let v242: Dice_ui::US66 =
                    defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method190(), v0_1));
                match &v242 {
                    Dice_ui::US66::US66_0(v242_0_0) => {
                        let v248: leptos::prelude::ArcMemo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = match &v242 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v251: bool = true;
                        let _func1_from_v249 = Func1::from(move |value| {
                            //;
                            let patternInput: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v257: bool = true;
                            patternInput.0.clone() /*;
                                                   let v259: bool = */
                        }); //;
                        let v262 = Dice_ui::method191(_func1_from_v249);
                        let v265: bool = true;
                        let _func1_from_v263 = Func1::from(move |value| {
                            //;
                            let patternInput_1: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v270: std::string::String =
                                leptos::prelude::ReadSignal::get(&patternInput_1.1.clone());
                            let v271: std::string::String = Dice_ui::method193(v270.clone());
                            let v274: bool = true;
                            let _func0_from_v272 = Func0::from(move || {
                                //;
                                let v276: string =
                                    fable_library_rust::String_::fromString(v270.clone());
                                let v279: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v281: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v279);
                                let v284: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                                > = Box::pin(v281.l3.clone());
                                let v286: LrcPtr<Dice_ui::Heap0> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v284);
                                let v294: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v296: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v294);
                                let v306: &str = &*v276;
                                let v368: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                                    l0: v286.l0.clone(),
                                    l1: Some(String::from(v306)),
                                    l2: v286.l2,
                                    l3: v286.l3,
                                    l4: v286.l4.clone(),
                                });
                                let v370: bool = true;
                                leptos::prelude::ArcRwSignal::set(&v296.l3.clone(), v368); //;
                                let v372: bool = true; /*;
                                                       let v374: bool = */
                            }); //;
                            let v376: Func0<()> = _func0_from_v272;
                            let v489: string = join(
                                string(" "),
                                toArray(delay(Func0::new(move || {
                                    ofList(ofArray_1(new_array(&[
                                        string("flex"),
                                        string("flex-1"),
                                        string("gap-[10px]"),
                                        string("[align-items:center]"),
                                        string("[justify-content:center]"),
                                        string("inline-block"),
                                        string("rounded"),
                                        string("border"),
                                        string("border-gray-400"),
                                        string("hover:bg-gray-100"),
                                        string("px-[22px]"),
                                        string("py-1"),
                                        string("text-sm"),
                                        string("text-gray-900"),
                                        string("bg-gray-200"),
                                        string("hover:text-gray-600"),
                                        string("focus:outline-none"),
                                        string("focus:ring"),
                                        string("active:text-gray-500"),
                                    ])))
                                }))),
                            );
                            let v500: &str = &*v489;
                            let v533: std::string::String = String::from(v500);
                            let v559: std::string::String = v533;
                            let v565: string =
                                string(" aria-label=v271 on:click=move |_| v376() class=v559");
                            let v567: string = fable_library_rust::String_::fromString(v270);
                            let v584: Dice_ui::US65 = defaultValue(
                                Dice_ui::US65::US65_1,
                                map(Dice_ui::method189(), v1.clone()),
                            );
                            let v594: Dice_ui::US42 = match &v584 {
                                Dice_ui::US65::US65_0(v584_0_0) => {
                                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                                        &match &v584 {
                                            Dice_ui::US65::US65_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US42::US42_1,
                            };
                            let v601: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v594_0_0) = &v594
                            {
                                let v595: Dice_ui::US31 = v594_0_0.clone();
                                if let Dice_ui::US31::US31_0(v595_0_0) = &v595 {
                                    Dice_ui::US31::US31_0(v595_0_0.clone())
                                } else {
                                    Dice_ui::US31::US31_1
                                }
                            } else {
                                Dice_ui::US31::US31_1
                            };
                            let v690: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(
                                v601_0_0,
                            ) = &v601
                            {
                                if (v567.clone()) == (v601_0_0.clone()) {
                                    let v606 = {
                                        let clo = Func0::new(move || Dice_ui::closure177((), ()));
                                        Func1::new({
                                            let clo = clo.clone();
                                            move |arg: ()| clo()
                                        })
                                    };
                                    let v618: string =
                                            string(" class=move || \" \".to_owned() + &v606(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                                    let v628: string =
                                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"");
                                    let v629: string = string("vec![]");
                                    let v630: Vec<leptos::prelude::AnyView> = vec![];
                                    let v632: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v630);
                                    let v634: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v632);
                                    let v637: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<circle "), (v628))),
                                                        string(">move || { v634 }</"),
                                                    )),
                                                    string("circle"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v639: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                                    > = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v634 }</circle> };
                                    let v641: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v639);
                                    let v647: string =
                                            string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                                    let v648: string = string("vec![]");
                                    let v649: Vec<leptos::prelude::AnyView> = vec![];
                                    let v651: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v649);
                                    let v653: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v651);
                                    let v656: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<path "), (v647))),
                                                        string(">move || { v653 }</"),
                                                    )),
                                                    string("path"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v658: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                    > = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v653 }</path> };
                                    let v660: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v658);
                                    let v668: string = string("vec![v641, v660]");
                                    let v669: Vec<leptos::prelude::AnyView> = vec![v641, v660];
                                    let v671: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v669);
                                    let v673: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v671);
                                    let v676: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<svg "), (v618))),
                                                        string(">move || { v673 }</"),
                                                    )),
                                                    string("svg"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v678: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v606(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v673 }</svg> };
                                    leptos::prelude::IntoAny::into_any(v678)
                                } else {
                                    let v681: string = string("vec![]");
                                    let v682: Vec<leptos::prelude::AnyView> = vec![];
                                    leptos::prelude::IntoAny::into_any(v682)
                                }
                            } else {
                                let v686: string = string("vec![]");
                                let v687: Vec<leptos::prelude::AnyView> = vec![];
                                leptos::prelude::IntoAny::into_any(v687)
                            };
                            let v699: &str = &*v567;
                            let v732: std::string::String = String::from(v699);
                            let v758: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v732),
                            );
                            let v766: string = string("vec![v690, v758]");
                            let v767: Vec<leptos::prelude::AnyView> = vec![v690, v758];
                            let v769: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v767);
                            let v771: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v769);
                            let v774: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<button "), (v565))),
                                                string(">move || { v771 }</"),
                                            )),
                                            string("button"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v776: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Button, _, _>,
                            > = leptos::prelude::view! { <button  aria-label=v271 on:click=move |_| v376() class=v559>move || { v771 }</button> };
                            let v778: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v776);
                            let v782: string = string("vec![v778]");
                            let v783: Vec<leptos::prelude::AnyView> = vec![v778];
                            let v785: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v783);
                            let v787: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v785);
                            let v790: bool = true;
                            v787 /*;
                                 let v792: bool = */
                        }); //;
                        let v794: Func1<
                            (i32, leptos::prelude::ReadSignal<std::string::String>),
                            leptos::prelude::AnyView,
                        > = _func1_from_v263;
                        let v806: string =
                                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v798(x) let:x key=move |x| v262(x.to_owned()) each=v248 /> })");
                        let v807: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::view! { <leptos::prelude::For  children=move |x| v798(x) let:x key=move |x| v262(x.to_owned()) each=v248 /> },
                        );
                        let v811: string = string("vec![v807]");
                        let v812: Vec<leptos::prelude::AnyView> = vec![v807];
                        leptos::prelude::Fragment::new(v812)
                    }
                    _ => {
                        let v815: string = string("vec![]");
                        let v816: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::Fragment::new(v816)
                    }
                }
            };
            let v823: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v821);
            let v826: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5))),
                                string(">move || { v823 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v828: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v823 }</div> };
            let v830: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v828);
            let v834: string = string("vec![v830]");
            let v835: Vec<leptos::prelude::AnyView> = vec![v830];
            leptos::prelude::Fragment::new(v835)
        }
        pub fn method195(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure179(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method196(v0_1: Func1<std::string::String, ()>) -> Func1<std::string::String, ()> {
            v0_1
        }
        pub fn closure180(v0_1: Func1<std::string::String, ()>, v1: std::string::String) {
            let v2: Func1<std::string::String, ()> = Dice_ui::method196(v0_1);
            (move |x| v2(x))(v1);
            ()
        }
        pub fn closure181(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::ArcMemo<bool> = leptos::prelude::ArcAction::pending(&v0_1);
            leptos::prelude::ArcMemo::get(&v2)
        }
        pub fn method197(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure182(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure167(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<Option<string>>,
            v3: leptos::prelude::ArcMemo<Dice_ui::US31>,
            v4: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v9: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v19: &str = &*string("Account");
            let v52: std::string::String = String::from(v19);
            let v78: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v52));
            let v82: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            > = Some(v4);
            let v86: Option<leptos::prelude::ArcMemo<Dice_ui::US31>> = Some(v3);
            let v89: string = string("vec![]");
            let v90: Vec<leptos::prelude::AnyView> = vec![];
            let v92: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v90);
            let v94: string = string(" class=\"flex flex-col [position:relative]\"");
            let v97 = {
                let clo = Func0::new(move || Dice_ui::closure168((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v100 = {
                let clo_1 = Func0::new(move || Dice_ui::closure169((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v102: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v106: string = string("vec![v92]");
            let v107: Vec<leptos::prelude::AnyView> = vec![v92];
            let v109: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v107);
            let v111: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v109);
            let v114: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v102))),
                                string(">move || { v111 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v116: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v111 }</div> };
            let v118: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v116);
            let v119: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v97(())");
            let v122: string = append(
                (append(
                    string(" open=move || v100(())"),
                    (append(
                        (append((append(string(" "), (v119))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v125 = {
                let clo_2 = Func0::new(move || Dice_ui::closure170((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v128 = {
                let clo_3 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v82 = v82.clone();
                    let v86 = v86.clone();
                    move || Dice_ui::closure171(v82.clone(), v86.clone(), v0_1.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v129: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v128(()) + \" \" + &v125(())");
            let v130: string = append(
                (append((append(string(" "), (v129))), string(""))),
                string(""),
            );
            let v132: string = string(" class=\"flex items-center gap-2\"");
            let v135: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v136: string = (Dice_ui::method188(v82.clone(), v86.clone(), v0_1.clone()))();
            let v145: &str = &*v136;
            let v178: std::string::String = String::from(v145);
            let v204: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v178));
            let v208: string = string("vec![v204]");
            let v209: Vec<leptos::prelude::AnyView> = vec![v204];
            let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
            let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
            let v216: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v135))),
                                string(">move || { v213 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v218: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v213 }</span> };
            let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
            let v224: string = string("vec![v220]");
            let v225: Vec<leptos::prelude::AnyView> = vec![v220];
            let v227: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v225);
            let v229: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v227);
            let v231: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v132))),
                                string(">move || { v229 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v233: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v229 }</div> };
            let v235: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v233);
            let v237: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v240 = {
                let clo_4 = Func0::new(move || Dice_ui::closure166((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v248: string =
                string(" class=move || \" \".to_owned() + &v240(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v250: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v254: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v250))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v255: string = string("vec![]");
            let v256: Vec<leptos::prelude::AnyView> = vec![];
            let v258: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v256);
            let v260: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v258);
            let v263: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v254))),
                                string(">move || { v260 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v265: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v260 }</path> };
            let v267: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v265);
            let v271: string = string("vec![v267]");
            let v272: Vec<leptos::prelude::AnyView> = vec![v267];
            let v274: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v272);
            let v276: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v274);
            let v279: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v248))),
                                string(">move || { v276 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v281: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v240(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v276 }</svg> };
            let v283: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v281);
            let v287: string = string("vec![v283]");
            let v288: Vec<leptos::prelude::AnyView> = vec![v283];
            let v290: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v288);
            let v292: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v290);
            let v294: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v237))),
                                string(">move || { v292 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v296: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v292 }</span> };
            let v298: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v296);
            let v306: string = string("vec![v235, v298]");
            let v307: Vec<leptos::prelude::AnyView> = vec![v235, v298];
            let v309: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v309);
            let v314: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<summary "), (v130))),
                                string(">move || { v311 }</"),
                            )),
                            string("summary"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v316: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v128(()) + " " + &v125(())>move || { v311 }</summary> };
            let v318: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v316);
            let v320: string = string(" class=\"flex flex-1 flex-col\"");
            let v324: Func0<leptos::prelude::Fragment> =
                Dice_ui::method195(Func0::new(move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v82 = v82.clone();
                        let v86 = v86.clone();
                        move || Dice_ui::closure174(v82.clone(), v86.clone(), v0_1.clone(), ())
                    })()
                }));
            let v326: leptos::prelude::Fragment = (move || v324())();
            let v328: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v326);
            let v330: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v320))),
                                string(">move || { v328 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v332: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v328 }</div> };
            let v334: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v332);
            let v341: string = string("vec![v318, v334]");
            let v342: Vec<leptos::prelude::AnyView> = vec![v318, v334];
            let v344: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v342);
            let v346: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v344);
            let v349: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<details "), (v122))),
                                string(">move || { v346 }</"),
                            )),
                            string("details"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v351: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Details, _, _>,
            > = leptos::prelude::view! { <details  open=move || v100(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v97(())>move || { v346 }</details> };
            let v353: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v351);
            let v360: string = string("vec![v118, v353]");
            let v361: Vec<leptos::prelude::AnyView> = vec![v118, v353];
            let v363: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v361);
            let v365: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v363);
            let v367: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v94))),
                                string(">move || { v365 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v369: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v365 }</div> };
            let v371: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v369);
            let v378: string = string("vec![v78, v371]");
            let v379: Vec<leptos::prelude::AnyView> = vec![v78, v371];
            let v381: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v379);
            let v383: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v381);
            let v385: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v9))),
                                string(">move || { v383 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v387: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v383 }</div> };
            let v389: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v387);
            let v391: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v401: &str = &*string("Max");
            let v434: std::string::String = String::from(v401);
            let v460: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v434));
            let v463: bool = true;
            let _func0_from_v461 = Func0::from(move || {
                //;
                let v466: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v468: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v466);
                let v471: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v468.l3.clone());
                let v473: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v471);
                let v476: bool = true;
                v473.l2 /*;
                        let v478: bool = */
            }); //;
            let v480: Func0<i32> = _func0_from_v461;
            let v483: bool = true;
            let _func1_from_v481 = Func0::from(move || {
                //;
                let v485: std::string::String = value;
                let v488: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v490: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v488);
                let v493: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v490.l3.clone());
                let v495: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v493);
                let v503: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v505: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v503);
                let v509: string = toString(v485);
                let v527: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: v495.l0.clone(),
                    l1: v495.l1.clone(),
                    l2: if string("") == (v509.clone()) {
                        1_i32
                    } else {
                        toInt32(v509)
                    },
                    l3: v495.l3,
                    l4: v495.l4.clone(),
                });
                let v529: bool = true;
                leptos::prelude::ArcRwSignal::set(&v505.l3.clone(), v527); //;
                let v531: bool = true; /*;
                                       let v533: bool = */
            }); //;
            let v535: Func1<std::string::String, ()> = _func1_from_v481;
            let v538 = {
                let clo_5 = Func0::new(move || Dice_ui::closure179((), ()));
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v548: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v541(leptos::prelude::event_target_value(&event)) prop:value=move || v480() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v538(()) /> }");
            let v550: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v541(leptos::prelude::event_target_value(&event)) prop:value=move || v480() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v538(()) /> };
            let v552: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v550);
            let v559: string = string("vec![v460, v552]");
            let v560: Vec<leptos::prelude::AnyView> = vec![v460, v552];
            let v562: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v560);
            let v564: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v562);
            let v566: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v391))),
                                string(">move || { v564 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v568: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v564 }</div> };
            let v570: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v568);
            let v572: string = string(" class=\"flex\"");
            let v575: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure181(v1.clone(), ())
                })()
            });
            let v576: Func0<bool> = Dice_ui::method197(v575.clone());
            let v579: bool = true;
            let _func0_from_v577 = Func0::from(move || {
                //;
                let v582: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v584: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v582);
                let v587: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v584.l3.clone());
                let v591: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                    l0: (leptos::prelude::ArcRwSignal::get_untracked(&v587)).l2,
                });
                let v593: bool = true;
                leptos::prelude::ArcAction::dispatch(&v1.clone(), v591.clone());
                let v595: bool = true; /*;
                                       let v597: bool = */
            }); //;
            let v599: Func0<()> = _func0_from_v577;
            let v707: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("flex"),
                        string("gap-[10px]"),
                        string("[align-items:center]"),
                        string("inline-block"),
                        string("rounded"),
                        string("border"),
                        string("border-gray-400"),
                        string("hover:bg-gray-400"),
                        string("px-4"),
                        string("py-1"),
                        string("text-sm"),
                        string("font-medium"),
                        string("text-gray-900"),
                        string("bg-transparent"),
                        string("hover:text-gray-600"),
                        string("focus:outline-none"),
                        string("focus:ring"),
                        string("active:text-gray-500"),
                    ])))
                }))),
            );
            let v718: &str = &*v707;
            let v751: std::string::String = String::from(v718);
            let v777: std::string::String = v751;
            let v783: string =
                string(" on:click=move |_| v599() prop:disabled=move || v576() class=v777");
            let v793: &str = &*string("Roll");
            let v826: std::string::String = String::from(v793);
            let v852: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v826));
            let v1218: leptos::prelude::AnyView = if v575() {
                let v857 = {
                    let clo_6 = Func0::new(move || Dice_ui::closure182((), ()));
                    Func1::new({
                        let clo_6 = clo_6.clone();
                        move |arg_6: ()| clo_6()
                    })
                };
                let v875: string =
                        string(" class=move || \" \".to_owned() + &v857(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                let v887: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                );
                let v899: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v900: string = string("vec![]");
                let v901: Vec<leptos::prelude::AnyView> = vec![];
                let v903: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v901);
                let v905: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v903);
                let v908: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v899))),
                                    string(">move || { v905 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v910: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v905 }</animate> };
                let v912: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v910);
                let v924: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v925: string = string("vec![]");
                let v926: Vec<leptos::prelude::AnyView> = vec![];
                let v928: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v926);
                let v930: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v928);
                let v932: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v924))),
                                    string(">move || { v930 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v934: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v930 }</animate> };
                let v936: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v934);
                let v948: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v949: string = string("vec![]");
                let v950: Vec<leptos::prelude::AnyView> = vec![];
                let v952: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v950);
                let v954: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v952);
                let v956: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v948))),
                                    string(">move || { v954 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v958: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v954 }</animate> };
                let v960: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v958);
                let v970: string = string("vec![v912, v936, v960]");
                let v971: Vec<leptos::prelude::AnyView> = vec![v912, v936, v960];
                let v973: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v971);
                let v975: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v973);
                let v978: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v887))),
                                    string(">move || { v975 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v980: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v975 }</rect> };
                let v992: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                );
                let v1004: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v1005: string = string("vec![]");
                let v1006: Vec<leptos::prelude::AnyView> = vec![];
                let v1008: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1006);
                let v1010: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1008);
                let v1012: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1004))),
                                    string(">move || { v1010 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1014: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1010 }</animate> };
                let v1016: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1014);
                let v1028: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v1029: string = string("vec![]");
                let v1030: Vec<leptos::prelude::AnyView> = vec![];
                let v1032: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1030);
                let v1034: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1032);
                let v1036: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1028))),
                                    string(">move || { v1034 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1038: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1034 }</animate> };
                let v1040: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1038);
                let v1052: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v1053: string = string("vec![]");
                let v1054: Vec<leptos::prelude::AnyView> = vec![];
                let v1056: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1054);
                let v1058: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1056);
                let v1060: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1052))),
                                    string(">move || { v1058 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1062: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1058 }</animate> };
                let v1064: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1062);
                let v1074: string = string("vec![v1016, v1040, v1064]");
                let v1075: Vec<leptos::prelude::AnyView> = vec![v1016, v1040, v1064];
                let v1077: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1075);
                let v1079: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1077);
                let v1081: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v992))),
                                    string(">move || { v1079 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1083: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1079 }</rect> };
                let v1095: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                );
                let v1107: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v1108: string = string("vec![]");
                let v1109: Vec<leptos::prelude::AnyView> = vec![];
                let v1111: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1109);
                let v1113: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1111);
                let v1115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1107))),
                                    string(">move || { v1113 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1117: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1113 }</animate> };
                let v1119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1117);
                let v1131: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v1132: string = string("vec![]");
                let v1133: Vec<leptos::prelude::AnyView> = vec![];
                let v1135: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1133);
                let v1137: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1135);
                let v1139: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1131))),
                                    string(">move || { v1137 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1141: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1137 }</animate> };
                let v1143: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1141);
                let v1155: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v1156: string = string("vec![]");
                let v1157: Vec<leptos::prelude::AnyView> = vec![];
                let v1159: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1157);
                let v1161: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1159);
                let v1163: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1155))),
                                    string(">move || { v1161 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1165: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1161 }</animate> };
                let v1167: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1165);
                let v1177: string = string("vec![v1119, v1143, v1167]");
                let v1178: Vec<leptos::prelude::AnyView> = vec![v1119, v1143, v1167];
                let v1180: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1178);
                let v1182: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1180);
                let v1184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v1095))),
                                    string(">move || { v1182 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1182 }</rect> };
                let v1188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1186);
                let v1190: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1083);
                let v1192: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v980);
                let v1202: string = string("vec![v1192, v1190, v1188]");
                let v1203: Vec<leptos::prelude::AnyView> = vec![v1192, v1190, v1188];
                let v1205: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1203);
                let v1207: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1205);
                let v1209: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v875))),
                                    string(">move || { v1207 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1211: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v857(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1207 }</svg> };
                leptos::prelude::IntoAny::into_any(v1211)
            } else {
                let v1214: string = string("vec![]");
                let v1215: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1215)
            };
            let v1225: string = string("vec![v852, v1218]");
            let v1226: Vec<leptos::prelude::AnyView> = vec![v852, v1218];
            let v1228: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1226);
            let v1230: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1228);
            let v1233: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<button "), (v783))),
                                string(">move || { v1230 }</"),
                            )),
                            string("button"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1235: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Button, _, _>,
            > = leptos::prelude::view! { <button  on:click=move |_| v599() prop:disabled=move || v576() class=v777>move || { v1230 }</button> };
            let v1237: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1235);
            let v1239: Option<string> = leptos::prelude::ArcMemo::get(&v2);
            let v1256: Dice_ui::US31 =
                defaultValue(Dice_ui::US31::US31_1, map(Dice_ui::method106(), v1239));
            let v1435: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(v1256_0_0) = &v1256 {
                let v1262: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v1264: string = string(" class=\"[height:17px]\"");
                let v1278: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v1284: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v1285: string = string("vec![]");
                let v1286: Vec<leptos::prelude::AnyView> = vec![];
                let v1288: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1286);
                let v1290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1288);
                let v1292: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v1284))),
                                    string(">move || { v1290 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1294: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1290 }</path> };
                let v1296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1294);
                let v1300: string = string("vec![v1296]");
                let v1301: Vec<leptos::prelude::AnyView> = vec![v1296];
                let v1303: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1301);
                let v1305: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1303);
                let v1307: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v1278))),
                                    string(">move || { v1305 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1309: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1305 }</svg> };
                let v1311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1309);
                let v1315: string = string("vec![v1311]");
                let v1316: Vec<leptos::prelude::AnyView> = vec![v1311];
                let v1318: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1316);
                let v1320: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1318);
                let v1322: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v1264))),
                                    string(">move || { v1320 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1324: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1320 }</span> };
                let v1326: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1324);
                let v1328: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v1337: &str = &*v1256_0_0.clone();
                let v1370: std::string::String = String::from(v1337);
                let v1396: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1370));
                let v1400: string = string("vec![v1396]");
                let v1401: Vec<leptos::prelude::AnyView> = vec![v1396];
                let v1403: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1401);
                let v1405: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1403);
                let v1408: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v1328))),
                                    string(">move || { v1405 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1410: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v1405 }</pre> };
                let v1412: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1410);
                let v1419: string = string("vec![v1326, v1412]");
                let v1420: Vec<leptos::prelude::AnyView> = vec![v1326, v1412];
                let v1422: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1420);
                let v1424: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1422);
                let v1426: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v1262))),
                                    string(">move || { v1424 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1428: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v1424 }</div> };
                leptos::prelude::IntoAny::into_any(v1428)
            } else {
                let v1431: string = string("vec![]");
                let v1432: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1432)
            };
            let v1442: string = string("vec![v1237, v1435]");
            let v1443: Vec<leptos::prelude::AnyView> = vec![v1237, v1435];
            let v1445: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1443);
            let v1447: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1445);
            let v1449: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v572))),
                                string(">move || { v1447 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1451: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v1447 }</div> };
            let v1453: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1451);
            let v1463: string = string("vec![v389, v570, v1453]");
            let v1464: Vec<leptos::prelude::AnyView> = vec![v389, v570, v1453];
            let v1466: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1464);
            let v1468: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1466);
            let v1470: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v1468 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1472: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v1468 }</div> };
            let v1474: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1472);
            let v1478: string = string("vec![v1474]");
            let v1479: Vec<leptos::prelude::AnyView> = vec![v1474];
            leptos::prelude::Fragment::new(v1479)
        }
        pub fn closure183(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure184(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure185(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method198() -> Func0<string> {
            Func0::new(move || Dice_ui::closure185((), ()))
        }
        pub fn method200(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
        ) -> Func1<(std::string::String, Option<std::string::String>), (string, Dice_ui::US31)>
        {
            v0_1
        }
        pub fn closure188(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US31) {
            let v3: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = Dice_ui::method200(v0_1);
            let patternInput: (string, Dice_ui::US31) =
                (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure189(unitVar: (), _arg: (string, Dice_ui::US31)) -> bool {
            let v1: Dice_ui::US31 = _arg.1.clone();
            if string("FUNCTION_CALL") == (_arg.0.clone()) {
                if let Dice_ui::US31::US31_0(v1_0_0) = &v1 {
                    string("generate_random_number") == (v1_0_0.clone())
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method201() -> Func1<(string, Dice_ui::US31), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US31)| {
                Dice_ui::closure189((), arg10_0040)
            })
        }
        pub fn method202(v0_1: Vec<(string, Dice_ui::US31)>) -> Vec<(string, Dice_ui::US31)> {
            v0_1
        }
        pub fn closure187(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let patternInput: (std::string::String, Option<std::string::String>) = value;
                let v13: string = fable_library_rust::String_::fromString(patternInput.0.clone());
                let v30: Dice_ui::US14 = defaultValue(
                    Dice_ui::US14::US14_1,
                    map(Dice_ui::method39(), patternInput.1.clone()),
                );
                let v40: Dice_ui::US31 = match &v30 {
                    Dice_ui::US14::US14_0(v30_0_0) => {
                        Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                            match &v30 {
                                Dice_ui::US14::US14_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US31::US31_1,
                };
                let v43: bool = true;
                (v13, v40) /*;
                           let v45: bool = */
            }); //;
            let v47: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = _func1_from_v6;
            let v50: Vec<(string, Dice_ui::US31)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v47 = v47.clone();
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure188(v47.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v51 = Dice_ui::method201();
            let v52: Vec<(string, Dice_ui::US31)> = Dice_ui::method202(v50);
            let v54: Vec<(string, Dice_ui::US31)> = v52
                .into_iter()
                .filter(|x| v51(x.clone().clone()))
                .collect::<Vec<_>>();
            if (get_Count(fable_library_rust::NativeArray_::array_from(v54.clone()))) > 0_i32 {
                (_arg.0.clone()) == (fable_library_rust::String_::fromString(v2.l2.clone()))
            } else {
                false
            }
        }
        pub fn method199() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure187((), arg10_0040)
            })
        }
        pub fn method203(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method204(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure190(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method205() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US68> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure190((), v))
        }
        pub fn method206(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure186(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v2394: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v4.clone()),
            ) as u64)
                == 0_u64
            {
                let v11: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v13: string = string(" class=\"[height:17px]\"");
                let v27: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v33: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v34: string = string("vec![]");
                let v35: Vec<leptos::prelude::AnyView> = vec![];
                let v37: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v35);
                let v39: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v37);
                let v42: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v33))),
                                    string(">move || { v39 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v39 }</path> };
                let v46: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v44);
                let v50: string = string("vec![v46]");
                let v51: Vec<leptos::prelude::AnyView> = vec![v46];
                let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
                let v55: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v53);
                let v58: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v27))),
                                    string(">move || { v55 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v60: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v55 }</svg> };
                let v62: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v60);
                let v66: string = string("vec![v62]");
                let v67: Vec<leptos::prelude::AnyView> = vec![v62];
                let v69: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v67);
                let v71: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v69);
                let v74: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v13))),
                                    string(">move || { v71 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v76: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v71 }</span> };
                let v78: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v76);
                let v80: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v90: &str = &*string("No account selected");
                let v123: std::string::String = String::from(v90);
                let v149: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v123));
                let v153: string = string("vec![v149]");
                let v154: Vec<leptos::prelude::AnyView> = vec![v149];
                let v156: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v154);
                let v158: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v156);
                let v161: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v80))),
                                    string(">move || { v158 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v163: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v158 }</pre> };
                let v165: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v163);
                let v173: string = string("vec![v78, v165]");
                let v174: Vec<leptos::prelude::AnyView> = vec![v78, v165];
                let v176: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v174);
                let v178: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v176);
                let v181: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v11))),
                                    string(">move || { v178 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v183: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v178 }</div> };
                leptos::prelude::IntoAny::into_any(v183)
            } else {
                let v187: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v188 = Dice_ui::method138();
                let v189 = Dice_ui::method139();
                let v190: Dice_ui::US53 = match &v187 {
                    Err(v187_1_0) => v189(v187_1_0.clone()),
                    Ok(v187_0_0) => v188(v187_0_0.clone()),
                };
                let v216: Dice_ui::US46 = match &v190 {
                    Dice_ui::US53::US53_0(v190_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v190_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v190_1_0) => Dice_ui::US46::US46_1(v190_1_0.clone()),
                };
                match &v216 {
                    Dice_ui::US46::US46_0(v216_0_0) => {
                        let v217: Dice_ui::US47 = v216_0_0.clone();
                        if let Dice_ui::US47::US47_0(v217_0_0) = &v217 {
                            let v220: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v217_0_0.clone().to_vec();
                            let v221 = Dice_ui::method199();
                            let v222: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method203(v220);
                            let v224: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v222
                                .into_iter()
                                .filter(|x| v221(x.clone().clone()))
                                .collect::<Vec<_>>();
                            let v227: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v237: &str = &*string("Block Timestamp");
                            let v270: std::string::String = String::from(v237);
                            let v296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v270),
                            );
                            let v300: string = string("vec![v296]");
                            let v301: Vec<leptos::prelude::AnyView> = vec![v296];
                            let v303: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v301);
                            let v305: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v303);
                            let v308: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v227))),
                                                string(">move || { v305 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v310: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v305 }</th> };
                            let v312: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v310);
                            let v314: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v324: &str = &*string("Predecessor");
                            let v357: std::string::String = String::from(v324);
                            let v383: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v357),
                            );
                            let v387: string = string("vec![v383]");
                            let v388: Vec<leptos::prelude::AnyView> = vec![v383];
                            let v390: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v388);
                            let v392: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v390);
                            let v394: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v314))),
                                                string(">move || { v392 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v396: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v392 }</th> };
                            let v398: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v396);
                            let v400: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v410: &str = &*string("Receiver");
                            let v443: std::string::String = String::from(v410);
                            let v469: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v443),
                            );
                            let v473: string = string("vec![v469]");
                            let v474: Vec<leptos::prelude::AnyView> = vec![v469];
                            let v476: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v474);
                            let v478: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v476);
                            let v480: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v400))),
                                                string(">move || { v478 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v482: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v478 }</th> };
                            let v484: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v482);
                            let v486: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v496: &str = &*string("Fee");
                            let v529: std::string::String = String::from(v496);
                            let v555: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v529),
                            );
                            let v559: string = string("vec![v555]");
                            let v560: Vec<leptos::prelude::AnyView> = vec![v555];
                            let v562: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v560);
                            let v564: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v562);
                            let v566: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v486))),
                                                string(">move || { v564 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v568: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v564 }</th> };
                            let v570: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v568);
                            let v572: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v582: &str = &*string("Result");
                            let v615: std::string::String = String::from(v582);
                            let v641: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v615),
                            );
                            let v645: string = string("vec![v641]");
                            let v646: Vec<leptos::prelude::AnyView> = vec![v641];
                            let v648: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v646);
                            let v650: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v648);
                            let v652: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v572))),
                                                string(">move || { v650 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v654: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v650 }</th> };
                            let v656: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v654);
                            let v658: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v668: &str = &*string("Status");
                            let v701: std::string::String = String::from(v668);
                            let v727: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v701),
                            );
                            let v731: string = string("vec![v727]");
                            let v732: Vec<leptos::prelude::AnyView> = vec![v727];
                            let v734: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v732);
                            let v736: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v734);
                            let v738: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v658))),
                                                string(">move || { v736 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v740: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v736 }</th> };
                            let v742: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v740);
                            let v762: string = string("vec![v312, v398, v484, v570, v656, v742]");
                            let v763: Vec<leptos::prelude::AnyView> =
                                vec![v312, v398, v484, v570, v656, v742];
                            let v765: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v763);
                            let v767: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v765);
                            let v770: string =
                                string("leptos::prelude::view! { <tr >move || { v767 }</tr> }");
                            let v772: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                            > = leptos::prelude::view! { <tr >move || { v767 }</tr> };
                            let v774: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v772);
                            let v778: string = string("vec![v774]");
                            let v779: Vec<leptos::prelude::AnyView> = vec![v774];
                            let v781: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v779);
                            let v783: Vec<
                                Result<
                                    Option<(
                                        std::string::String,
                                        Option<(
                                            Array<(
                                                std::string::String,
                                                Array<
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        (
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                            Option<f64>,
                                                            Option<std::string::String>,
                                                        ),
                                                    >,
                                                >,
                                                std::string::String,
                                                Array<std::string::String>,
                                                Array<std::string::String>,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u64,
                                                Array<std::string::String>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                u8,
                                                Array<std::string::String>,
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    std::string::String,
                                                >,
                                                Option<std::string::String>,
                                                Array<(std::string::String, std::string::String)>,
                                            )>,
                                        )>,
                                        Option<(
                                            std::string::String,
                                            std::string::String,
                                            Option<(
                                                Option<std::string::String>,
                                                Option<std::string::String>,
                                            )>,
                                            i32,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                >,
                            > = leptos::prelude::ArcMemo::get(&v0_1.clone());
                            let v785: bool = true;
                            let _vec_map : Vec<_> = v224.into_iter().map(|x| { //;
                                let patternInput:
                                        (string, usize,
                                         LrcPtr<Dice_ui::Heap5>) = x;
                                let v789: LrcPtr<Dice_ui::Heap5> =
                                    patternInput.2.clone();
                                let v791:
                                        Array<Result<Option<(std::string::String,
                                                             Option<(Array<(std::string::String,
                                                                            Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                  Option<std::string::String>,
                                                                                                                                  Option<f64>,
                                                                                                                                  Option<std::string::String>)>>,
                                                                            std::string::String,
                                                                            Array<std::string::String>,
                                                                            Array<std::string::String>,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String)>,
                                                                     Array<(std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            u64,
                                                                            Array<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String,
                                                                                   std::string::String)>,
                                                                            u8,
                                                                            Array<std::string::String>,
                                                                            std::collections::HashMap<std::string::String, std::string::String>,
                                                                            Option<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String)>)>)>,
                                                             Option<(std::string::String,
                                                                     std::string::String,
                                                                     Option<(Option<std::string::String>,
                                                                             Option<std::string::String>)>,
                                                                     i32,
                                                                     std::string::String,
                                                                     std::string::String)>,
                                                             Option<std::string::String>)>,
                                                     std::string::String>> =
                                    fable_library_rust::NativeArray_::array_from(v783.clone());
                                let v797: i32 = patternInput.1.clone() as i32;
                                let v806:
                                        Result<Option<(std::string::String,
                                                       Option<(Array<(std::string::String,
                                                                      Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                            Option<std::string::String>,
                                                                                                                            Option<f64>,
                                                                                                                            Option<std::string::String>)>>,
                                                                      std::string::String,
                                                                      Array<std::string::String>,
                                                                      Array<std::string::String>,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String)>,
                                                               Array<(std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      u64,
                                                                      Array<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String,
                                                                             std::string::String)>,
                                                                      u8,
                                                                      Array<std::string::String>,
                                                                      std::collections::HashMap<std::string::String, std::string::String>,
                                                                      Option<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String)>)>)>,
                                                       Option<(std::string::String,
                                                               std::string::String,
                                                               Option<(Option<std::string::String>,
                                                                       Option<std::string::String>)>,
                                                               i32,
                                                               std::string::String,
                                                               std::string::String)>,
                                                       Option<std::string::String>)>,
                                               std::string::String> =
                                    v791[v797].clone();
                                let v810: string =
                                    string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                let v812: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v822: i64 =
                                    (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v789.l5.clone()))))
                                        / 1000_i64;
                                let v824:
                                        Option<chrono::DateTime<chrono::Utc>> =
                                    chrono::DateTime::from_timestamp_micros(v822);
                                let v841: Dice_ui::US68 =
                                    defaultValue(Dice_ui::US68::US68_1,
                                                 map(Dice_ui::method205(),
                                                     v824));
                                let v860: Dice_ui::US31 =
                                    match &v841 {
                                        Dice_ui::US68::US68_0(v841_0_0) => {
                                            let v847: chrono::NaiveDateTime =
                                                match &v841 {
                                                    Dice_ui::US68::US68_0(x)
                                                    => x.clone(),
                                                    _ => unreachable!(),
                                                }.clone().naive_utc();
                                            let v849:
                                                    chrono::DateTime<chrono::Local> =
                                                chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v847);
                                            let v851: string =
                                                string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                            let v852: &str =
                                                r#"%Y-%m-%d %H:%M:%S"#;
                                            let v854: std::string::String =
                                                v849.format(v852).to_string();
                                            Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v854))
                                        }
                                        _ => Dice_ui::US31::US31_1,
                                    };
                                let v866: Dice_ui::US69 =
                                    match &v860 {
                                        Dice_ui::US31::US31_0(v860_0_0) =>
                                        Dice_ui::US69::US69_0(match &v860 {
                                                                  Dice_ui::US31::US31_0(x)
                                                                  =>
                                                                  x.clone(),
                                                                  _ =>
                                                                  unreachable!(),
                                                              }.clone()),
                                        _ =>
                                        Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                    };
                                let v871: string =
                                    match &v866 {
                                        Dice_ui::US69::US69_0(v866_0_0) =>
                                        v866_0_0.clone(),
                                        Dice_ui::US69::US69_1(v866_1_0) =>
                                        append((append(string("sm\'.to_string result / Error: "),
                                                       (v866_1_0.clone()))),
                                               string("")),
                                    };
                                let v880: &str = &*v871;
                                let v913: std::string::String =
                                    String::from(v880);
                                let v939: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v913));
                                let v943: string = string("vec![v939]");
                                let v944: Vec<leptos::prelude::AnyView> =
                                    vec![v939];
                                let v946: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v944);
                                let v948: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v946);
                                let v951: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v812))),
                                                                           string(">move || { v948 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v953:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v948 }</td> };
                                let v955: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v953);
                                let v957: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v960: string =
                                    fable_library_rust::String_::fromString(v789.l1.clone());
                                let v969: &str = &*v960;
                                let v1002: std::string::String =
                                    String::from(v969);
                                let v1028: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1002));
                                let v1032: string = string("vec![v1028]");
                                let v1033: Vec<leptos::prelude::AnyView> =
                                    vec![v1028];
                                let v1035: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1033);
                                let v1037: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1035);
                                let v1039: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v957))),
                                                                           string(">move || { v1037 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1041:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1037 }</td> };
                                let v1043: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1041);
                                let v1045: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1048: string =
                                    fable_library_rust::String_::fromString(v789.l2.clone());
                                let v1057: &str = &*v1048;
                                let v1090: std::string::String =
                                    String::from(v1057);
                                let v1116: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1090));
                                let v1120: string = string("vec![v1116]");
                                let v1121: Vec<leptos::prelude::AnyView> =
                                    vec![v1116];
                                let v1123: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1121);
                                let v1125: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1123);
                                let v1127: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1045))),
                                                                           string(">move || { v1125 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1129:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1125 }</td> };
                                let v1131: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1129);
                                let v1133: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1137: string = toString(v789.l10);
                                let v1148: &str = &*v1137;
                                let v1181: std::string::String =
                                    String::from(v1148);
                                let v1207: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1181));
                                let v1211: string = string("vec![v1207]");
                                let v1212: Vec<leptos::prelude::AnyView> =
                                    vec![v1207];
                                let v1214: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1212);
                                let v1216: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1214);
                                let v1218: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1133))),
                                                                           string(">move || { v1216 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1220:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1216 }</td> };
                                let v1222: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1220);
                                let v1224: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1409: leptos::prelude::Fragment =
                                    if (get_Count(v789.l11.clone()) as u64) ==
                                           0_u64 {
                                        let v1236: &str = &*string("");
                                        let v1269: std::string::String =
                                            String::from(v1236);
                                        let v1295: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1269));
                                        let v1299: string =
                                            string("vec![v1295]");
                                        let v1300:
                                                Vec<leptos::prelude::AnyView> =
                                            vec![v1295];
                                        leptos::prelude::Fragment::new(v1300)
                                    } else {
                                        let v1303:
                                                Array<std::string::String> =
                                            v789.l11.clone();
                                        let v1304: i32 =
                                            get_Count(v1303.clone());
                                        let v1306: LrcPtr<Dice_ui::Mut2> =
                                            LrcPtr::new(Dice_ui::Mut2{l0:
                                                                          MutCell::new(0_i32),
                                                                      l1:
                                                                          MutCell::new(Dice_ui::US31::US31_1),});
                                        while Dice_ui::method206(v1304,
                                                                 v1306.clone())
                                              {
                                            let v1308: i32 =
                                                v1306.l0.get().clone();
                                            let v1311: i32 =
                                                ((v1308.wrapping_neg()) +
                                                     (v1304)) - 1_i32;
                                            let v1312: Dice_ui::US31 =
                                                v1306.l1.get().clone();
                                            let v1313: std::string::String =
                                                v1303[v1311].clone();
                                            let v1318: Array<string> =
                                                split(fable_library_rust::String_::fromString(v1313),
                                                      string(" / result: "),
                                                      -1_i32, 0_i32);
                                            let v1327: Dice_ui::US31 =
                                                if let Dice_ui::US31::US31_1 =
                                                       &v1312 {
                                                    if (get_Count(v1318.clone())
                                                            as u64) == 2_u64 {
                                                        let v1323: string =
                                                            v1318[0_i32].clone();
                                                        Dice_ui::US31::US31_0(v1318[1_i32].clone())
                                                    } else { v1312 }
                                                } else { v1312.clone() };
                                            let v1328: i32 = (v1308) + 1_i32;
                                            v1306.l0.set(v1328);
                                            v1306.l1.set(v1327);
                                            ()
                                        }
                                        {
                                            let v1329: Dice_ui::US31 =
                                                v1306.l1.get().clone();
                                            let v1333: string =
                                                match &v1329 {
                                                    Dice_ui::US31::US31_0(v1329_0_0)
                                                    =>
                                                    match &v1329 {
                                                        Dice_ui::US31::US31_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone(),
                                                    _ => string("?"),
                                                };
                                            let v1342: &str = &*v1333;
                                            let v1375: std::string::String =
                                                String::from(v1342);
                                            let v1401:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1375));
                                            let v1405: string =
                                                string("vec![v1401]");
                                            let v1406:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1401];
                                            leptos::prelude::Fragment::new(v1406)
                                        }
                                    };
                                let v1411: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1409);
                                let v1413: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1224))),
                                                                           string(">move || { v1411 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1415:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1411 }</td> };
                                let v1417: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1415);
                                let v1419: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1423: string =
                                    if v789.l9 {
                                        string("Ok")
                                    } else { string("Outcome Error") };
                                let v1424 = Dice_ui::method177();
                                let v1425 = Dice_ui::method178();
                                let v1426: Dice_ui::US63 =
                                    match &v806 {
                                        Err(v806_1_0) =>
                                        v1425(v806_1_0.clone()),
                                        Ok(v806_0_0) =>
                                        v1424(v806_0_0.clone()),
                                    };
                                let v1455: Dice_ui::US58 =
                                    match &v1426 {
                                        Dice_ui::US63::US63_0(v1426_0_0) =>
                                        Dice_ui::US58::US58_0(defaultValue(Dice_ui::US59::US59_1,
                                                                           map(Dice_ui::method179(),
                                                                               v1426_0_0.clone()))),
                                        Dice_ui::US63::US63_1(v1426_1_0) =>
                                        Dice_ui::US58::US58_1(v1426_1_0.clone()),
                                    };
                                let v1560: Dice_ui::US69 =
                                    match &v1455 {
                                        Dice_ui::US58::US58_0(v1455_0_0) => {
                                            let v1456: Dice_ui::US59 =
                                                v1455_0_0.clone();
                                            if let Dice_ui::US59::US59_0(v1456_0_0,
                                                                         v1456_0_1,
                                                                         v1456_0_2,
                                                                         v1456_0_3)
                                                   = &v1456 {
                                                let v1459:
                                                        Option<(std::string::String,
                                                                std::string::String,
                                                                Option<(Option<std::string::String>,
                                                                        Option<std::string::String>)>,
                                                                i32,
                                                                std::string::String,
                                                                std::string::String)> =
                                                    v1456_0_2.clone();
                                                let v1482: Dice_ui::US64 =
                                                    defaultValue(Dice_ui::US64::US64_1,
                                                                 map(Dice_ui::method180(),
                                                                     v1459.clone()));
                                                match &v1482 {
                                                    Dice_ui::US64::US64_0(v1482_0_0,
                                                                          v1482_0_1,
                                                                          v1482_0_2,
                                                                          v1482_0_3,
                                                                          v1482_0_4,
                                                                          v1482_0_5)
                                                    => {
                                                        let v1513:
                                                                Dice_ui::US64 =
                                                            defaultValue(Dice_ui::US64::US64_1,
                                                                         map(Dice_ui::method180(),
                                                                             v1459.clone()));
                                                        let v1526:
                                                                Dice_ui::US31 =
                                                            if let Dice_ui::US64::US64_0(v1513_0_0,
                                                                                         v1513_0_1,
                                                                                         v1513_0_2,
                                                                                         v1513_0_3,
                                                                                         v1513_0_4,
                                                                                         v1513_0_5)
                                                                   = &v1513 {
                                                                Dice_ui::US31::US31_0(append((append((append((append((append((append((append((toString(v1513_0_0.clone())),
                                                                                                                                             string(": "))),
                                                                                                                                     (toString(v1513_0_4.clone())))),
                                                                                                                             string(" - "))),
                                                                                                                     (toString(v1513_0_5.clone())))),
                                                                                                             string(" ("))),
                                                                                                     (toString(v1513_0_1.clone())))),
                                                                                             string(")")))
                                                            } else {
                                                                Dice_ui::US31::US31_1
                                                            };
                                                        Dice_ui::US69::US69_1(match &v1526
                                                                                  {
                                                                                  Dice_ui::US31::US31_0(v1526_0_0)
                                                                                  =>
                                                                                  match &v1526
                                                                                      {
                                                                                      Dice_ui::US31::US31_0(x)
                                                                                      =>
                                                                                      x.clone(),
                                                                                      _
                                                                                      =>
                                                                                      unreachable!(),
                                                                                  }.clone(),
                                                                                  _
                                                                                  =>
                                                                                  Dice_ui::method8(400_i64,
                                                                                                   sprintf!("{:?}",
                                                                                                            ())),
                                                                              })
                                                    }
                                                    _ =>
                                                    Dice_ui::US69::US69_0(Dice_ui::method8(400_i64,
                                                                                           sprintf!("{:?}",
                                                                                                    (v1456_0_0.clone(),
                                                                                                     v1456_0_1.clone(),
                                                                                                     v1459.clone(),
                                                                                                     v1456_0_3.clone())))),
                                                }
                                            } else {
                                                Dice_ui::US69::US69_1(concat(new_array(&[string("RPC Response: "),
                                                                                         Dice_ui::method8(400_i64,
                                                                                                          sprintf!("{:?}",
                                                                                                                   v1455.clone()))])))
                                            }
                                        }
                                        Dice_ui::US58::US58_1(v1455_1_0) =>
                                        Dice_ui::US69::US69_1(fable_library_rust::String_::fromString(v1455_1_0.clone())),
                                    };
                                let v1573: string =
                                    concat(new_array(&[v1423, string(" / "),
                                                       match &v1560 {
                                                           Dice_ui::US69::US69_0(v1560_0_0)
                                                           =>
                                                           concat(new_array(&[string("RPC Response: "),
                                                                              Dice_ui::method8(400_i64,
                                                                                               sprintf!("{:?}",
                                                                                                        v1560_0_0.clone()))])),
                                                           Dice_ui::US69::US69_1(v1560_1_0)
                                                           =>
                                                           concat(new_array(&[string("Error: "),
                                                                              v1560_1_0.clone()])),
                                                       }]));
                                let v1582: &str = &*v1573;
                                let v1615: std::string::String =
                                    String::from(v1582);
                                let v1641: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1615));
                                let v1645: string = string("vec![v1641]");
                                let v1646: Vec<leptos::prelude::AnyView> =
                                    vec![v1641];
                                let v1648: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1646);
                                let v1650: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1648);
                                let v1652: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1419))),
                                                                           string(">move || { v1650 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1654:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1650 }</td> };
                                let v1656: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1654);
                                let v1675: string =
                                    string("vec![v955, v1043, v1131, v1222, v1417, v1656]");
                                let v1676: Vec<leptos::prelude::AnyView> =
                                    vec![v955, v1043, v1131, v1222, v1417, v1656];
                                let v1678: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1676);
                                let v1680: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1678);
                                let v1682: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<tr "),
                                                                                   (v810))),
                                                                           string(">move || { v1680 }</"))),
                                                                   string("tr"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1684:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                    leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v1680 }</tr> };
                                let v1686: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1684);
                                let v1688: bool =
                                    true; v1686 }).collect::<Vec<_>>();
                            let v1690: Vec<leptos::prelude::AnyView> = _vec_map;
                            let v1692: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1690);
                            let v1696: string = string("vec![v1692]");
                            let v1697: Vec<leptos::prelude::AnyView> = vec![v1692];
                            let v1699: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1697);
                            let v1701: string =
                                    string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                            let v1703: string = string(" class=\"ltr:text-left rtl:text-right\"");
                            let v1705: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v781);
                            let v1708: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<thead "), (v1703))),
                                                string(">move || { v1705 }</"),
                                            )),
                                            string("thead"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1710: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                            > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v1705 }</thead> };
                            let v1712: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1710);
                            let v1714: string =
                                string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
                            let v1716: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1699);
                            let v1719: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<tbody "), (v1714))),
                                                string(">move || { v1716 }</"),
                                            )),
                                            string("tbody"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1721: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                            > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v1716 }</tbody> };
                            let v1723: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1721);
                            let v1730: string = string("vec![v1712, v1723]");
                            let v1731: Vec<leptos::prelude::AnyView> = vec![v1712, v1723];
                            let v1733: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1731);
                            let v1735: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1733);
                            let v1738: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<table "), (v1701))),
                                                string(">move || { v1735 }</"),
                                            )),
                                            string("table"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1740: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Table, _, _>,
                            > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v1735 }</table> };
                            leptos::prelude::IntoAny::into_any(v1740)
                        } else {
                            let v1745: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v1747: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v1750 = {
                                let clo = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo = clo.clone();
                                    move |arg: ()| clo()
                                })
                            };
                            let v1768: string =
                                    string(" class=move || \" \".to_owned() + &v1750(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v1780: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v1792: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1793: string = string("vec![]");
                            let v1794: Vec<leptos::prelude::AnyView> = vec![];
                            let v1796: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1794);
                            let v1798: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1796);
                            let v1801: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1792))),
                                                string(">move || { v1798 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1803: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1798 }</animate> };
                            let v1805: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1803);
                            let v1817: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v1818: string = string("vec![]");
                            let v1819: Vec<leptos::prelude::AnyView> = vec![];
                            let v1821: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1819);
                            let v1823: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1821);
                            let v1825: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1817))),
                                                string(">move || { v1823 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1827: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1823 }</animate> };
                            let v1829: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1827);
                            let v1841: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1842: string = string("vec![]");
                            let v1843: Vec<leptos::prelude::AnyView> = vec![];
                            let v1845: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1843);
                            let v1847: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1845);
                            let v1849: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1841))),
                                                string(">move || { v1847 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1851: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1847 }</animate> };
                            let v1853: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1851);
                            let v1864: string = string("vec![v1805, v1829, v1853]");
                            let v1865: Vec<leptos::prelude::AnyView> = vec![v1805, v1829, v1853];
                            let v1867: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1865);
                            let v1869: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1867);
                            let v1872: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1780))),
                                                string(">move || { v1869 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1874: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v1869 }</rect> };
                            let v1886: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v1898: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1899: string = string("vec![]");
                            let v1900: Vec<leptos::prelude::AnyView> = vec![];
                            let v1902: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1900);
                            let v1904: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1902);
                            let v1906: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1898))),
                                                string(">move || { v1904 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1908: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1904 }</animate> };
                            let v1910: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1908);
                            let v1922: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1923: string = string("vec![]");
                            let v1924: Vec<leptos::prelude::AnyView> = vec![];
                            let v1926: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1924);
                            let v1928: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1926);
                            let v1930: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1922))),
                                                string(">move || { v1928 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1932: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1928 }</animate> };
                            let v1934: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1932);
                            let v1946: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1947: string = string("vec![]");
                            let v1948: Vec<leptos::prelude::AnyView> = vec![];
                            let v1950: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1948);
                            let v1952: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1950);
                            let v1954: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1946))),
                                                string(">move || { v1952 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1956: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1952 }</animate> };
                            let v1958: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1956);
                            let v1968: string = string("vec![v1910, v1934, v1958]");
                            let v1969: Vec<leptos::prelude::AnyView> = vec![v1910, v1934, v1958];
                            let v1971: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1969);
                            let v1973: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1971);
                            let v1975: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1886))),
                                                string(">move || { v1973 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1977: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1973 }</rect> };
                            let v1989: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v2001: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v2002: string = string("vec![]");
                            let v2003: Vec<leptos::prelude::AnyView> = vec![];
                            let v2005: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2003);
                            let v2007: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2005);
                            let v2009: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2001))),
                                                string(">move || { v2007 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2011: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v2007 }</animate> };
                            let v2013: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2011);
                            let v2025: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v2026: string = string("vec![]");
                            let v2027: Vec<leptos::prelude::AnyView> = vec![];
                            let v2029: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2027);
                            let v2031: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2029);
                            let v2033: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2025))),
                                                string(">move || { v2031 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2035: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v2031 }</animate> };
                            let v2037: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2035);
                            let v2049: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v2050: string = string("vec![]");
                            let v2051: Vec<leptos::prelude::AnyView> = vec![];
                            let v2053: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2051);
                            let v2055: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2053);
                            let v2057: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2049))),
                                                string(">move || { v2055 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2059: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v2055 }</animate> };
                            let v2061: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2059);
                            let v2071: string = string("vec![v2013, v2037, v2061]");
                            let v2072: Vec<leptos::prelude::AnyView> = vec![v2013, v2037, v2061];
                            let v2074: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2072);
                            let v2076: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2074);
                            let v2078: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1989))),
                                                string(">move || { v2076 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2080: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v2076 }</rect> };
                            let v2082: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2080);
                            let v2084: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1977);
                            let v2086: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1874);
                            let v2096: string = string("vec![v2086, v2084, v2082]");
                            let v2097: Vec<leptos::prelude::AnyView> = vec![v2086, v2084, v2082];
                            let v2099: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2097);
                            let v2101: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2099);
                            let v2104: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v1768))),
                                                string(">move || { v2101 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2106: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1750(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v2101 }</svg> };
                            let v2108: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2106);
                            let v2118: &str = &*string("Loading...");
                            let v2151: std::string::String = String::from(v2118);
                            let v2177: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v2151),
                                );
                            let v2184: string = string("vec![v2108, v2177]");
                            let v2185: Vec<leptos::prelude::AnyView> = vec![v2108, v2177];
                            let v2187: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2185);
                            let v2189: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2187);
                            let v2192: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1747))),
                                                string(">move || { v2189 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2194: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v2189 }</div> };
                            let v2196: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2194);
                            let v2200: string = string("vec![v2196]");
                            let v2201: Vec<leptos::prelude::AnyView> = vec![v2196];
                            let v2203: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2201);
                            let v2205: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2203);
                            let v2207: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1745))),
                                                string(">move || { v2205 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2209: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v2205 }</div> };
                            leptos::prelude::IntoAny::into_any(v2209)
                        }
                    }
                    Dice_ui::US46::US46_1(v216_1_0) => {
                        let v2215: string =
                            fable_library_rust::String_::fromString(v216_1_0.clone());
                        let v2218: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v2220: string = string(" class=\"[height:17px]\"");
                        let v2234: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v2240: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v2241: string = string("vec![]");
                        let v2242: Vec<leptos::prelude::AnyView> = vec![];
                        let v2244: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2242);
                        let v2246: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2244);
                        let v2249: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v2240))),
                                            string(">move || { v2246 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2251: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v2246 }</path> };
                        let v2253: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2251);
                        let v2257: string = string("vec![v2253]");
                        let v2258: Vec<leptos::prelude::AnyView> = vec![v2253];
                        let v2260: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2258);
                        let v2262: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2260);
                        let v2265: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v2234))),
                                            string(">move || { v2262 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2267: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v2262 }</svg> };
                        let v2269: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2267);
                        let v2273: string = string("vec![v2269]");
                        let v2274: Vec<leptos::prelude::AnyView> = vec![v2269];
                        let v2276: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2274);
                        let v2278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2276);
                        let v2281: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v2220))),
                                            string(">move || { v2278 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2283: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v2278 }</span> };
                        let v2285: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2283);
                        let v2287: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v2296: &str = &*v2215;
                        let v2329: std::string::String = String::from(v2296);
                        let v2355: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v2329),
                        );
                        let v2359: string = string("vec![v2355]");
                        let v2360: Vec<leptos::prelude::AnyView> = vec![v2355];
                        let v2362: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2360);
                        let v2364: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2362);
                        let v2367: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v2287))),
                                            string(">move || { v2364 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2369: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v2364 }</pre> };
                        let v2371: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2369);
                        let v2379: string = string("vec![v2285, v2371]");
                        let v2380: Vec<leptos::prelude::AnyView> = vec![v2285, v2371];
                        let v2382: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2380);
                        let v2384: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2382);
                        let v2387: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v2218))),
                                            string(">move || { v2384 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2389: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v2384 }</div> };
                        leptos::prelude::IntoAny::into_any(v2389)
                    }
                }
            };
            let v2399: string = string("vec![v2394]");
            let v2400: Vec<leptos::prelude::AnyView> = vec![v2394];
            leptos::prelude::Fragment::new(v2400)
        }
        pub fn closure194(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure193(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure194(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method207() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure193((), v))
        }
        pub fn method208(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure192(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v10 = Dice_ui::method207();
            let v11: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v8.l0.clone());
            v11.iter()
                .enumerate()
                .map(|(i, x)| v10(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method209(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure196(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method209(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method210(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure197(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method210(v0_1);
            let patternInput: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure195(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::ReadSignal::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let v10: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = v10.1.clone();
                let v25: bool = true;
                (v10.0.clone(), b.0.clone(), b.1.clone()) /*;
                                                          let v27: bool = */
            }); //;
            let v29: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v6;
            let v32: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure196(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v35: bool = true;
            let _func1_from_v33 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v42: bool = true;
                (v3, patternInput.0.clone(), patternInput.1.clone()) /*;
                                                                     let v44: bool = */
            }); //;
            let v46: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v33;
            v32.into_iter()
                .map(|x| {
                    Func1::new({
                        let v46 = v46.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure197(v46.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure198(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = leptos::prelude::ArcMemo::get(&v0_1);
            get_Count(fable_library_rust::NativeArray_::array_from(v2.clone()))
        }
        pub fn method211(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method212(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method213(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            LrcPtr<(bool, std::string::String)>,
        > {
            v0_1
        }
        pub fn closure200(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = Dice_ui::method213(v0_1);
            (move |x| v2(x))(LrcPtr::new((v1_, v1__1)))
        }
        pub fn closure199(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v11: i32 = get_Count(fable_library_rust::NativeArray_::array_from(
                v8.clone().clone(),
            ));
            let v21: &str = &*string("");
            let v54: std::string::String = String::from(v21);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v54)));
            let v87: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v90: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method211(v87.0.clone(), v87.1.clone());
            let v91: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method212(v8);
            let v93: bool = true;
            let mut v91 = v91;
            let v95: bool = true;
            v91.push(v90);
            let v97: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v91;
            let v100: bool = true;
            let _func1_from_v98 = Func1::from(move |value| {
                //;
                let v102: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v116: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v102.1.clone()).0.clone());
                let v119: bool = true;
                v116 /*;
                     let v121: bool = */
            }); //;
            let v123: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v98;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v97
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v123 = v123.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v123.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure201(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + (v0_1)
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v9)
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure205(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure206(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method214(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure206((), ()))
        }
        pub fn method216(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            v0_1
        }
        pub fn closure208(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(i32, i32)> {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            > = Dice_ui::method216(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn method215(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure208(v0_1.clone(), arg10_0040)
            })
        }
        pub fn method217(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn method219(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure211(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method219((v1) == (v0_1)) {
                v2.clone()
            } else {
                LrcPtr::new(((v2.0.clone()) == false, v2.1.clone()))
            }
        }
        pub fn closure210(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure211(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method218(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure210(v0_1, v)
            })
        }
        pub fn closure209(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v5);
            let v10: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v7.l3.clone());
            let v12: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v10);
            let v20: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v20);
            let v24 = Dice_ui::method218(v1);
            let v25: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v12.l0.clone());
            let v28: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v25
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v24(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v12.l1.clone(),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v30: bool = true;
            leptos::prelude::ArcRwSignal::set(&v22.l3.clone(), v28); //;
            ()
        }
        pub fn closure212(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::ReadSignal::get(&v0_1)).0.clone()
        }
        pub fn method220(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure213(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append((append(string("account-"), (toString(v0_1)))), string(""));
            let v10: &str = &*v1;
            String::from(v10)
        }
        pub fn method221(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure213(v0_1, ())
            })
        }
        pub fn method223(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure215(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method223((v2) == (v0_1)) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure214(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure215(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method222(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure214(v0_1, v1.clone(), v)
            })
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method224(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure219(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn method226() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure219((), v))
        }
        pub fn closure218(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v14: bool = ((LrcPtr::new((v1_, v1__1))).0.clone()) == (v0_1);
            (Dice_ui::method226())(v14)
        }
        pub fn method225(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure218(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure217(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method224(leptos::prelude::ArcMemo::get(&v0_1));
            let v11 = Dice_ui::method225(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            let v20: bool = true;
            let _func1_from_v18 = Func1::from(move |value| {
                //;
                let v22: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v36: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v22.1.clone()).0.clone());
                let v39: bool = true;
                v36 /*;
                    let v41: bool = */
            }); //;
            let v43: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v18;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v43 = v43.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v43.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure221(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v9)
        }
        pub fn method227(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::prelude::AnyView,
        > {
            v0_1
        }
        pub fn closure222(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::AnyView {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = Dice_ui::method227(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure207(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::ArcMemo<i32>,
            v3: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v9: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = v1;
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v23: bool = true;
                LrcPtr::new((patternInput.0.clone(), patternInput.1.clone())) /*;
                                                                              let v25: bool = */
            }); //;
            let v28 = Dice_ui::method215(_func1_from_v10);
            let v31: bool = true;
            let _func1_from_v29 = Func1::from(move |value| {
                //;
                let patternInput_1: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v35: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                    patternInput_1.2.clone();
                let v37: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
                let v38: i32 = Dice_ui::method217(patternInput_1.1.clone());
                let v41: bool = true;
                let _func0_from_v39 = Func0::from(move || {
                    //;
                    let v42: string =
                        append((append(string("account-"), (toString(v38)))), string(""));
                    let v51: &str = &*v42;
                    let v84: std::string::String = String::from(v51);
                    let v110: bool = true;
                    v84 /*;
                        let v112: bool = */
                }); //;
                let v114: Func0<std::string::String> = _func0_from_v39;
                let v162: string = join(
                    string(" "),
                    toArray(delay(Func0::new(move || {
                        ofList(ofArray_1(new_array(&[
                            string("block"),
                            string("relative"),
                            string("h-8"),
                            string("w-14"),
                            string("cursor-pointer"),
                            string("[-webkit-tap-highlight-color:_transparent]"),
                        ])))
                    }))),
                );
                let v173: &str = &*v162;
                let v206: std::string::String = String::from(v173);
                let v232: std::string::String = v206;
                let v236: string = string(" class=v232 for=move || v114()");
                let v239: bool = true;
                let v237 = Func1::new({
                    let v0_1 = v0_1.clone();
                    let v38 = v38.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure209(v0_1.clone(), v38, v)
                }); //;
                let v240 = Dice_ui::method220(v35.clone());
                let v241 = Dice_ui::method221(v38);
                let v242: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v254: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                string("<input "),
                                (append(
                                    (append(
                                        string(" prop:checked=move || v240()"),
                                        (append(
                                            (append(
                                                string(" on:change=move |event| v237(event)"),
                                                (append(
                                                    (append(
                                                        string(" id=move || v241()"),
                                                        (append(
                                                            (append(
                                                                string(" type=\"checkbox\""),
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            string(" "),
                                                                            (v242),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string(""),
                                                                )),
                                                            )),
                                                            string(""),
                                                        )),
                                                    )),
                                                    string(""),
                                                )),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(" />"),
                        )),
                    )),
                    string(" }"),
                );
                let v256: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v240() on:change=move |event| v237(event) id=move || v241() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v258: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v256);
                let v259: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v260: string = append(
                    (append((append(string(" "), (v259))), string(""))),
                    string(""),
                );
                let v270: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                let v272: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                let v276: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v272))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v277: string = string("vec![]");
                let v278: Vec<leptos::prelude::AnyView> = vec![];
                let v280: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v278);
                let v282: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v280);
                let v285: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v276))),
                                    string(">move || { v282 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v287: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v282 }</path> };
                let v289: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v287);
                let v293: string = string("vec![v289]");
                let v294: Vec<leptos::prelude::AnyView> = vec![v289];
                let v296: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v294);
                let v298: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v296);
                let v301: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v270))),
                                    string(">move || { v298 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v303: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v298 }</svg> };
                let v313: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                let v315: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                let v319: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v315))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v320: string = string("vec![]");
                let v321: Vec<leptos::prelude::AnyView> = vec![];
                let v323: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v321);
                let v325: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v323);
                let v327: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v319))),
                                    string(">move || { v325 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v329: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v325 }</path> };
                let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
                let v335: string = string("vec![v331]");
                let v336: Vec<leptos::prelude::AnyView> = vec![v331];
                let v338: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v336);
                let v340: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v338);
                let v342: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v313))),
                                    string(">move || { v340 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v344: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v340 }</svg> };
                let v346: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v344);
                let v348: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v303);
                let v356: string = string("vec![v348, v346]");
                let v357: Vec<leptos::prelude::AnyView> = vec![v348, v346];
                let v359: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v357);
                let v361: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v359);
                let v364: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v260))),
                                    string(">move || { v361 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v366: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v361 }</span> };
                let v368: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v366);
                let v369: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v370: string = append(
                    (append((append(string(" "), (v369))), string(""))),
                    string(""),
                );
                let v371: string = string("vec![]");
                let v372: Vec<leptos::prelude::AnyView> = vec![];
                let v374: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v372);
                let v376: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v374);
                let v378: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v370))),
                                    string(">move || { v376 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v380: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v376 }</span> };
                let v382: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v380);
                let v392: string = string("vec![v258, v368, v382]");
                let v393: Vec<leptos::prelude::AnyView> = vec![v258, v368, v382];
                let v395: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v393);
                let v397: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v395);
                let v400: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<label "), (v236))),
                                    string(">move || { v397 }</"),
                                )),
                                string("label"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v402: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class=v232 for=move || v114()>move || { v397 }</label> };
                let v404: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v402);
                let v407: bool = true;
                let _func0_from_v405 = Func0::from(move || {
                    //;
                    let v409: LrcPtr<(bool, std::string::String)> =
                        leptos::prelude::ReadSignal::get(&v35);
                    let v419: bool = true;
                    v409.1.clone() /*;
                                   let v421: bool = */
                }); //;
                let v423: Func0<std::string::String> = _func0_from_v405;
                let v426: bool = true;
                let _func1_from_v424 = Func0::from(move || {
                    //;
                    let v428: std::string::String = value;
                    let v431: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v433: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v431);
                    let v436: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                    > = Box::pin(v433.l3.clone());
                    let v438: LrcPtr<Dice_ui::Heap0> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v436);
                    let v446: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v448: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v446);
                    let v450 = Dice_ui::method222(v38, v428);
                    let v451: Vec<LrcPtr<(bool, std::string::String)>> =
                        Dice_ui::method208(v438.l0.clone());
                    let v454: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                        l0: v451
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v450(i.try_into().unwrap())(x.clone()))
                            .collect::<Vec<_>>(),
                        l1: v438.l1.clone(),
                        l2: v438.l2,
                        l3: v438.l3,
                        l4: v438.l4.clone(),
                    });
                    let v456: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v448.l3.clone(), v454); //;
                    let v458: bool = true; /*;
                                           let v460: bool = */
                }); //;
                let v462: Func1<std::string::String, ()> = _func1_from_v424;
                let v465 = {
                    let clo = Func0::new(move || Dice_ui::closure216((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v474: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v468(leptos::prelude::event_target_value(&event)) prop:value=move || v423() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v465(()) /> }");
                let v476: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v468(leptos::prelude::event_target_value(&event)) prop:value=move || v423() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v465(()) /> };
                let v478: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v476);
                let v592: leptos::prelude::AnyView = if (leptos::prelude::ArcMemo::get(&v2))
                    == 1_i32
                {
                    let v482: string = string("vec![]");
                    let v483: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v483)
                } else {
                    let v488: bool = true;
                    let _func0_from_v486 = Func0::from(move || {
                        //;
                        let v491: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v0_1.l0.clone());
                        let v493: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v491);
                        let v496: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v493.l3.clone(),
                            |x: &mut /*;
                             let v498: */
                             LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                                    let v503: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3 = v3.clone();
                                    let v38 = v38.clone();
                                    move |v_2: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure217(v3.clone(), v38, v_2)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v505: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4,
                            |x: &mut /*;
                             let v507: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v512: bool =
                                     */| {
                                *x = Func1::new(move |v_3: i32| Dice_ui::closure201((), v_3))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v514: bool = true; /*;
                                               let v516: bool = */
                    }); //;
                    let v518: Func0<()> = _func0_from_v486;
                    let v521 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure220((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v533: string =
                        string(" class=move || \" \".to_owned() + &v521(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v539: string =
                        string(" d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v540: string = string("vec![]");
                    let v541: Vec<leptos::prelude::AnyView> = vec![];
                    let v543: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v541);
                    let v545: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v543);
                    let v547: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v539))),
                                        string(">move || { v545 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v549: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v545 }</path> };
                    let v551: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v549);
                    let v555: string = string("vec![v551]");
                    let v556: Vec<leptos::prelude::AnyView> = vec![v551];
                    let v558: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v556);
                    let v560: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v558);
                    let v562: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v533))),
                                        string(">move || { v560 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v564: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v521(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v560 }</svg> };
                    let v569 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure221((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v570: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v569(())");
                    let v573: string = append(
                        (append(
                            string(" aria-label=\"Delete\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v518()"),
                                    (append(
                                        (append((append(string(" "), (v570))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v575: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v564);
                    let v579: string = string("vec![v575]");
                    let v580: Vec<leptos::prelude::AnyView> = vec![v575];
                    let v582: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v580);
                    let v584: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v582);
                    let v587: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v573))),
                                        string(">move || { v584 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v589: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v518() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v569(())>move || { v584 }</button> };
                    leptos::prelude::IntoAny::into_any(v589)
                };
                let v602: string = string("vec![v404, v478, v592]");
                let v603: Vec<leptos::prelude::AnyView> = vec![v404, v478, v592];
                let v605: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v603);
                let v607: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v605);
                let v610: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v37))),
                                    string(">move || { v607 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v612: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v607 }</div> };
                let v614: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v612);
                let v618: string = string("vec![v614]");
                let v619: Vec<leptos::prelude::AnyView> = vec![v614];
                let v621: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v619);
                let v623: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v621);
                let v626: bool = true;
                v623 /*;
                     let v628: bool = */
            }); //;
            let v630: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = _func1_from_v29;
            let v642: string =
                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v634(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> })");
            let v643: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v634(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> },
            );
            let v647: string = string("vec![v643]");
            let v648: Vec<leptos::prelude::AnyView> = vec![v643];
            let v650: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v648);
            let v652: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v650);
            let v654: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v652 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v656: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v652 }</div> };
            let v658: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v656);
            let v662: string = string("vec![v658]");
            let v663: Vec<leptos::prelude::AnyView> = vec![v658];
            leptos::prelude::Fragment::new(v663)
        }
        pub fn closure223(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure224(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method228() -> Func0<string> {
            Func0::new(move || Dice_ui::closure225((), ()))
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Dark Mode");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method229() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure227((), ()))
        }
        pub fn closure230(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure229(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l0.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure231(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method231(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure231(v0_1.clone(), ())
            })
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("dark-mode");
            String::from(v9)
        }
        pub fn method232() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure228(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("dark-mode");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                    let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v124: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v135: &str = &*v124;
            let v168: std::string::String = String::from(v135);
            let v194: std::string::String = v168;
            let v199: string = string(" class=v194 for=move || v76()");
            let v202: bool = true;
            let v200 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure229(v0_1.clone(), v)
            }); //;
            let v203 = Dice_ui::method231(v0_1.clone());
            let v204 = Dice_ui::method232();
            let v205: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v217: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v203()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v200(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v204()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v205))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v219: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v203() on:change=move |event| v200(event) id=move || v204() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v221: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v219);
            let v222: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v223: string = append(
                (append((append(string(" "), (v222))), string(""))),
                string(""),
            );
            let v233: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v235: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v239: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v235))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v240: string = string("vec![]");
            let v241: Vec<leptos::prelude::AnyView> = vec![];
            let v243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v241);
            let v245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v243);
            let v248: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v239))),
                                string(">move || { v245 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v250: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v245 }</path> };
            let v252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v250);
            let v256: string = string("vec![v252]");
            let v257: Vec<leptos::prelude::AnyView> = vec![v252];
            let v259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v257);
            let v261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v259);
            let v264: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v233))),
                                string(">move || { v261 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v266: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v261 }</svg> };
            let v276: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v278: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v282: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v278))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v283: string = string("vec![]");
            let v284: Vec<leptos::prelude::AnyView> = vec![];
            let v286: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v284);
            let v288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v286);
            let v290: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v282))),
                                string(">move || { v288 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v292: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v288 }</path> };
            let v294: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v292);
            let v298: string = string("vec![v294]");
            let v299: Vec<leptos::prelude::AnyView> = vec![v294];
            let v301: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v299);
            let v303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v301);
            let v305: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v276))),
                                string(">move || { v303 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v307: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v303 }</svg> };
            let v309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v266);
            let v319: string = string("vec![v311, v309]");
            let v320: Vec<leptos::prelude::AnyView> = vec![v311, v309];
            let v322: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v320);
            let v324: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v322);
            let v327: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v223))),
                                string(">move || { v324 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v329: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v324 }</span> };
            let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
            let v332: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v333: string = append(
                (append((append(string(" "), (v332))), string(""))),
                string(""),
            );
            let v334: string = string("vec![]");
            let v335: Vec<leptos::prelude::AnyView> = vec![];
            let v337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v335);
            let v339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v337);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v333))),
                                string(">move || { v339 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v339 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v355: string = string("vec![v221, v331, v345]");
            let v356: Vec<leptos::prelude::AnyView> = vec![v221, v331, v345];
            let v358: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v356);
            let v360: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v358);
            let v363: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v199))),
                                string(">move || { v360 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v365: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v194 for=move || v76()>move || { v360 }</label> };
            let v367: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v365);
            let v371: string = string("vec![v367]");
            let v372: Vec<leptos::prelude::AnyView> = vec![v367];
            leptos::prelude::Fragment::new(v372)
        }
        pub fn method230(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure228(v0_1.clone(), ())
            })
        }
        pub fn closure233(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Debug");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method233() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure239(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l1.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure240(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l1.clone())
        }
        pub fn method235(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure240(v0_1.clone(), ())
            })
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("debug");
            String::from(v9)
        }
        pub fn method236() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure238(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("debug");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                    let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v124: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v135: &str = &*v124;
            let v168: std::string::String = String::from(v135);
            let v194: std::string::String = v168;
            let v199: string = string(" class=v194 for=move || v76()");
            let v202: bool = true;
            let v200 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure239(v0_1.clone(), v)
            }); //;
            let v203 = Dice_ui::method235(v0_1.clone());
            let v204 = Dice_ui::method236();
            let v205: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v217: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v203()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v200(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v204()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v205))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v219: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v203() on:change=move |event| v200(event) id=move || v204() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v221: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v219);
            let v222: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v223: string = append(
                (append((append(string(" "), (v222))), string(""))),
                string(""),
            );
            let v233: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v235: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v239: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v235))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v240: string = string("vec![]");
            let v241: Vec<leptos::prelude::AnyView> = vec![];
            let v243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v241);
            let v245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v243);
            let v248: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v239))),
                                string(">move || { v245 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v250: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v245 }</path> };
            let v252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v250);
            let v256: string = string("vec![v252]");
            let v257: Vec<leptos::prelude::AnyView> = vec![v252];
            let v259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v257);
            let v261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v259);
            let v264: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v233))),
                                string(">move || { v261 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v266: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v261 }</svg> };
            let v276: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v278: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v282: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v278))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v283: string = string("vec![]");
            let v284: Vec<leptos::prelude::AnyView> = vec![];
            let v286: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v284);
            let v288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v286);
            let v290: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v282))),
                                string(">move || { v288 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v292: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v288 }</path> };
            let v294: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v292);
            let v298: string = string("vec![v294]");
            let v299: Vec<leptos::prelude::AnyView> = vec![v294];
            let v301: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v299);
            let v303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v301);
            let v305: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v276))),
                                string(">move || { v303 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v307: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v303 }</svg> };
            let v309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v266);
            let v319: string = string("vec![v311, v309]");
            let v320: Vec<leptos::prelude::AnyView> = vec![v311, v309];
            let v322: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v320);
            let v324: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v322);
            let v327: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v223))),
                                string(">move || { v324 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v329: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v324 }</span> };
            let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
            let v332: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v333: string = append(
                (append((append(string(" "), (v332))), string(""))),
                string(""),
            );
            let v334: string = string("vec![]");
            let v335: Vec<leptos::prelude::AnyView> = vec![];
            let v337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v335);
            let v339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v337);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v333))),
                                string(">move || { v339 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v339 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v355: string = string("vec![v221, v331, v345]");
            let v356: Vec<leptos::prelude::AnyView> = vec![v221, v331, v345];
            let v358: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v356);
            let v360: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v358);
            let v363: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v199))),
                                string(">move || { v360 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v365: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v194 for=move || v76()>move || { v360 }</label> };
            let v367: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v365);
            let v371: string = string("vec![v367]");
            let v372: Vec<leptos::prelude::AnyView> = vec![v367];
            leptos::prelude::Fragment::new(v372)
        }
        pub fn method234(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure226(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method229();
            let v5 = Dice_ui::method230(v0_1.clone());
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure233((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v10() -> string {
                Dice_ui::closure234((), ())
            }
            let v11 = {
                let clo_1 = Func0::from(v10);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v13() -> string {
                Dice_ui::closure235((), ())
            }
            let v14 = {
                let clo_2 = Func0::from(v13);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            fn v18() -> string {
                Dice_ui::closure236((), ())
            }
            let v19 = {
                let clo_3 = Func0::from(v18);
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v62 = Dice_ui::method233();
            let v63 = Dice_ui::method234(v0_1);
            let v66 = {
                let clo_4 = Func0::new(move || Dice_ui::closure242((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v68 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v70 = {
                let clo_6 = Func0::from(v13);
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v71: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v70(()) + \" \" + &v68(()) + \" \" + &v66(())");
            let v72: string = append(
                (append((append(string(" "), (v71))), string(""))),
                string(""),
            );
            let v74 = {
                let clo_7 = Func0::from(v18);
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v76: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v77: leptos::prelude::Fragment = v62();
            let v79: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v77);
            let v81: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v76))),
                                string(">move || { v79 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v83: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v79 }</dt> };
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v87: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v74(())");
            let v88: leptos::prelude::Fragment = v63();
            let v90: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v88);
            let v92: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v87))),
                                string(">move || { v90 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v94: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v74(())>move || { v90 }</dd> };
            let v96: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v94);
            let v103: string = string("vec![v85, v96]");
            let v104: Vec<leptos::prelude::AnyView> = vec![v85, v96];
            let v106: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v104);
            let v108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v106);
            let v110: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v72))),
                                string(">move || { v108 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v112: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v70(()) + " " + &v68(()) + " " + &v66(())>move || { v108 }</dl> };
            let v114: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v112);
            let v116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v123: string = string("vec![v116, v114]");
            let v124: Vec<leptos::prelude::AnyView> = vec![v116, v114];
            let v126: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v124);
            let v128: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v126);
            let v131: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v128 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v133: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v128 }</div> };
            let v135: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v133);
            let v139: string = string("vec![v135]");
            let v140: Vec<leptos::prelude::AnyView> = vec![v135];
            leptos::prelude::Fragment::new(v140)
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method237() -> Func0<string> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Global State");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method238() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn closure250(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_0(v0_1)
        }
        pub fn method240() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure250((), v))
        }
        pub fn closure251(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_1(v0_1)
        }
        pub fn method241() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure251((), v))
        }
        pub fn closure249(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v5: LrcPtr<Dice_ui::Heap2> = v0_1.clone();
            let v7: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v5).map_err(|x| x.to_string());
            let v8 = Dice_ui::method240();
            let v9 = Dice_ui::method241();
            let v10: Dice_ui::US70 = match &v7 {
                Err(v7_1_0) => v9(v7_1_0.clone()),
                Ok(v7_0_0) => v8(v7_0_0.clone()),
            };
            match &v10 {
                Dice_ui::US70::US70_0(v10_0_0) => {
                    fable_library_rust::String_::fromString(v10_0_0.clone())
                }
                Dice_ui::US70::US70_1(v10_1_0) => append(
                    (append(string("Error: "), (toString(v10_1_0.clone())))),
                    string(""),
                ),
            }
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure248(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9: leptos::prelude::ArcMemo<string> = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure249(v6.clone(), ())
                })()
            });
            let v11: string = leptos::prelude::ArcMemo::get(&v9);
            let v14 = {
                let clo = Func0::new(move || Dice_ui::closure252((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v15: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v14(())");
            let v17: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v26: &str = &*v11;
            let v59: std::string::String = String::from(v26);
            let v85: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v59));
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            let v92: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v90);
            let v94: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v92);
            let v97: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v17))),
                                string(">move || { v94 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v99: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v14(())>move || { v94 }</pre> };
            let v101: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v99);
            let v105: string = string("vec![v101]");
            let v106: Vec<leptos::prelude::AnyView> = vec![v101];
            leptos::prelude::Fragment::new(v106)
        }
        pub fn method239() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure248((), ()))
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method238();
            let v1 = Dice_ui::method239();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v13: string = append(
                (append((append(string(" "), (v11))), string(""))),
                string(""),
            );
            let v16 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v18: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v19: leptos::prelude::Fragment = v0_1();
            let v21: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v19);
            let v24: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v18))),
                                string(">move || { v21 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v21 }</dt> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())");
            let v31: leptos::prelude::Fragment = v1();
            let v33: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v31);
            let v36: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v30))),
                                string(">move || { v33 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v38: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v16(())>move || { v33 }</dd> };
            let v40: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v38);
            let v48: string = string("vec![v28, v40]");
            let v49: Vec<leptos::prelude::AnyView> = vec![v28, v40];
            let v51: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v49);
            let v53: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v51);
            let v56: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v13))),
                                string(">move || { v53 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v58: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v53 }</dl> };
            let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
            let v64: string = string("vec![v60]");
            let v65: Vec<leptos::prelude::AnyView> = vec![v60];
            leptos::prelude::Fragment::new(v65)
        }
        pub fn closure254(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v2: bool = true;
            leptos::prelude::WriteSignal::update(
                &v0_1,
                |x: &mut /*;
                 let v4: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v9: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method242(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure256(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str =
                Dice_ui::method242(if leptos::prelude::ReadSignal::get(&v0_1) {
                    let v4: string = string("r#\"\"#");
                    r#""#
                } else {
                    let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                    r#"bg-gray-300 hover:bg-gray-200"#
                });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure258(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure259(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method243(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure259((), ()))
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Settings");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Table View");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method244() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure262((), ()))
        }
        pub fn closure265(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure264(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l3.clone(),
                |x: &mut /*;
                 let v11: */
                 LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                        let v16: bool =
                                            */| {
                    *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure265((), v))(
                        x.clone(),
                    )
                },
            ); //;
            ()
        }
        pub fn closure266(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::ArcRwSignal::get(&v5.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method246(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure266(v0_1.clone(), ())
            })
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("table-view");
            String::from(v9)
        }
        pub fn method247() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure267((), ()))
        }
        pub fn closure263(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("table-view");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                    let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v124: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v135: &str = &*v124;
            let v168: std::string::String = String::from(v135);
            let v194: std::string::String = v168;
            let v199: string = string(" class=v194 for=move || v76()");
            let v202: bool = true;
            let v200 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure264(v0_1.clone(), v)
            }); //;
            let v203 = Dice_ui::method246(v0_1.clone());
            let v204 = Dice_ui::method247();
            let v205: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v217: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v203()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v200(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v204()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v205))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v219: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v203() on:change=move |event| v200(event) id=move || v204() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v221: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v219);
            let v222: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v223: string = append(
                (append((append(string(" "), (v222))), string(""))),
                string(""),
            );
            let v233: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v235: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v239: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v235))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v240: string = string("vec![]");
            let v241: Vec<leptos::prelude::AnyView> = vec![];
            let v243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v241);
            let v245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v243);
            let v248: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v239))),
                                string(">move || { v245 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v250: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v245 }</path> };
            let v252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v250);
            let v256: string = string("vec![v252]");
            let v257: Vec<leptos::prelude::AnyView> = vec![v252];
            let v259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v257);
            let v261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v259);
            let v264: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v233))),
                                string(">move || { v261 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v266: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v261 }</svg> };
            let v276: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v278: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v282: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v278))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v283: string = string("vec![]");
            let v284: Vec<leptos::prelude::AnyView> = vec![];
            let v286: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v284);
            let v288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v286);
            let v290: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v282))),
                                string(">move || { v288 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v292: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v288 }</path> };
            let v294: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v292);
            let v298: string = string("vec![v294]");
            let v299: Vec<leptos::prelude::AnyView> = vec![v294];
            let v301: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v299);
            let v303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v301);
            let v305: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v276))),
                                string(">move || { v303 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v307: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v303 }</svg> };
            let v309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v266);
            let v319: string = string("vec![v311, v309]");
            let v320: Vec<leptos::prelude::AnyView> = vec![v311, v309];
            let v322: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v320);
            let v324: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v322);
            let v327: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v223))),
                                string(">move || { v324 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v329: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v324 }</span> };
            let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
            let v332: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v333: string = append(
                (append((append(string(" "), (v332))), string(""))),
                string(""),
            );
            let v334: string = string("vec![]");
            let v335: Vec<leptos::prelude::AnyView> = vec![];
            let v337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v335);
            let v339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v337);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v333))),
                                string(">move || { v339 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v339 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v355: string = string("vec![v221, v331, v345]");
            let v356: Vec<leptos::prelude::AnyView> = vec![v221, v331, v345];
            let v358: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v356);
            let v360: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v358);
            let v363: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v199))),
                                string(">move || { v360 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v365: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v194 for=move || v76()>move || { v360 }</label> };
            let v367: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v365);
            let v371: string = string("vec![v367]");
            let v372: Vec<leptos::prelude::AnyView> = vec![v367];
            leptos::prelude::Fragment::new(v372)
        }
        pub fn method245(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure263(v0_1.clone(), ())
            })
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure269(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                (append(string("Transaction "), (toString((v0_1) + 1_i64)))),
                string(""),
            );
            let v10: &str = &*v1;
            let v43: std::string::String = String::from(v10);
            let v69: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v43));
            let v74: string = string("vec![v69]");
            let v75: Vec<leptos::prelude::AnyView> = vec![v69];
            leptos::prelude::Fragment::new(v75)
        }
        pub fn closure270(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Account");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method248() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure270((), ()))
        }
        pub fn closure271(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*v0_1;
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method249(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure271(v0_1.clone(), ())
            })
        }
        pub fn closure272(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure273(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure274(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Timestamp");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method250() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure274((), ()))
        }
        pub fn closure275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v20: i64 =
                (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v5))))
                    / 1000_i64;
            let v22: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v20);
            let v39: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method205(), v22));
            let v58: Dice_ui::US31 = match &v39 {
                Dice_ui::US68::US68_0(v39_0_0) => {
                    let v45: chrono::NaiveDateTime = match &v39 {
                        Dice_ui::US68::US68_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v47: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v45);
                    let v49: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v50: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v52: std::string::String = v47.format(v50).to_string();
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v52))
                }
                _ => Dice_ui::US31::US31_1,
            };
            let v64: Dice_ui::US69 = match &v58 {
                Dice_ui::US31::US31_0(v58_0_0) => Dice_ui::US69::US69_0(
                    match &v58 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => Dice_ui::US69::US69_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v69: string = match &v64 {
                Dice_ui::US69::US69_0(v64_0_0) => v64_0_0.clone(),
                Dice_ui::US69::US69_1(v64_1_0) => append(
                    (append(string("sm\'.to_string result / Error: "), (v64_1_0.clone()))),
                    string(""),
                ),
            };
            let v78: &str = &*v69;
            let v111: std::string::String = String::from(v78);
            let v137: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v111));
            let v142: string = string("vec![v137]");
            let v143: Vec<leptos::prelude::AnyView> = vec![v137];
            leptos::prelude::Fragment::new(v143)
        }
        pub fn method251(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure275(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure276(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Predecessor");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method252() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure278((), ()))
        }
        pub fn closure279(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method253(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure279(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure280(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure281(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure282(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receiver");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method254() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure282((), ()))
        }
        pub fn closure283(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method255(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure283(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure285(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure286(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Actions");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method256() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure286((), ()))
        }
        pub fn closure288(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == (v2.clone()) {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == (v2.clone()) {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == (v2.clone()) {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v20: &str = &*v11;
            let v53: std::string::String = String::from(v20);
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v53));
            let v84: string = string("vec![v79]");
            let v85: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v85)
        }
        pub fn method258(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure288(v0_1.clone(), ())
            })
        }
        pub fn closure290(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Method");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method260() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure290((), ()))
        }
        pub fn closure291(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v17: Dice_ui::US14 =
                defaultValue(Dice_ui::US14::US14_1, map(Dice_ui::method39(), v0_1));
            match &v17 {
                Dice_ui::US14::US14_0(v17_0_0) => {
                    let v23: string = fable_library_rust::String_::fromString(
                        match &v17 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v32: &str = &*v23;
                    let v65: std::string::String = String::from(v32);
                    let v91: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v65),
                    );
                    let v96: string = string("vec![v91]");
                    let v97: Vec<leptos::prelude::AnyView> = vec![v91];
                    leptos::prelude::Fragment::new(v97)
                }
                _ => {
                    let v109: &str = &*string("None");
                    let v142: std::string::String = String::from(v109);
                    let v168: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v142),
                    );
                    let v173: string = string("vec![v168]");
                    let v174: Vec<leptos::prelude::AnyView> = vec![v168];
                    leptos::prelude::Fragment::new(v174)
                }
            }
        }
        pub fn method261(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure291(v0_1.clone(), ())
            })
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure294(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure289(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method260();
            let v5 = Dice_ui::method261(v0_1);
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure292((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11 = {
                let clo_1 = Func0::new(move || Dice_ui::closure293((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v19 = {
                let clo_3 = Func0::new(move || Dice_ui::closure294((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
            let v75: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v72 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v72 }</div> };
            let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
            let v83: string = string("vec![v79]");
            let v84: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v84)
        }
        pub fn method259(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure289(v0_1.clone(), ())
            })
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure298(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure287(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v15: bool = true;
            let _vec_map : Vec<_> = v13.into_iter().map(|x| { //;
            let patternInput:
                    (std::string::String, Option<std::string::String>) = x;
            let v19 = Dice_ui::method258(patternInput.0.clone());
            let v20 = Dice_ui::method259(patternInput.1.clone());
            let v23 =
                {
                    let clo = Func0::new(move || Dice_ui::closure295((), ()));
                    Func1::new({
                                   let clo = clo.clone();
                                   move |arg: ()| clo()
                               })
                };
            let v26 =
                {
                    let clo_1 =
                        Func0::new(move || Dice_ui::closure296((), ()));
                    Func1::new({
                                   let clo_1 = clo_1.clone();
                                   move |arg_1: ()| clo_1()
                               })
                };
            let v29 =
                {
                    let clo_2 =
                        Func0::new(move || Dice_ui::closure297((), ()));
                    Func1::new({
                                   let clo_2 = clo_2.clone();
                                   move |arg_2: ()| clo_2()
                               })
                };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())");
            let v32: string =
                append((append((append(string(" "), (v30))), string(""))),
                       string(""));
            let v35 =
                {
                    let clo_3 =
                        Func0::new(move || Dice_ui::closure298((), ()));
                    Func1::new({
                                   let clo_3 = clo_3.clone();
                                   move |arg_3: ()| clo_3()
                               })
                };
            let v37: string =
                string(" class=\"[font-size:12px] text-gray-400\"");
            let v38: leptos::prelude::Fragment = v19();
            let v40: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v38);
            let v43: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dt "),
                                                               (v37))),
                                                       string(">move || { v40 }</"))),
                                               string("dt"))),
                                       string(">"))))), string(" }"));
            let v45:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v40 }</dt> };
            let v47: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v45);
            let v49: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())");
            let v50: leptos::prelude::Fragment = v20();
            let v52: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v50);
            let v55: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dd "),
                                                               (v49))),
                                                       string(">move || { v52 }</"))),
                                               string("dd"))),
                                       string(">"))))), string(" }"));
            let v57:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v35(())>move || { v52 }</dd> };
            let v59: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v57);
            let v67: string = string("vec![v47, v59]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v47, v59];
            let v70: leptos::prelude::Fragment =
                leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v70);
            let v75: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dl "),
                                                               (v32))),
                                                       string(">move || { v72 }</"))),
                                               string("dl"))),
                                       string(">"))))), string(" }"));
            let v77:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v26(()) + " " + &v23(())>move || { v72 }</dl> };
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v77);
            let v81: bool = true; v79 }).collect::<Vec<_>>();
            let v83: Vec<leptos::prelude::AnyView> = _vec_map;
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method257(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure287(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure299(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure301(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure302(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Deposit");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method262() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure302((), ()))
        }
        pub fn closure303(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v8);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method263(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure303(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure304(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Outcome Status");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method264() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure306((), ()))
        }
        pub fn closure307(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = ofBoolean(v9);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method265(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure307(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure309(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure310(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Fee");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method266() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure310((), ()))
        }
        pub fn closure311(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v10);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method267(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure311(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure313(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Height");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method268() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure314((), ()))
        }
        pub fn closure315(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v6);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method269(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure315(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure316(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure317(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure318(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Hash");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method270() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure318((), ()))
        }
        pub fn closure319(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method271(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure319(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Hash");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method272() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure323(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method273(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure323(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure324(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure325(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receipt ID");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method274() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure326((), ()))
        }
        pub fn closure327(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure327(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure328(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure329(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure330(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Logs");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method276() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure330((), ()))
        }
        pub fn method278(
            v0_1: Func1<std::string::String, string>,
        ) -> Func1<std::string::String, string> {
            v0_1
        }
        pub fn closure332(
            v0_1: Func1<std::string::String, string>,
            v1: std::string::String,
        ) -> string {
            let v2: Func1<std::string::String, string> = Dice_ui::method278(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method279() -> string {
            string("\n")
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure331(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: std::string::String = value;
                let v20: string = fable_library_rust::String_::fromString(v18);
                let v23: bool = true;
                v20 /*;
                    let v25: bool = */
            }); //;
            let v27: Func1<std::string::String, string> = _func1_from_v14;
            let v30: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v27 = v27.clone();
                        move |v: std::string::String| Dice_ui::closure332(v27.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v34: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v30.clone()));
            let v47: string = replace(
                join(Dice_ui::method279(), toArray(v34)),
                string("\\n"),
                string("\n"),
            );
            let v50 = {
                let clo = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v51: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v50(())");
            let v53: string = append(
                (append((append(string(" "), (v51))), string(""))),
                string(""),
            );
            let v62: &str = &*v47;
            let v95: std::string::String = String::from(v62);
            let v121: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v95));
            let v125: string = string("vec![v121]");
            let v126: Vec<leptos::prelude::AnyView> = vec![v121];
            let v128: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v126);
            let v130: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v128);
            let v133: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v53))),
                                string(">move || { v130 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v135: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v50(())>move || { v130 }</pre> };
            let v137: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v135);
            let v141: string = string("vec![v137]");
            let v142: Vec<leptos::prelude::AnyView> = vec![v137];
            leptos::prelude::Fragment::new(v142)
        }
        pub fn method277(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure331(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method281(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method281: loop {
                break '_method281 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if (length(fable_library_rust::String_::fromString(v4))) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method281;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method280(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method280: loop {
                break '_method280 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    if Dice_ui::method281(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method280;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure260(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v144: leptos::prelude::AnyView = if leptos::prelude::ReadSignal::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v10: string = string(" class=\"flex items-center pb-[6px]\"");
                let v12: string = string(" class=\"pr-[15px] [font-size:13px]\"");
                let v16: Func0<leptos::prelude::Fragment> =
                    Dice_ui::method195(Func0::new(move || {
                        Func0::new(move || Dice_ui::closure261((), ()))()
                    }));
                let v18: leptos::prelude::Fragment = (move || v16())();
                let v20: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v18);
                let v23: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v12))),
                                    string(">move || { v20 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v25: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v20 }</span> };
                let v27: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v25);
                let v29: string = string(" class=\"h-px flex-1 bg-gray-300\"");
                let v30: string = string("vec![]");
                let v31: Vec<leptos::prelude::AnyView> = vec![];
                let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
                let v35: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v33);
                let v37: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v29))),
                                    string(">move || { v35 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v35 }</span> };
                let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
                let v49: string = string("vec![v27, v41]");
                let v50: Vec<leptos::prelude::AnyView> = vec![v27, v41];
                let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
                let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
                let v56: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v10))),
                                    string(">move || { v54 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v58: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v54 }</span> };
                let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
                let v61 = Dice_ui::method244();
                let v62 = Dice_ui::method245(v0_1.clone());
                let v65 = {
                    let clo = Func0::new(move || Dice_ui::closure268((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v68 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v71 = {
                    let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v72: string =
                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v71(()) + \" \" + &v68(()) + \" \" + &v65(())");
                let v73: string = append(
                    (append((append(string(" "), (v72))), string(""))),
                    string(""),
                );
                let v76 = {
                    let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v78: string = string(" class=\"[font-size:12px] text-gray-400\"");
                let v79: leptos::prelude::Fragment = v61();
                let v81: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v79);
                let v84: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dt "), (v78))),
                                    string(">move || { v81 }</"),
                                )),
                                string("dt"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v86: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v81 }</dt> };
                let v88: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v86);
                let v90: string =
                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v76(())");
                let v91: leptos::prelude::Fragment = v62();
                let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
                let v96: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dd "), (v90))),
                                    string(">move || { v93 }</"),
                                )),
                                string("dd"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v98: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v76(())>move || { v93 }</dd> };
                let v100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v98);
                let v107: string = string("vec![v88, v100]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v88, v100];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dl "), (v73))),
                                    string(">move || { v112 }</"),
                                )),
                                string("dl"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v71(()) + " " + &v68(()) + " " + &v65(())>move || { v112 }</dl> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v126: string = string("vec![v60, v119]");
                let v127: Vec<leptos::prelude::AnyView> = vec![v60, v119];
                let v129: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v127);
                let v131: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v129);
                let v134: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v8))),
                                    string(">move || { v131 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v136: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v131 }</div> };
                leptos::prelude::IntoAny::into_any(v136)
            } else {
                let v140: string = string("vec![]");
                let v141: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v141)
            };
            let v146: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v4581: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v146.clone()),
            ) as u64)
                == 0_u64
            {
                let v153: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v155: string = string(" class=\"[height:17px]\"");
                let v169: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v175: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v176: string = string("vec![]");
                let v177: Vec<leptos::prelude::AnyView> = vec![];
                let v179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v177);
                let v181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v179);
                let v184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v175))),
                                    string(">move || { v181 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v181 }</path> };
                let v188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v186);
                let v192: string = string("vec![v188]");
                let v193: Vec<leptos::prelude::AnyView> = vec![v188];
                let v195: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v193);
                let v197: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v195);
                let v200: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v169))),
                                    string(">move || { v197 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v202: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v197 }</svg> };
                let v204: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v202);
                let v208: string = string("vec![v204]");
                let v209: Vec<leptos::prelude::AnyView> = vec![v204];
                let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
                let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
                let v216: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v155))),
                                    string(">move || { v213 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v218: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v213 }</span> };
                let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
                let v222: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v232: &str = &*string("No account selected");
                let v265: std::string::String = String::from(v232);
                let v291: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v265));
                let v295: string = string("vec![v291]");
                let v296: Vec<leptos::prelude::AnyView> = vec![v291];
                let v298: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v296);
                let v300: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v298);
                let v303: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v222))),
                                    string(">move || { v300 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v305: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v300 }</pre> };
                let v307: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v305);
                let v315: string = string("vec![v220, v307]");
                let v316: Vec<leptos::prelude::AnyView> = vec![v220, v307];
                let v318: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v316);
                let v320: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v318);
                let v323: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v153))),
                                    string(">move || { v320 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v325: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v320 }</div> };
                leptos::prelude::IntoAny::into_any(v325)
            } else {
                let v329: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v330 = Dice_ui::method138();
                let v331 = Dice_ui::method139();
                let v332: Dice_ui::US53 = match &v329 {
                    Err(v329_1_0) => v331(v329_1_0.clone()),
                    Ok(v329_0_0) => v330(v329_0_0.clone()),
                };
                let v358: Dice_ui::US46 = match &v332 {
                    Dice_ui::US53::US53_0(v332_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v332_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v332_1_0) => Dice_ui::US46::US46_1(v332_1_0.clone()),
                };
                match &v358 {
                    Dice_ui::US46::US46_0(v358_0_0) => {
                        let v359: Dice_ui::US47 = v358_0_0.clone();
                        if let Dice_ui::US47::US47_0(v359_0_0) = &v359 {
                            let v360: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v359_0_0.clone();
                            let v363: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v0_1.l0.clone());
                            let v365: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v363);
                            if if let Dice_ui::US1::US1_0 =
                                &(leptos::prelude::ArcRwSignal::get(&v365.l3.clone())).l4
                            {
                                true
                            } else {
                                false
                            } {
                                let v371: string =
                                        string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                let v373: string = append(
                                    (append((append(string(" "), (v371))), string(""))),
                                    string(""),
                                );
                                let v375: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v360.clone().to_vec();
                                let v377: bool = true;
                                let _vec_map : Vec<_> = v375.into_iter().map(|x| { //;
                                    let patternInput:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v381: LrcPtr<Dice_ui::Heap5> =
                                        patternInput.2.clone();
                                    let v382: std::string::String =
                                        v381.l0.clone();
                                    let v383: std::string::String =
                                        v381.l1.clone();
                                    let v384: std::string::String =
                                        v381.l2.clone();
                                    let v385: std::string::String =
                                        v381.l3.clone();
                                    let v386: std::string::String =
                                        v381.l4.clone();
                                    let v387: std::string::String =
                                        v381.l5.clone();
                                    let v388: u32 = v381.l6;
                                    let v389:
                                            Array<(std::string::String,
                                                   Option<std::string::String>)> =
                                        v381.l7.clone();
                                    let v390: f64 = v381.l8;
                                    let v391: bool = v381.l9;
                                    let v392: f64 = v381.l10;
                                    let v393: Array<std::string::String> =
                                        v381.l11.clone();
                                    let v396: i64 =
                                        patternInput.1.clone() as i64;
                                    let v401: bool =
                                        true; leptos::logging::log!("{}", string("transaction.render (1)"));
                                    let v403: Option<LrcPtr<Dice_ui::Heap2>> =
                                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                                    let v405: LrcPtr<Dice_ui::Heap2> =
                                        v403.unwrap();
                                    let v407: string =
                                        string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                                    let v409: string =
                                        string(" class=\"flex items-center pb-[6px]\"");
                                    let v411: string =
                                        string(" class=\"pr-[15px] [font-size:13px]\"");
                                    let v415:
                                            Func0<leptos::prelude::Fragment> =
                                        Dice_ui::method195(Func0::new(move || Func0::new({
                                                                                             let v396
                                                                                                 =
                                                                                                 v396.clone();
                                                                                             move
                                                                                                 ||
                                                                                                 Dice_ui::closure269(v396,
                                                                                                                     ())
                                                                                         })()));
                                    let v417: leptos::prelude::Fragment =
                                        (move || v415())();
                                    let v419: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v417);
                                    let v422: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v411))),
                                                                               string(">move || { v419 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v424:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v419 }</span> };
                                    let v426: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v424);
                                    let v428: string =
                                        string(" class=\"h-px flex-1 bg-gray-300\"");
                                    let v429: string = string("vec![]");
                                    let v430: Vec<leptos::prelude::AnyView> =
                                        vec![];
                                    let v432: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v430);
                                    let v434: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v432);
                                    let v436: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v428))),
                                                                               string(">move || { v434 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v438:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v434 }</span> };
                                    let v440: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v438);
                                    let v448: string =
                                        string("vec![v426, v440]");
                                    let v449: Vec<leptos::prelude::AnyView> =
                                        vec![v426, v440];
                                    let v451: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v449);
                                    let v453: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v451);
                                    let v455: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v409))),
                                                                               string(">move || { v453 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v457:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v453 }</span> };
                                    let v459: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v457);
                                    let v461: string =
                                        string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
                                    let v462 = Dice_ui::method248();
                                    let v463 =
                                        Dice_ui::method249(patternInput.0.clone());
                                    let v466 =
                                        {
                                            let clo_4 =
                                                Func0::new(move ||
                                                               Dice_ui::closure272((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_4 =
                                                               clo_4.clone();
                                                           move |arg_4: ()|
                                                               clo_4()
                                                       })
                                        };
                                    let v469 =
                                        {
                                            let clo_5 =
                                                Func0::new(move ||
                                                               Dice_ui::closure273((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_5 =
                                                               clo_5.clone();
                                                           move |arg_5: ()|
                                                               clo_5()
                                                       })
                                        };
                                    fn v471() -> string {
                                        Dice_ui::closure235((), ())
                                    }
                                    let v472 =
                                        {
                                            let clo_6 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_6 =
                                                               clo_6.clone();
                                                           move |arg_6: ()|
                                                               clo_6()
                                                       })
                                        };
                                    let v473: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v472(()) + \" \" + &v469(()) + \" \" + &v466(())");
                                    let v474: string =
                                        append((append((append(string(" "),
                                                               (v473))),
                                                       string(""))),
                                               string(""));
                                    fn v476() -> string {
                                        Dice_ui::closure236((), ())
                                    }
                                    let v477 =
                                        {
                                            let clo_7 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_7 =
                                                               clo_7.clone();
                                                           move |arg_7: ()|
                                                               clo_7()
                                                       })
                                        };
                                    let v479: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v480: leptos::prelude::Fragment =
                                        v462();
                                    let v482: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v480);
                                    let v485: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v479))),
                                                                               string(">move || { v482 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v487:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v482 }</dt> };
                                    let v489: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v487);
                                    let v491: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v477(())");
                                    let v492: leptos::prelude::Fragment =
                                        v463();
                                    let v494: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v492);
                                    let v497: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v491))),
                                                                               string(">move || { v494 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v499:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v477(())>move || { v494 }</dd> };
                                    let v501: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v499);
                                    let v508: string =
                                        string("vec![v489, v501]");
                                    let v509: Vec<leptos::prelude::AnyView> =
                                        vec![v489, v501];
                                    let v511: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v509);
                                    let v513: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v511);
                                    let v516: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v474))),
                                                                               string(">move || { v513 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v518:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v472(()) + " " + &v469(()) + " " + &v466(())>move || { v513 }</dl> };
                                    let v520: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v518);
                                    let v521 = Dice_ui::method250();
                                    let v522 =
                                        Dice_ui::method251(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v525 =
                                        {
                                            let clo_8 =
                                                Func0::new(move ||
                                                               Dice_ui::closure276((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_8 =
                                                               clo_8.clone();
                                                           move |arg_8: ()|
                                                               clo_8()
                                                       })
                                        };
                                    let v528 =
                                        {
                                            let clo_9 =
                                                Func0::new(move ||
                                                               Dice_ui::closure277((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_9 =
                                                               clo_9.clone();
                                                           move |arg_9: ()|
                                                               clo_9()
                                                       })
                                        };
                                    let v530 =
                                        {
                                            let clo_10 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_10 =
                                                               clo_10.clone();
                                                           move |arg_10: ()|
                                                               clo_10()
                                                       })
                                        };
                                    let v531: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v530(()) + \" \" + &v528(()) + \" \" + &v525(())");
                                    let v532: string =
                                        append((append((append(string(" "),
                                                               (v531))),
                                                       string(""))),
                                               string(""));
                                    let v534 =
                                        {
                                            let clo_11 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_11 =
                                                               clo_11.clone();
                                                           move |arg_11: ()|
                                                               clo_11()
                                                       })
                                        };
                                    let v536: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v537: leptos::prelude::Fragment =
                                        v521();
                                    let v539: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v537);
                                    let v541: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v536))),
                                                                               string(">move || { v539 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v543:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v539 }</dt> };
                                    let v545: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v543);
                                    let v547: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v534(())");
                                    let v548: leptos::prelude::Fragment =
                                        v522();
                                    let v550: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v548);
                                    let v552: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v547))),
                                                                               string(">move || { v550 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v554:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v534(())>move || { v550 }</dd> };
                                    let v556: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v554);
                                    let v563: string =
                                        string("vec![v545, v556]");
                                    let v564: Vec<leptos::prelude::AnyView> =
                                        vec![v545, v556];
                                    let v566: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v564);
                                    let v568: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v566);
                                    let v570: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v532))),
                                                                               string(">move || { v568 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v572:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v530(()) + " " + &v528(()) + " " + &v525(())>move || { v568 }</dl> };
                                    let v574: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v572);
                                    let v575 = Dice_ui::method252();
                                    let v576 =
                                        Dice_ui::method253(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v579 =
                                        {
                                            let clo_12 =
                                                Func0::new(move ||
                                                               Dice_ui::closure280((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_12 =
                                                               clo_12.clone();
                                                           move |arg_12: ()|
                                                               clo_12()
                                                       })
                                        };
                                    let v582 =
                                        {
                                            let clo_13 =
                                                Func0::new(move ||
                                                               Dice_ui::closure281((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_13 =
                                                               clo_13.clone();
                                                           move |arg_13: ()|
                                                               clo_13()
                                                       })
                                        };
                                    let v584 =
                                        {
                                            let clo_14 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_14 =
                                                               clo_14.clone();
                                                           move |arg_14: ()|
                                                               clo_14()
                                                       })
                                        };
                                    let v585: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v584(()) + \" \" + &v582(()) + \" \" + &v579(())");
                                    let v586: string =
                                        append((append((append(string(" "),
                                                               (v585))),
                                                       string(""))),
                                               string(""));
                                    let v588 =
                                        {
                                            let clo_15 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_15 =
                                                               clo_15.clone();
                                                           move |arg_15: ()|
                                                               clo_15()
                                                       })
                                        };
                                    let v590: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v591: leptos::prelude::Fragment =
                                        v575();
                                    let v593: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v591);
                                    let v595: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v590))),
                                                                               string(">move || { v593 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v597:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v593 }</dt> };
                                    let v599: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v597);
                                    let v601: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v588(())");
                                    let v602: leptos::prelude::Fragment =
                                        v576();
                                    let v604: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v602);
                                    let v606: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v601))),
                                                                               string(">move || { v604 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v608:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v588(())>move || { v604 }</dd> };
                                    let v610: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v608);
                                    let v617: string =
                                        string("vec![v599, v610]");
                                    let v618: Vec<leptos::prelude::AnyView> =
                                        vec![v599, v610];
                                    let v620: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v618);
                                    let v622: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v620);
                                    let v624: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v586))),
                                                                               string(">move || { v622 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v626:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v584(()) + " " + &v582(()) + " " + &v579(())>move || { v622 }</dl> };
                                    let v628: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v626);
                                    let v629 = Dice_ui::method254();
                                    let v630 =
                                        Dice_ui::method255(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v633 =
                                        {
                                            let clo_16 =
                                                Func0::new(move ||
                                                               Dice_ui::closure284((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_16 =
                                                               clo_16.clone();
                                                           move |arg_16: ()|
                                                               clo_16()
                                                       })
                                        };
                                    let v636 =
                                        {
                                            let clo_17 =
                                                Func0::new(move ||
                                                               Dice_ui::closure285((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_17 =
                                                               clo_17.clone();
                                                           move |arg_17: ()|
                                                               clo_17()
                                                       })
                                        };
                                    let v638 =
                                        {
                                            let clo_18 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_18 =
                                                               clo_18.clone();
                                                           move |arg_18: ()|
                                                               clo_18()
                                                       })
                                        };
                                    let v639: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v638(()) + \" \" + &v636(()) + \" \" + &v633(())");
                                    let v640: string =
                                        append((append((append(string(" "),
                                                               (v639))),
                                                       string(""))),
                                               string(""));
                                    let v642 =
                                        {
                                            let clo_19 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_19 =
                                                               clo_19.clone();
                                                           move |arg_19: ()|
                                                               clo_19()
                                                       })
                                        };
                                    let v644: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v645: leptos::prelude::Fragment =
                                        v629();
                                    let v647: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v645);
                                    let v649: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v644))),
                                                                               string(">move || { v647 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v651:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v647 }</dt> };
                                    let v653: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v651);
                                    let v655: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v642(())");
                                    let v656: leptos::prelude::Fragment =
                                        v630();
                                    let v658: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v656);
                                    let v660: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v655))),
                                                                               string(">move || { v658 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v662:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v642(())>move || { v658 }</dd> };
                                    let v664: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v662);
                                    let v671: string =
                                        string("vec![v653, v664]");
                                    let v672: Vec<leptos::prelude::AnyView> =
                                        vec![v653, v664];
                                    let v674: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v672);
                                    let v676: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v674);
                                    let v678: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v640))),
                                                                               string(">move || { v676 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v680:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v638(()) + " " + &v636(()) + " " + &v633(())>move || { v676 }</dl> };
                                    let v682: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v680);
                                    let v683 = Dice_ui::method256();
                                    let v684 =
                                        Dice_ui::method257(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v687 =
                                        {
                                            let clo_20 =
                                                Func0::new(move ||
                                                               Dice_ui::closure299((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_20 =
                                                               clo_20.clone();
                                                           move |arg_20: ()|
                                                               clo_20()
                                                       })
                                        };
                                    let v690 =
                                        {
                                            let clo_21 =
                                                Func0::new(move ||
                                                               Dice_ui::closure300((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_21 =
                                                               clo_21.clone();
                                                           move |arg_21: ()|
                                                               clo_21()
                                                       })
                                        };
                                    let v692 =
                                        {
                                            let clo_22 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_22 =
                                                               clo_22.clone();
                                                           move |arg_22: ()|
                                                               clo_22()
                                                       })
                                        };
                                    let v693: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v692(()) + \" \" + &v690(()) + \" \" + &v687(())");
                                    let v694: string =
                                        append((append((append(string(" "),
                                                               (v693))),
                                                       string(""))),
                                               string(""));
                                    let v697 =
                                        {
                                            let clo_23 =
                                                Func0::new(move ||
                                                               Dice_ui::closure301((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_23 =
                                                               clo_23.clone();
                                                           move |arg_23: ()|
                                                               clo_23()
                                                       })
                                        };
                                    let v699: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v700: leptos::prelude::Fragment =
                                        v683();
                                    let v702: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v700);
                                    let v704: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v699))),
                                                                               string(">move || { v702 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v706:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v702 }</dt> };
                                    let v708: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v706);
                                    let v710: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v697(())");
                                    let v711: leptos::prelude::Fragment =
                                        v684();
                                    let v713: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v711);
                                    let v715: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v710))),
                                                                               string(">move || { v713 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v717:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v697(())>move || { v713 }</dd> };
                                    let v719: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v717);
                                    let v726: string =
                                        string("vec![v708, v719]");
                                    let v727: Vec<leptos::prelude::AnyView> =
                                        vec![v708, v719];
                                    let v729: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v727);
                                    let v731: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v729);
                                    let v733: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v694))),
                                                                               string(">move || { v731 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v735:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v692(()) + " " + &v690(()) + " " + &v687(())>move || { v731 }</dl> };
                                    let v737: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v735);
                                    let v738 = Dice_ui::method262();
                                    let v739 =
                                        Dice_ui::method263(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v742 =
                                        {
                                            let clo_24 =
                                                Func0::new(move ||
                                                               Dice_ui::closure304((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_24 =
                                                               clo_24.clone();
                                                           move |arg_24: ()|
                                                               clo_24()
                                                       })
                                        };
                                    let v745 =
                                        {
                                            let clo_25 =
                                                Func0::new(move ||
                                                               Dice_ui::closure305((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_25 =
                                                               clo_25.clone();
                                                           move |arg_25: ()|
                                                               clo_25()
                                                       })
                                        };
                                    let v747 =
                                        {
                                            let clo_26 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_26 =
                                                               clo_26.clone();
                                                           move |arg_26: ()|
                                                               clo_26()
                                                       })
                                        };
                                    let v748: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v747(()) + \" \" + &v745(()) + \" \" + &v742(())");
                                    let v749: string =
                                        append((append((append(string(" "),
                                                               (v748))),
                                                       string(""))),
                                               string(""));
                                    let v751 =
                                        {
                                            let clo_27 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_27 =
                                                               clo_27.clone();
                                                           move |arg_27: ()|
                                                               clo_27()
                                                       })
                                        };
                                    let v753: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v754: leptos::prelude::Fragment =
                                        v738();
                                    let v756: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v754);
                                    let v758: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v753))),
                                                                               string(">move || { v756 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v760:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v756 }</dt> };
                                    let v762: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v760);
                                    let v764: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v751(())");
                                    let v765: leptos::prelude::Fragment =
                                        v739();
                                    let v767: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v765);
                                    let v769: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v764))),
                                                                               string(">move || { v767 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v771:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v751(())>move || { v767 }</dd> };
                                    let v773: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v771);
                                    let v780: string =
                                        string("vec![v762, v773]");
                                    let v781: Vec<leptos::prelude::AnyView> =
                                        vec![v762, v773];
                                    let v783: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v781);
                                    let v785: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v783);
                                    let v787: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v749))),
                                                                               string(">move || { v785 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v789:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v747(()) + " " + &v745(()) + " " + &v742(())>move || { v785 }</dl> };
                                    let v791: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v789);
                                    let v792 = Dice_ui::method264();
                                    let v793 =
                                        Dice_ui::method265(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v796 =
                                        {
                                            let clo_28 =
                                                Func0::new(move ||
                                                               Dice_ui::closure308((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_28 =
                                                               clo_28.clone();
                                                           move |arg_28: ()|
                                                               clo_28()
                                                       })
                                        };
                                    let v799 =
                                        {
                                            let clo_29 =
                                                Func0::new(move ||
                                                               Dice_ui::closure309((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_29 =
                                                               clo_29.clone();
                                                           move |arg_29: ()|
                                                               clo_29()
                                                       })
                                        };
                                    let v801 =
                                        {
                                            let clo_30 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_30 =
                                                               clo_30.clone();
                                                           move |arg_30: ()|
                                                               clo_30()
                                                       })
                                        };
                                    let v802: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v801(()) + \" \" + &v799(()) + \" \" + &v796(())");
                                    let v803: string =
                                        append((append((append(string(" "),
                                                               (v802))),
                                                       string(""))),
                                               string(""));
                                    let v805 =
                                        {
                                            let clo_31 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_31 =
                                                               clo_31.clone();
                                                           move |arg_31: ()|
                                                               clo_31()
                                                       })
                                        };
                                    let v807: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v808: leptos::prelude::Fragment =
                                        v792();
                                    let v810: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v808);
                                    let v812: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v807))),
                                                                               string(">move || { v810 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v814:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v810 }</dt> };
                                    let v816: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v814);
                                    let v818: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v805(())");
                                    let v819: leptos::prelude::Fragment =
                                        v793();
                                    let v821: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v819);
                                    let v823: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v818))),
                                                                               string(">move || { v821 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v825:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v805(())>move || { v821 }</dd> };
                                    let v827: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v825);
                                    let v834: string =
                                        string("vec![v816, v827]");
                                    let v835: Vec<leptos::prelude::AnyView> =
                                        vec![v816, v827];
                                    let v837: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v835);
                                    let v839: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v837);
                                    let v841: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v803))),
                                                                               string(">move || { v839 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v843:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v801(()) + " " + &v799(()) + " " + &v796(())>move || { v839 }</dl> };
                                    let v845: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v843);
                                    let v846 = Dice_ui::method266();
                                    let v847 =
                                        Dice_ui::method267(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v850 =
                                        {
                                            let clo_32 =
                                                Func0::new(move ||
                                                               Dice_ui::closure312((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_32 =
                                                               clo_32.clone();
                                                           move |arg_32: ()|
                                                               clo_32()
                                                       })
                                        };
                                    let v853 =
                                        {
                                            let clo_33 =
                                                Func0::new(move ||
                                                               Dice_ui::closure313((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_33 =
                                                               clo_33.clone();
                                                           move |arg_33: ()|
                                                               clo_33()
                                                       })
                                        };
                                    let v855 =
                                        {
                                            let clo_34 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_34 =
                                                               clo_34.clone();
                                                           move |arg_34: ()|
                                                               clo_34()
                                                       })
                                        };
                                    let v856: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v855(()) + \" \" + &v853(()) + \" \" + &v850(())");
                                    let v857: string =
                                        append((append((append(string(" "),
                                                               (v856))),
                                                       string(""))),
                                               string(""));
                                    let v859 =
                                        {
                                            let clo_35 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_35 =
                                                               clo_35.clone();
                                                           move |arg_35: ()|
                                                               clo_35()
                                                       })
                                        };
                                    let v861: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v862: leptos::prelude::Fragment =
                                        v846();
                                    let v864: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v862);
                                    let v866: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v861))),
                                                                               string(">move || { v864 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v868:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v864 }</dt> };
                                    let v870: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v868);
                                    let v872: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v859(())");
                                    let v873: leptos::prelude::Fragment =
                                        v847();
                                    let v875: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v873);
                                    let v877: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v872))),
                                                                               string(">move || { v875 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v879:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v859(())>move || { v875 }</dd> };
                                    let v881: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v879);
                                    let v888: string =
                                        string("vec![v870, v881]");
                                    let v889: Vec<leptos::prelude::AnyView> =
                                        vec![v870, v881];
                                    let v891: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v889);
                                    let v893: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v891);
                                    let v895: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v857))),
                                                                               string(">move || { v893 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v897:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v855(()) + " " + &v853(()) + " " + &v850(())>move || { v893 }</dl> };
                                    let v899: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v897);
                                    let v900 = Dice_ui::method268();
                                    let v901 =
                                        Dice_ui::method269(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v904 =
                                        {
                                            let clo_36 =
                                                Func0::new(move ||
                                                               Dice_ui::closure316((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_36 =
                                                               clo_36.clone();
                                                           move |arg_36: ()|
                                                               clo_36()
                                                       })
                                        };
                                    let v907 =
                                        {
                                            let clo_37 =
                                                Func0::new(move ||
                                                               Dice_ui::closure317((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_37 =
                                                               clo_37.clone();
                                                           move |arg_37: ()|
                                                               clo_37()
                                                       })
                                        };
                                    let v909 =
                                        {
                                            let clo_38 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_38 =
                                                               clo_38.clone();
                                                           move |arg_38: ()|
                                                               clo_38()
                                                       })
                                        };
                                    let v910: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v909(()) + \" \" + &v907(()) + \" \" + &v904(())");
                                    let v911: string =
                                        append((append((append(string(" "),
                                                               (v910))),
                                                       string(""))),
                                               string(""));
                                    let v913 =
                                        {
                                            let clo_39 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_39 =
                                                               clo_39.clone();
                                                           move |arg_39: ()|
                                                               clo_39()
                                                       })
                                        };
                                    let v915: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v916: leptos::prelude::Fragment =
                                        v900();
                                    let v918: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v916);
                                    let v920: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v915))),
                                                                               string(">move || { v918 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v922:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v918 }</dt> };
                                    let v924: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v922);
                                    let v926: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v913(())");
                                    let v927: leptos::prelude::Fragment =
                                        v901();
                                    let v929: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v927);
                                    let v931: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v926))),
                                                                               string(">move || { v929 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v933:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v913(())>move || { v929 }</dd> };
                                    let v935: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v933);
                                    let v942: string =
                                        string("vec![v924, v935]");
                                    let v943: Vec<leptos::prelude::AnyView> =
                                        vec![v924, v935];
                                    let v945: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v943);
                                    let v947: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v945);
                                    let v949: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v911))),
                                                                               string(">move || { v947 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v951:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v909(()) + " " + &v907(()) + " " + &v904(())>move || { v947 }</dl> };
                                    let v953: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v951);
                                    let v954 = Dice_ui::method270();
                                    let v955 =
                                        Dice_ui::method271(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v958 =
                                        {
                                            let clo_40 =
                                                Func0::new(move ||
                                                               Dice_ui::closure320((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_40 =
                                                               clo_40.clone();
                                                           move |arg_40: ()|
                                                               clo_40()
                                                       })
                                        };
                                    let v961 =
                                        {
                                            let clo_41 =
                                                Func0::new(move ||
                                                               Dice_ui::closure321((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_41 =
                                                               clo_41.clone();
                                                           move |arg_41: ()|
                                                               clo_41()
                                                       })
                                        };
                                    let v963 =
                                        {
                                            let clo_42 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_42 =
                                                               clo_42.clone();
                                                           move |arg_42: ()|
                                                               clo_42()
                                                       })
                                        };
                                    let v964: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v963(()) + \" \" + &v961(()) + \" \" + &v958(())");
                                    let v965: string =
                                        append((append((append(string(" "),
                                                               (v964))),
                                                       string(""))),
                                               string(""));
                                    let v967 =
                                        {
                                            let clo_43 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_43 =
                                                               clo_43.clone();
                                                           move |arg_43: ()|
                                                               clo_43()
                                                       })
                                        };
                                    let v969: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v970: leptos::prelude::Fragment =
                                        v954();
                                    let v972: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v970);
                                    let v974: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v969))),
                                                                               string(">move || { v972 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v976:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v972 }</dt> };
                                    let v978: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v976);
                                    let v980: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v967(())");
                                    let v981: leptos::prelude::Fragment =
                                        v955();
                                    let v983: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v981);
                                    let v985: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v980))),
                                                                               string(">move || { v983 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v987:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v967(())>move || { v983 }</dd> };
                                    let v989: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v987);
                                    let v996: string =
                                        string("vec![v978, v989]");
                                    let v997: Vec<leptos::prelude::AnyView> =
                                        vec![v978, v989];
                                    let v999: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v997);
                                    let v1001: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v999);
                                    let v1003: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v965))),
                                                                               string(">move || { v1001 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1005:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v963(()) + " " + &v961(()) + " " + &v958(())>move || { v1001 }</dl> };
                                    let v1007: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1005);
                                    let v1008 = Dice_ui::method272();
                                    let v1009 =
                                        Dice_ui::method273(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v1012 =
                                        {
                                            let clo_44 =
                                                Func0::new(move ||
                                                               Dice_ui::closure324((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_44 =
                                                               clo_44.clone();
                                                           move |arg_44: ()|
                                                               clo_44()
                                                       })
                                        };
                                    let v1015 =
                                        {
                                            let clo_45 =
                                                Func0::new(move ||
                                                               Dice_ui::closure325((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_45 =
                                                               clo_45.clone();
                                                           move |arg_45: ()|
                                                               clo_45()
                                                       })
                                        };
                                    let v1017 =
                                        {
                                            let clo_46 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_46 =
                                                               clo_46.clone();
                                                           move |arg_46: ()|
                                                               clo_46()
                                                       })
                                        };
                                    let v1018: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1017(()) + \" \" + &v1015(()) + \" \" + &v1012(())");
                                    let v1019: string =
                                        append((append((append(string(" "),
                                                               (v1018))),
                                                       string(""))),
                                               string(""));
                                    let v1021 =
                                        {
                                            let clo_47 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_47 =
                                                               clo_47.clone();
                                                           move |arg_47: ()|
                                                               clo_47()
                                                       })
                                        };
                                    let v1023: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1024: leptos::prelude::Fragment =
                                        v1008();
                                    let v1026: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1024);
                                    let v1028: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1023))),
                                                                               string(">move || { v1026 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1030:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1026 }</dt> };
                                    let v1032: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1030);
                                    let v1034: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1021(())");
                                    let v1035: leptos::prelude::Fragment =
                                        v1009();
                                    let v1037: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1035);
                                    let v1039: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1034))),
                                                                               string(">move || { v1037 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1041:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1021(())>move || { v1037 }</dd> };
                                    let v1043: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1041);
                                    let v1050: string =
                                        string("vec![v1032, v1043]");
                                    let v1051: Vec<leptos::prelude::AnyView> =
                                        vec![v1032, v1043];
                                    let v1053: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1051);
                                    let v1055: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1053);
                                    let v1057: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1019))),
                                                                               string(">move || { v1055 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1059:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1017(()) + " " + &v1015(()) + " " + &v1012(())>move || { v1055 }</dl> };
                                    let v1061: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1059);
                                    let v1062 = Dice_ui::method274();
                                    let v1063 =
                                        Dice_ui::method275(v382.clone(),
                                                           v383.clone(),
                                                           v384.clone(),
                                                           v385.clone(),
                                                           v386.clone(),
                                                           v387.clone(), v388,
                                                           v389.clone(), v390,
                                                           v391, v392,
                                                           v393.clone());
                                    let v1066 =
                                        {
                                            let clo_48 =
                                                Func0::new(move ||
                                                               Dice_ui::closure328((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_48 =
                                                               clo_48.clone();
                                                           move |arg_48: ()|
                                                               clo_48()
                                                       })
                                        };
                                    let v1069 =
                                        {
                                            let clo_49 =
                                                Func0::new(move ||
                                                               Dice_ui::closure329((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_49 =
                                                               clo_49.clone();
                                                           move |arg_49: ()|
                                                               clo_49()
                                                       })
                                        };
                                    let v1071 =
                                        {
                                            let clo_50 = Func0::from(v471);
                                            Func1::new({
                                                           let clo_50 =
                                                               clo_50.clone();
                                                           move |arg_50: ()|
                                                               clo_50()
                                                       })
                                        };
                                    let v1072: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1071(()) + \" \" + &v1069(()) + \" \" + &v1066(())");
                                    let v1073: string =
                                        append((append((append(string(" "),
                                                               (v1072))),
                                                       string(""))),
                                               string(""));
                                    let v1075 =
                                        {
                                            let clo_51 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_51 =
                                                               clo_51.clone();
                                                           move |arg_51: ()|
                                                               clo_51()
                                                       })
                                        };
                                    let v1077: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1078: leptos::prelude::Fragment =
                                        v1062();
                                    let v1080: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1078);
                                    let v1082: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1077))),
                                                                               string(">move || { v1080 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1084:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1080 }</dt> };
                                    let v1086: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1084);
                                    let v1088: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1075(())");
                                    let v1089: leptos::prelude::Fragment =
                                        v1063();
                                    let v1091: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1089);
                                    let v1093: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1088))),
                                                                               string(">move || { v1091 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1095:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1075(())>move || { v1091 }</dd> };
                                    let v1097: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1095);
                                    let v1104: string =
                                        string("vec![v1086, v1097]");
                                    let v1105: Vec<leptos::prelude::AnyView> =
                                        vec![v1086, v1097];
                                    let v1107: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1105);
                                    let v1109: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1107);
                                    let v1111: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1073))),
                                                                               string(">move || { v1109 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1113:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1071(()) + " " + &v1069(()) + " " + &v1066(())>move || { v1109 }</dl> };
                                    let v1115: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1113);
                                    let v1176: leptos::prelude::AnyView =
                                        if (get_Count(v393.clone()) as u64) ==
                                               0_u64 {
                                            let v1118: string =
                                                string("vec![]");
                                            let v1119:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![];
                                            leptos::prelude::IntoAny::into_any(v1119)
                                        } else {
                                            let v1122 = Dice_ui::method276();
                                            let v1123 =
                                                Dice_ui::method277(v382, v383,
                                                                   v384, v385,
                                                                   v386, v387,
                                                                   v388, v389,
                                                                   v390, v391,
                                                                   v392,
                                                                   v393);
                                            let v1126 =
                                                {
                                                    let clo_52 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure334((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_52
                                                                       =
                                                                       clo_52.clone();
                                                                   move
                                                                       |arg_52:
                                                                            ()|
                                                                       clo_52()
                                                               })
                                                };
                                            let v1129 =
                                                {
                                                    let clo_53 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure335((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_53
                                                                       =
                                                                       clo_53.clone();
                                                                   move
                                                                       |arg_53:
                                                                            ()|
                                                                       clo_53()
                                                               })
                                                };
                                            let v1131 =
                                                {
                                                    let clo_54 =
                                                        Func0::from(v471);
                                                    Func1::new({
                                                                   let clo_54
                                                                       =
                                                                       clo_54.clone();
                                                                   move
                                                                       |arg_54:
                                                                            ()|
                                                                       clo_54()
                                                               })
                                                };
                                            let v1132: string =
                                                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1131(()) + \" \" + &v1129(()) + \" \" + &v1126(())");
                                            let v1133: string =
                                                append((append((append(string(" "),
                                                                       (v1132))),
                                                               string(""))),
                                                       string(""));
                                            let v1135 =
                                                {
                                                    let clo_55 =
                                                        Func0::from(v476);
                                                    Func1::new({
                                                                   let clo_55
                                                                       =
                                                                       clo_55.clone();
                                                                   move
                                                                       |arg_55:
                                                                            ()|
                                                                       clo_55()
                                                               })
                                                };
                                            let v1137: string =
                                                string(" class=\"[font-size:12px] text-gray-400\"");
                                            let v1138:
                                                    leptos::prelude::Fragment =
                                                v1122();
                                            let v1140:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1138);
                                            let v1142: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dt "),
                                                                                               (v1137))),
                                                                                       string(">move || { v1140 }</"))),
                                                                               string("dt"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1144:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1140 }</dt> };
                                            let v1146:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1144);
                                            let v1148: string =
                                                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1135(())");
                                            let v1149:
                                                    leptos::prelude::Fragment =
                                                v1123();
                                            let v1151:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1149);
                                            let v1153: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dd "),
                                                                                               (v1148))),
                                                                                       string(">move || { v1151 }</"))),
                                                                               string("dd"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1155:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1135(())>move || { v1151 }</dd> };
                                            let v1157:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1155);
                                            let v1164: string =
                                                string("vec![v1146, v1157]");
                                            let v1165:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1146, v1157];
                                            let v1167:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v1165);
                                            let v1169:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1167);
                                            let v1171: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dl "),
                                                                                               (v1133))),
                                                                                       string(">move || { v1169 }</"))),
                                                                               string("dl"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1173:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1131(()) + " " + &v1129(()) + " " + &v1126(())>move || { v1169 }</dl> };
                                            leptos::prelude::IntoAny::into_any(v1173)
                                        };
                                    let v1216: string =
                                        string("vec![v520, v574, v628, v682, v737, v791, v845, v899, v953, v1007, v1061, v1115, v1176]");
                                    let v1217: Vec<leptos::prelude::AnyView> =
                                        vec![v520, v574, v628, v682, v737, v791, v845, v899, v953, v1007, v1061, v1115, v1176];
                                    let v1219: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1217);
                                    let v1221: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1219);
                                    let v1224: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v461))),
                                                                               string(">move || { v1221 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1226:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v1221 }</div> };
                                    let v1228: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1226);
                                    let v1235: string =
                                        string("vec![v459, v1228]");
                                    let v1236: Vec<leptos::prelude::AnyView> =
                                        vec![v459, v1228];
                                    let v1238: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1236);
                                    let v1240: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1238);
                                    let v1242: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v407))),
                                                                               string(">move || { v1240 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1244:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v1240 }</div> };
                                    let v1246: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1244);
                                    let v1248: bool =
                                        true; v1246 }).collect::<Vec<_>>();
                                let v1250: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v1252: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1250);
                                let v1256: string = string("vec![v1252]");
                                let v1257: Vec<leptos::prelude::AnyView> = vec![v1252];
                                let v1259: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1257);
                                let v1261: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1259);
                                let v1263: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v373))),
                                                    string(">move || { v1261 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1265: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v1261 }</div> };
                                leptos::prelude::IntoAny::into_any(v1265)
                            } else {
                                let v1269: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v360.clone().to_vec();
                                let v1271: bool = true;
                                let _vec_map : Vec<_> = v1269.into_iter().map(|x| { //;
                                    let patternInput_1:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v1275: LrcPtr<Dice_ui::Heap5> =
                                        patternInput_1.2.clone();
                                    let v1278: bool =
                                        true; leptos::logging::log!("{}", string("transaction.tr_render (1)"));
                                    let v1281: string =
                                        string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                    let v1283: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1292: &str =
                                        &*patternInput_1.0.clone();
                                    let v1325: std::string::String =
                                        String::from(v1292);
                                    let v1351: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1325));
                                    let v1355: string = string("vec![v1351]");
                                    let v1356: Vec<leptos::prelude::AnyView> =
                                        vec![v1351];
                                    let v1358: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1356);
                                    let v1360: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1358);
                                    let v1363: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1283))),
                                                                               string(">move || { v1360 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1365:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1360 }</td> };
                                    let v1367: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1365);
                                    let v1369: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1379: i64 =
                                        (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v1275.l5.clone()))))
                                            / 1000_i64;
                                    let v1381:
                                            Option<chrono::DateTime<chrono::Utc>> =
                                        chrono::DateTime::from_timestamp_micros(v1379);
                                    let v1398: Dice_ui::US68 =
                                        defaultValue(Dice_ui::US68::US68_1,
                                                     map(Dice_ui::method205(),
                                                         v1381));
                                    let v1417: Dice_ui::US31 =
                                        match &v1398 {
                                            Dice_ui::US68::US68_0(v1398_0_0)
                                            => {
                                                let v1404:
                                                        chrono::NaiveDateTime =
                                                    match &v1398 {
                                                        Dice_ui::US68::US68_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone().naive_utc();
                                                let v1406:
                                                        chrono::DateTime<chrono::Local> =
                                                    chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v1404);
                                                let v1408: string =
                                                    string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                let v1409: &str =
                                                    r#"%Y-%m-%d %H:%M:%S"#;
                                                let v1411:
                                                        std::string::String =
                                                    v1406.format(v1409).to_string();
                                                Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v1411))
                                            }
                                            _ => Dice_ui::US31::US31_1,
                                        };
                                    let v1423: Dice_ui::US69 =
                                        match &v1417 {
                                            Dice_ui::US31::US31_0(v1417_0_0)
                                            =>
                                            Dice_ui::US69::US69_0(match &v1417
                                                                      {
                                                                      Dice_ui::US31::US31_0(x)
                                                                      =>
                                                                      x.clone(),
                                                                      _ =>
                                                                      unreachable!(),
                                                                  }.clone()),
                                            _ =>
                                            Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                        };
                                    let v1428: string =
                                        match &v1423 {
                                            Dice_ui::US69::US69_0(v1423_0_0)
                                            => v1423_0_0.clone(),
                                            Dice_ui::US69::US69_1(v1423_1_0)
                                            =>
                                            append((append(string("sm\'.to_string result / Error: "),
                                                           (v1423_1_0.clone()))),
                                                   string("")),
                                        };
                                    let v1437: &str = &*v1428;
                                    let v1470: std::string::String =
                                        String::from(v1437);
                                    let v1496: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1470));
                                    let v1500: string = string("vec![v1496]");
                                    let v1501: Vec<leptos::prelude::AnyView> =
                                        vec![v1496];
                                    let v1503: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1501);
                                    let v1505: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1503);
                                    let v1507: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1369))),
                                                                               string(">move || { v1505 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1509:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1505 }</td> };
                                    let v1511: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1509);
                                    let v1513: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1516: string =
                                        fable_library_rust::String_::fromString(v1275.l1.clone());
                                    let v1525: &str = &*v1516;
                                    let v1558: std::string::String =
                                        String::from(v1525);
                                    let v1584: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1558));
                                    let v1588: string = string("vec![v1584]");
                                    let v1589: Vec<leptos::prelude::AnyView> =
                                        vec![v1584];
                                    let v1591: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1589);
                                    let v1593: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1591);
                                    let v1595: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1513))),
                                                                               string(">move || { v1593 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1597:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1593 }</td> };
                                    let v1599: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1597);
                                    let v1601: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1604: string =
                                        fable_library_rust::String_::fromString(v1275.l2.clone());
                                    let v1613: &str = &*v1604;
                                    let v1646: std::string::String =
                                        String::from(v1613);
                                    let v1672: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1646));
                                    let v1676: string = string("vec![v1672]");
                                    let v1677: Vec<leptos::prelude::AnyView> =
                                        vec![v1672];
                                    let v1679: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1677);
                                    let v1681: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1679);
                                    let v1683: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1601))),
                                                                               string(">move || { v1681 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1685:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1681 }</td> };
                                    let v1687: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1685);
                                    let v1689: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1692:
                                            Vec<(std::string::String,
                                                 Option<std::string::String>)> =
                                        v1275.l7.clone().to_vec();
                                    let v1694: bool =
                                        true; let _vec_map : Vec<_> = v1692.into_iter().map(|x| { //;
                                    let patternInput_2:
                                            (std::string::String,
                                             Option<std::string::String>) = x;
                                    let v1698 =
                                        Dice_ui::method258(patternInput_2.0.clone());
                                    let v1699 =
                                        Dice_ui::method259(patternInput_2.1.clone());
                                    let v1702 =
                                        {
                                            let clo_56 =
                                                Func0::new(move ||
                                                               Dice_ui::closure295((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_56 =
                                                               clo_56.clone();
                                                           move |arg_56: ()|
                                                               clo_56()
                                                       })
                                        };
                                    let v1705 =
                                        {
                                            let clo_57 =
                                                Func0::new(move ||
                                                               Dice_ui::closure296((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_57 =
                                                               clo_57.clone();
                                                           move |arg_57: ()|
                                                               clo_57()
                                                       })
                                        };
                                    let v1708 =
                                        {
                                            let clo_58 =
                                                Func0::new(move ||
                                                               Dice_ui::closure297((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_58 =
                                                               clo_58.clone();
                                                           move |arg_58: ()|
                                                               clo_58()
                                                       })
                                        };
                                    let v1709: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1708(()) + \" \" + &v1705(()) + \" \" + &v1702(())");
                                    let v1710: string =
                                        append((append((append(string(" "),
                                                               (v1709))),
                                                       string(""))),
                                               string(""));
                                    let v1713 =
                                        {
                                            let clo_59 =
                                                Func0::new(move ||
                                                               Dice_ui::closure298((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_59 =
                                                               clo_59.clone();
                                                           move |arg_59: ()|
                                                               clo_59()
                                                       })
                                        };
                                    let v1715: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1716: leptos::prelude::Fragment =
                                        v1698();
                                    let v1718: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1716);
                                    let v1721: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1715))),
                                                                               string(">move || { v1718 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1723:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1718 }</dt> };
                                    let v1725: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1723);
                                    let v1727: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1713(())");
                                    let v1728: leptos::prelude::Fragment =
                                        v1699();
                                    let v1730: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1728);
                                    let v1733: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1727))),
                                                                               string(">move || { v1730 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1735:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1713(())>move || { v1730 }</dd> };
                                    let v1737: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1735);
                                    let v1745: string =
                                        string("vec![v1725, v1737]");
                                    let v1746: Vec<leptos::prelude::AnyView> =
                                        vec![v1725, v1737];
                                    let v1748: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1746);
                                    let v1750: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1748);
                                    let v1753: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1710))),
                                                                               string(">move || { v1750 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1755:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1708(()) + " " + &v1705(()) + " " + &v1702(())>move || { v1750 }</dl> };
                                    let v1757: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1755);
                                    let v1759: bool =
                                        true; v1757 }).collect::<Vec<_>>();
                                    let v1761: Vec<leptos::prelude::AnyView> =
                                        _vec_map;
                                    let v1763: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1761);
                                    let v1767: string = string("vec![v1763]");
                                    let v1768: Vec<leptos::prelude::AnyView> =
                                        vec![v1763];
                                    let v1770: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1768);
                                    let v1772: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1770);
                                    let v1774: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1689))),
                                                                               string(">move || { v1772 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1776:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1772 }</td> };
                                    let v1778: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1776);
                                    let v1780: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1784: string = toString(v1275.l8);
                                    let v1795: &str = &*v1784;
                                    let v1828: std::string::String =
                                        String::from(v1795);
                                    let v1854: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1828));
                                    let v1858: string = string("vec![v1854]");
                                    let v1859: Vec<leptos::prelude::AnyView> =
                                        vec![v1854];
                                    let v1861: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1859);
                                    let v1863: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1861);
                                    let v1865: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1780))),
                                                                               string(">move || { v1863 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1867:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1863 }</td> };
                                    let v1869: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1867);
                                    let v1871: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1875: string = toString(v1275.l10);
                                    let v1886: &str = &*v1875;
                                    let v1919: std::string::String =
                                        String::from(v1886);
                                    let v1945: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1919));
                                    let v1949: string = string("vec![v1945]");
                                    let v1950: Vec<leptos::prelude::AnyView> =
                                        vec![v1945];
                                    let v1952: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1950);
                                    let v1954: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1952);
                                    let v1956: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1871))),
                                                                               string(">move || { v1954 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1958:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1954 }</td> };
                                    let v1960: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1958);
                                    let v1962: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1966: string = toString(v1275.l6);
                                    let v1977: &str = &*v1966;
                                    let v2010: std::string::String =
                                        String::from(v1977);
                                    let v2036: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2010));
                                    let v2040: string = string("vec![v2036]");
                                    let v2041: Vec<leptos::prelude::AnyView> =
                                        vec![v2036];
                                    let v2043: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2041);
                                    let v2045: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2043);
                                    let v2047: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1962))),
                                                                               string(">move || { v2045 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2049:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2045 }</td> };
                                    let v2051: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2049);
                                    let v2053: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
                                    let v2265: leptos::prelude::Fragment =
                                        if (get_Count(v1275.l11.clone()) as
                                                u64) == 0_u64 {
                                            let v2065: &str = &*string("");
                                            let v2098: std::string::String =
                                                String::from(v2065);
                                            let v2124:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2098));
                                            let v2128: string =
                                                string("vec![v2124]");
                                            let v2129:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2124];
                                            leptos::prelude::Fragment::new(v2129)
                                        } else {
                                            let v2134:
                                                    Vec<std::string::String> =
                                                v1275.l11.clone().to_vec();
                                            let v2137: bool =
                                                true; let _func1_from_v2135 = Func1::from(move |value| { //;
                                            let v2139: std::string::String =
                                                value;
                                            let v2141: string =
                                                fable_library_rust::String_::fromString(v2139);
                                            let v2144: bool = true; v2141 /*;
                                            let v2146: bool = */ }); //;
                                            let v2148:
                                                    Func1<std::string::String, string> =
                                                _func1_from_v2135;
                                            let v2151: Vec<string> =
                                                v2134.into_iter().map(|x| Func1::new({
                                                                                         let v2148
                                                                                             =
                                                                                             v2148.clone();
                                                                                         move
                                                                                             |v:
                                                                                                  std::string::String|
                                                                                             Dice_ui::closure332(v2148.clone(),
                                                                                                                 v)
                                                                                     })(x.clone())).collect::<Vec<_>>();
                                            let v2155:
                                                    LrcPtr<dyn IEnumerable_1<string>> =
                                                ofArray(fable_library_rust::NativeArray_::array_from(v2151.clone()));
                                            let v2168: string =
                                                replace(join(Dice_ui::method279(),
                                                             toArray(v2155)),
                                                        string("\\n"),
                                                        string("\n"));
                                            let v2171 =
                                                {
                                                    let clo_60 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure336((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_60
                                                                       =
                                                                       clo_60.clone();
                                                                   move
                                                                       |arg_60:
                                                                            ()|
                                                                       clo_60()
                                                               })
                                                };
                                            let v2172: string =
                                                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v2171(())");
                                            let v2173: string =
                                                append((append((append(string(" "),
                                                                       (v2172))),
                                                               string(""))),
                                                       string(""));
                                            let v2182: &str = &*v2168;
                                            let v2215: std::string::String =
                                                String::from(v2182);
                                            let v2241:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2215));
                                            let v2245: string =
                                                string("vec![v2241]");
                                            let v2246:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2241];
                                            let v2248:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v2246);
                                            let v2250:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v2248);
                                            let v2253: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<pre "),
                                                                                               (v2173))),
                                                                                       string(">move || { v2250 }</"))),
                                                                               string("pre"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v2255:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> =
                                                leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v2171(())>move || { v2250 }</pre> };
                                            let v2257:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v2255);
                                            let v2261: string =
                                                string("vec![v2257]");
                                            let v2262:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2257];
                                            leptos::prelude::Fragment::new(v2262)
                                        };
                                    let v2267: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2265);
                                    let v2269: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2053))),
                                                                               string(">move || { v2267 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2271:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v2267 }</td> };
                                    let v2273: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2271);
                                    let v2275: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2279: string = ofBoolean(v1275.l9);
                                    let v2290: &str = &*v2279;
                                    let v2323: std::string::String =
                                        String::from(v2290);
                                    let v2349: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2323));
                                    let v2353: string = string("vec![v2349]");
                                    let v2354: Vec<leptos::prelude::AnyView> =
                                        vec![v2349];
                                    let v2356: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2354);
                                    let v2358: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2356);
                                    let v2360: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2275))),
                                                                               string(">move || { v2358 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2362:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2358 }</td> };
                                    let v2364: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2362);
                                    let v2366: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2369: string =
                                        fable_library_rust::String_::fromString(v1275.l3.clone());
                                    let v2378: &str = &*v2369;
                                    let v2411: std::string::String =
                                        String::from(v2378);
                                    let v2437: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2411));
                                    let v2441: string = string("vec![v2437]");
                                    let v2442: Vec<leptos::prelude::AnyView> =
                                        vec![v2437];
                                    let v2444: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2442);
                                    let v2446: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2444);
                                    let v2448: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2366))),
                                                                               string(">move || { v2446 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2450:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2446 }</td> };
                                    let v2452: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2450);
                                    let v2454: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2457: string =
                                        fable_library_rust::String_::fromString(v1275.l4.clone());
                                    let v2466: &str = &*v2457;
                                    let v2499: std::string::String =
                                        String::from(v2466);
                                    let v2525: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2499));
                                    let v2529: string = string("vec![v2525]");
                                    let v2530: Vec<leptos::prelude::AnyView> =
                                        vec![v2525];
                                    let v2532: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2530);
                                    let v2534: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2532);
                                    let v2536: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2454))),
                                                                               string(">move || { v2534 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2538:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2534 }</td> };
                                    let v2540: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2538);
                                    let v2542: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2545: string =
                                        fable_library_rust::String_::fromString(v1275.l0.clone());
                                    let v2554: &str = &*v2545;
                                    let v2587: std::string::String =
                                        String::from(v2554);
                                    let v2613: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2587));
                                    let v2617: string = string("vec![v2613]");
                                    let v2618: Vec<leptos::prelude::AnyView> =
                                        vec![v2613];
                                    let v2620: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2618);
                                    let v2622: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2620);
                                    let v2624: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2542))),
                                                                               string(">move || { v2622 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2626:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2622 }</td> };
                                    let v2628: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2626);
                                    let v2668: string =
                                        string("vec![v1367, v1511, v1599, v1687, v1778, v1869, v1960, v2051, v2273, v2364, v2452, v2540, v2628]");
                                    let v2669: Vec<leptos::prelude::AnyView> =
                                        vec![v1367, v1511, v1599, v1687, v1778, v1869, v1960, v2051, v2273, v2364, v2452, v2540, v2628];
                                    let v2671: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2669);
                                    let v2673: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2671);
                                    let v2676: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<tr "),
                                                                                       (v1281))),
                                                                               string(">move || { v2673 }</"))),
                                                                       string("tr"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2678:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                        leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v2673 }</tr> };
                                    let v2680: bool =
                                        true; v2678 }).collect::<Vec<_>>();
                                let v2682: Vec<
                                    leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    >,
                                > = _vec_map;
                                let v2684: bool = true;
                                let _vec_map: Vec<_> = v2682
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2686: leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        > = x;
                                        let v2688: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(v2686);
                                        let v2690: bool = true;
                                        v2688
                                    })
                                    .collect::<Vec<_>>();
                                let v2692: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v2694: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2692);
                                let v2698: string = string("vec![v2694]");
                                let v2699: Vec<leptos::prelude::AnyView> = vec![v2694];
                                let v2701: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2699);
                                let v2704: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string("transaction.tr_head_render (1)")
                                );
                                let v2706: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2716: &str = &*string("Account");
                                let v2749: std::string::String = String::from(v2716);
                                let v2775: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2749),
                                    );
                                let v2779: string = string("vec![v2775]");
                                let v2780: Vec<leptos::prelude::AnyView> = vec![v2775];
                                let v2782: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2780);
                                let v2784: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2782);
                                let v2787: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2706))),
                                                    string(">move || { v2784 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2789: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2784 }</th> };
                                let v2791: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2789);
                                let v2793: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2803: &str = &*string("Block Timestamp");
                                let v2836: std::string::String = String::from(v2803);
                                let v2862: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2836),
                                    );
                                let v2866: string = string("vec![v2862]");
                                let v2867: Vec<leptos::prelude::AnyView> = vec![v2862];
                                let v2869: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2867);
                                let v2871: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2869);
                                let v2873: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2793))),
                                                    string(">move || { v2871 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2875: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2871 }</th> };
                                let v2877: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2875);
                                let v2879: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2889: &str = &*string("Predecessor");
                                let v2922: std::string::String = String::from(v2889);
                                let v2948: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2922),
                                    );
                                let v2952: string = string("vec![v2948]");
                                let v2953: Vec<leptos::prelude::AnyView> = vec![v2948];
                                let v2955: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2953);
                                let v2957: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2955);
                                let v2959: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2879))),
                                                    string(">move || { v2957 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2961: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2957 }</th> };
                                let v2963: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2961);
                                let v2965: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2975: &str = &*string("Receiver");
                                let v3008: std::string::String = String::from(v2975);
                                let v3034: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3008),
                                    );
                                let v3038: string = string("vec![v3034]");
                                let v3039: Vec<leptos::prelude::AnyView> = vec![v3034];
                                let v3041: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3039);
                                let v3043: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3041);
                                let v3045: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2965))),
                                                    string(">move || { v3043 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3047: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3043 }</th> };
                                let v3049: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3047);
                                let v3051: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3061: &str = &*string("Action");
                                let v3094: std::string::String = String::from(v3061);
                                let v3120: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3094),
                                    );
                                let v3124: string = string("vec![v3120]");
                                let v3125: Vec<leptos::prelude::AnyView> = vec![v3120];
                                let v3127: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3125);
                                let v3129: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3127);
                                let v3131: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3051))),
                                                    string(">move || { v3129 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3133: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3129 }</th> };
                                let v3135: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3133);
                                let v3137: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3147: &str = &*string("Deposit");
                                let v3180: std::string::String = String::from(v3147);
                                let v3206: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3180),
                                    );
                                let v3210: string = string("vec![v3206]");
                                let v3211: Vec<leptos::prelude::AnyView> = vec![v3206];
                                let v3213: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3211);
                                let v3215: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3213);
                                let v3217: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3137))),
                                                    string(">move || { v3215 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3219: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3215 }</th> };
                                let v3221: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3219);
                                let v3223: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3233: &str = &*string("Fee");
                                let v3266: std::string::String = String::from(v3233);
                                let v3292: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3266),
                                    );
                                let v3296: string = string("vec![v3292]");
                                let v3297: Vec<leptos::prelude::AnyView> = vec![v3292];
                                let v3299: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3297);
                                let v3301: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3299);
                                let v3303: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3223))),
                                                    string(">move || { v3301 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3305: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3301 }</th> };
                                let v3307: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3305);
                                let v3309: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3319: &str = &*string("Block Height");
                                let v3352: std::string::String = String::from(v3319);
                                let v3378: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3352),
                                    );
                                let v3382: string = string("vec![v3378]");
                                let v3383: Vec<leptos::prelude::AnyView> = vec![v3378];
                                let v3385: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3383);
                                let v3387: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3385);
                                let v3389: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3309))),
                                                    string(">move || { v3387 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3391: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3387 }</th> };
                                let v3393: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3391);
                                let v3395: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3400: string = if false == (Dice_ui::method280(v360, 0_i32)) {
                                    string("")
                                } else {
                                    string("Logs")
                                };
                                let v3409: &str = &*v3400;
                                let v3442: std::string::String = String::from(v3409);
                                let v3468: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3442),
                                    );
                                let v3472: string = string("vec![v3468]");
                                let v3473: Vec<leptos::prelude::AnyView> = vec![v3468];
                                let v3475: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3473);
                                let v3477: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3475);
                                let v3479: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3395))),
                                                    string(">move || { v3477 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3481: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3477 }</th> };
                                let v3483: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3481);
                                let v3485: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3495: &str = &*string("Outcome Status");
                                let v3528: std::string::String = String::from(v3495);
                                let v3554: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3528),
                                    );
                                let v3558: string = string("vec![v3554]");
                                let v3559: Vec<leptos::prelude::AnyView> = vec![v3554];
                                let v3561: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3559);
                                let v3563: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3561);
                                let v3565: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3485))),
                                                    string(">move || { v3563 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3567: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3563 }</th> };
                                let v3569: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3567);
                                let v3571: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3581: &str = &*string("Hash");
                                let v3614: std::string::String = String::from(v3581);
                                let v3640: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3614),
                                    );
                                let v3644: string = string("vec![v3640]");
                                let v3645: Vec<leptos::prelude::AnyView> = vec![v3640];
                                let v3647: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3645);
                                let v3649: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3647);
                                let v3651: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3571))),
                                                    string(">move || { v3649 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3653: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3649 }</th> };
                                let v3655: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3653);
                                let v3657: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3667: &str = &*string("Block Hash");
                                let v3700: std::string::String = String::from(v3667);
                                let v3726: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3700),
                                    );
                                let v3730: string = string("vec![v3726]");
                                let v3731: Vec<leptos::prelude::AnyView> = vec![v3726];
                                let v3733: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3731);
                                let v3735: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3733);
                                let v3737: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3657))),
                                                    string(">move || { v3735 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3739: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3735 }</th> };
                                let v3741: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3739);
                                let v3743: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3753: &str = &*string("Receipt ID");
                                let v3786: std::string::String = String::from(v3753);
                                let v3812: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3786),
                                    );
                                let v3816: string = string("vec![v3812]");
                                let v3817: Vec<leptos::prelude::AnyView> = vec![v3812];
                                let v3819: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3817);
                                let v3821: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3819);
                                let v3823: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3743))),
                                                    string(">move || { v3821 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3825: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3821 }</th> };
                                let v3827: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3825);
                                let v3867: string =
                                        string("vec![v2791, v2877, v2963, v3049, v3135, v3221, v3307, v3393, v3483, v3569, v3655, v3741, v3827]");
                                let v3868: Vec<leptos::prelude::AnyView> = vec![
                                    v2791, v2877, v2963, v3049, v3135, v3221, v3307, v3393, v3483,
                                    v3569, v3655, v3741, v3827,
                                ];
                                let v3870: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3868);
                                let v3872: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3870);
                                let v3874: string = string(
                                    "leptos::prelude::view! { <tr >move || { v3872 }</tr> }",
                                );
                                let v3876: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v3872 }</tr> };
                                let v3878: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3876);
                                let v3882: string = string("vec![v3878]");
                                let v3883: Vec<leptos::prelude::AnyView> = vec![v3878];
                                let v3885: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3883);
                                let v3887: string =
                                        string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v3889: string =
                                    string(" class=\"ltr:text-left rtl:text-right\"");
                                let v3891: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3885);
                                let v3894: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<thead "), (v3889))),
                                                    string(">move || { v3891 }</"),
                                                )),
                                                string("thead"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3896: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v3891 }</thead> };
                                let v3898: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3896);
                                let v3900: string = string(
                                    " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                );
                                let v3902: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2701);
                                let v3905: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<tbody "), (v3900))),
                                                    string(">move || { v3902 }</"),
                                                )),
                                                string("tbody"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3907: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v3902 }</tbody> };
                                let v3909: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3907);
                                let v3916: string = string("vec![v3898, v3909]");
                                let v3917: Vec<leptos::prelude::AnyView> = vec![v3898, v3909];
                                let v3919: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3917);
                                let v3921: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3919);
                                let v3924: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<table "), (v3887))),
                                                    string(">move || { v3921 }</"),
                                                )),
                                                string("table"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3926: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v3921 }</table> };
                                leptos::prelude::IntoAny::into_any(v3926)
                            }
                        } else {
                            let v3932: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v3934: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v3937 = {
                                let clo_61 = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo_61 = clo_61.clone();
                                    move |arg_61: ()| clo_61()
                                })
                            };
                            let v3955: string =
                                    string(" class=move || \" \".to_owned() + &v3937(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v3967: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v3979: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3980: string = string("vec![]");
                            let v3981: Vec<leptos::prelude::AnyView> = vec![];
                            let v3983: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3981);
                            let v3985: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3983);
                            let v3988: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3979))),
                                                string(">move || { v3985 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3990: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3985 }</animate> };
                            let v3992: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3990);
                            let v4004: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v4005: string = string("vec![]");
                            let v4006: Vec<leptos::prelude::AnyView> = vec![];
                            let v4008: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4006);
                            let v4010: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4008);
                            let v4012: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4004))),
                                                string(">move || { v4010 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4014: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4010 }</animate> };
                            let v4016: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4014);
                            let v4028: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v4029: string = string("vec![]");
                            let v4030: Vec<leptos::prelude::AnyView> = vec![];
                            let v4032: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4030);
                            let v4034: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4032);
                            let v4036: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4028))),
                                                string(">move || { v4034 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4038: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4034 }</animate> };
                            let v4040: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4038);
                            let v4051: string = string("vec![v3992, v4016, v4040]");
                            let v4052: Vec<leptos::prelude::AnyView> = vec![v3992, v4016, v4040];
                            let v4054: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4052);
                            let v4056: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4054);
                            let v4059: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3967))),
                                                string(">move || { v4056 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4061: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v4056 }</rect> };
                            let v4073: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v4085: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v4086: string = string("vec![]");
                            let v4087: Vec<leptos::prelude::AnyView> = vec![];
                            let v4089: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4087);
                            let v4091: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4089);
                            let v4093: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4085))),
                                                string(">move || { v4091 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4095: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4091 }</animate> };
                            let v4097: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4095);
                            let v4109: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v4110: string = string("vec![]");
                            let v4111: Vec<leptos::prelude::AnyView> = vec![];
                            let v4113: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4111);
                            let v4115: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4113);
                            let v4117: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4109))),
                                                string(">move || { v4115 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4119: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v4115 }</animate> };
                            let v4121: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4119);
                            let v4133: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v4134: string = string("vec![]");
                            let v4135: Vec<leptos::prelude::AnyView> = vec![];
                            let v4137: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4135);
                            let v4139: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4137);
                            let v4141: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4133))),
                                                string(">move || { v4139 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4143: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4139 }</animate> };
                            let v4145: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4143);
                            let v4155: string = string("vec![v4097, v4121, v4145]");
                            let v4156: Vec<leptos::prelude::AnyView> = vec![v4097, v4121, v4145];
                            let v4158: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4156);
                            let v4160: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4158);
                            let v4162: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4073))),
                                                string(">move || { v4160 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4164: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v4160 }</rect> };
                            let v4176: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v4188: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v4189: string = string("vec![]");
                            let v4190: Vec<leptos::prelude::AnyView> = vec![];
                            let v4192: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4190);
                            let v4194: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4192);
                            let v4196: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4188))),
                                                string(">move || { v4194 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4198: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4194 }</animate> };
                            let v4200: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4198);
                            let v4212: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v4213: string = string("vec![]");
                            let v4214: Vec<leptos::prelude::AnyView> = vec![];
                            let v4216: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4214);
                            let v4218: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4216);
                            let v4220: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4212))),
                                                string(">move || { v4218 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4222: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4218 }</animate> };
                            let v4224: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4222);
                            let v4236: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v4237: string = string("vec![]");
                            let v4238: Vec<leptos::prelude::AnyView> = vec![];
                            let v4240: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4238);
                            let v4242: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4240);
                            let v4244: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4236))),
                                                string(">move || { v4242 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4246: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4242 }</animate> };
                            let v4248: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4246);
                            let v4258: string = string("vec![v4200, v4224, v4248]");
                            let v4259: Vec<leptos::prelude::AnyView> = vec![v4200, v4224, v4248];
                            let v4261: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4259);
                            let v4263: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4261);
                            let v4265: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4176))),
                                                string(">move || { v4263 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4267: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v4263 }</rect> };
                            let v4269: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4267);
                            let v4271: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4164);
                            let v4273: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4061);
                            let v4283: string = string("vec![v4273, v4271, v4269]");
                            let v4284: Vec<leptos::prelude::AnyView> = vec![v4273, v4271, v4269];
                            let v4286: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4284);
                            let v4288: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4286);
                            let v4291: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3955))),
                                                string(">move || { v4288 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4293: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3937(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v4288 }</svg> };
                            let v4295: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4293);
                            let v4305: &str = &*string("Loading...");
                            let v4338: std::string::String = String::from(v4305);
                            let v4364: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4338),
                                );
                            let v4371: string = string("vec![v4295, v4364]");
                            let v4372: Vec<leptos::prelude::AnyView> = vec![v4295, v4364];
                            let v4374: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4372);
                            let v4376: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4374);
                            let v4379: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3934))),
                                                string(">move || { v4376 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4381: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v4376 }</div> };
                            let v4383: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4381);
                            let v4387: string = string("vec![v4383]");
                            let v4388: Vec<leptos::prelude::AnyView> = vec![v4383];
                            let v4390: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4388);
                            let v4392: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4390);
                            let v4394: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3932))),
                                                string(">move || { v4392 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4396: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v4392 }</div> };
                            leptos::prelude::IntoAny::into_any(v4396)
                        }
                    }
                    Dice_ui::US46::US46_1(v358_1_0) => {
                        let v4402: string =
                            fable_library_rust::String_::fromString(v358_1_0.clone());
                        let v4405: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v4407: string = string(" class=\"[height:17px]\"");
                        let v4421: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v4427: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v4428: string = string("vec![]");
                        let v4429: Vec<leptos::prelude::AnyView> = vec![];
                        let v4431: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4429);
                        let v4433: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4431);
                        let v4436: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4427))),
                                            string(">move || { v4433 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4438: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v4433 }</path> };
                        let v4440: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4438);
                        let v4444: string = string("vec![v4440]");
                        let v4445: Vec<leptos::prelude::AnyView> = vec![v4440];
                        let v4447: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4445);
                        let v4449: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4447);
                        let v4452: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4421))),
                                            string(">move || { v4449 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4454: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4449 }</svg> };
                        let v4456: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4454);
                        let v4460: string = string("vec![v4456]");
                        let v4461: Vec<leptos::prelude::AnyView> = vec![v4456];
                        let v4463: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4461);
                        let v4465: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4463);
                        let v4468: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4407))),
                                            string(">move || { v4465 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4470: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v4465 }</span> };
                        let v4472: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4470);
                        let v4474: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v4483: &str = &*v4402;
                        let v4516: std::string::String = String::from(v4483);
                        let v4542: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4516),
                        );
                        let v4546: string = string("vec![v4542]");
                        let v4547: Vec<leptos::prelude::AnyView> = vec![v4542];
                        let v4549: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4547);
                        let v4551: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4549);
                        let v4554: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v4474))),
                                            string(">move || { v4551 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4556: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v4551 }</pre> };
                        let v4558: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4556);
                        let v4566: string = string("vec![v4472, v4558]");
                        let v4567: Vec<leptos::prelude::AnyView> = vec![v4472, v4558];
                        let v4569: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4567);
                        let v4571: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4569);
                        let v4574: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4405))),
                                            string(">move || { v4571 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4576: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v4571 }</div> };
                        leptos::prelude::IntoAny::into_any(v4576)
                    }
                }
            };
            let v4590: string = string("vec![v144, v4581]");
            let v4591: Vec<leptos::prelude::AnyView> = vec![v144, v4581];
            leptos::prelude::Fragment::new(v4591)
        }
        pub fn closure337(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure339(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method282() -> Func0<string> {
            Func0::new(move || Dice_ui::closure339((), ()))
        }
        pub fn closure341(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Transactions");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method283() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure341((), ()))
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure342(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v13: std::string::String = format!("{:#?}", v2);
            let v15: string = fable_library_rust::String_::fromString(v13);
            let v44 = {
                let clo = Func0::new(move || Dice_ui::closure343((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v45: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v44(())");
            let v47: string = append(
                (append((append(string(" "), (v45))), string(""))),
                string(""),
            );
            let v56: &str = &*v15;
            let v89: std::string::String = String::from(v56);
            let v115: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v89));
            let v119: string = string("vec![v115]");
            let v120: Vec<leptos::prelude::AnyView> = vec![v115];
            let v122: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v120);
            let v124: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v122);
            let v127: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v47))),
                                string(">move || { v124 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v129: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v44(())>move || { v124 }</pre> };
            let v131: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v129);
            let v135: string = string("vec![v131]");
            let v136: Vec<leptos::prelude::AnyView> = vec![v131];
            leptos::prelude::Fragment::new(v136)
        }
        pub fn method284(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure342(v0_1.clone(), ())
            })
        }
        pub fn closure340(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method283();
            let v2 = Dice_ui::method284(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(
                (append((append(string(" "), (v12))), string(""))),
                string(""),
            );
            let v17 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v19: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v20: leptos::prelude::Fragment = v1();
            let v22: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v20);
            let v25: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v19))),
                                string(">move || { v22 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v22 }</dt> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())");
            let v32: leptos::prelude::Fragment = v2();
            let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
            let v37: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v31))),
                                string(">move || { v34 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v39: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v17(())>move || { v34 }</dd> };
            let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
            let v49: string = string("vec![v29, v41]");
            let v50: Vec<leptos::prelude::AnyView> = vec![v29, v41];
            let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
            let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
            let v57: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v14))),
                                string(">move || { v54 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v59: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v54 }</dl> };
            let v61: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v59);
            let v65: string = string("vec![v61]");
            let v66: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v66)
        }
        pub fn closure344(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method285(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure344(v0_1.clone(), ())
            })
        }
        pub fn closure345(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method286(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure345(v0_1.clone(), ())
            })
        }
        pub fn closure346(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method287(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure346(v0_1.clone(), ())
            })
        }
        pub fn closure347(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method288(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure347(v0_1.clone(), ())
            })
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure349(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("settings"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure350(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure351(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure352(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("transactions"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure353(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure354(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure355(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("lists"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure356(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure357(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure358(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("dice"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure359(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure360(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                (append(string("home.render () / router: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v13: bool = true;
            let _func0_from_v11 = Func0::from(move || {
                //;
                let v15: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v17: bool = */
                    async move {
                        /*;
                        let v19: bool = */
                        ();
                        let v22: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v25: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v27: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v29: bool = */
                            async {
                                /*;
                                let v31: bool = */
                                ();
                                let v32: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v33: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v35: Result<rexie::Rexie, rexie::Error> = v33.await;
                                let v36 = Dice_ui::method6();
                                let v42: Result<rexie::Rexie, std::string::String> =
                                    v35.map_err(|x| v36(x));
                                let v54: string = string("}");
                                let v61: bool = true;
                                let _fix_closure_v56 = v42;
                                let v66: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v56 "), (v54))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v67: bool = true;
                                _fix_closure_v56
                            },
                        ); // rust.fix_closure';
                        let v69 = __future_init;
                        let v71: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v69;
                        let v73: Result<rexie::Rexie, std::string::String> = v71.await;
                        let v79: rexie::Rexie = v73.unwrap();
                        let v90: rexie::Rexie = (Dice_ui::method7())(v79);
                        let v92: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v90);
                        let v99: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v92.clone()))),
                                        string("")));
                        let v101: bool = true;
                        leptos::logging::log!("{}", v99);
                        let v102: string = string("}");
                        let v109: bool = true;
                        let _fix_closure_v104 = v92;
                        let v114: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v104 "), (v102))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v115: bool = true;
                        _fix_closure_v104
                    },
                ); // rust.fix_closure';
                let v117 = __future_init;
                let v119: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v117;
                let v121: bool = true;
                v119 /*;
                     let v123: bool = */
            }); //;
            let v125: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v11;
            let v127: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v125().await });
            let v130: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v133: bool = true;
            let _func0_from_v131 = Func0::from(move || {
                //;
                let v135: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v127.clone()), |x| {
                        x.clone()
                    });
                let v137: bool = true;
                let _optionm_map_ = v135.map(|x| {
                    //;
                    let v139: std::sync::Arc<rexie::Rexie> = x;
                    let v142: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v139);
                    let v144: bool = true;
                    v142
                });
                let v146: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v148: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v150: bool = */
                    async move {
                        /*;
                        let v152: bool = */
                        ();
                        let v157: string =
                append((append(string("state_core.use_core_database (2) / core_state_heap new_local_resource / database: "),
                               sprintf!("{:?}", v146.clone()))), string(""));
                        let v159: bool = true;
                        leptos::logging::log!("{}", v157);
                        let v161: bool = true;
                        let _optionm_map_ = v146.map(|x| {
                            //;
                            let v163: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v165: std::sync::Arc<rexie::Rexie> = v163.0;
                            let v167: bool = true;
                            v165
                        });
                        let v169: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v186: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v169));
                        let v604: Dice_ui::US3 = match &v186 {
                            Dice_ui::US2::US2_0(v186_0_0) => {
                                let v192: string =
                                    string("state_core.get_data () / id: core-state-heap");
                                let v194: bool = true;
                                leptos::logging::log!("{}", v192);
                                let v196: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v198: bool = */
                                    async {
                                        /*;
                                        let v200: bool = */
                                        ();
                                        let v202: Array<string> = new_array(&[string("store")]);
                                        let v204: Vec<string> = v202.to_vec();
                                        let v207: bool = true;
                                        let _func1_from_v205 = Func1::from(move |value| {
                                            //;
                                            let v209: string = value;
                                            let v218: &str = &*v209;
                                            let v251: std::string::String = String::from(v218);
                                            let v278: bool = true;
                                            v251 /*;
                                                 let v280: bool = */
                                        }); //;
                                        let v282: Func1<string, std::string::String> =
                                            _func1_from_v205;
                                        let v285: Vec<std::string::String> = v204
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v282 = v282.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v282.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v286: std::sync::Arc<rexie::Rexie> = Dice_ui::method11(
                                            match &v186 {
                                                Dice_ui::US2::US2_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v288: Result<rexie::Transaction, rexie::Error> = v286
                                            .transaction(&v285, rexie::TransactionMode::ReadOnly);
                                        let v289 = Dice_ui::method12();
                                        let v295: Result<rexie::Transaction, std::string::String> =
                                            v288.map_err(|x| v289(x));
                                        let v306: rexie::Transaction = v295?;
                                        let v307: string = Dice_ui::method13();
                                        let v316: &str = &*v307;
                                        let v342: Result<rexie::Store, rexie::Error> =
                                            v306.store(v316);
                                        let v343 = Dice_ui::method14();
                                        let v349: Result<rexie::Store, std::string::String> =
                                            v342.map_err(|x| v343(x));
                                        let v360: rexie::Store = v349?;
                                        let v361: string = Dice_ui::method15();
                                        let v370: &str = &*v361;
                                        let v396: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v370);
                                        let v398: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v360, v396));
                                        let v400: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v398.await;
                                        let v401 = Dice_ui::method16();
                                        let v407: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v400.map_err(|x| v401(x));
                                        let v418: Option<wasm_bindgen::JsValue> = v407?;
                                        let v435: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v418),
                                        );
                                        let v541: Dice_ui::US3 = match &v435 {
                                            Dice_ui::US4::US4_0(v435_0_0) => {
                                                let v440: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v435 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v442: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v440);
                                                let v443 = Dice_ui::method19();
                                                let v449: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v442.map_err(|x| v443(x));
                                                let v460: Option<serde_json::Value> = v449?;
                                                let v477: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v460),
                                                );
                                                match &v477 {
                                                    Dice_ui::US5::US5_0(v477_0_0) => {
                                                        let v482: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v477 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v484: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v482);
                                                        let v485 = Dice_ui::method22();
                                                        let v491: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v484.map_err(|x| v485(x));
                                                        let v502: Vec<u8> = v491?;
                                                        let v504: Array<u8> =
                                                fable_library_rust::NativeArray_::array_from(v502.clone());
                                                        let v506: string =
                                                append((append(string("state_core.get_data () / data_len: "),
                                                               (toString(get_Count(v504.clone()))))),
                                                       string(""));
                                                        let v508: bool = true;
                                                        leptos::logging::log!("{}", v506);
                                                        let v510: Vec<u8> = v504.to_vec();
                                                        let v512: &[u8] = v510.as_slice();
                                                        let v514: bool = true;
                                                        let mut v512 = v512;
                                                        let v516: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v512,
                                                        );
                                                        let v517 = Dice_ui::method23();
                                                        let v523: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v516.map_err(|x| v517(x));
                                                        Dice_ui::US3::US3_0(v523?)
                                                    }
                                                    _ => Dice_ui::US3::US3_1,
                                                }
                                            }
                                            _ => Dice_ui::US3::US3_1,
                                        };
                                        let v549: Option<Option<LrcPtr<Dice_ui::Heap3>>> =
                                            match &v541 {
                                                Dice_ui::US3::US3_0(v541_0_0) => Some(
                                                    match &v541 {
                                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            };
                                        let v551: string = string("}");
                                        let v558: bool = true;
                                        let _fix_closure_v553 =
                                            Ok::<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >(v549);
                                        let v563: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v553 "),
                                                        (v551),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v564: bool = true;
                                        _fix_closure_v553
                                    },
                                ); // rust.fix_closure';
                                let v566 = __future_init;
                                let v568: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v566;
                                let v570: Result<
                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                    std::string::String,
                                > = v568.await;
                                let v571 = Dice_ui::method24();
                                let v572 = Dice_ui::method25();
                                let v573: Dice_ui::US6 = match &v570 {
                                    Err(v570_1_0) => v572(v570_1_0.clone()),
                                    Ok(v570_0_0) => v571(v570_0_0.clone()),
                                };
                                match &v573 {
                                    Dice_ui::US6::US6_0(v573_0_0) => defaultValue(
                                        Dice_ui::US3::US3_1,
                                        map(Dice_ui::method26(), v573_0_0.clone()),
                                    ),
                                    Dice_ui::US6::US6_1(v573_1_0) => {
                                        let v596: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_core_database (3) / error: ",
                                                ),
                                                (toString(v573_1_0.clone())),
                                            )),
                                            string(""),
                                        );
                                        let v598: bool = true;
                                        leptos::logging::log!("{}", v596);
                                        Dice_ui::US3::US3_1
                                    }
                                }
                            }
                            _ => Dice_ui::US3::US3_1,
                        };
                        let v629: Dice_ui::US7 = match &v604 {
                            Dice_ui::US3::US3_0(v604_0_0) => Dice_ui::US7::US7_0(defaultValue(
                                Dice_ui::US8::US8_1,
                                map(
                                    Dice_ui::method27(),
                                    match &v604 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                            )),
                            _ => Dice_ui::US7::US7_1,
                        };
                        let v636: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v629_0_0) = &v629 {
                            let v630: Dice_ui::US8 = v629_0_0.clone();
                            if let Dice_ui::US8::US8_0(v630_0_0) = &v630 {
                                Dice_ui::US8::US8_0(v630_0_0.clone())
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        } else {
                            Dice_ui::US8::US8_1
                        };
                        let v637: string = string("}");
                        let v644: bool = true;
                        let _fix_closure_v639 = v636;
                        let v649: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v639 "), (v637))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v650: bool = true;
                        _fix_closure_v639
                    },
                ); // rust.fix_closure';
                let v652 = __future_init;
                let v654: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>> = v652;
                let v656: bool = true;
                v654 /*;
                     let v658: bool = */
            }); //;
            let v660: Func0<std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>>> =
                _func0_from_v131;
            let v662: leptos::prelude::ArcLocalResource<Dice_ui::US8> =
                leptos::prelude::ArcLocalResource::new(|| async move { v660().await });
            let v665: bool = true;
            let _func0_from_v663 = Func0::from(move || {
                //;
                let v668: bool = true;
                leptos::logging::log!(
                    "{}",
                    string("state_core.use_core_database (4) / effect core_state_heap / ##1")
                );
                let v670: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method29(Dice_ui::method28());
                let v671 = Dice_ui::method30();
                let v672 = Dice_ui::method31();
                let v673: Dice_ui::US9 = match &v670 {
                    Err(v670_1_0) => v672(v670_1_0.clone()),
                    Ok(v670_0_0) => v671(v670_0_0.clone()),
                };
                let v699: Dice_ui::US10 = match &v673 {
                    Dice_ui::US9::US9_0(v673_0_0) => Dice_ui::US10::US10_0(defaultValue(
                        Dice_ui::US11::US11_1,
                        map(Dice_ui::method32(), v673_0_0.clone()),
                    )),
                    Dice_ui::US9::US9_1(v673_1_0) => Dice_ui::US10::US10_1(v673_1_0.clone()),
                };
                let v1244: bool = if let Dice_ui::US10::US10_0(v699_0_0) = &v699 {
                    let v700: Dice_ui::US11 = v699_0_0.clone();
                    if let Dice_ui::US11::US11_0(v700_0_0) = &v700 {
                        let v701: web_sys::Storage = v700_0_0.clone();
                        let v703: Option<Dice_ui::US8> =
                            Option::map(leptos::prelude::ArcLocalResource::get(&v662), |x| {
                                x.clone()
                            });
                        let v720: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v703));
                        let v728: string =
                            append((append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                           sprintf!("{:?}", v720.clone()))),
                                   string(""));
                        let v730: bool = true;
                        leptos::logging::log!("{}", v728);
                        let v1173: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v720_0_0) = &v720 {
                            let v731: Dice_ui::US8 = v720_0_0.clone();
                            if let Dice_ui::US8::US8_0(v731_0_0) = &v731 {
                                Dice_ui::US8::US8_0(v731_0_0.clone())
                            } else {
                                let v734: web_sys::Storage = Dice_ui::method34(v701.clone());
                                let v735: string = Dice_ui::method35();
                                let v744: &str = &*v735;
                                let v770: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v734, v744);
                                let v771 = Dice_ui::method36();
                                let v772 = Dice_ui::method37();
                                let v773: Dice_ui::US12 = match &v770 {
                                    Err(v770_1_0) => v772(v770_1_0.clone()),
                                    Ok(v770_0_0) => v771(v770_0_0.clone()),
                                };
                                let v802: Dice_ui::US13 = match &v773 {
                                    Dice_ui::US12::US12_0(v773_0_0) => {
                                        let v775: Option<std::string::String> =
                                            Dice_ui::method38(v773_0_0.clone());
                                        let v777: Option<std::string::String> =
                                            serde_json::from_value(v775.into()).unwrap();
                                        Dice_ui::US13::US13_0(defaultValue(
                                            Dice_ui::US14::US14_1,
                                            map(Dice_ui::method39(), v777),
                                        ))
                                    }
                                    Dice_ui::US12::US12_1(v773_1_0) => {
                                        Dice_ui::US13::US13_1(v773_1_0.clone())
                                    }
                                };
                                let v808: Dice_ui::US15 = match &v802 {
                                    Dice_ui::US13::US13_0(v802_0_0) => {
                                        Dice_ui::US15::US15_0(v802_0_0.clone())
                                    }
                                    _ => Dice_ui::US15::US15_1,
                                };
                                let v815: Dice_ui::US14 =
                                    if let Dice_ui::US15::US15_0(v808_0_0) = &v808 {
                                        let v809: Dice_ui::US14 = v808_0_0.clone();
                                        if let Dice_ui::US14::US14_0(v809_0_0) = &v809 {
                                            Dice_ui::US14::US14_0(v809_0_0.clone())
                                        } else {
                                            Dice_ui::US14::US14_1
                                        }
                                    } else {
                                        Dice_ui::US14::US14_1
                                    };
                                let v823: Option<std::string::String> = match &v815 {
                                    Dice_ui::US14::US14_0(v815_0_0) => Some(
                                        match &v815 {
                                            Dice_ui::US14::US14_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => None::<std::string::String>,
                                };
                                let v826: Option<Dice_ui::US8> = map(Dice_ui::method40(), v823);
                                let v942: Dice_ui::US7 = defaultValue(
                                    Dice_ui::US7::US7_1,
                                    map(Dice_ui::method33(), v826),
                                );
                                if let Dice_ui::US7::US7_0(v942_0_0) = &v942 {
                                    let v946: Dice_ui::US8 = v942_0_0.clone();
                                    if let Dice_ui::US8::US8_0(v946_0_0) = &v946 {
                                        Dice_ui::US8::US8_0(v946_0_0.clone())
                                    } else {
                                        Dice_ui::US8::US8_1
                                    }
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            }
                        } else {
                            let v954: web_sys::Storage = Dice_ui::method34(v701);
                            let v955: string = Dice_ui::method35();
                            let v964: &str = &*v955;
                            let v990: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v954, v964);
                            let v991 = Dice_ui::method36();
                            let v992 = Dice_ui::method37();
                            let v993: Dice_ui::US12 = match &v990 {
                                Err(v990_1_0) => v992(v990_1_0.clone()),
                                Ok(v990_0_0) => v991(v990_0_0.clone()),
                            };
                            let v1022: Dice_ui::US13 = match &v993 {
                                Dice_ui::US12::US12_0(v993_0_0) => {
                                    let v995: Option<std::string::String> =
                                        Dice_ui::method38(v993_0_0.clone());
                                    let v997: Option<std::string::String> =
                                        serde_json::from_value(v995.into()).unwrap();
                                    Dice_ui::US13::US13_0(defaultValue(
                                        Dice_ui::US14::US14_1,
                                        map(Dice_ui::method39(), v997),
                                    ))
                                }
                                Dice_ui::US12::US12_1(v993_1_0) => {
                                    Dice_ui::US13::US13_1(v993_1_0.clone())
                                }
                            };
                            let v1028: Dice_ui::US15 = match &v1022 {
                                Dice_ui::US13::US13_0(v1022_0_0) => {
                                    Dice_ui::US15::US15_0(v1022_0_0.clone())
                                }
                                _ => Dice_ui::US15::US15_1,
                            };
                            let v1035: Dice_ui::US14 =
                                if let Dice_ui::US15::US15_0(v1028_0_0) = &v1028 {
                                    let v1029: Dice_ui::US14 = v1028_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v1029_0_0) = &v1029 {
                                        Dice_ui::US14::US14_0(v1029_0_0.clone())
                                    } else {
                                        Dice_ui::US14::US14_1
                                    }
                                } else {
                                    Dice_ui::US14::US14_1
                                };
                            let v1043: Option<std::string::String> = match &v1035 {
                                Dice_ui::US14::US14_0(v1035_0_0) => Some(
                                    match &v1035 {
                                        Dice_ui::US14::US14_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<std::string::String>,
                            };
                            let v1046: Option<Dice_ui::US8> = map(Dice_ui::method40(), v1043);
                            let v1162: Dice_ui::US7 =
                                defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v1046));
                            if let Dice_ui::US7::US7_0(v1162_0_0) = &v1162 {
                                let v1166: Dice_ui::US8 = v1162_0_0.clone();
                                if let Dice_ui::US8::US8_0(v1166_0_0) = &v1166 {
                                    Dice_ui::US8::US8_0(v1166_0_0.clone())
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        };
                        let v1178: string =
                            append((append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                           sprintf!("{:?}", v1173.clone()))),
                                   string(""));
                        let v1180: bool = true;
                        leptos::logging::log!("{}", v1178);
                        if let Dice_ui::US8::US8_0(v1173_0_0) = &v1173 {
                            let v1181: LrcPtr<Dice_ui::Heap3> = v1173_0_0.clone();
                            let v1184: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1186: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1184);
                            let v1189: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1186.l0.clone(),
                                |x: &mut /*;
                                 let v1191: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1196: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1181 = v1181.clone();
                                        move |v_1: bool| Dice_ui::closure32(v1181.clone(), v_1)
                                    })(x.clone())
                                },
                            ); //;
                            let v1199: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1201: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1199);
                            let v1204: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1201.l1.clone(),
                                |x: &mut /*;
                                 let v1206: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1211: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1181 = v1181.clone();
                                        move |v_2: bool| Dice_ui::closure33(v1181.clone(), v_2)
                                    })(x.clone())
                                },
                            ); //;
                            let v1214: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1216: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1214);
                            let v1219: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1216.l2.clone(),
                                |x: &mut /*;
                                 let v1221: */
                                 std::string::String /* =
                                                         fable_library_rust::Native_::getZero::<()>();
                                                     let v1226: bool =
                                                         */| {
                                    *x = Func1::new({
                                        let v1181 = v1181.clone();
                                        move |v_3: std::string::String| {
                                            Dice_ui::closure34(v1181.clone(), v_3)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            let v1229: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1231: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1229);
                            let v1234: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1231.l3.clone(),
                                |x: &mut /*;
                                 let v1236: */
                                 LrcPtr<Dice_ui::Heap0> /* =
                                                            fable_library_rust::Native_::getZero::<()>();
                                                        let v1241: bool =
                                                            */| {
                                    *x = Func1::new({
                                        let v1181 = v1181.clone();
                                        move |v_4: LrcPtr<Dice_ui::Heap0>| {
                                            Dice_ui::closure35(v1181.clone(), v_4)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            true
                        } else {
                            false
                        }
                    } else {
                        false
                    }
                } else {
                    false
                };
                let v1246: bool = true; /*;
                                        let v1248: bool = */
            }); //;
            let v1250: Func0<()> = _func0_from_v663;
            let v1252: bool = true;
            leptos::prelude::Effect::new(move |_| v1250());
            let v1255: leptos::prelude::ArcMemo<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure36(v7.clone(), ())
                })()
            });
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1261: bool = true;
            let _func1_from_v1259 = Func1::from(move |value| {
                //;
                let v1263: LrcPtr<Dice_ui::Heap3> = value;
                let v1265: string = sprintf!("{:?}", v1263.clone());
                let v1269: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v127), |x| x.clone());
                let v1286: Dice_ui::US2 =
                    defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v1269));
                let v1291: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v1293: bool = */
                    async move {
                        /*;
                        let v1295: bool = */
                        ();
                        let v1393: bool = match &v1286 {
                            Dice_ui::US2::US2_0(v1286_0_0) => {
                                let v1297: string =
                            append((append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                           (v1265.clone()))), string(""));
                                let v1299: bool = true;
                                leptos::logging::log!("{}", v1297);
                                let v1305: string = append(
                                    (append(
                                        string("state_core.set_data () / data_len: "),
                                        (toString(length(sprintf!("{:?}", v1263.clone())) as i64)),
                                    )),
                                    string(""),
                                );
                                let v1307: bool = true;
                                leptos::logging::log!("{}", v1305);
                                let v1309: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v1311: bool = */
                                    async move {
                                        /*;
                                        let v1313: bool = */
                                        ();
                                        let v1315: bool = true;
                                        let mut data = Vec::new();
                                        let v1317: bool = true;
                                        borsh::BorshSerialize::serialize(&v1263.clone(), &mut data)
                                            .unwrap();
                                        let v1319: Vec<u8> = data;
                                        let v1321: wasm_bindgen::JsValue =
                                            serde_wasm_bindgen::to_value(&v1319).unwrap();
                                        let v1322: string = Dice_ui::method43();
                                        let v1331: &str = &*v1322;
                                        let v1357: rexie::Transaction = match &v1286 {
                                            Dice_ui::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone()
                                        .transaction(
                                            &["store"],
                                            rexie::TransactionMode::ReadWrite,
                                        )?;
                                        let v1359: rexie::Store = v1357.store("store")?;
                                        let v1361: bool = true;
                                        v1359.put(&v1321, Some(&v1331.into())).await?;
                                        let v1363: bool = true;
                                        v1357.done().await?;
                                        let v1365: string = string("}");
                                        let v1372: bool = true;
                                        let _fix_closure_v1367 = Ok::<(), rexie::Error>(());
                                        let v1377: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1367 "),
                                                        (v1365),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1378: bool = true;
                                        _fix_closure_v1367
                                    },
                                ); // rust.fix_closure';
                                let v1380 = __future_init;
                                let v1382: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = v1380;
                                let v1384: Result<(), rexie::Error> = v1382.await;
                                v1384.unwrap();
                                true
                            }
                            _ => {
                                let v1391: bool = true;
                                leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                                false
                            }
                        };
                        let v1400: string =
                            string("true; _fix_closure_v1396 });  // rust.fix_closure\'");
                        let v1401: bool = true;
                        _fix_closure_v1396
                    },
                ); // rust.fix_closure';
                let v1403 = __future_init;
                let v1405: std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> = v1403;
                let v1408: bool = true;
                v1405 /*;
                      let v1410: bool = */
            }); //;
            let v1412: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = _func1_from_v1259;
            let v1415: leptos::prelude::ArcAction<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap3>| {
                    Func1::new({
                        let v1412 = v1412.clone();
                        move |v_5: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure37(v1412.clone(), v_5)
                    })(value.clone())
                });
            let v1418: bool = true;
            let _func0_from_v1416 = Func0::from(move || {
                //;
                let v1420: bool = leptos::prelude::ReadSignal::get(&patternInput.0.clone());
                let v1421: string =
                append((append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                               (ofBoolean(v1420)))), string(""));
                let v1423: bool = true;
                leptos::logging::log!("{}", v1421);
                let v1426: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1428: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1426);
                let v1431: bool = leptos::prelude::ArcRwSignal::get(&v1428.l0.clone());
                let v1434: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1436: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1434);
                let v1439: bool = leptos::prelude::ArcRwSignal::get(&v1436.l1.clone());
                let v1442: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1444: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1442);
                let v1447: std::string::String =
                    leptos::prelude::ArcRwSignal::get(&v1444.l2.clone());
                let v1450: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1452: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1450);
                let v1456: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v1431,
                    l1: v1439,
                    l2: v1447,
                    l3: leptos::prelude::ArcRwSignal::get(&v1452.l3.clone()),
                });
                let v1461: string =
                append((append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                               sprintf!("{:?}", v1456.clone()))), string(""));
                let v1463: bool = true;
                leptos::logging::log!("{}", v1461);
                let v1465: std::collections::HashMap<
                    std::string::String,
                    leptos::prelude::ArcRwSignal<bool>,
                > = leptos::prelude::ArcMemo::get(&v1255);
                let v1475: &str = &*string("dark_mode_key");
                let v1533: std::string::String = Dice_ui::method45(String::from(v1475));
                let v1535: Option<leptos::prelude::ArcRwSignal<bool>> =
                    std::collections::HashMap::get(&v1465, &v1533)
                        .map(|x| x)
                        .cloned();
                let v1552: Dice_ui::US16 =
                    defaultValue(Dice_ui::US16::US16_1, map(Dice_ui::method46(), v1535));
                let v1562: Dice_ui::US17 = match &v1552 {
                    Dice_ui::US16::US16_0(v1552_0_0) => {
                        Dice_ui::US17::US17_0(leptos::prelude::ArcRwSignal::get(
                            &match &v1552 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US17::US17_1,
                };
                let v1565: bool = match &v1562 {
                    Dice_ui::US17::US17_0(v1562_0_0) => match &v1562 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => false,
                };
                let v1566: string =
                append((append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                               (ofBoolean(v1565)))), string(""));
                let v1568: bool = true;
                leptos::logging::log!("{}", v1566);
                let v1663: bool = if (v1565) == false {
                    if (v1420) == false {
                        let v1572: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &patternInput.1.clone(),
                            |x: &mut /*;
                             let v1574: */
                             bool /* = fable_library_rust::Native_::getZero();
                                  let v1579: bool =
                                      */| {
                                *x = Func1::new(move |v_6: bool| Dice_ui::closure39((), v_6))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        true
                    } else {
                        let v1582: bool = true;
                        leptos::logging::log!("{}", string("state_core.use_core_database (18) / effect new_core_state_heap / ##4"));
                        let v1584: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                            Dice_ui::method29(Dice_ui::method28());
                        let v1585 = Dice_ui::method30();
                        let v1586 = Dice_ui::method31();
                        let v1587: Dice_ui::US9 = match &v1584 {
                            Err(v1584_1_0) => v1586(v1584_1_0.clone()),
                            Ok(v1584_0_0) => v1585(v1584_0_0.clone()),
                        };
                        let v1613: Dice_ui::US10 = match &v1587 {
                            Dice_ui::US9::US9_0(v1587_0_0) => Dice_ui::US10::US10_0(defaultValue(
                                Dice_ui::US11::US11_1,
                                map(Dice_ui::method32(), v1587_0_0.clone()),
                            )),
                            Dice_ui::US9::US9_1(v1587_1_0) => {
                                Dice_ui::US10::US10_1(v1587_1_0.clone())
                            }
                        };
                        if let Dice_ui::US10::US10_0(v1613_0_0) = &v1613 {
                            let v1614: Dice_ui::US11 = v1613_0_0.clone();
                            if let Dice_ui::US11::US11_0(v1614_0_0) = &v1614 {
                                let v1617: bool = true;
                                leptos::prelude::ArcAction::dispatch(&v1415, v1456.clone().clone());
                                let v1618: web_sys::Storage = Dice_ui::method47(v1614_0_0.clone());
                                let v1619: string = Dice_ui::method48();
                                let v1628: &str = &*v1619;
                                let v1653: LrcPtr<Dice_ui::Heap3> = Dice_ui::method49(v1456);
                                let v1655: std::string::String =
                                    serde_json::json!(v1653).to_string();
                                let v1657: &str = v1655.as_str();
                                let v1659: bool = true;
                                web_sys::Storage::set(&v1618, v1628, v1657).unwrap();
                                true
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                } else {
                    false
                };
                let v1665: bool = true; /*;
                                        let v1667: bool = */
            }); //;
            let v1669: Func0<()> = _func0_from_v1416;
            let v1671: bool = true;
            leptos::prelude::Effect::new(move |_| v1669());
            let v1673 = Dice_ui::method50(v7.clone());
            let v1677: string = string(" class:dark={move || v1673()} class=\"flex flex-1\"");
            let v1680: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v1682: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1684: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v1686: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1689: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v1686 = v1686.clone();
                        move || Dice_ui::closure41(v1686.clone(), ())
                    })()
                });
            let v1691: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v1693: LrcPtr<Dice_ui::Heap2> = v1691.unwrap();
            let patternInput_1: (
                leptos::prelude::ReadSignal<Dice_ui::US18>,
                leptos::prelude::WriteSignal<Dice_ui::US18>,
            ) = leptos::prelude::signal(Dice_ui::US18::US18_0);
            let v1696: leptos::prelude::ReadSignal<Dice_ui::US18> = patternInput_1.0.clone();
            let patternInput_2: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1703: bool = true;
            let _func0_from_v1701 = Func0::from(move || {
                //;
                let v1705: bool = leptos::prelude::ReadSignal::get(&patternInput_2.0.clone());
                let v1707: leptos::prelude::Memo<std::string::String> = v1682.clone().hash;
                let v1709: std::string::String = leptos::prelude::Memo::get(&v1707);
                let v1712: string =
                    sprintf!("{}{}", leptos::prelude::ArcMemo::get(&v1689), v1709.clone());
                let v1713: string = append(
                    (append(
                        (append(
                            (append(
                                string("content.render () / effect 1 / new_url_hash: "),
                                (v1712.clone()),
                            )),
                            string(" / loaded: "),
                        )),
                        (ofBoolean(v1705)),
                    )),
                    string(""),
                );
                let v1715: bool = true;
                leptos::logging::log!("{}", v1713);
                let v1848: bool = if (v1705) == false {
                    let v1717: std::string::String = Dice_ui::method51(v1709);
                    if v1717 == "" {
                        let v1722: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v1693.l0.clone());
                        let v1724: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v1722);
                        let v1727: std::string::String =
                            leptos::prelude::ArcRwSignal::get(&v1724.l2.clone());
                        let v1729: string = fable_library_rust::String_::fromString(v1727);
                        let v1730: string = append(
                            (append(
                                string("content.render () / effect 1 / url_hash: "),
                                (v1729.clone()),
                            )),
                            string(""),
                        );
                        let v1732: bool = true;
                        leptos::logging::log!("{}", v1730);
                        if contains(v1729.clone(), string("#")) {
                            let v1746: &str = &*v1729;
                            v1684(v1746, Default::default());
                            ()
                        }
                    }
                    {
                        let v1773: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_2.1.clone(), true); //;
                        true
                    }
                } else {
                    let v1776: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v1693.l0.clone());
                    let v1778: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v1776);
                    let v1788: &str = &*v1712;
                    let v1821: std::string::String = String::from(v1788);
                    let v1847: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v1778.l2.clone(), v1821); //;
                    false
                };
                let v1850: bool = true; /*;
                                        let v1852: bool = */
            }); //;
            let v1854: Func0<()> = _func0_from_v1701;
            let v1856: bool = true;
            leptos::prelude::Effect::new(move |_| v1854());
            let v1859: bool = true;
            let _func0_from_v1857 = Func0::from(move || {
                //;
                let v1861: leptos::prelude::Memo<std::string::String> = v1682.hash;
                let v1864: std::string::String =
                    Dice_ui::method52(leptos::prelude::Memo::get(&v1861));
                let v1866: Option<&str> = v1864.strip_prefix('#');
                let v1867: string = string("r#\"\"#");
                let v1868: &str = r#""#;
                let v1870: &str = v1866.unwrap_or(v1868);
                let v1872: Result<leptos_router::location::Url, std::string::String> =
                    leptos_router::location::Url::try_from(v1870);
                let v1873 = Dice_ui::method53();
                let v1874 = Dice_ui::method54();
                let v1875: Dice_ui::US20 = match &v1872 {
                    Err(v1872_1_0) => v1874(v1872_1_0.clone()),
                    Ok(v1872_0_0) => v1873(v1872_0_0.clone()),
                };
                let v1886: std::string::String = format!("{:#?}", v1875.clone());
                let v1915: string = append(
                    (append(
                        string("content.render () / effect 2 / hash_url: "),
                        (fable_library_rust::String_::fromString(v1886)),
                    )),
                    string(""),
                );
                let v1917: bool = true;
                leptos::logging::log!("{}", v1915);
                let v2042: bool = match &v1875 {
                    Dice_ui::US20::US20_0(v1875_0_0) => {
                        let v1918: leptos_router::location::Url = v1875_0_0.clone();
                        let v1920: std::string::String = v1918.clone().pathname;
                        let v1933: Dice_ui::US21 = if startsWith3(
                            fable_library_rust::String_::fromString(v1920),
                            string("/dice"),
                            false,
                        ) {
                            Dice_ui::US21::US21_0(Dice_ui::US18::US18_1(Dice_ui::US19::US19_0))
                        } else {
                            Dice_ui::US21::US21_1
                        };
                        let v1951: Dice_ui::US21 = match &v1933 {
                            Dice_ui::US21::US21_0(v1933_0_0) => Dice_ui::US21::US21_0(
                                match &v1933 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1937: std::string::String = v1918.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1937),
                                    string("/lists"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_2)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1969: Dice_ui::US21 = match &v1951 {
                            Dice_ui::US21::US21_0(v1951_0_0) => Dice_ui::US21::US21_0(
                                match &v1951 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1955: std::string::String = v1918.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1955),
                                    string("/transactions"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_3)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1987: Dice_ui::US21 = match &v1969 {
                            Dice_ui::US21::US21_0(v1969_0_0) => Dice_ui::US21::US21_0(
                                match &v1969 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1973: std::string::String = v1918.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1973),
                                    string("/settings"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_4)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1992: Dice_ui::US18 = match &v1987 {
                            Dice_ui::US21::US21_0(v1987_0_0) => match &v1987 {
                                Dice_ui::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => Dice_ui::US18::US18_1(Dice_ui::US19::US19_0),
                        };
                        let v2003: std::string::String = format!("{:#?}", v1992.clone());
                        let v2032: string = append(
                            (append(
                                string("content.render () / effect 2 / new_tab: "),
                                (fable_library_rust::String_::fromString(v2003)),
                            )),
                            string(""),
                        );
                        let v2034: bool = true;
                        leptos::logging::log!("{}", v2032);
                        let v2036: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_1.1.clone(), v1992); //;
                        true
                    }
                    Dice_ui::US20::US20_1(v1875_1_0) => {
                        let v2038: string = append(
                            (append(
                                string("content.render () / effect 2 / hash_url error: "),
                                (toString(v1875_1_0.clone())),
                            )),
                            string(""),
                        );
                        let v2040: bool = true;
                        leptos::logging::log!("{}", v2038);
                        false
                    }
                };
                let v2044: bool = true; /*;
                                        let v2046: bool = */
            }); //;
            let v2048: Func0<()> = _func0_from_v1857;
            let v2050: bool = true;
            leptos::prelude::Effect::new(move |_| v2048());
            let v2052: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v2053: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v2054: string = append(
                (append((append(string(" "), (v2053))), string(""))),
                string(""),
            );
            let v2056: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v2058: Dice_ui::US18 = leptos::prelude::ReadSignal::get(&v1696.clone());
            let v5356: Dice_ui::US22 = match &v2058 {
                Dice_ui::US18::US18_1(v2058_1_0) => {
                    let v2062: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v2064: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v2066: LrcPtr<Dice_ui::Heap2> = v2064.unwrap();
                    let v2069: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v2072: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2066 = v2066.clone();
                                move || Dice_ui::closure44(v2066.clone(), ())
                            })()
                        });
                    let v2075: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2072 = v2072.clone();
                            move || Dice_ui::closure46(v2072.clone(), ())
                        })()
                    });
                    let v2078: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2066 = v2066.clone();
                            let v2072 = v2072.clone();
                            move || Dice_ui::closure48(v2066.clone(), v2072.clone(), ())
                        })()
                    });
                    let v2081: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2078 = v2078.clone();
                            move || Dice_ui::closure51(v2078.clone(), ())
                        })()
                    });
                    let v2084: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2078 = v2078.clone();
                                move || Dice_ui::closure55(v2078.clone(), ())
                            })()
                        });
                    let v2086: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v2081,
                        Func1::new(move |v_7: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_7)
                        }),
                    );
                    let v2093: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v2086.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2095: bool = true;
                    leptos::logging::log!("{}", v2093);
                    let v2098: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2084 = v2084.clone();
                            let v2086 = v2086.clone();
                            move || Dice_ui::closure90(v2084.clone(), v2086.clone(), ())
                        })()
                    });
                    let v2101: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2098 = v2098.clone();
                            move || Dice_ui::closure107(v2098.clone(), ())
                        })()
                    });
                    let v2106: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method159(
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2101 = v2101.clone();
                                move || Dice_ui::closure115(v2101.clone(), ())
                            })()
                        }),
                        Func1::new(move |v_8: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure119((), v_8)
                        }),
                    );
                    let v2113: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v2106.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2115: bool = true;
                    leptos::logging::log!("{}", v2113);
                    let v2118: bool = true;
                    let _func1_from_v2116 = Func1::from(move |value| {
                        //;
                        let v2125: string = append(
                            (append(
                                string("dice_view.render (2) / set_max_action / value: "),
                                sprintf!("{:?}", value),
                            )),
                            string(""),
                        );
                        let v2127: bool = true;
                        leptos::logging::log!("{}", v2125);
                        let v2129: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v2131: bool = */
                            async move {
                                /*;
                                let v2133: bool = */
                                ();
                                let v2143: &str = &*string("2.0");
                                let v2176: std::string::String = String::from(v2143);
                                let v2210: &str = &*string("dontcare");
                                let v2243: std::string::String = String::from(v2210);
                                let v2277: &str = &*string("EXPERIMENTAL_tx_status");
                                let v2310: std::string::String = String::from(v2277);
                                let v2344: &str =
                                    &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                                let v2377: std::string::String = String::from(v2344);
                                let v2411: &str = &*string("bowen");
                                let v2469: Array<std::string::String> =
                                    new_array(&[v2377, String::from(v2411)]);
                                let v2471: Vec<std::string::String> = v2469.to_vec();
                                let v2473: crate::model::near::rpc::RpcInput =
                                    crate::model::near::rpc::RpcInput {
                                        jsonrpc: v2176,
                                        id: v2243,
                                        method: v2310,
                                        params: v2471,
                                    };
                                let v2474: string = Dice_ui::method167();
                                let v2483: &str = &*v2474;
                                let v2541: std::string::String =
                                    Dice_ui::method92(String::from(v2483));
                                let v2543: reqwest_wasm::RequestBuilder =
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v2541);
                                let v2546: reqwest_wasm::RequestBuilder = Dice_ui::method94(
                                    reqwest_wasm::RequestBuilder::json(v2543, &v2473),
                                );
                                let v2548: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                reqwest_wasm::Response,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::RequestBuilder::send(v2546));
                                let v2550: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                    v2548.await;
                                let v2551 = Dice_ui::method95();
                                let v2557: Result<reqwest_wasm::Response, std::string::String> =
                                    v2550.map_err(|x| v2551(x));
                                let v2568: reqwest_wasm::Response = v2557?;
                                let v2570: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                std::string::String,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::Response::text(v2568));
                                let v2572: Result<std::string::String, reqwest_wasm::Error> =
                                    v2570.await;
                                let v2573 = Dice_ui::method95();
                                let v2579: Result<std::string::String, std::string::String> =
                                    v2572.map_err(|x| v2573(x));
                                let v2592: Result<Dice_ui::US14, std::string::String> =
                                    Ok::<Dice_ui::US14, std::string::String>(
                                        Dice_ui::US14::US14_0(v2579?),
                                    );
                                let v2599: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result1 / result: "),
                                                            sprintf!("{:?}",
                                                                     v2592.clone()))),
                                                    string("")));
                                let v2601: bool = true;
                                leptos::logging::log!("{}", v2599);
                                let v2602 = Dice_ui::method168();
                                let v2603 = Dice_ui::method169();
                                let v2604: Dice_ui::US57 = match &v2592 {
                                    Err(v2592_1_0) => v2603(v2592_1_0.clone()),
                                    Ok(v2592_0_0) => v2602(v2592_0_0.clone()),
                                };
                                let v2926: Dice_ui::US58 = if let Dice_ui::US57::US57_0(v2604_0_0) =
                                    &v2604
                                {
                                    let v2605: Dice_ui::US14 = v2604_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v2605_0_0) = &v2605 {
                                        let v2609: string = Dice_ui::method41(
                                            fable_library_rust::String_::fromString(
                                                v2605_0_0.clone(),
                                            ),
                                        );
                                        let v2618: &str = &*v2609;
                                        let v2644: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            serde_json::Error,
                                        > = serde_json::from_str(&v2618);
                                        let v2645 = Dice_ui::method42();
                                        let v2658: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            std::string::String,
                                        > = v2644.map_err(|x| v2645(x));
                                        let v2661 = Dice_ui::method170();
                                        let v2662 = Dice_ui::method171();
                                        let v2663: Dice_ui::US60 = match &v2658 {
                                            Err(v2658_1_0) => v2662(v2658_1_0.clone()),
                                            Ok(v2658_0_0) => v2661(v2658_0_0.clone()),
                                        };
                                        let v2910: Dice_ui::US61 = match &v2663 {
                                            Dice_ui::US60::US60_0(v2663_0_0) => {
                                                let v2664: crate::model::near::rpc::RpcResponse =
                                                    v2663_0_0.clone();
                                                let v2666: std::string::String =
                                                    v2664.clone().jsonrpc;
                                                let v2668: Option<
                                                    crate::model::near::rpc::TransactionStatus,
                                                > = v2664.clone().result;
                                                let v2671: Option<(
                                                    Array<(
                                                        std::string::String,
                                                        Array<
                                                            std::collections::HashMap<
                                                                std::string::String,
                                                                (
                                                                    std::string::String,
                                                                    Option<std::string::String>,
                                                                    Option<f64>,
                                                                    Option<std::string::String>,
                                                                ),
                                                            >,
                                                        >,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        Array<std::string::String>,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        u64,
                                                        Array<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        u8,
                                                        Array<std::string::String>,
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            std::string::String,
                                                        >,
                                                        Option<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                    )>,
                                                )> = map(Dice_ui::method150(), v2668);
                                                let v2859: Option<
                                                    crate::model::near::rpc::RpcError,
                                                > = v2664.clone().error;
                                                Dice_ui::US61::US61_0(
                                                    v2666,
                                                    v2671,
                                                    map(Dice_ui::method157(), v2859),
                                                    v2664.id,
                                                )
                                            }
                                            Dice_ui::US60::US60_1(v2663_1_0) => {
                                                Dice_ui::US61::US61_1(v2663_1_0.clone())
                                            }
                                        };
                                        match &v2910 {
                                            Dice_ui::US61::US61_0(
                                                v2910_0_0,
                                                v2910_0_1,
                                                v2910_0_2,
                                                v2910_0_3,
                                            ) => Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                                v2910_0_0.clone(),
                                                v2910_0_1.clone(),
                                                v2910_0_2.clone(),
                                                v2910_0_3.clone(),
                                            )),
                                            Dice_ui::US61::US61_1(v2910_1_0) => {
                                                Dice_ui::US58::US58_1(v2910_1_0.clone())
                                            }
                                        }
                                    } else {
                                        Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                    }
                                } else {
                                    Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                };
                                let v2932: Result<Dice_ui::US59, std::string::String> = match &v2926
                                {
                                    Dice_ui::US58::US58_0(v2926_0_0) => {
                                        Ok::<Dice_ui::US59, std::string::String>(v2926_0_0.clone())
                                    }
                                    Dice_ui::US58::US58_1(v2926_1_0) => {
                                        Err::<Dice_ui::US59, std::string::String>(v2926_1_0.clone())
                                    }
                                };
                                let v2939: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result2 / result: "),
                                                            sprintf!("{:?}",
                                                                     v2932.clone()))),
                                                    string("")));
                                let v2941: bool = true;
                                leptos::logging::log!("{}", v2939);
                                let v2942: string = string("}");
                                let v2949: bool = true;
                                let _fix_closure_v2944 = v2932;
                                let v2954: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v2944 "), (v2942))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v2955: bool = true;
                                _fix_closure_v2944
                            },
                        ); // rust.fix_closure';
                        let v2957 = __future_init;
                        let v2959: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Dice_ui::US59, std::string::String>,
                                >,
                            >,
                        > = v2957;
                        let v2962: bool = true;
                        v2959 /*;
                              let v2964: bool = */
                    }); //;
                    let v2966: Func1<
                        LrcPtr<Dice_ui::Heap6>,
                        std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Dice_ui::US59, std::string::String>,
                                >,
                            >,
                        >,
                    > = _func1_from_v2116;
                    let v2969: leptos::prelude::ArcAction<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US59, std::string::String>,
                    > = leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap6>| {
                        Func1::new({
                            let v2966 = v2966.clone();
                            move |v_9: LrcPtr<Dice_ui::Heap6>| {
                                Dice_ui::closure141(v2966.clone(), v_9)
                            }
                        })(value.clone())
                    });
                    let v2972: leptos::prelude::ArcMemo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2969 = v2969.clone();
                            move || Dice_ui::closure142(v2969.clone(), ())
                        })()
                    });
                    let v2975: leptos::prelude::ArcMemo<Option<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2972 = v2972.clone();
                                move || Dice_ui::closure147(v2972.clone(), ())
                            })()
                        });
                    let v2978: leptos::prelude::ArcMemo<Dice_ui::US31> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2066 = v2066.clone();
                                move || Dice_ui::closure152(v2066.clone(), ())
                            })()
                        });
                    let v2981: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2066 = v2066.clone();
                            move || Dice_ui::closure153(v2066.clone(), ())
                        })()
                    });
                    let v2984: leptos::prelude::ArcMemo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2981 = v2981.clone();
                            move || Dice_ui::closure158(v2981.clone(), ())
                        })()
                    });
                    let v2985: string = string("vec![]");
                    let v2986: Vec<leptos::prelude::AnyView> = vec![];
                    let v2988: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2986);
                    let v2990: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v2992() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v2993 = {
                        let clo = Func0::from(v2992);
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    fn v2995() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v2996 = {
                        let clo_1 = Func0::from(v2995);
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v2998: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3002: string = string("vec![v2988]");
                    let v3003: Vec<leptos::prelude::AnyView> = vec![v2988];
                    let v3005: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3003);
                    let v3007: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3005);
                    let v3010: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2998))),
                                        string(">move || { v3007 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3012: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3007 }</div> };
                    let v3014: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3012);
                    let v3015: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2993(())");
                    let v3018: string = append(
                        (append(
                            string(" open=move || v2996(())"),
                            (append(
                                (append((append(string(" "), (v3015))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3021 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure163((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v3024 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure164((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v3025: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3024(()) + \" \" + &v3021(())");
                    let v3026: string = append(
                        (append((append(string(" "), (v3025))), string(""))),
                        string(""),
                    );
                    let v3028: string = string(" class=\"flex items-center gap-2\"");
                    let v3031: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3032: string = (Dice_ui::method187())();
                    let v3041: &str = &*v3032;
                    let v3074: std::string::String = String::from(v3041);
                    let v3100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3074),
                    );
                    let v3104: string = string("vec![v3100]");
                    let v3105: Vec<leptos::prelude::AnyView> = vec![v3100];
                    let v3107: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3105);
                    let v3109: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3107);
                    let v3112: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3031))),
                                        string(">move || { v3109 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3114: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3109 }</span> };
                    let v3116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3114);
                    let v3120: string = string("vec![v3116]");
                    let v3121: Vec<leptos::prelude::AnyView> = vec![v3116];
                    let v3123: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3121);
                    let v3125: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3123);
                    let v3127: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3028))),
                                        string(">move || { v3125 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3129: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3125 }</div> };
                    let v3131: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3129);
                    let v3133: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v3135() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v3136 = {
                        let clo_4 = Func0::from(v3135);
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v3144: string =
                            string(" class=move || \" \".to_owned() + &v3136(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v3146: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v3150: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3146))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3151: string = string("vec![]");
                    let v3152: Vec<leptos::prelude::AnyView> = vec![];
                    let v3154: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3152);
                    let v3156: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3154);
                    let v3159: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3150))),
                                        string(">move || { v3156 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3161: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3156 }</path> };
                    let v3163: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3161);
                    let v3167: string = string("vec![v3163]");
                    let v3168: Vec<leptos::prelude::AnyView> = vec![v3163];
                    let v3170: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3168);
                    let v3172: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3170);
                    let v3175: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3144))),
                                        string(">move || { v3172 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3177: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3136(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3172 }</svg> };
                    let v3179: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3177);
                    let v3183: string = string("vec![v3179]");
                    let v3184: Vec<leptos::prelude::AnyView> = vec![v3179];
                    let v3186: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3184);
                    let v3188: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3186);
                    let v3190: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3133))),
                                        string(">move || { v3188 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3192: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3188 }</span> };
                    let v3194: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3192);
                    let v3202: string = string("vec![v3131, v3194]");
                    let v3203: Vec<leptos::prelude::AnyView> = vec![v3131, v3194];
                    let v3205: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3203);
                    let v3207: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3205);
                    let v3210: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3026))),
                                        string(">move || { v3207 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3212: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3024(()) + " " + &v3021(())>move || { v3207 }</summary> };
                    let v3214: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3212);
                    let v3216: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3220: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2066 = v2066.clone();
                                let v2969 = v2969.clone();
                                let v2975 = v2975.clone();
                                let v2978 = v2978.clone();
                                let v2984 = v2984.clone();
                                move || {
                                    Dice_ui::closure167(
                                        v2066.clone(),
                                        v2969.clone(),
                                        v2975.clone(),
                                        v2978.clone(),
                                        v2984.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3222: leptos::prelude::Fragment = (move || v3220())();
                    let v3224: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3222);
                    let v3226: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3216))),
                                        string(">move || { v3224 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3228: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3224 }</div> };
                    let v3230: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3228);
                    let v3237: string = string("vec![v3214, v3230]");
                    let v3238: Vec<leptos::prelude::AnyView> = vec![v3214, v3230];
                    let v3240: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3238);
                    let v3242: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3240);
                    let v3245: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3018))),
                                        string(">move || { v3242 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3247: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v2996(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v2993(())>move || { v3242 }</details> };
                    let v3249: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3247);
                    let v3256: string = string("vec![v3014, v3249]");
                    let v3257: Vec<leptos::prelude::AnyView> = vec![v3014, v3249];
                    let v3259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3257);
                    let v3261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3259);
                    let v3263: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2990))),
                                        string(">move || { v3261 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3265: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3261 }</div> };
                    let v3267: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3265);
                    let v3268: string = string("vec![]");
                    let v3269: Vec<leptos::prelude::AnyView> = vec![];
                    let v3271: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3269);
                    let v3273: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v3275 = {
                        let clo_5 = Func0::from(v2992);
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v3277 = {
                        let clo_6 = Func0::from(v2995);
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v3279: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3283: string = string("vec![v3271]");
                    let v3284: Vec<leptos::prelude::AnyView> = vec![v3271];
                    let v3286: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3284);
                    let v3288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3286);
                    let v3290: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3279))),
                                        string(">move || { v3288 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3292: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3288 }</div> };
                    let v3294: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3292);
                    let v3295: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3275(())");
                    let v3298: string = append(
                        (append(
                            string(" open=move || v3277(())"),
                            (append(
                                (append((append(string(" "), (v3295))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3301 = {
                        let clo_7 = Func0::new(move || Dice_ui::closure183((), ()));
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v3304 = {
                        let clo_8 = Func0::new(move || Dice_ui::closure184((), ()));
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v3305: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3304(()) + \" \" + &v3301(())");
                    let v3306: string = append(
                        (append((append(string(" "), (v3305))), string(""))),
                        string(""),
                    );
                    let v3308: string = string(" class=\"flex items-center gap-2\"");
                    let v3311: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3312: string = (Dice_ui::method198())();
                    let v3321: &str = &*v3312;
                    let v3354: std::string::String = String::from(v3321);
                    let v3380: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3354),
                    );
                    let v3384: string = string("vec![v3380]");
                    let v3385: Vec<leptos::prelude::AnyView> = vec![v3380];
                    let v3387: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3385);
                    let v3389: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3387);
                    let v3391: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3311))),
                                        string(">move || { v3389 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3393: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3389 }</span> };
                    let v3395: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3393);
                    let v3399: string = string("vec![v3395]");
                    let v3400: Vec<leptos::prelude::AnyView> = vec![v3395];
                    let v3402: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3400);
                    let v3404: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3402);
                    let v3406: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3308))),
                                        string(">move || { v3404 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3408: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3404 }</div> };
                    let v3410: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3408);
                    let v3412: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v3414 = {
                        let clo_9 = Func0::from(v3135);
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v3422: string =
                            string(" class=move || \" \".to_owned() + &v3414(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v3424: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v3428: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3424))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3429: string = string("vec![]");
                    let v3430: Vec<leptos::prelude::AnyView> = vec![];
                    let v3432: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3430);
                    let v3434: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3432);
                    let v3436: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3428))),
                                        string(">move || { v3434 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3438: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3434 }</path> };
                    let v3440: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3438);
                    let v3444: string = string("vec![v3440]");
                    let v3445: Vec<leptos::prelude::AnyView> = vec![v3440];
                    let v3447: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3445);
                    let v3449: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3447);
                    let v3451: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3422))),
                                        string(">move || { v3449 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3453: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3414(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3449 }</svg> };
                    let v3455: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3453);
                    let v3459: string = string("vec![v3455]");
                    let v3460: Vec<leptos::prelude::AnyView> = vec![v3455];
                    let v3462: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3460);
                    let v3464: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3462);
                    let v3466: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3412))),
                                        string(">move || { v3464 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3468: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3464 }</span> };
                    let v3470: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3468);
                    let v3477: string = string("vec![v3410, v3470]");
                    let v3478: Vec<leptos::prelude::AnyView> = vec![v3410, v3470];
                    let v3480: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3478);
                    let v3482: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3480);
                    let v3484: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3306))),
                                        string(">move || { v3482 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3486: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3304(()) + " " + &v3301(())>move || { v3482 }</summary> };
                    let v3488: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3486);
                    let v3490: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3494: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2078 = v2078.clone();
                                let v2098 = v2098.clone();
                                let v2106 = v2106.clone();
                                move || {
                                    Dice_ui::closure186(
                                        v2106.clone(),
                                        v2098.clone(),
                                        v2078.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3496: leptos::prelude::Fragment = (move || v3494())();
                    let v3498: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3496);
                    let v3500: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3490))),
                                        string(">move || { v3498 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3502: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3498 }</div> };
                    let v3504: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3502);
                    let v3511: string = string("vec![v3488, v3504]");
                    let v3512: Vec<leptos::prelude::AnyView> = vec![v3488, v3504];
                    let v3514: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3512);
                    let v3516: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3514);
                    let v3518: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3298))),
                                        string(">move || { v3516 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3520: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v3277(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3275(())>move || { v3516 }</details> };
                    let v3522: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3520);
                    let v3529: string = string("vec![v3294, v3522]");
                    let v3530: Vec<leptos::prelude::AnyView> = vec![v3294, v3522];
                    let v3532: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3530);
                    let v3534: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3532);
                    let v3536: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3273))),
                                        string(">move || { v3534 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3538: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3534 }</div> };
                    let v3540: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3538);
                    let v3547: string = string("vec![v3267, v3540]");
                    let v3548: Vec<leptos::prelude::AnyView> = vec![v3267, v3540];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3548))
                }
                Dice_ui::US18::US18_2 => {
                    let v3554: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v3556: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3558: LrcPtr<Dice_ui::Heap2> = v3556.unwrap();
                    let v3568: &str = &*string("???");
                    let v3601: std::string::String = String::from(v3568);
                    let v3627: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3601),
                    );
                    let v3631: string = string("vec![v3627]");
                    let v3632: Vec<leptos::prelude::AnyView> = vec![v3627];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3632))
                }
                Dice_ui::US18::US18_4 => {
                    let v4373: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v4375: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v4377: LrcPtr<Dice_ui::Heap2> = v4375.unwrap();
                    let v4380: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v4377 = v4377.clone();
                            move || Dice_ui::closure192(v4377.clone(), ())
                        })()
                    });
                    let patternInput_3: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v4383: leptos::prelude::WriteSignal<i32> = patternInput_3.1.clone();
                    let v4386: leptos::prelude::ArcMemo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let patternInput_3 = patternInput_3.clone();
                            let v4380 = v4380.clone();
                            move || Dice_ui::closure195(v4380.clone(), patternInput_3.0.clone(), ())
                        })()
                    });
                    let v4389: leptos::prelude::ArcMemo<i32> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v4386 = v4386.clone();
                                move || Dice_ui::closure198(v4386.clone(), ())
                            })()
                        });
                    let v4392: bool = true;
                    let _func0_from_v4390 = Func0::from(move || {
                        //;
                        let v4395: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v4377.l0.clone());
                        let v4397: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4395);
                        let v4400: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v4397.l3.clone(),
                            |x: &mut /*;
                             let v4402: */
                             LrcPtr<Dice_ui::Heap0> /* =
                                                        fable_library_rust::Native_::getZero::<()>();
                                                    let v4407: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v4380 = v4380.clone();
                                    move |v_10: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure199(v4380.clone(), v_10)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v4409: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4383.clone(),
                            |x: &mut /*;
                             let v4411: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v4416: bool =
                                     */| {
                                *x = Func1::new(move |v_11: i32| Dice_ui::closure201((), v_11))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v4418: bool = true; /*;
                                                let v4420: bool = */
                    }); //;
                    let v4422: Func0<()> = _func0_from_v4390;
                    let v4425 = {
                        let clo_10 = Func0::new(move || Dice_ui::closure202((), ()));
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v4437: string =
                            string(" class=move || \" \".to_owned() + &v4425(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4443: string = string(
                        " d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v4444: string = string("vec![]");
                    let v4445: Vec<leptos::prelude::AnyView> = vec![];
                    let v4447: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4445);
                    let v4449: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4447);
                    let v4452: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4443))),
                                        string(">move || { v4449 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4454: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v4449 }</path> };
                    let v4456: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4454);
                    let v4460: string = string("vec![v4456]");
                    let v4461: Vec<leptos::prelude::AnyView> = vec![v4456];
                    let v4463: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4461);
                    let v4465: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4463);
                    let v4468: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4437))),
                                        string(">move || { v4465 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4470: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4425(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4465 }</svg> };
                    let v4475 = {
                        let clo_11 = Func0::new(move || Dice_ui::closure203((), ()));
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v4476: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v4475(())");
                    let v4479: string = append(
                        (append(
                            string(" aria-label=\"Add\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v4422()"),
                                    (append(
                                        (append((append(string(" "), (v4476))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4481: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4470);
                    let v4485: string = string("vec![v4481]");
                    let v4486: Vec<leptos::prelude::AnyView> = vec![v4481];
                    let v4488: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4486);
                    let v4490: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4488);
                    let v4493: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v4479))),
                                        string(">move || { v4490 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4495: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v4422() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v4475(())>move || { v4490 }</button> };
                    let v4497: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4495);
                    let v4498: string = string("vec![]");
                    let v4499: Vec<leptos::prelude::AnyView> = vec![];
                    let v4501: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4499);
                    let v4503: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v4505() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v4506 = {
                        let clo_12 = Func0::from(v4505);
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    fn v4508() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v4509 = {
                        let clo_13 = Func0::from(v4508);
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v4511: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4515: string = string("vec![v4497]");
                    let v4516: Vec<leptos::prelude::AnyView> = vec![v4497];
                    let v4518: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4516);
                    let v4520: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4518);
                    let v4523: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4511))),
                                        string(">move || { v4520 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4525: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4520 }</div> };
                    let v4527: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4525);
                    let v4528: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4506(())");
                    let v4531: string = append(
                        (append(
                            string(" open=move || v4509(())"),
                            (append(
                                (append((append(string(" "), (v4528))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4534 = {
                        let clo_14 = Func0::new(move || Dice_ui::closure204((), ()));
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v4537 = {
                        let clo_15 = Func0::new({
                            let v4497 = v4497.clone();
                            move || Dice_ui::closure205(v4497.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v4538: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4537(()) + \" \" + &v4534(())");
                    let v4539: string = append(
                        (append((append(string(" "), (v4538))), string(""))),
                        string(""),
                    );
                    let v4541: string = string(" class=\"flex items-center gap-2\"");
                    let v4544: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4545: string = (Dice_ui::method214(v4497.clone()))();
                    let v4554: &str = &*v4545;
                    let v4587: std::string::String = String::from(v4554);
                    let v4613: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4587),
                    );
                    let v4617: string = string("vec![v4613]");
                    let v4618: Vec<leptos::prelude::AnyView> = vec![v4613];
                    let v4620: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4618);
                    let v4622: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4620);
                    let v4625: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4544))),
                                        string(">move || { v4622 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4627: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4622 }</span> };
                    let v4629: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4627);
                    let v4633: string = string("vec![v4629]");
                    let v4634: Vec<leptos::prelude::AnyView> = vec![v4629];
                    let v4636: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4634);
                    let v4638: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4636);
                    let v4640: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4541))),
                                        string(">move || { v4638 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4642: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4638 }</div> };
                    let v4644: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4642);
                    let v4646: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v4648() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v4649 = {
                        let clo_16 = Func0::from(v4648);
                        Func1::new({
                            let clo_16 = clo_16.clone();
                            move |arg_16: ()| clo_16()
                        })
                    };
                    let v4657: string =
                            string(" class=move || \" \".to_owned() + &v4649(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4659: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v4663: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4659))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4664: string = string("vec![]");
                    let v4665: Vec<leptos::prelude::AnyView> = vec![];
                    let v4667: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4665);
                    let v4669: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4667);
                    let v4671: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4663))),
                                        string(">move || { v4669 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4673: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4669 }</path> };
                    let v4675: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4673);
                    let v4679: string = string("vec![v4675]");
                    let v4680: Vec<leptos::prelude::AnyView> = vec![v4675];
                    let v4682: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4680);
                    let v4684: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4682);
                    let v4686: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4657))),
                                        string(">move || { v4684 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4688: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4649(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4684 }</svg> };
                    let v4690: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4688);
                    let v4694: string = string("vec![v4690]");
                    let v4695: Vec<leptos::prelude::AnyView> = vec![v4690];
                    let v4697: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4695);
                    let v4699: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4697);
                    let v4701: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4646))),
                                        string(">move || { v4699 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4703: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4699 }</span> };
                    let v4705: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4703);
                    let v4713: string = string("vec![v4644, v4705]");
                    let v4714: Vec<leptos::prelude::AnyView> = vec![v4644, v4705];
                    let v4716: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4714);
                    let v4718: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4716);
                    let v4721: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4539))),
                                        string(">move || { v4718 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4723: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4537(()) + " " + &v4534(())>move || { v4718 }</summary> };
                    let v4725: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4723);
                    let v4727: string = string(" class=\"flex flex-1 flex-col\"");
                    let v4731: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4377 = v4377.clone();
                                let v4380 = v4380.clone();
                                let v4383 = v4383.clone();
                                let v4386 = v4386.clone();
                                let v4389 = v4389.clone();
                                move || {
                                    Dice_ui::closure207(
                                        v4377.clone(),
                                        v4386.clone(),
                                        v4389.clone(),
                                        v4380.clone(),
                                        v4383.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v4733: leptos::prelude::Fragment = (move || v4731())();
                    let v4735: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4733);
                    let v4737: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4727))),
                                        string(">move || { v4735 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4739: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4735 }</div> };
                    let v4741: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4739);
                    let v4748: string = string("vec![v4725, v4741]");
                    let v4749: Vec<leptos::prelude::AnyView> = vec![v4725, v4741];
                    let v4751: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4749);
                    let v4753: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4751);
                    let v4756: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4531))),
                                        string(">move || { v4753 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4758: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4509(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4506(())>move || { v4753 }</details> };
                    let v4760: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4758);
                    let v4767: string = string("vec![v4527, v4760]");
                    let v4768: Vec<leptos::prelude::AnyView> = vec![v4527, v4760];
                    let v4770: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4768);
                    let v4772: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4770);
                    let v4774: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4503))),
                                        string(">move || { v4772 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4776: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4772 }</div> };
                    let v4778: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4776);
                    let v4779: string = string("vec![]");
                    let v4780: Vec<leptos::prelude::AnyView> = vec![];
                    let v4782: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4780);
                    let v4784: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v4786 = {
                        let clo_17 = Func0::from(v4505);
                        Func1::new({
                            let clo_17 = clo_17.clone();
                            move |arg_17: ()| clo_17()
                        })
                    };
                    let v4788 = {
                        let clo_18 = Func0::from(v4508);
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v4790: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4794: string = string("vec![v4782]");
                    let v4795: Vec<leptos::prelude::AnyView> = vec![v4782];
                    let v4797: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4795);
                    let v4799: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4797);
                    let v4801: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4790))),
                                        string(">move || { v4799 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4803: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4799 }</div> };
                    let v4805: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4803);
                    let v4806: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4786(())");
                    let v4809: string = append(
                        (append(
                            string(" open=move || v4788(())"),
                            (append(
                                (append((append(string(" "), (v4806))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4812 = {
                        let clo_19 = Func0::new(move || Dice_ui::closure223((), ()));
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v4815 = {
                        let clo_20 = Func0::new(move || Dice_ui::closure224((), ()));
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v4816: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4815(()) + \" \" + &v4812(())");
                    let v4817: string = append(
                        (append((append(string(" "), (v4816))), string(""))),
                        string(""),
                    );
                    let v4819: string = string(" class=\"flex items-center gap-2\"");
                    let v4822: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4823: string = (Dice_ui::method228())();
                    let v4832: &str = &*v4823;
                    let v4865: std::string::String = String::from(v4832);
                    let v4891: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4865),
                    );
                    let v4895: string = string("vec![v4891]");
                    let v4896: Vec<leptos::prelude::AnyView> = vec![v4891];
                    let v4898: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4896);
                    let v4900: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4898);
                    let v4902: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4822))),
                                        string(">move || { v4900 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4904: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4900 }</span> };
                    let v4906: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4904);
                    let v4910: string = string("vec![v4906]");
                    let v4911: Vec<leptos::prelude::AnyView> = vec![v4906];
                    let v4913: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4911);
                    let v4915: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4913);
                    let v4917: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4819))),
                                        string(">move || { v4915 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4919: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4915 }</div> };
                    let v4921: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4919);
                    let v4923: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v4925 = {
                        let clo_21 = Func0::from(v4648);
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v4933: string =
                            string(" class=move || \" \".to_owned() + &v4925(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4935: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v4939: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4935))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4940: string = string("vec![]");
                    let v4941: Vec<leptos::prelude::AnyView> = vec![];
                    let v4943: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4941);
                    let v4945: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4943);
                    let v4947: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4939))),
                                        string(">move || { v4945 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4949: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4945 }</path> };
                    let v4951: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4949);
                    let v4955: string = string("vec![v4951]");
                    let v4956: Vec<leptos::prelude::AnyView> = vec![v4951];
                    let v4958: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4956);
                    let v4960: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4958);
                    let v4962: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4933))),
                                        string(">move || { v4960 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4964: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4925(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4960 }</svg> };
                    let v4966: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4964);
                    let v4970: string = string("vec![v4966]");
                    let v4971: Vec<leptos::prelude::AnyView> = vec![v4966];
                    let v4973: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4971);
                    let v4975: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4973);
                    let v4977: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4923))),
                                        string(">move || { v4975 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4979: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4975 }</span> };
                    let v4981: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4979);
                    let v4988: string = string("vec![v4921, v4981]");
                    let v4989: Vec<leptos::prelude::AnyView> = vec![v4921, v4981];
                    let v4991: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4989);
                    let v4993: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4991);
                    let v4995: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4817))),
                                        string(">move || { v4993 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4997: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4815(()) + " " + &v4812(())>move || { v4993 }</summary> };
                    let v4999: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4997);
                    let v5001: string = string(" class=\"flex flex-1 flex-col\"");
                    let v5005: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4377 = v4377.clone();
                                move || Dice_ui::closure226(v4377.clone(), ())
                            })()
                        }));
                    let v5007: leptos::prelude::Fragment = (move || v5005())();
                    let v5009: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5007);
                    let v5011: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5001))),
                                        string(">move || { v5009 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5013: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5009 }</div> };
                    let v5015: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5013);
                    let v5022: string = string("vec![v4999, v5015]");
                    let v5023: Vec<leptos::prelude::AnyView> = vec![v4999, v5015];
                    let v5025: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5023);
                    let v5027: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5025);
                    let v5029: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4809))),
                                        string(">move || { v5027 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5031: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4788(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4786(())>move || { v5027 }</details> };
                    let v5033: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5031);
                    let v5040: string = string("vec![v4805, v5033]");
                    let v5041: Vec<leptos::prelude::AnyView> = vec![v4805, v5033];
                    let v5043: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5041);
                    let v5045: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5043);
                    let v5047: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4784))),
                                        string(">move || { v5045 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5049: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5045 }</div> };
                    let v5051: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5049);
                    let v5054: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v4377.l0.clone());
                    let v5056: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v5054);
                    let v5337: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                        &v5056.l1.clone(),
                    ) {
                        let v5060: string = string("vec![]");
                        let v5061: Vec<leptos::prelude::AnyView> = vec![];
                        let v5063: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5061);
                        let v5065: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v5067 = {
                            let clo_22 = Func0::from(v4505);
                            Func1::new({
                                let clo_22 = clo_22.clone();
                                move |arg_22: ()| clo_22()
                            })
                        };
                        let v5069 = {
                            let clo_23 = Func0::from(v4508);
                            Func1::new({
                                let clo_23 = clo_23.clone();
                                move |arg_23: ()| clo_23()
                            })
                        };
                        let v5071: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v5075: string = string("vec![v5063]");
                        let v5076: Vec<leptos::prelude::AnyView> = vec![v5063];
                        let v5078: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5076);
                        let v5080: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5078);
                        let v5082: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5071))),
                                            string(">move || { v5080 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5084: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v5080 }</div> };
                        let v5086: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5084);
                        let v5087: string =
                                    string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v5067(())");
                        let v5090: string = append(
                            (append(
                                string(" open=move || v5069(())"),
                                (append(
                                    (append((append(string(" "), (v5087))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5093 = {
                            let clo_24 = Func0::new(move || Dice_ui::closure243((), ()));
                            Func1::new({
                                let clo_24 = clo_24.clone();
                                move |arg_24: ()| clo_24()
                            })
                        };
                        let v5096 = {
                            let clo_25 = Func0::new(move || Dice_ui::closure244((), ()));
                            Func1::new({
                                let clo_25 = clo_25.clone();
                                move |arg_25: ()| clo_25()
                            })
                        };
                        let v5097: string =
                                    string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v5096(()) + \" \" + &v5093(())");
                        let v5098: string = append(
                            (append((append(string(" "), (v5097))), string(""))),
                            string(""),
                        );
                        let v5100: string = string(" class=\"flex items-center gap-2\"");
                        let v5103: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v5104: string = (Dice_ui::method237())();
                        let v5113: &str = &*v5104;
                        let v5146: std::string::String = String::from(v5113);
                        let v5172: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v5146),
                        );
                        let v5176: string = string("vec![v5172]");
                        let v5177: Vec<leptos::prelude::AnyView> = vec![v5172];
                        let v5179: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5177);
                        let v5181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5179);
                        let v5183: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5103))),
                                            string(">move || { v5181 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5185: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5181 }</span> };
                        let v5187: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5185);
                        let v5191: string = string("vec![v5187]");
                        let v5192: Vec<leptos::prelude::AnyView> = vec![v5187];
                        let v5194: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5192);
                        let v5196: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5194);
                        let v5198: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5100))),
                                            string(">move || { v5196 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5200: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v5196 }</div> };
                        let v5202: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5200);
                        let v5204: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        let v5206 = {
                            let clo_26 = Func0::from(v4648);
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v5214: string =
                                    string(" class=move || \" \".to_owned() + &v5206(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v5216: string =
                                    string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v5220: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v5216))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5221: string = string("vec![]");
                        let v5222: Vec<leptos::prelude::AnyView> = vec![];
                        let v5224: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5222);
                        let v5226: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5224);
                        let v5228: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v5220))),
                                            string(">move || { v5226 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5230: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5226 }</path> };
                        let v5232: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5230);
                        let v5236: string = string("vec![v5232]");
                        let v5237: Vec<leptos::prelude::AnyView> = vec![v5232];
                        let v5239: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5237);
                        let v5241: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5239);
                        let v5243: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v5214))),
                                            string(">move || { v5241 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5245: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5206(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5241 }</svg> };
                        let v5247: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5245);
                        let v5251: string = string("vec![v5247]");
                        let v5252: Vec<leptos::prelude::AnyView> = vec![v5247];
                        let v5254: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5252);
                        let v5256: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5254);
                        let v5258: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5204))),
                                            string(">move || { v5256 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5260: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5256 }</span> };
                        let v5262: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5260);
                        let v5269: string = string("vec![v5202, v5262]");
                        let v5270: Vec<leptos::prelude::AnyView> = vec![v5202, v5262];
                        let v5272: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5270);
                        let v5274: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5272);
                        let v5276: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v5098))),
                                            string(">move || { v5274 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5278: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v5096(()) + " " + &v5093(())>move || { v5274 }</summary> };
                        let v5280: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5278);
                        let v5282: string = string(" class=\"flex flex-1 flex-col\"");
                        let v5286: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new(move || Dice_ui::closure246((), ()))()
                            }));
                        let v5288: leptos::prelude::Fragment = (move || v5286())();
                        let v5290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5288);
                        let v5292: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5282))),
                                            string(">move || { v5290 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5294: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5290 }</div> };
                        let v5296: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5294);
                        let v5303: string = string("vec![v5280, v5296]");
                        let v5304: Vec<leptos::prelude::AnyView> = vec![v5280, v5296];
                        let v5306: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5304);
                        let v5308: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5306);
                        let v5310: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v5090))),
                                            string(">move || { v5308 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5312: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v5069(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v5067(())>move || { v5308 }</details> };
                        let v5314: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5312);
                        let v5321: string = string("vec![v5086, v5314]");
                        let v5322: Vec<leptos::prelude::AnyView> = vec![v5086, v5314];
                        let v5324: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5322);
                        let v5326: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5324);
                        let v5328: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5065))),
                                            string(">move || { v5326 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5330: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5326 }</div> };
                        leptos::prelude::IntoAny::into_any(v5330)
                    } else {
                        let v5333: string = string("vec![]");
                        let v5334: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::IntoAny::into_any(v5334)
                    };
                    let v5347: string = string("vec![v4778, v5051, v5337]");
                    let v5348: Vec<leptos::prelude::AnyView> = vec![v4778, v5051, v5337];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v5348))
                }
                Dice_ui::US18::US18_3 => {
                    let v3638: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v3640: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3642: LrcPtr<Dice_ui::Heap2> = v3640.unwrap();
                    let v3645: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v3648: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3642 = v3642.clone();
                                move || Dice_ui::closure44(v3642.clone(), ())
                            })()
                        });
                    let v3651: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3648 = v3648.clone();
                            move || Dice_ui::closure46(v3648.clone(), ())
                        })()
                    });
                    let v3654: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3642 = v3642.clone();
                            let v3648 = v3648.clone();
                            move || Dice_ui::closure48(v3642.clone(), v3648.clone(), ())
                        })()
                    });
                    let v3657: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3654 = v3654.clone();
                            move || Dice_ui::closure51(v3654.clone(), ())
                        })()
                    });
                    let v3660: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3654 = v3654.clone();
                                move || Dice_ui::closure55(v3654.clone(), ())
                            })()
                        });
                    let v3662: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v3657,
                        Func1::new(move |v_12: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_12)
                        }),
                    );
                    let v3669: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v3662.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v3671: bool = true;
                    leptos::logging::log!("{}", v3669);
                    let v3674: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3660 = v3660.clone();
                            let v3662 = v3662.clone();
                            move || Dice_ui::closure90(v3660.clone(), v3662.clone(), ())
                        })()
                    });
                    let v3677: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3674 = v3674.clone();
                            move || Dice_ui::closure107(v3674.clone(), ())
                        })()
                    });
                    let v3689: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method159(
                                        leptos::prelude::ArcMemo::new(move |_| {
                                            Func0::new({
                                                let v3677 = v3677.clone();
                                                move || Dice_ui::closure115(v3677.clone(), ())
                                            })()
                                        }),
                                        Func1::new(
                                            move |v_13: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure119((), v_13)
                                            }
                                        )
                                    )
                                ),
                            )),
                            string(""),
                        ),
                    );
                    let v3691: bool = true;
                    leptos::logging::log!("{}", v3689);
                    let patternInput_4: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v3693: leptos::prelude::ReadSignal<bool> = patternInput_4.0.clone();
                    let v3695 = Func0::new({
                        let patternInput_4 = patternInput_4.clone();
                        move || Dice_ui::closure254(patternInput_4.1.clone(), ())
                    });
                    {
                        let v3699 = {
                            let clo_27 = Func0::new(move || Dice_ui::closure255((), ()));
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v3711: string =
                                string(" class=move || \" \".to_owned() + &v3699(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3714: string =
                                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
                        let v3717: string = append(
                            (append(
                                (append(string(" "), (v3714))),
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                            )),
                            string(""),
                        );
                        let v3718: string = string("vec![]");
                        let v3719: Vec<leptos::prelude::AnyView> = vec![];
                        let v3721: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3719);
                        let v3723: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3721);
                        let v3726: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3717))),
                                            string(">move || { v3723 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3728: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v3723 }</path> };
                        let v3730: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3728);
                        let v3736: string =
                                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v3737: string = string("vec![]");
                        let v3738: Vec<leptos::prelude::AnyView> = vec![];
                        let v3740: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3738);
                        let v3742: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3740);
                        let v3744: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3736))),
                                            string(">move || { v3742 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3746: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v3742 }</path> };
                        let v3748: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3746);
                        let v3756: string = string("vec![v3730, v3748]");
                        let v3757: Vec<leptos::prelude::AnyView> = vec![v3730, v3748];
                        let v3759: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3757);
                        let v3761: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3759);
                        let v3764: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3711))),
                                            string(">move || { v3761 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3766: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3699(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3761 }</svg> };
                        let v3771 = {
                            let clo_28 = Func0::new({
                                let v3693 = v3693.clone();
                                move || Dice_ui::closure256(v3693.clone(), ())
                            });
                            Func1::new({
                                let clo_28 = clo_28.clone();
                                move |arg_28: ()| clo_28()
                            })
                        };
                        let v3772: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v3771(())");
                        let v3775: string = append(
                            (append(
                                string(" aria-label=\"Settings\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v3695()"),
                                        (append(
                                            (append((append(string(" "), (v3772))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3777: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3766);
                        let v3781: string = string("vec![v3777]");
                        let v3782: Vec<leptos::prelude::AnyView> = vec![v3777];
                        let v3784: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3782);
                        let v3786: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3784);
                        let v3789: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v3775))),
                                            string(">move || { v3786 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3791: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v3695() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v3771(())>move || { v3786 }</button> };
                        let v3793: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3791);
                        let v3794: string = string("vec![]");
                        let v3795: Vec<leptos::prelude::AnyView> = vec![];
                        let v3797: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3795);
                        let v3799: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v3801() -> string {
                            Dice_ui::closure161((), ())
                        }
                        let v3802 = {
                            let clo_29 = Func0::from(v3801);
                            Func1::new({
                                let clo_29 = clo_29.clone();
                                move |arg_29: ()| clo_29()
                            })
                        };
                        fn v3804() -> bool {
                            Dice_ui::closure162((), ())
                        }
                        let v3805 = {
                            let clo_30 = Func0::from(v3804);
                            Func1::new({
                                let clo_30 = clo_30.clone();
                                move |arg_30: ()| clo_30()
                            })
                        };
                        let v3807: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v3811: string = string("vec![v3793]");
                        let v3812: Vec<leptos::prelude::AnyView> = vec![v3793];
                        let v3814: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3812);
                        let v3816: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3814);
                        let v3819: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3807))),
                                            string(">move || { v3816 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3821: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3816 }</div> };
                        let v3823: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3821);
                        let v3824: string =
                                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3802(())");
                        let v3827: string = append(
                            (append(
                                string(" open=move || v3805(())"),
                                (append(
                                    (append((append(string(" "), (v3824))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3830 = {
                            let clo_31 = Func0::new(move || Dice_ui::closure257((), ()));
                            Func1::new({
                                let clo_31 = clo_31.clone();
                                move |arg_31: ()| clo_31()
                            })
                        };
                        let v3833 = {
                            let clo_32 = Func0::new({
                                let v3793 = v3793.clone();
                                move || Dice_ui::closure258(v3793.clone(), ())
                            });
                            Func1::new({
                                let clo_32 = clo_32.clone();
                                move |arg_32: ()| clo_32()
                            })
                        };
                        let v3834: string =
                                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3833(()) + \" \" + &v3830(())");
                        let v3835: string = append(
                            (append((append(string(" "), (v3834))), string(""))),
                            string(""),
                        );
                        let v3837: string = string(" class=\"flex items-center gap-2\"");
                        let v3840: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v3841: string = (Dice_ui::method243(v3793.clone()))();
                        let v3850: &str = &*v3841;
                        let v3883: std::string::String = String::from(v3850);
                        let v3909: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v3883),
                        );
                        let v3913: string = string("vec![v3909]");
                        let v3914: Vec<leptos::prelude::AnyView> = vec![v3909];
                        let v3916: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3914);
                        let v3918: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3916);
                        let v3921: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3840))),
                                            string(">move || { v3918 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3923: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3918 }</span> };
                        let v3925: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3923);
                        let v3929: string = string("vec![v3925]");
                        let v3930: Vec<leptos::prelude::AnyView> = vec![v3925];
                        let v3932: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3930);
                        let v3934: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3932);
                        let v3936: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3837))),
                                            string(">move || { v3934 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3938: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3934 }</div> };
                        let v3940: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3938);
                        let v3942: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v3944() -> string {
                            Dice_ui::closure166((), ())
                        }
                        let v3945 = {
                            let clo_33 = Func0::from(v3944);
                            Func1::new({
                                let clo_33 = clo_33.clone();
                                move |arg_33: ()| clo_33()
                            })
                        };
                        let v3953: string =
                                string(" class=move || \" \".to_owned() + &v3945(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3955: string =
                                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v3959: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v3955))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3960: string = string("vec![]");
                        let v3961: Vec<leptos::prelude::AnyView> = vec![];
                        let v3963: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3961);
                        let v3965: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3963);
                        let v3967: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3959))),
                                            string(">move || { v3965 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3969: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3965 }</path> };
                        let v3971: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3969);
                        let v3975: string = string("vec![v3971]");
                        let v3976: Vec<leptos::prelude::AnyView> = vec![v3971];
                        let v3978: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3976);
                        let v3980: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3978);
                        let v3982: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3953))),
                                            string(">move || { v3980 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3984: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3945(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3980 }</svg> };
                        let v3986: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3984);
                        let v3990: string = string("vec![v3986]");
                        let v3991: Vec<leptos::prelude::AnyView> = vec![v3986];
                        let v3993: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3991);
                        let v3995: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3993);
                        let v3997: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3942))),
                                            string(">move || { v3995 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3999: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3995 }</span> };
                        let v4001: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3999);
                        let v4008: string = string("vec![v3940, v4001]");
                        let v4009: Vec<leptos::prelude::AnyView> = vec![v3940, v4001];
                        let v4011: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4009);
                        let v4013: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4011);
                        let v4016: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v3835))),
                                            string(">move || { v4013 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4018: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3833(()) + " " + &v3830(())>move || { v4013 }</summary> };
                        let v4020: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4018);
                        let v4022: string = string(" class=\"flex flex-1 flex-col\"");
                        let v4026: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new({
                                    let v3642 = v3642.clone();
                                    let v3654 = v3654.clone();
                                    let v3674 = v3674.clone();
                                    let v3693 = v3693.clone();
                                    move || {
                                        Dice_ui::closure260(
                                            v3642.clone(),
                                            v3674.clone(),
                                            v3654.clone(),
                                            v3693.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v4028: leptos::prelude::Fragment = (move || v4026())();
                        let v4030: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4028);
                        let v4032: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4022))),
                                            string(">move || { v4030 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4034: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4030 }</div> };
                        let v4036: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4034);
                        let v4043: string = string("vec![v4020, v4036]");
                        let v4044: Vec<leptos::prelude::AnyView> = vec![v4020, v4036];
                        let v4046: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4044);
                        let v4048: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4046);
                        let v4051: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v3827))),
                                            string(">move || { v4048 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4053: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v3805(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3802(())>move || { v4048 }</details> };
                        let v4055: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4053);
                        let v4062: string = string("vec![v3823, v4055]");
                        let v4063: Vec<leptos::prelude::AnyView> = vec![v3823, v4055];
                        let v4065: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4063);
                        let v4067: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4065);
                        let v4069: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3799))),
                                            string(">move || { v4067 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4071: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4067 }</div> };
                        let v4073: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4071);
                        let v4076: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3642.l0.clone());
                        let v4078: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4076);
                        let v4359: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                            &v4078.l1.clone(),
                        ) {
                            let v4082: string = string("vec![]");
                            let v4083: Vec<leptos::prelude::AnyView> = vec![];
                            let v4085: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4083);
                            let v4087: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v4089 = {
                                let clo_34 = Func0::from(v3801);
                                Func1::new({
                                    let clo_34 = clo_34.clone();
                                    move |arg_34: ()| clo_34()
                                })
                            };
                            let v4091 = {
                                let clo_35 = Func0::from(v3804);
                                Func1::new({
                                    let clo_35 = clo_35.clone();
                                    move |arg_35: ()| clo_35()
                                })
                            };
                            let v4093: string =
                                string(" class=\"[position:absolute] [right:0] [top:0]\"");
                            let v4097: string = string("vec![v4085]");
                            let v4098: Vec<leptos::prelude::AnyView> = vec![v4085];
                            let v4100: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4098);
                            let v4102: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4100);
                            let v4104: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4093))),
                                                string(">move || { v4102 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4106: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4102 }</div> };
                            let v4108: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4106);
                            let v4109: string =
                                        string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4089(())");
                            let v4112: string = append(
                                (append(
                                    string(" open=move || v4091(())"),
                                    (append(
                                        (append((append(string(" "), (v4109))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4115 = {
                                let clo_36 = Func0::new(move || Dice_ui::closure337((), ()));
                                Func1::new({
                                    let clo_36 = clo_36.clone();
                                    move |arg_36: ()| clo_36()
                                })
                            };
                            let v4118 = {
                                let clo_37 = Func0::new(move || Dice_ui::closure338((), ()));
                                Func1::new({
                                    let clo_37 = clo_37.clone();
                                    move |arg_37: ()| clo_37()
                                })
                            };
                            let v4119: string =
                                        string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4118(()) + \" \" + &v4115(())");
                            let v4120: string = append(
                                (append((append(string(" "), (v4119))), string(""))),
                                string(""),
                            );
                            let v4122: string = string(" class=\"flex items-center gap-2\"");
                            let v4125: string =
                                        string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
                            let v4126: string = (Dice_ui::method282())();
                            let v4135: &str = &*v4126;
                            let v4168: std::string::String = String::from(v4135);
                            let v4194: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4168),
                                );
                            let v4198: string = string("vec![v4194]");
                            let v4199: Vec<leptos::prelude::AnyView> = vec![v4194];
                            let v4201: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4199);
                            let v4203: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4201);
                            let v4205: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4125))),
                                                string(">move || { v4203 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4207: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4203 }</span> };
                            let v4209: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4207);
                            let v4213: string = string("vec![v4209]");
                            let v4214: Vec<leptos::prelude::AnyView> = vec![v4209];
                            let v4216: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4214);
                            let v4218: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4216);
                            let v4220: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4122))),
                                                string(">move || { v4218 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4222: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4218 }</div> };
                            let v4224: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4222);
                            let v4226: string =
                                string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                            let v4228 = {
                                let clo_38 = Func0::from(v3944);
                                Func1::new({
                                    let clo_38 = clo_38.clone();
                                    move |arg_38: ()| clo_38()
                                })
                            };
                            let v4236: string =
                                        string(" class=move || \" \".to_owned() + &v4228(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v4238: string =
                                        string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                            let v4242: string = append(
                                (append(
                                    string(" clip-rule=\"evenodd\""),
                                    (append(
                                        (append(
                                            (append(string(" "), (v4238))),
                                            string(" fill-rule=\"evenodd\""),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4243: string = string("vec![]");
                            let v4244: Vec<leptos::prelude::AnyView> = vec![];
                            let v4246: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4244);
                            let v4248: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4246);
                            let v4250: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v4242))),
                                                string(">move || { v4248 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4252: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4248 }</path> };
                            let v4254: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4252);
                            let v4258: string = string("vec![v4254]");
                            let v4259: Vec<leptos::prelude::AnyView> = vec![v4254];
                            let v4261: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4259);
                            let v4263: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4261);
                            let v4265: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v4236))),
                                                string(">move || { v4263 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4267: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4228(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4263 }</svg> };
                            let v4269: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4267);
                            let v4273: string = string("vec![v4269]");
                            let v4274: Vec<leptos::prelude::AnyView> = vec![v4269];
                            let v4276: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4274);
                            let v4278: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4276);
                            let v4280: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4226))),
                                                string(">move || { v4278 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4282: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4278 }</span> };
                            let v4284: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4282);
                            let v4291: string = string("vec![v4224, v4284]");
                            let v4292: Vec<leptos::prelude::AnyView> = vec![v4224, v4284];
                            let v4294: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4292);
                            let v4296: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4294);
                            let v4298: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<summary "), (v4120))),
                                                string(">move || { v4296 }</"),
                                            )),
                                            string("summary"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4300: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4118(()) + " " + &v4115(())>move || { v4296 }</summary> };
                            let v4302: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4300);
                            let v4304: string = string(" class=\"flex flex-1 flex-col\"");
                            let v4308: Func0<leptos::prelude::Fragment> =
                                Dice_ui::method195(Func0::new(move || {
                                    Func0::new({
                                        let v3674 = v3674.clone();
                                        move || Dice_ui::closure340(v3674.clone(), ())
                                    })()
                                }));
                            let v4310: leptos::prelude::Fragment = (move || v4308())();
                            let v4312: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4310);
                            let v4314: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4304))),
                                                string(">move || { v4312 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4316: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4312 }</div> };
                            let v4318: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4316);
                            let v4325: string = string("vec![v4302, v4318]");
                            let v4326: Vec<leptos::prelude::AnyView> = vec![v4302, v4318];
                            let v4328: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4326);
                            let v4330: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4328);
                            let v4332: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<details "), (v4112))),
                                                string(">move || { v4330 }</"),
                                            )),
                                            string("details"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4334: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Details, _, _>,
                            > = leptos::prelude::view! { <details  open=move || v4091(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4089(())>move || { v4330 }</details> };
                            let v4336: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4334);
                            let v4343: string = string("vec![v4108, v4336]");
                            let v4344: Vec<leptos::prelude::AnyView> = vec![v4108, v4336];
                            let v4346: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4344);
                            let v4348: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4346);
                            let v4350: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4087))),
                                                string(">move || { v4348 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4352: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4348 }</div> };
                            leptos::prelude::IntoAny::into_any(v4352)
                        } else {
                            let v4355: string = string("vec![]");
                            let v4356: Vec<leptos::prelude::AnyView> = vec![];
                            leptos::prelude::IntoAny::into_any(v4356)
                        };
                        let v4366: string = string("vec![v4073, v4359]");
                        let v4367: Vec<leptos::prelude::AnyView> = vec![v4073, v4359];
                        Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v4367))
                    }
                }
                _ => Dice_ui::US22::US22_1,
            };
            let v5374: leptos::prelude::AnyView = match &v5356 {
                Dice_ui::US22::US22_0(v5356_0_0) => {
                    let v5359: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v5361: leptos::prelude::AnyView = leptos::prelude::AnyView::from(
                        match &v5356 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v5364: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5359))),
                                        string(">move || { v5361 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5366: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v5361 }</div> };
                    leptos::prelude::IntoAny::into_any(v5366)
                }
                _ => {
                    let v5369: string = string("vec![]");
                    let v5370: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v5370)
                }
            };
            let v5378: string = string("vec![v5374]");
            let v5379: Vec<leptos::prelude::AnyView> = vec![v5374];
            let v5381: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5379);
            let v5383: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5381);
            let v5386: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<main "), (v2056))),
                                string(">move || { v5383 }</"),
                            )),
                            string("main"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5388: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v5383 }</main> };
            let v5390: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5388);
            let v5392: string = string(" class=\"flex\"");
            let v5395: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v5397: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v5400: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v5397 = v5397.clone();
                        move || Dice_ui::closure41(v5397.clone(), ())
                    })()
                });
            let v5402: string = string(" class=\"hidden\"");
            let v5406: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v5416: &str = &*string("Tab");
            let v5449: std::string::String = String::from(v5416);
            let v5475: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5449));
            let v5479: string = string("vec![v5475]");
            let v5480: Vec<leptos::prelude::AnyView> = vec![v5475];
            let v5482: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5480);
            let v5484: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5482);
            let v5487: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v5406))),
                                string(">move || { v5484 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5489: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v5484 }</label> };
            let v5491: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5489);
            let v5495: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v5496 = Dice_ui::method285(v1696.clone());
            let v5498: string = string(" selected=v5496()");
            let v5508: &str = &*string("Settings");
            let v5541: std::string::String = String::from(v5508);
            let v5567: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5541));
            let v5571: string = string("vec![v5567]");
            let v5572: Vec<leptos::prelude::AnyView> = vec![v5567];
            let v5574: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5572);
            let v5576: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5574);
            let v5579: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5498))),
                                string(">move || { v5576 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5581: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5496()>move || { v5576 }</option> };
            let v5583: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5581);
            let v5584 = Dice_ui::method286(v1696.clone());
            let v5586: string = string(" selected=v5584()");
            let v5596: &str = &*string("Transactions");
            let v5629: std::string::String = String::from(v5596);
            let v5655: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5629));
            let v5659: string = string("vec![v5655]");
            let v5660: Vec<leptos::prelude::AnyView> = vec![v5655];
            let v5662: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5660);
            let v5664: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5662);
            let v5666: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5586))),
                                string(">move || { v5664 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5668: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5584()>move || { v5664 }</option> };
            let v5670: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5668);
            let v5671 = Dice_ui::method287(v1696.clone());
            let v5673: string = string(" selected=v5671()");
            let v5683: &str = &*string("Lists");
            let v5716: std::string::String = String::from(v5683);
            let v5742: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5716));
            let v5746: string = string("vec![v5742]");
            let v5747: Vec<leptos::prelude::AnyView> = vec![v5742];
            let v5749: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5747);
            let v5751: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5749);
            let v5753: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5673))),
                                string(">move || { v5751 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5755: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5671()>move || { v5751 }</option> };
            let v5757: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5755);
            let v5758 = Dice_ui::method288(v1696.clone());
            let v5760: string = string(" selected=v5758()");
            let v5770: &str = &*string("Dice");
            let v5803: std::string::String = String::from(v5770);
            let v5829: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5803));
            let v5833: string = string("vec![v5829]");
            let v5834: Vec<leptos::prelude::AnyView> = vec![v5829];
            let v5836: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5834);
            let v5838: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5836);
            let v5840: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5760))),
                                string(">move || { v5838 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5842: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5758()>move || { v5838 }</option> };
            let v5844: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5842);
            let v5858: string = string("vec![v5844, v5757, v5670, v5583]");
            let v5859: Vec<leptos::prelude::AnyView> = vec![v5844, v5757, v5670, v5583];
            let v5861: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5859);
            let v5863: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5861);
            let v5866: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<select "), (v5495))),
                                string(">move || { v5863 }</"),
                            )),
                            string("select"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5868: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Select, _, _>,
            > = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v5863 }</select> };
            let v5870: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5868);
            let v5877: string = string("vec![v5491, v5870]");
            let v5878: Vec<leptos::prelude::AnyView> = vec![v5491, v5870];
            let v5880: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5878);
            let v5882: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5880);
            let v5885: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5402))),
                                string(">move || { v5882 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5887: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v5882 }</div> };
            let v5889: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v5891: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v5892: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v5895: string = append(
                (append(
                    string(" aria-label=\"Tabs\""),
                    (append(
                        (append((append(string(" "), (v5892))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            fn v5897() -> string {
                Dice_ui::closure348((), ())
            }
            let v5898 = {
                let clo_39 = Func0::from(v5897);
                Func1::new({
                    let clo_39 = clo_39.clone();
                    move |arg_39: ()| clo_39()
                })
            };
            let v5910: string =
                string(" class=move || \" \".to_owned() + &v5898(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v5913: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v5916: string = append(
                (append(
                    (append(string(" "), (v5913))),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                )),
                string(""),
            );
            let v5917: string = string("vec![]");
            let v5918: Vec<leptos::prelude::AnyView> = vec![];
            let v5920: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5918);
            let v5922: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5920);
            let v5925: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v5916))),
                                string(">move || { v5922 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5927: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v5922 }</path> };
            let v5929: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5927);
            let v5935: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v5936: string = string("vec![]");
            let v5937: Vec<leptos::prelude::AnyView> = vec![];
            let v5939: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5937);
            let v5941: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5939);
            let v5943: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v5935))),
                                string(">move || { v5941 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5945: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v5941 }</path> };
            let v5947: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5945);
            let v5954: string = string("vec![v5929, v5947]");
            let v5955: Vec<leptos::prelude::AnyView> = vec![v5929, v5947];
            let v5957: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5955);
            let v5959: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5957);
            let v5962: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v5910))),
                                string(">move || { v5959 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5964: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5898(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5959 }</svg> };
            let v5966: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5964);
            let v5970: string = string("vec![v5966]");
            let v5971: Vec<leptos::prelude::AnyView> = vec![v5966];
            let v5973: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5971);
            let v5974 = Func0::new({
                let v5400 = v5400.clone();
                move || Dice_ui::closure349(v5400.clone(), ())
            });
            {
                let v5978 = {
                    let clo_40 = Func0::new({
                        let v1696 = v1696.clone();
                        move || Dice_ui::closure350(v1696.clone(), ())
                    });
                    Func1::new({
                        let clo_40 = clo_40.clone();
                        move |arg_40: ()| clo_40()
                    })
                };
                let v5981 = {
                    let clo_41 = Func0::new({
                        let v1696 = v1696.clone();
                        move || Dice_ui::closure351(v1696.clone(), ())
                    });
                    Func1::new({
                        let clo_41 = clo_41.clone();
                        move |arg_41: ()| clo_41()
                    })
                };
                let v5983: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5981(())");
                let v5987: string = append(
                    (append(
                        string(" aria-current=move || if v5978(()) { \"page\" } else { \"\" }"),
                        (append(
                            (append(
                                (append(string(" "), (v5983))),
                                string(" href=move || v5974()"),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v5989: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5973);
                let v5998: &str = &*string("Settings");
                let v6031: std::string::String = String::from(v5998);
                let v6057: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v6031));
                let v6064: string = string("vec![v5989, v6057]");
                let v6065: Vec<leptos::prelude::AnyView> = vec![v5989, v6057];
                let v6067: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6065);
                let v6069: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6067);
                let v6072: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<a "), (v5987))),
                                    string(">move || { v6069 }</"),
                                )),
                                string("a"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6074: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v5978(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5981(()) href=move || v5974()>move || { v6069 }</a> };
                let v6076: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6074);
                let v6078 = {
                    let clo_42 = Func0::from(v5897);
                    Func1::new({
                        let clo_42 = clo_42.clone();
                        move |arg_42: ()| clo_42()
                    })
                };
                let v6092: string =
                    string(" class=move || \"text-gray-700 \".to_owned() + &v6078(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v6098: string =
                    string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v6099: string = string("vec![]");
                let v6100: Vec<leptos::prelude::AnyView> = vec![];
                let v6102: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6100);
                let v6104: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6102);
                let v6106: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v6098))),
                                    string(">move || { v6104 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6108: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v6104 }</path> };
                let v6110: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6108);
                let v6114: string = string("vec![v6110]");
                let v6115: Vec<leptos::prelude::AnyView> = vec![v6110];
                let v6117: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6115);
                let v6119: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6117);
                let v6121: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v6092))),
                                    string(">move || { v6119 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6123: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6078(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6119 }</svg> };
                let v6125: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6123);
                let v6129: string = string("vec![v6125]");
                let v6130: Vec<leptos::prelude::AnyView> = vec![v6125];
                let v6132: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6130);
                let v6133 = Func0::new({
                    let v5400 = v5400.clone();
                    move || Dice_ui::closure352(v5400.clone(), ())
                });
                {
                    let v6137 = {
                        let clo_43 = Func0::new({
                            let v1696 = v1696.clone();
                            move || Dice_ui::closure353(v1696.clone(), ())
                        });
                        Func1::new({
                            let clo_43 = clo_43.clone();
                            move |arg_43: ()| clo_43()
                        })
                    };
                    let v6140 = {
                        let clo_44 = Func0::new({
                            let v1696 = v1696.clone();
                            move || Dice_ui::closure354(v1696.clone(), ())
                        });
                        Func1::new({
                            let clo_44 = clo_44.clone();
                            move |arg_44: ()| clo_44()
                        })
                    };
                    let v6142: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6140(())");
                    let v6146: string = append(
                        (append(
                            string(" aria-current=move || if v6137(()) { \"page\" } else { \"\" }"),
                            (append(
                                (append(
                                    (append(string(" "), (v6142))),
                                    string(" href=move || v6133()"),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v6148: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6132);
                    let v6157: &str = &*string("Transactions");
                    let v6190: std::string::String = String::from(v6157);
                    let v6216: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v6190),
                    );
                    let v6223: string = string("vec![v6148, v6216]");
                    let v6224: Vec<leptos::prelude::AnyView> = vec![v6148, v6216];
                    let v6226: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6224);
                    let v6228: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6226);
                    let v6230: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<a "), (v6146))),
                                        string(">move || { v6228 }</"),
                                    )),
                                    string("a"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6232: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v6137(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6140(()) href=move || v6133()>move || { v6228 }</a> };
                    let v6234: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6232);
                    let v6236 = {
                        let clo_45 = Func0::from(v5897);
                        Func1::new({
                            let clo_45 = clo_45.clone();
                            move |arg_45: ()| clo_45()
                        })
                    };
                    let v6250: string =
                        string(" class=move || \"text-gray-700 \".to_owned() + &v6236(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v6256: string =
                        string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v6257: string = string("vec![]");
                    let v6258: Vec<leptos::prelude::AnyView> = vec![];
                    let v6260: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6258);
                    let v6262: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6260);
                    let v6264: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v6256))),
                                        string(">move || { v6262 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6266: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v6262 }</path> };
                    let v6268: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6266);
                    let v6276: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
                    let v6277: string = string("vec![]");
                    let v6278: Vec<leptos::prelude::AnyView> = vec![];
                    let v6280: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6278);
                    let v6282: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6280);
                    let v6285: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6276))),
                                        string(">move || { v6282 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6287: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v6282 }</circle> };
                    let v6289: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6287);
                    let v6297: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
                    let v6298: string = string("vec![]");
                    let v6299: Vec<leptos::prelude::AnyView> = vec![];
                    let v6301: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6299);
                    let v6303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6301);
                    let v6305: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6297))),
                                        string(">move || { v6303 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6307: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v6303 }</circle> };
                    let v6309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6307);
                    let v6317: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
                    let v6318: string = string("vec![]");
                    let v6319: Vec<leptos::prelude::AnyView> = vec![];
                    let v6321: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6319);
                    let v6323: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6321);
                    let v6325: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6317))),
                                        string(">move || { v6323 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6327: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v6323 }</circle> };
                    let v6329: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6327);
                    let v6342: string = string("vec![v6268, v6289, v6309, v6329]");
                    let v6343: Vec<leptos::prelude::AnyView> = vec![v6268, v6289, v6309, v6329];
                    let v6345: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6343);
                    let v6347: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6345);
                    let v6349: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v6250))),
                                        string(">move || { v6347 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6351: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6236(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6347 }</svg> };
                    let v6353: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6351);
                    let v6357: string = string("vec![v6353]");
                    let v6358: Vec<leptos::prelude::AnyView> = vec![v6353];
                    let v6360: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6358);
                    let v6361 = Func0::new({
                        let v5400 = v5400.clone();
                        move || Dice_ui::closure355(v5400.clone(), ())
                    });
                    {
                        let v6365 = {
                            let clo_46 = Func0::new({
                                let v1696 = v1696.clone();
                                move || Dice_ui::closure356(v1696.clone(), ())
                            });
                            Func1::new({
                                let clo_46 = clo_46.clone();
                                move |arg_46: ()| clo_46()
                            })
                        };
                        let v6368 = {
                            let clo_47 = Func0::new({
                                let v1696 = v1696.clone();
                                move || Dice_ui::closure357(v1696.clone(), ())
                            });
                            Func1::new({
                                let clo_47 = clo_47.clone();
                                move |arg_47: ()| clo_47()
                            })
                        };
                        let v6370: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6368(())");
                        let v6374: string = append(
                            (append(
                                string(
                                    " aria-current=move || if v6365(()) { \"page\" } else { \"\" }",
                                ),
                                (append(
                                    (append(
                                        (append(string(" "), (v6370))),
                                        string(" href=move || v6361()"),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v6376: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6360);
                        let v6385: &str = &*string("Lists");
                        let v6418: std::string::String = String::from(v6385);
                        let v6444: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v6418),
                        );
                        let v6451: string = string("vec![v6376, v6444]");
                        let v6452: Vec<leptos::prelude::AnyView> = vec![v6376, v6444];
                        let v6454: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6452);
                        let v6456: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6454);
                        let v6458: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<a "), (v6374))),
                                            string(">move || { v6456 }</"),
                                        )),
                                        string("a"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6460: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v6365(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6368(()) href=move || v6361()>move || { v6456 }</a> };
                        let v6462: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6460);
                        let v6464 = {
                            let clo_48 = Func0::from(v5897);
                            Func1::new({
                                let clo_48 = clo_48.clone();
                                move |arg_48: ()| clo_48()
                            })
                        };
                        let v6476: string =
                            string(" class=move || \" \".to_owned() + &v6464(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v6490: string =
                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
                        let v6491: string = string("vec![]");
                        let v6492: Vec<leptos::prelude::AnyView> = vec![];
                        let v6494: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6492);
                        let v6496: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6494);
                        let v6499: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v6490))),
                                            string(">move || { v6496 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6501: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v6496 }</rect> };
                        let v6503: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6501);
                        let v6511: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
                        let v6512: string = string("vec![]");
                        let v6513: Vec<leptos::prelude::AnyView> = vec![];
                        let v6515: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6513);
                        let v6517: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6515);
                        let v6519: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6511))),
                                            string(">move || { v6517 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6521: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v6517 }</circle> };
                        let v6523: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6521);
                        let v6531: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
                        let v6532: string = string("vec![]");
                        let v6533: Vec<leptos::prelude::AnyView> = vec![];
                        let v6535: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6533);
                        let v6537: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6535);
                        let v6539: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6531))),
                                            string(">move || { v6537 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6541: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v6537 }</circle> };
                        let v6543: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6541);
                        let v6551: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
                        let v6552: string = string("vec![]");
                        let v6553: Vec<leptos::prelude::AnyView> = vec![];
                        let v6555: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6553);
                        let v6557: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6555);
                        let v6559: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6551))),
                                            string(">move || { v6557 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6561: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v6557 }</circle> };
                        let v6563: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6561);
                        let v6571: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
                        let v6572: string = string("vec![]");
                        let v6573: Vec<leptos::prelude::AnyView> = vec![];
                        let v6575: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6573);
                        let v6577: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6575);
                        let v6579: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6571))),
                                            string(">move || { v6577 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6581: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v6577 }</circle> };
                        let v6583: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6581);
                        let v6591: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
                        let v6592: string = string("vec![]");
                        let v6593: Vec<leptos::prelude::AnyView> = vec![];
                        let v6595: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6593);
                        let v6597: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6595);
                        let v6599: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6591))),
                                            string(">move || { v6597 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6601: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v6597 }</circle> };
                        let v6603: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6601);
                        let v6622: string =
                            string("vec![v6503, v6523, v6543, v6563, v6583, v6603]");
                        let v6623: Vec<leptos::prelude::AnyView> =
                            vec![v6503, v6523, v6543, v6563, v6583, v6603];
                        let v6625: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6623);
                        let v6627: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6625);
                        let v6629: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v6476))),
                                            string(">move || { v6627 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6631: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v6464(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6627 }</svg> };
                        let v6633: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6631);
                        let v6637: string = string("vec![v6633]");
                        let v6638: Vec<leptos::prelude::AnyView> = vec![v6633];
                        let v6640: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6638);
                        let v6641 = Func0::new({
                            let v5400 = v5400.clone();
                            move || Dice_ui::closure358(v5400.clone(), ())
                        });
                        {
                            let v6645 = {
                                let clo_49 = Func0::new({
                                    let v1696 = v1696.clone();
                                    move || Dice_ui::closure359(v1696.clone(), ())
                                });
                                Func1::new({
                                    let clo_49 = clo_49.clone();
                                    move |arg_49: ()| clo_49()
                                })
                            };
                            let v6648 = {
                                let clo_50 = Func0::new({
                                    let v1696 = v1696.clone();
                                    move || Dice_ui::closure360(v1696.clone(), ())
                                });
                                Func1::new({
                                    let clo_50 = clo_50.clone();
                                    move |arg_50: ()| clo_50()
                                })
                            };
                            let v6650: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6648(())");
                            let v6654: string =
                                append((append(string(" aria-current=move || if v6645(()) { \"page\" } else { \"\" }"),
                                               (append((append((append(string(" "),
                                                                       (v6650))),
                                                               string(" href=move || v6641()"))),
                                                       string(""))))),
                                       string(""));
                            let v6656: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6640);
                            let v6665: &str = &*string("Dice");
                            let v6698: std::string::String = String::from(v6665);
                            let v6724: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v6698),
                                );
                            let v6731: string = string("vec![v6656, v6724]");
                            let v6732: Vec<leptos::prelude::AnyView> = vec![v6656, v6724];
                            let v6734: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6732);
                            let v6736: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6734);
                            let v6738: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<a "), (v6654))),
                                                string(">move || { v6736 }</"),
                                            )),
                                            string("a"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6740: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v6645(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6648(()) href=move || v6641()>move || { v6736 }</a> };
                            let v6742: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6740);
                            let v6755: string = string("vec![v6742, v6462, v6234, v6076]");
                            let v6756: Vec<leptos::prelude::AnyView> =
                                vec![v6742, v6462, v6234, v6076];
                            let v6758: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6756);
                            let v6760: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6758);
                            let v6763: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<nav "), (v5895))),
                                                string(">move || { v6760 }</"),
                                            )),
                                            string("nav"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6765: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Nav, _, _>,
                            > = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v6760 }</nav> };
                            let v6767: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6765);
                            let v6771: string = string("vec![v6767]");
                            let v6772: Vec<leptos::prelude::AnyView> = vec![v6767];
                            let v6774: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6772);
                            let v6776: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6774);
                            let v6778: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5891))),
                                                string(">move || { v6776 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6780: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v6776 }</div> };
                            let v6782: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6780);
                            let v6786: string = string("vec![v6782]");
                            let v6787: Vec<leptos::prelude::AnyView> = vec![v6782];
                            let v6789: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6787);
                            let v6791: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6789);
                            let v6793: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5889))),
                                                string(">move || { v6791 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6795: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v6791 }</div> };
                            let v6797: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6795);
                            let v6799: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v5887);
                            let v6806: string = string("vec![v6799, v6797]");
                            let v6807: Vec<leptos::prelude::AnyView> = vec![v6799, v6797];
                            let v6809: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6807);
                            let v6811: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6809);
                            let v6813: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5392))),
                                                string(">move || { v6811 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6815: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex">move || { v6811 }</div> };
                            let v6817: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6815);
                            let v6824: string = string("vec![v5390, v6817]");
                            let v6825: Vec<leptos::prelude::AnyView> = vec![v5390, v6817];
                            let v6827: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6825);
                            let v6829: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6827);
                            let v6831: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2054))),
                                                string(">move || { v6829 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6833: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v6829 }</div> };
                            let v6835: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6833);
                            let v6839: string = string("vec![v6835]");
                            let v6840: Vec<leptos::prelude::AnyView> = vec![v6835];
                            let v6842: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6840);
                            let v6844: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6842);
                            let v6846: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2052))),
                                                string(">move || { v6844 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6848: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v6844 }</div> };
                            let v6850: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6848);
                            let v6854: string = string("vec![v6850]");
                            let v6855: Vec<leptos::prelude::AnyView> = vec![v6850];
                            let v6857: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6855);
                            let v6859: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6857);
                            let v6861: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1677))),
                                                string(">move || { v6859 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            leptos::prelude::view! { <div  class:dark={move || v1673()} class="flex flex-1">move || { v6859 }</div> }
                        }
                    }
                }
            }
        }
        pub fn method5(
        ) -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method289(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure361(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method290(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure361(v0_1.clone(), ())
            })
        }
        pub fn closure362(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            leptos::prelude::Fragment::new(v2)
        }
        pub fn closure363(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method291(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure363(v0_1.clone(), ())
            })
        }
        pub fn closure364(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method292(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure364(v0_1.clone(), ())
            })
        }
        pub fn closure365(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method293(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure365(v0_1.clone(), ())
            })
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method5();
            let v10: &str = &*string("");
            let v68: std::string::String = Dice_ui::method289(String::from(v10));
            let v69 = Dice_ui::method290(v0_1.clone());
            let v79: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v69() path=leptos_router::path!(v68) /> })");
            let v80: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v69() path=leptos_router::path!(v68) /> },
                );
            let v90: &str = &*string("/");
            let v148: std::string::String = Dice_ui::method289(String::from(v90));
            let v149 = Dice_ui::method291(v0_1.clone());
            let v157: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v149() path=leptos_router::path!(v148) /> })");
            let v158: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v149() path=leptos_router::path!(v148) /> },
                );
            let v168: &str = &*string("/*");
            let v226: std::string::String = Dice_ui::method289(String::from(v168));
            let v227 = Dice_ui::method292(v0_1.clone());
            let v235: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v227() path=leptos_router::path!(v226) /> })");
            let v236: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v227() path=leptos_router::path!(v226) /> },
                );
            let v246: &str = &*string("*");
            let v304: std::string::String = Dice_ui::method289(String::from(v246));
            let v305 = Dice_ui::method293(v0_1);
            let v313: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v305() path=leptos_router::path!(v304) /> })");
            let v314: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v305() path=leptos_router::path!(v304) /> },
                );
            let v328: string = string("vec![v80, v158, v236, v314]");
            vec![v80, v158, v236, v314]
        }
        pub fn method4() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method294(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method294(Dice_ui::method4());
            let v11: &str = &*string("leptos.routes / fallback");
            let v44: std::string::String = String::from(v11);
            let v70: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v78: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v70 /> })");
            let v79 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v70 /> },
            );
            let v81: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v79);
            let v85: string = string("vec![v81]");
            let v86: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v86)
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v8: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v18: &str = &*string("");
            let v51: std::string::String = String::from(v18);
            let v77: leptos::prelude::ArcRwSignal<std::string::String> =
                leptos::prelude::ArcRwSignal::new(v51);
            let v87: &str = &*string("i574n.near");
            let v120: std::string::String = String::from(v87);
            let v158: &str = &*string("luckier.near");
            let v220: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v120)),
                LrcPtr::new((true, String::from(v158))),
            ]);
            let v225: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v220.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v228: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v77,
                l3: leptos::prelude::ArcRwSignal::new(v225),
            });
            let v230: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::ArcRwSignal::new(v228);
            let v232: std::collections::HashMap<
                std::string::String,
                leptos::prelude::ArcRwSignal<bool>,
            > = std::collections::HashMap::new();
            let v235: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v230,
                l1: leptos::prelude::ArcRwSignal::new(v232),
            });
            let v237: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v235);
            let v243: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v238()) /> })");
            let v244 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v238()) /> },
            );
            leptos::prelude::IntoAny::into_any(v244)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure366(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method295() -> Func0<()> {
            Func0::new(move || Dice_ui::closure366((), ()))
        }
        pub fn method296(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(
                (append(string("main / args: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v24: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v32: string = append(
                    (append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v24.clone()),
                    )),
                    string(""),
                );
                let v34: bool = true;
                leptos::logging::log!("{}", v32);
                if let Dice_ui::US0::US0_0(v24_0_0) = &v24 {
                    let v36: string = Dice_ui::method1();
                    let v45: &str = &*v36;
                    let v70: web_sys::HtmlElement = Dice_ui::method2(v24_0_0.clone());
                    v70.set_inner_html(v45);
                    Dice_ui::method3()
                } else {
                    let v72 = Dice_ui::method295();
                    let v75: Box<dyn Fn()> = Dice_ui::method296(Box::new(move || v72()));
                    let v77: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v75);
                    let v79: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v77);
                    let v81: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v79);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v81)
                        .unwrap();
                    v77.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_9c940d83::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/async__wasm.rs"]
mod module_763b9e6c;
pub use module_763b9e6c::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/common_wasm.rs"]
mod module_18f1c018;
pub use module_18f1c018::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/crypto_wasm.rs"]
mod module_c0301e36;
pub use module_c0301e36::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/date_time_wasm.rs"]
mod module_e5abed0b;
pub use module_e5abed0b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/file_system_wasm.rs"]
mod module_336d1dc9;
pub use module_336d1dc9::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/lib_wasm.rs"]
mod module_12dde172;
pub use module_12dde172::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/networking_wasm.rs"]
mod module_7e35832b;
pub use module_7e35832b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/platform_wasm.rs"]
mod module_afd02cca;
pub use module_afd02cca::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/runtime_wasm.rs"]
mod module_a3c64389;
pub use module_a3c64389::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/sm_wasm.rs"]
mod module_8f227ecb;
pub use module_8f227ecb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/threading_wasm.rs"]
mod module_e08c16fb;
pub use module_e08c16fb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/trace_wasm.rs"]
mod module_702ddcb4;
pub use module_702ddcb4::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_eb7e4788;
pub use module_eb7e4788::*;
pub mod Polyglot {
    // pub use crate::module_eb7e4788::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
