#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_75bc3c80 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::Interfaces_::System::Collections::Generic::IEnumerable_1;
        use fable_library_rust::NativeArray_::count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::defaultOf;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for Dice_ui::US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Copy,
            Debug,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for Dice_ui::US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Dice_ui::Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::RwSignal<bool>,
            pub l1: leptos::prelude::RwSignal<bool>,
            pub l2: leptos::prelude::RwSignal<std::string::String>,
            pub l3: leptos::prelude::RwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Dice_ui::Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::RwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::RwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Dice_ui::Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US2 {
            US2_0,
            US2_1,
        }
        impl core::fmt::Display for Dice_ui::US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Dice_ui::Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(LrcPtr<Dice_ui::Heap3>),
            US3_1,
        }
        impl core::fmt::Display for Dice_ui::US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::sync::Arc<rexie::Rexie>),
            US4_1,
        }
        impl core::fmt::Display for Dice_ui::US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US5_1,
        }
        impl core::fmt::Display for Dice_ui::US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(wasm_bindgen::JsValue),
            US6_1,
        }
        impl core::fmt::Display for Dice_ui::US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(serde_json::Value),
            US7_1,
        }
        impl core::fmt::Display for Dice_ui::US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US8_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Dice_ui::US3),
            US9_1,
        }
        impl core::fmt::Display for Dice_ui::US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Option<web_sys::Storage>),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(web_sys::Storage),
            US12_1,
        }
        impl core::fmt::Display for Dice_ui::US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(Dice_ui::US12),
            US11_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Option<std::string::String>),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(std::string::String),
            US15_1,
        }
        impl core::fmt::Display for Dice_ui::US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(Dice_ui::US15),
            US14_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for Dice_ui::US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(Dice_ui::US15),
            US16_1,
        }
        impl core::fmt::Display for Dice_ui::US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US17 {
            US17_0(leptos::prelude::RwSignal<bool>),
            US17_1,
        }
        impl core::fmt::Display for Dice_ui::US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US18 {
            US18_0(bool),
            US18_1,
        }
        impl core::fmt::Display for Dice_ui::US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US20 {
            US20_0,
        }
        impl core::fmt::Display for Dice_ui::US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US19 {
            US19_0,
            US19_1(Dice_ui::US20),
            US19_2,
            US19_3,
            US19_4,
        }
        impl core::fmt::Display for Dice_ui::US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(leptos_router::location::Url),
            US21_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US22 {
            US22_0(Dice_ui::US19),
            US22_1,
        }
        impl core::fmt::Display for Dice_ui::US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(leptos::prelude::Fragment),
            US23_1,
        }
        impl core::fmt::Display for Dice_ui::US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Copy, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US24 {
            US24_0,
            US24_1,
        }
        impl core::fmt::Display for Dice_ui::US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Dice_ui::Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
        }
        impl core::fmt::Display for Dice_ui::Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<string>>,
        }
        impl core::fmt::Display for Dice_ui::Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Default,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Dice_ui::Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US25_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(LrcPtr<Dice_ui::Heap4>),
            US26_1,
        }
        impl core::fmt::Display for Dice_ui::US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US27 {
            US27_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US27_1,
        }
        impl core::fmt::Display for Dice_ui::US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Vec<Dice_ui::US26>),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Dice_ui::US29),
            US28_1,
        }
        impl core::fmt::Display for Dice_ui::US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US32 {
            US32_0(string),
            US32_1,
        }
        impl core::fmt::Display for Dice_ui::US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Dice_ui::US32),
            US31_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1,
        }
        impl core::fmt::Display for Dice_ui::US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Dice_ui::US26),
            US33_1,
        }
        impl core::fmt::Display for Dice_ui::US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Option<string>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Vec<()>),
            US35_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(Array<Dice_ui::US26>),
            US37_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Dice_ui::US37),
            US36_1,
        }
        impl core::fmt::Display for Dice_ui::US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US38 {
            US38_0(Result<Vec<Option<string>>, std::string::String>),
            US38_1,
        }
        impl core::fmt::Display for Dice_ui::US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Vec<Option<string>>),
            US40_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Dice_ui::US40),
            US39_1,
        }
        impl core::fmt::Display for Dice_ui::US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US42 {
            US42_0(Vec<Dice_ui::US32>),
            US42_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Dice_ui::US42),
            US41_1,
        }
        impl core::fmt::Display for Dice_ui::US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US43 {
            US43_0(Dice_ui::US32),
            US43_1,
        }
        impl core::fmt::Display for Dice_ui::US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Dice_ui::Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US46_1,
        }
        impl core::fmt::Display for Dice_ui::US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(Dice_ui::US46),
            US45_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US48_1,
        }
        impl core::fmt::Display for Dice_ui::US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Dice_ui::US48),
            US47_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US50_1,
        }
        impl core::fmt::Display for Dice_ui::US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Dice_ui::US50),
            US49_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut3 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US52>,
        }
        impl core::fmt::Display for Dice_ui::Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US56 {
            US56_0(Array<(string, Dice_ui::US24, string, bool, bool)>),
            US56_1,
        }
        impl core::fmt::Display for Dice_ui::US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US55 {
            US55_0(Dice_ui::US56),
            US55_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Option<Array<(string, Dice_ui::US24, string, bool, bool)>>),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Default, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Dice_ui::Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US58_1,
        }
        impl core::fmt::Display for Dice_ui::US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(Dice_ui::US15),
            US59_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(Dice_ui::US58),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(crate::model::near::rpc::RpcResponse),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US62_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(Dice_ui::US60),
            US63_1,
        }
        impl core::fmt::Display for Dice_ui::US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US64_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US65_1,
        }
        impl core::fmt::Display for Dice_ui::US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            ),
            US66_1,
        }
        impl core::fmt::Display for Dice_ui::US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for Dice_ui::US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(leptos::prelude::Memo<Dice_ui::US32>),
            US68_1,
        }
        impl core::fmt::Display for Dice_ui::US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US69 {
            US69_0(chrono::DateTime<chrono::Utc>),
            US69_1,
        }
        impl core::fmt::Display for Dice_ui::US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub enum US70 {
            US70_0(string),
            US70_1(string),
        }
        impl core::fmt::Display for Dice_ui::US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq, PartialOrd, Hash, Eq)]
        pub struct Mut4 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US32>,
        }
        impl core::fmt::Display for Dice_ui::Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US71 {
            US71_0(std::string::String),
            US71_1(std::string::String),
        }
        impl core::fmt::Display for Dice_ui::US71 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), unitVar_1: ()) -> Dice_ui::US2 {
            Dice_ui::US2::US2_1
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method8() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure7((), v))
        }
        pub fn method9(
            v0_1: Result<rexie::Rexie, std::string::String>,
        ) -> Result<rexie::Rexie, std::string::String> {
            v0_1
        }
        pub fn closure8(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method10() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure8((), v))
        }
        pub fn method11(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if v2 <= v0_1 {
                v1.clone()
            } else {
                let v8: f64 = v0_1 as f64 / 2.0_f64;
                let v12: i64 = v8.ceil() as i64;
                let v18: i64 = v8.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some((v12 - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some((v2 - v18) as i32), Some((v2 - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn method12(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn method13(
            v0_1: std::pin::Pin<
                Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
            >,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>
        {
            v0_1
        }
        pub fn method7() -> leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> {
            let v0_1: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || Func0::new(move || Dice_ui::closure6((), ()))(),
                |x| async move {
                    //;
                    {
                        let v3: Dice_ui::US2 = x;
                        let v5: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v8: bool = true;
                            leptos::logging::log!(
                                "{}",
                                string(
                                    "state_core.use_database (2) / database create_local_resource"
                                )
                            );
                            let v11: bool = true;
                            leptos::logging::log!("{}", string("state_core.build_database ()"));
                            let v13: bool = true;
                            let __future_init = Box::pin(async {
                                //;
                                let v14: string =
                    string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v15: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v17: Result<rexie::Rexie, rexie::Error> = v15.await;
                                let v18 = Dice_ui::method8();
                                let v33: Result<rexie::Rexie, std::string::String> =
                                    Dice_ui::method9(v17.map_err(|x| v18(x)));
                                let v36: string = string("}");
                                let v42: bool = true;
                                let v37 = v33;
                                let v52: string = append(
                                    append(
                                        append(append(string("true; v37 "), v36), string("); ")),
                                        string(""),
                                    ),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v53: bool = true;
                                v37
                            }); // rust.fix_closure';
                            let v55 = __future_init;
                            let v57: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                                >,
                            > = v55;
                            let v59: Result<rexie::Rexie, std::string::String> = v57.await;
                            let v64: rexie::Rexie = v59.unwrap();
                            let v75: rexie::Rexie = (Dice_ui::method10())(v64);
                            let v77: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v75);
                            let v83: string =
                    Dice_ui::method11(200_i64,
                                      append(append(string("state_core.use_database (3) / database create_local_resource / result: "),
                                                    sprintf!("{:?}",
                                                             v77.clone())),
                                             string("")));
                            let v85: bool = true;
                            leptos::logging::log!("{}", v83);
                            let v86: std::sync::Arc<rexie::Rexie> = Dice_ui::method12(v77);
                            let v87: string = string("}");
                            let v93: bool = true;
                            let v88 = v86;
                            let v103: string = append(
                                append(
                                    append(append(string("true; v88 "), v87), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v104: bool = true;
                            v88
                        }); // rust.fix_closure';
                        let v106 = __future_init;
                        let v109: std::pin::Pin<
                            Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                        > = Dice_ui::method13(v106);
                        let v111: std::sync::Arc<rexie::Rexie> = v109.await;
                        let v113: string = string("}}");
                        let v115: string = string("{");
                        let v121: bool = true;
                        let v116 = v111;
                        let v131: string = append(
                            append(
                                append(append(string("true; v116 "), v113), string("); ")),
                                v115,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v132: bool = true;
                        v116
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn closure10(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
                                            */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v7: */
                std::sync::Arc<rexie::Rexie>, /* = defaultOf();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v13: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v15: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v17: &std::sync::Arc<rexie::Rexie> = &v15.0;
                    let v19: &std::sync::Arc<rexie::Rexie> = &v13.0;
                    let v21: bool = std::sync::Arc::ptr_eq(v19, v17);
                    v21 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v2: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::SignalGet::get(&v0_1);
            let v4: bool = true;
            let _optionm_map_ = v2.map(|x| {
                //;
                let v6: std::sync::Arc<rexie::Rexie> = x;
                let v9: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v6);
                let v11: bool = true;
                v9
            });
            _optionm_map_
        }
        pub fn closure11(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method15() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US4> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure11((), v))
        }
        pub fn closure12(unitVar: (), v0_1: string) -> std::string::String {
            let v5: &str = &*v0_1;
            String::from(v5)
        }
        pub fn method16(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method17() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn method18() -> string {
            string("store")
        }
        pub fn closure14(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method19() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure14((), v))
        }
        pub fn method20() -> string {
            string("core-state-heap")
        }
        pub fn closure15(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method21() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method22() -> Func1<wasm_bindgen::JsValue, Dice_ui::US6> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure16((), v))
        }
        pub fn method23(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method24() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method25() -> Func1<serde_json::Value, Dice_ui::US7> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure18((), v))
        }
        pub fn method26(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure19(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method27() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method28() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure20((), v))
        }
        pub fn method29(
            v0_1: Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String>,
        ) -> Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String> {
            v0_1
        }
        pub fn closure21(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method30() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US8> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            Dice_ui::US8::US8_1(v0_1)
        }
        pub fn method31() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure22((), v))
        }
        pub fn closure23(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method32() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US5> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method33() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US3> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure24((), v))
        }
        pub fn method34(v0_1: Dice_ui::US3) -> Dice_ui::US3 {
            v0_1
        }
        pub fn method35(
            v0_1: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>> {
            v0_1
        }
        pub fn method14(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
        ) -> leptos::prelude::Resource<
            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            Dice_ui::US3,
        > {
            let v1: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Dice_ui::closure9(v0_1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let v4: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = x;
                        let v6: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v10: string =
                    append(append(string("state_core.use_core_database (2) / core_state_heap create_local_resource / database: "),
                                  sprintf!("{:?}", v4.clone())), string(""));
                            let v12: bool = true;
                            leptos::logging::log!("{}", v10);
                            let v14: bool = true;
                            let _optionm_map_ = v4.map(|x| {
                                //;
                                let v16: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                                let v18: std::sync::Arc<rexie::Rexie> = v16.0;
                                let v20: bool = true;
                                v18
                            });
                            let v22: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                            let v36: Dice_ui::US4 =
                                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method15(), v22));
                            let v345: Dice_ui::US5 = match &v36 {
                                Dice_ui::US4::US4_0(v36_0_0) => {
                                    let v42: string =
                                        string("state_core.get_data () / id: core-state-heap");
                                    let v44: bool = true;
                                    leptos::logging::log!("{}", v42);
                                    let v46: bool = true;
                                    let __future_init = Box::pin(async {
                                        //;
                                        let v48: Array<string> = new_array(&[string("store")]);
                                        let v50: Vec<string> = v48.to_vec();
                                        let v53: Vec<std::string::String> = v50
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new(move |v: string| {
                                                    Dice_ui::closure12((), v)
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v54: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method16(match &v36 {
                                                Dice_ui::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            });
                                        let v56: Result<rexie::Transaction, rexie::Error> =
                                            v54.transaction(&v53, rexie::TransactionMode::ReadOnly);
                                        let v57 = Dice_ui::method17();
                                        let v62: Result<rexie::Transaction, std::string::String> =
                                            v56.map_err(|x| v57(x));
                                        let v73: rexie::Transaction = v62?;
                                        let v74: string = Dice_ui::method18();
                                        let v79: &str = &*v74;
                                        let v100: Result<rexie::Store, rexie::Error> =
                                            v73.store(v79);
                                        let v101 = Dice_ui::method19();
                                        let v106: Result<rexie::Store, std::string::String> =
                                            v100.map_err(|x| v101(x));
                                        let v117: rexie::Store = v106?;
                                        let v118: string = Dice_ui::method20();
                                        let v123: &str = &*v118;
                                        let v144: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v123);
                                        let v146: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v117, v144));
                                        let v148: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v146.await;
                                        let v149 = Dice_ui::method21();
                                        let v154: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v148.map_err(|x| v149(x));
                                        let v165: Option<wasm_bindgen::JsValue> = v154?;
                                        let v179: Dice_ui::US6 = defaultValue(
                                            Dice_ui::US6::US6_1,
                                            map(Dice_ui::method22(), v165),
                                        );
                                        let v279: Dice_ui::US5 = match &v179 {
                                            Dice_ui::US6::US6_0(v179_0_0) => {
                                                let v184: wasm_bindgen::JsValue =
                                                    Dice_ui::method23(match &v179 {
                                                        Dice_ui::US6::US6_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    });
                                                let v186: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v184);
                                                let v187 = Dice_ui::method24();
                                                let v192: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v186.map_err(|x| v187(x));
                                                let v203: Option<serde_json::Value> = v192?;
                                                let v217: Dice_ui::US7 = defaultValue(
                                                    Dice_ui::US7::US7_1,
                                                    map(Dice_ui::method25(), v203),
                                                );
                                                match &v217 {
                                                    Dice_ui::US7::US7_0(v217_0_0) => {
                                                        let v222: serde_json::Value =
                                                            Dice_ui::method26(match &v217 {
                                                                Dice_ui::US7::US7_0(x) => x.clone(),
                                                                _ => unreachable!(),
                                                            });
                                                        let v224: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v222);
                                                        let v225 = Dice_ui::method27();
                                                        let v230: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v224.map_err(|x| v225(x));
                                                        let v241: Vec<u8> = v230?;
                                                        let v243: Array<u8> =
                                                    fable_library_rust::NativeArray_::array_from(v241);
                                                        let v245: string =
                                                    append(append(string("state_core.get_data () / data_len: "),
                                                                  toString(count(v243.clone()))),
                                                           string(""));
                                                        let v247: bool = true;
                                                        leptos::logging::log!("{}", v245);
                                                        let v249: Vec<u8> = v243.to_vec();
                                                        let v251: &[u8] = v249.as_slice();
                                                        let v253: bool = true;
                                                        let mut v251 = v251;
                                                        let v255: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v251,
                                                        );
                                                        let v256 = Dice_ui::method28();
                                                        let v261: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v255.map_err(|x| v256(x));
                                                        Dice_ui::US5::US5_0(v261?)
                                                    }
                                                    _ => Dice_ui::US5::US5_1,
                                                }
                                            }
                                            _ => Dice_ui::US5::US5_1,
                                        };
                                        let v288: Result<
                                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            std::string::String,
                                        > = Dice_ui::method29(Ok::<
                                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            std::string::String,
                                        >(
                                            match &v279 {
                                            Dice_ui::US5::US5_0(v279_0_0) => Some(match &v279 {
                                                Dice_ui::US5::US5_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }),
                                            _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        }
                                        ));
                                        let v291: string = string("}");
                                        let v297: bool = true;
                                        let v292 = v288;
                                        let v307: string = append(
                                            append(
                                                append(
                                                    append(string("true; v292 "), v291),
                                                    string("); "),
                                                ),
                                                string(""),
                                            ),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v308: bool = true;
                                        v292
                                    }); // rust.fix_closure';
                                    let v310 = __future_init;
                                    let v312: std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    > = v310;
                                    let v314: Result<
                                        Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        std::string::String,
                                    > = v312.await;
                                    let v315 = Dice_ui::method30();
                                    let v316 = Dice_ui::method31();
                                    let v317: Dice_ui::US8 = match &v314 {
                                        Err(v314_1_0) => v316(v314_1_0.clone()),
                                        Ok(v314_0_0) => v315(v314_0_0.clone()),
                                    };
                                    match &v317 {
                                        Dice_ui::US8::US8_0(v317_0_0) => defaultValue(
                                            Dice_ui::US5::US5_1,
                                            map(Dice_ui::method32(), v317_0_0.clone()),
                                        ),
                                        Dice_ui::US8::US8_1(v317_1_0) => {
                                            let v337: string =
                                        append(append(string("state_core.use_core_database (3) / error: "),
                                                      toString(v317_1_0.clone())),
                                               string(""));
                                            let v339: bool = true;
                                            leptos::logging::log!("{}", v337);
                                            Dice_ui::US5::US5_1
                                        }
                                    }
                                }
                                _ => Dice_ui::US5::US5_1,
                            };
                            let v367: Dice_ui::US9 = match &v345 {
                                Dice_ui::US5::US5_0(v345_0_0) => Dice_ui::US9::US9_0(defaultValue(
                                    Dice_ui::US3::US3_1,
                                    map(
                                        Dice_ui::method33(),
                                        match &v345 {
                                            Dice_ui::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                    ),
                                )),
                                _ => Dice_ui::US9::US9_1,
                            };
                            let v375: Dice_ui::US3 =
                                Dice_ui::method34(if let Dice_ui::US9::US9_0(v367_0_0) = &v367 {
                                    let v368: Dice_ui::US3 = match &v367 {
                                        Dice_ui::US9::US9_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US3::US3_0(v368_0_0) = &v368 {
                                        Dice_ui::US3::US3_0(match &v368 {
                                            Dice_ui::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                    } else {
                                        Dice_ui::US3::US3_1
                                    }
                                } else {
                                    Dice_ui::US3::US3_1
                                });
                            let v378: string = string("}");
                            let v384: bool = true;
                            let v379 = v375;
                            let v394: string = append(
                                append(
                                    append(append(string("true; v379 "), v378), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v395: bool = true;
                            v379
                        }); // rust.fix_closure';
                        let v397 = __future_init;
                        let v400: std::pin::Pin<
                            Box<dyn std::future::Future<Output = Dice_ui::US3>>,
                        > = Dice_ui::method35(v397);
                        let v402: Dice_ui::US3 = v400.await;
                        let v404: string = string("}}");
                        let v406: string = string("{");
                        let v412: bool = true;
                        let v407 = v402;
                        let v422: string = append(
                            append(
                                append(append(string("true; v407 "), v404), string("); ")),
                                v406,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v423: bool = true;
                        v407
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn method36() -> web_sys::Window {
            leptos::leptos_dom::window()
        }
        pub fn method37(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure26(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US10 {
            Dice_ui::US10::US10_0(v0_1)
        }
        pub fn method38() -> Func1<Option<web_sys::Storage>, Dice_ui::US10> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure26((), v))
        }
        pub fn closure27(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US10 {
            Dice_ui::US10::US10_1(v0_1)
        }
        pub fn method39() -> Func1<wasm_bindgen::JsValue, Dice_ui::US10> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure27((), v))
        }
        pub fn closure28(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method40() -> Func1<web_sys::Storage, Dice_ui::US12> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure28((), v))
        }
        pub fn closure29(unitVar: (), v0_1: Dice_ui::US3) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method41() -> Func1<Dice_ui::US3, Dice_ui::US9> {
            Func1::new(move |v: Dice_ui::US3| Dice_ui::closure29((), v))
        }
        pub fn method42(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method43() -> string {
            string("core-state-heap")
        }
        pub fn closure30(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US13 {
            Dice_ui::US13::US13_0(v0_1)
        }
        pub fn method44() -> Func1<Option<std::string::String>, Dice_ui::US13> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure30((), v))
        }
        pub fn closure31(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US13 {
            Dice_ui::US13::US13_1(v0_1)
        }
        pub fn method45() -> Func1<wasm_bindgen::JsValue, Dice_ui::US13> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure31((), v))
        }
        pub fn method46(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure32(unitVar: (), v0_1: std::string::String) -> Dice_ui::US15 {
            Dice_ui::US15::US15_0(v0_1)
        }
        pub fn method47() -> Func1<std::string::String, Dice_ui::US15> {
            Func1::new(move |v: std::string::String| Dice_ui::closure32((), v))
        }
        pub fn method49(v0_1: string) -> string {
            v0_1
        }
        pub fn closure34(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method50() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure34((), v))
        }
        pub fn closure33(unitVar: (), v0_1: std::string::String) -> Dice_ui::US3 {
            let v3: string = Dice_ui::method49(fable_library_rust::String_::fromString(v0_1));
            let v8: &str = &*v3;
            let v29: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v8);
            let v30 = Dice_ui::method50();
            let v35: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v29.map_err(|x| v30(x));
            let v49: Option<LrcPtr<Dice_ui::Heap3>> = v35.ok();
            defaultValue(Dice_ui::US3::US3_1, map(Dice_ui::method33(), v49))
        }
        pub fn method48() -> Func1<std::string::String, Dice_ui::US3> {
            Func1::new(move |v: std::string::String| Dice_ui::closure33((), v))
        }
        pub fn closure36(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure37(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l1
        }
        pub fn closure38(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l2.clone()
        }
        pub fn closure39(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure35(v0_1: LrcPtr<Dice_ui::Heap2>, v1: LrcPtr<Dice_ui::Heap3>, unitVar: ()) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::prelude::SignalUpdate::update(&v4.l0.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v: bool| Dice_ui::closure36(v1.clone(), v)
                })(x.clone())
            });
            let v11: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v15: bool = true;
            leptos::prelude::SignalUpdate::update(&v11.l1.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v_1: bool| Dice_ui::closure37(v1.clone(), v_1)
                })(x.clone())
            });
            let v18: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v22: bool = true;
            leptos::prelude::SignalUpdate::update(&v18.l2.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v_2: std::string::String| Dice_ui::closure38(v1.clone(), v_2)
                })(x.clone())
            });
            let v25: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v29: bool = true;
            leptos::prelude::SignalUpdate::update(&v25.l3.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v_3: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure39(v1.clone(), v_3)
                })(x.clone())
            });
            ()
        }
        pub fn closure25(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Resource<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Dice_ui::US3,
            >,
            unitVar: (),
        ) {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (4) / effect core_state_heap / ##1")
            );
            let v6: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method37(Dice_ui::method36());
            let v7 = Dice_ui::method38();
            let v8 = Dice_ui::method39();
            let v9: Dice_ui::US10 = match &v6 {
                Err(v6_1_0) => v8(v6_1_0.clone()),
                Ok(v6_0_0) => v7(v6_0_0.clone()),
            };
            let v32: Dice_ui::US11 = match &v9 {
                Dice_ui::US10::US10_0(v9_0_0) => Dice_ui::US11::US11_0(defaultValue(
                    Dice_ui::US12::US12_1,
                    map(Dice_ui::method40(), v9_0_0.clone()),
                )),
                Dice_ui::US10::US10_1(v9_1_0) => Dice_ui::US11::US11_1(v9_1_0.clone()),
            };
            if let Dice_ui::US11::US11_0(v32_0_0) = &v32 {
                let v33: Dice_ui::US12 = match &v32 {
                    Dice_ui::US11::US11_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US12::US12_0(v33_0_0) = &v33 {
                    let v34: web_sys::Storage = match &v33 {
                        Dice_ui::US12::US12_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v36: Option<Dice_ui::US3> = leptos::prelude::SignalGet::get(&v1);
                    let v50: Dice_ui::US9 =
                        defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method41(), v36));
                    let v57: string =
                        append(append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                      sprintf!("{:?}", v50.clone())),
                               string(""));
                    let v59: bool = true;
                    leptos::logging::log!("{}", v57);
                    let v438: Dice_ui::US3 = if let Dice_ui::US9::US9_0(v50_0_0) = &v50 {
                        let v60: Dice_ui::US3 = match &v50 {
                            Dice_ui::US9::US9_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US3::US3_0(v60_0_0) = &v60 {
                            Dice_ui::US3::US3_0(match &v60 {
                                Dice_ui::US3::US3_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            let v63: web_sys::Storage = Dice_ui::method42(v34.clone());
                            let v64: string = Dice_ui::method43();
                            let v69: &str = &*v64;
                            let v90: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v63, v69);
                            let v91 = Dice_ui::method44();
                            let v92 = Dice_ui::method45();
                            let v93: Dice_ui::US13 = match &v90 {
                                Err(v90_1_0) => v92(v90_1_0.clone()),
                                Ok(v90_0_0) => v91(v90_0_0.clone()),
                            };
                            let v119: Dice_ui::US14 = match &v93 {
                                Dice_ui::US13::US13_0(v93_0_0) => {
                                    let v95: Option<std::string::String> =
                                        Dice_ui::method46(v93_0_0.clone());
                                    let v97: Option<std::string::String> =
                                        serde_json::from_value(v95.into()).unwrap();
                                    Dice_ui::US14::US14_0(defaultValue(
                                        Dice_ui::US15::US15_1,
                                        map(Dice_ui::method47(), v97),
                                    ))
                                }
                                Dice_ui::US13::US13_1(v93_1_0) => {
                                    Dice_ui::US14::US14_1(v93_1_0.clone())
                                }
                            };
                            let v125: Dice_ui::US16 = match &v119 {
                                Dice_ui::US14::US14_0(v119_0_0) => {
                                    Dice_ui::US16::US16_0(v119_0_0.clone())
                                }
                                _ => Dice_ui::US16::US16_1,
                            };
                            let v132: Dice_ui::US15 = if let Dice_ui::US16::US16_0(v125_0_0) = &v125
                            {
                                let v126: Dice_ui::US15 = match &v125 {
                                    Dice_ui::US16::US16_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US15::US15_0(v126_0_0) = &v126 {
                                    Dice_ui::US15::US15_0(match &v126 {
                                        Dice_ui::US15::US15_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US15::US15_1
                                }
                            } else {
                                Dice_ui::US15::US15_1
                            };
                            let v139: Option<std::string::String> = match &v132 {
                                Dice_ui::US15::US15_0(v132_0_0) => Some(match &v132 {
                                    Dice_ui::US15::US15_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }),
                                _ => None::<std::string::String>,
                            };
                            let v141: Option<Dice_ui::US3> = map(Dice_ui::method48(), v139);
                            let v239: Dice_ui::US9 =
                                defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method41(), v141));
                            if let Dice_ui::US9::US9_0(v239_0_0) = &v239 {
                                let v243: Dice_ui::US3 = match &v239 {
                                    Dice_ui::US9::US9_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US3::US3_0(v243_0_0) = &v243 {
                                    Dice_ui::US3::US3_0(match &v243 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US3::US3_1
                                }
                            } else {
                                Dice_ui::US3::US3_1
                            }
                        }
                    } else {
                        let v251: web_sys::Storage = Dice_ui::method42(v34);
                        let v252: string = Dice_ui::method43();
                        let v257: &str = &*v252;
                        let v278: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                            web_sys::Storage::get_item(&v251, v257);
                        let v279 = Dice_ui::method44();
                        let v280 = Dice_ui::method45();
                        let v281: Dice_ui::US13 = match &v278 {
                            Err(v278_1_0) => v280(v278_1_0.clone()),
                            Ok(v278_0_0) => v279(v278_0_0.clone()),
                        };
                        let v307: Dice_ui::US14 = match &v281 {
                            Dice_ui::US13::US13_0(v281_0_0) => {
                                let v283: Option<std::string::String> =
                                    Dice_ui::method46(v281_0_0.clone());
                                let v285: Option<std::string::String> =
                                    serde_json::from_value(v283.into()).unwrap();
                                Dice_ui::US14::US14_0(defaultValue(
                                    Dice_ui::US15::US15_1,
                                    map(Dice_ui::method47(), v285),
                                ))
                            }
                            Dice_ui::US13::US13_1(v281_1_0) => {
                                Dice_ui::US14::US14_1(v281_1_0.clone())
                            }
                        };
                        let v313: Dice_ui::US16 = match &v307 {
                            Dice_ui::US14::US14_0(v307_0_0) => {
                                Dice_ui::US16::US16_0(v307_0_0.clone())
                            }
                            _ => Dice_ui::US16::US16_1,
                        };
                        let v320: Dice_ui::US15 = if let Dice_ui::US16::US16_0(v313_0_0) = &v313 {
                            let v314: Dice_ui::US15 = match &v313 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US15::US15_0(v314_0_0) = &v314 {
                                Dice_ui::US15::US15_0(match &v314 {
                                    Dice_ui::US15::US15_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Dice_ui::US15::US15_1
                            }
                        } else {
                            Dice_ui::US15::US15_1
                        };
                        let v327: Option<std::string::String> = match &v320 {
                            Dice_ui::US15::US15_0(v320_0_0) => Some(match &v320 {
                                Dice_ui::US15::US15_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => None::<std::string::String>,
                        };
                        let v329: Option<Dice_ui::US3> = map(Dice_ui::method48(), v327);
                        let v427: Dice_ui::US9 =
                            defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method41(), v329));
                        if let Dice_ui::US9::US9_0(v427_0_0) = &v427 {
                            let v431: Dice_ui::US3 = match &v427 {
                                Dice_ui::US9::US9_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US3::US3_0(v431_0_0) = &v431 {
                                Dice_ui::US3::US3_0(match &v431 {
                                    Dice_ui::US3::US3_0(x) => x.clone(),
                                    _ => unreachable!(),
                                })
                            } else {
                                Dice_ui::US3::US3_1
                            }
                        } else {
                            Dice_ui::US3::US3_1
                        }
                    };
                    let v442: string =
                        append(append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                      sprintf!("{:?}", v438.clone())),
                               string(""));
                    let v444: bool = true;
                    leptos::logging::log!("{}", v442);
                    if let Dice_ui::US3::US3_0(v438_0_0) = &v438 {
                        let v448: bool = true;
                        leptos::prelude::batch(move || {
                            Func0::new({
                                let v0_1 = v0_1.clone();
                                let v438 = v438.clone();
                                move || {
                                    Dice_ui::closure35(
                                        v0_1.clone(),
                                        match &v438 {
                                            Dice_ui::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        (),
                                    )
                                }
                            })()
                        });
                        ()
                    }
                }
            }
        }
        pub fn closure40(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading create_memo")
            );
            leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l1.clone())
        }
        pub fn method51() -> string {
            string("core-state-heap")
        }
        pub fn method52(v0_1: Result<(), rexie::Error>) -> Result<(), rexie::Error> {
            v0_1
        }
        pub fn method53() {
            ();
        }
        pub fn closure41(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: string = sprintf!("{:?}", v1.clone());
            let v6: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::SignalGet::get(&v0_1);
            let v20: Dice_ui::US4 = defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method15(), v6));
            let v25: bool = true;
            let __future_init = Box::pin(async move {
                //;
                match &v20 {
                    Dice_ui::US4::US4_0(v20_0_0) => {
                        let v27: string =
                        append(append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                      v2), string(""));
                        let v29: bool = true;
                        leptos::logging::log!("{}", v27);
                        let v34: string = append(
                            append(
                                string("state_core.set_data () / data_len: "),
                                toString(length(sprintf!("{:?}", v1.clone())) as i64),
                            ),
                            string(""),
                        );
                        let v36: bool = true;
                        leptos::logging::log!("{}", v34);
                        let v38: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v40: bool = true;
                            let mut data = Vec::new();
                            let v42: bool = true;
                            borsh::BorshSerialize::serialize(&v1.clone(), &mut data).unwrap();
                            let v44: Vec<u8> = data;
                            let v46: wasm_bindgen::JsValue =
                                serde_wasm_bindgen::to_value(&v44).unwrap();
                            let v47: string = Dice_ui::method51();
                            let v52: &str = &*v47;
                            let v73: rexie::Transaction = match &v20 {
                                Dice_ui::US4::US4_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                            let v75: rexie::Store = v73.store("store")?;
                            let v77: bool = true;
                            v75.put(&v46, Some(&v52.into())).await?;
                            let v79: bool = true;
                            v73.done().await?;
                            let v81: Result<(), rexie::Error> =
                                Dice_ui::method52(Ok::<(), rexie::Error>(()));
                            let v84: string = string("}");
                            let v90: bool = true;
                            let v85 = v81;
                            let v100: string = append(
                                append(
                                    append(append(string("true; v85 "), v84), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v101: bool = true;
                            v85
                        }); // rust.fix_closure';
                        let v103 = __future_init;
                        let v105: std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                        > = v103;
                        let v107: Result<(), rexie::Error> = v105.await;
                        v107.unwrap();
                        ();
                        ()
                    }
                    _ => {
                        let v114: bool = true;
                        leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                        ()
                    }
                }
                Dice_ui::method53();
                {
                    let v118: string = string("}}");
                    let v120: string = string("{");
                    let v126: bool = true;
                    let v121 = ();
                    let v136: string = append(
                        append(
                            append(append(string("true; v121 "), v118), string("); ")),
                            v120,
                        ),
                        string(" // rust.fix_closure\'"),
                    );
                    let v137: bool = true;
                    v121
                }
            });
            {
                // rust.fix_closure';
                let v139 = __future_init;
                v139
            }
        }
        pub fn method54(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: leptos::prelude::RwSignal<bool>) -> Dice_ui::US17 {
            Dice_ui::US17::US17_0(v0_1)
        }
        pub fn method55() -> Func1<leptos::prelude::RwSignal<bool>, Dice_ui::US17> {
            Func1::new(move |v: leptos::prelude::RwSignal<bool>| Dice_ui::closure43((), v))
        }
        pub fn closure44(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method56(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method57() -> string {
            string("core-state-heap")
        }
        pub fn method58(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure42(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>,
            >,
            v2: leptos::prelude::WriteSignal<bool>,
            v3: leptos::prelude::ReadSignal<bool>,
            v4: leptos::prelude::Action<LrcPtr<Dice_ui::Heap3>, ()>,
            unitVar: (),
        ) {
            let v6: bool = leptos::prelude::SignalGet::get(&v3);
            let v7: string =
                append(append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                              ofBoolean(v6)), string(""));
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v12: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v15: bool = leptos::prelude::SignalGet::get(&v12.l0.clone());
            let v18: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v21: bool = leptos::prelude::SignalGet::get(&v18.l1.clone());
            let v24: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v27: std::string::String = leptos::prelude::SignalGet::get(&v24.l2.clone());
            let v30: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v34: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                l0: v15,
                l1: v21,
                l2: v27,
                l3: leptos::prelude::SignalGet::get(&v30.l3.clone()),
            });
            let v38: string =
                append(append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                              sprintf!("{:?}", v34.clone())), string(""));
            let v40: bool = true;
            leptos::logging::log!("{}", v38);
            let v42: std::collections::HashMap<
                std::string::String,
                leptos::prelude::RwSignal<bool>,
            > = v1();
            let v48: &str = &*string("dark_mode_key");
            let v92: std::string::String = Dice_ui::method54(String::from(v48));
            let v94: Option<leptos::prelude::RwSignal<bool>> =
                std::collections::HashMap::get(&v42, &v92)
                    .map(|x| x)
                    .cloned();
            let v108: Dice_ui::US17 =
                defaultValue(Dice_ui::US17::US17_1, map(Dice_ui::method55(), v94));
            let v118: Dice_ui::US18 = match &v108 {
                Dice_ui::US17::US17_0(v108_0_0) => {
                    Dice_ui::US18::US18_0(leptos::prelude::SignalGet::get(&match &v108 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    }))
                }
                _ => Dice_ui::US18::US18_1,
            };
            let v121: bool = match &v118 {
                Dice_ui::US18::US18_0(v118_0_0) => match &v118 {
                    Dice_ui::US18::US18_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => false,
            };
            let v122: string =
                append(append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                              ofBoolean(v121)), string(""));
            let v124: bool = true;
            leptos::logging::log!("{}", v122);
            if v121 == false {
                if v6 == false {
                    let v129: bool = true;
                    leptos::prelude::SignalUpdate::update(&v2, |x| {
                        *x = Func1::new(move |v: bool| Dice_ui::closure44((), v))(x.clone())
                    });
                    ()
                } else {
                    let v132: bool = true;
                    leptos::logging::log!(
                        "{}",
                        string(
                            "state_core.use_core_database (18) / effect new_core_state_heap / ##4"
                        )
                    );
                    let v134: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                        Dice_ui::method37(Dice_ui::method36());
                    let v135 = Dice_ui::method38();
                    let v136 = Dice_ui::method39();
                    let v137: Dice_ui::US10 = match &v134 {
                        Err(v134_1_0) => v136(v134_1_0.clone()),
                        Ok(v134_0_0) => v135(v134_0_0.clone()),
                    };
                    let v160: Dice_ui::US11 = match &v137 {
                        Dice_ui::US10::US10_0(v137_0_0) => Dice_ui::US11::US11_0(defaultValue(
                            Dice_ui::US12::US12_1,
                            map(Dice_ui::method40(), v137_0_0.clone()),
                        )),
                        Dice_ui::US10::US10_1(v137_1_0) => Dice_ui::US11::US11_1(v137_1_0.clone()),
                    };
                    if let Dice_ui::US11::US11_0(v160_0_0) = &v160 {
                        let v161: Dice_ui::US12 = match &v160 {
                            Dice_ui::US11::US11_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US12::US12_0(v161_0_0) = &v161 {
                            let v164: bool = true;
                            leptos::prelude::Action::dispatch(&v4, v34.clone().clone());
                            let v165: web_sys::Storage = Dice_ui::method56(match &v161 {
                                Dice_ui::US12::US12_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v166: string = Dice_ui::method57();
                            let v171: &str = &*v166;
                            let v191: LrcPtr<Dice_ui::Heap3> = Dice_ui::method58(v34);
                            let v193: std::string::String = serde_json::json!(v191).to_string();
                            let v195: &str = v193.as_str();
                            web_sys::Storage::set(&v165, v171, v195).unwrap();
                            ()
                        }
                    }
                };
            }
        }
        pub fn closure45(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::prelude::SignalGet::get(&v3.l0.clone())
        }
        pub fn method59(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure45(v0_1.clone(), ())
            })
        }
        pub fn closure47(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = v2();
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = v8();
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                v6,
                (if v12.clone() == string("") {
                    string("")
                } else {
                    sprintf!("?{}", v12)
                }),
            )
        }
        pub fn method61(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure48(
            v0_1: leptos_router::location::Location,
            v1: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)>,
            v2: leptos::prelude::Memo<string>,
            v3: LrcPtr<Dice_ui::Heap2>,
            v4: leptos::prelude::WriteSignal<bool>,
            v5: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) {
            let v7: bool = leptos::prelude::SignalGet::get(&v5);
            let v9: leptos::prelude::Memo<std::string::String> = v0_1.hash;
            let v11: std::string::String = v9();
            let v14: string = sprintf!("{}{}", v2(), v11.clone());
            let v15: string = append(
                append(
                    append(
                        append(
                            string("content.render () / effect 1 / new_url_hash: "),
                            v14.clone(),
                        ),
                        string(" / loaded: "),
                    ),
                    ofBoolean(v7),
                ),
                string(""),
            );
            let v17: bool = true;
            leptos::logging::log!("{}", v15);
            if v7 == false {
                let v19: std::string::String = Dice_ui::method61(v11);
                if v19 == "" {
                    let v24: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::SignalGetUntracked::get_untracked(&v3.l0.clone());
                    let v27: std::string::String = leptos::prelude::SignalGet::get(&v24.l2.clone());
                    let v29: string = fable_library_rust::String_::fromString(v27);
                    let v30: string = append(
                        append(
                            string("content.render () / effect 1 / url_hash: "),
                            v29.clone(),
                        ),
                        string(""),
                    );
                    let v32: bool = true;
                    leptos::logging::log!("{}", v30);
                    if contains(v29.clone(), string("#")) {
                        let v41: &str = &*v29;
                        v1(v41, Default::default());
                        ()
                    }
                }
                {
                    let v63: bool = true;
                    leptos::prelude::SignalSet::set(&v4, true);
                    ()
                }
            } else {
                let v66: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::SignalGetUntracked::get_untracked(&v3.l0.clone());
                let v72: &str = &*v14;
                let v96: std::string::String = String::from(v72);
                let v117: bool = true;
                leptos::prelude::SignalSet::set(&v66.l2.clone(), v96);
                ()
            }
        }
        pub fn method62(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure50(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US21 {
            Dice_ui::US21::US21_0(v0_1)
        }
        pub fn method63() -> Func1<leptos_router::location::Url, Dice_ui::US21> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure50((), v))
        }
        pub fn closure51(unitVar: (), v0_1: std::string::String) -> Dice_ui::US21 {
            Dice_ui::US21::US21_1(v0_1)
        }
        pub fn method64() -> Func1<std::string::String, Dice_ui::US21> {
            Func1::new(move |v: std::string::String| Dice_ui::closure51((), v))
        }
        pub fn closure49(
            v0_1: leptos_router::location::Location,
            v1: leptos::prelude::WriteSignal<Dice_ui::US19>,
            unitVar: (),
        ) {
            let v3: leptos::prelude::Memo<std::string::String> = v0_1.hash;
            let v6: std::string::String = Dice_ui::method62(v3());
            let v8: Option<&str> = v6.strip_prefix('#');
            let v10: string = string("r#\"\"#");
            let v11: &str = r#""#;
            let v13: &str = v8.unwrap_or(v11);
            let v15: Result<leptos_router::location::Url, std::string::String> =
                leptos_router::location::Url::try_from(v13);
            let v16 = Dice_ui::method63();
            let v17 = Dice_ui::method64();
            let v18: Dice_ui::US21 = match &v15 {
                Err(v15_1_0) => v17(v15_1_0.clone()),
                Ok(v15_0_0) => v16(v15_0_0.clone()),
            };
            let v25: std::string::String = format!("{:#?}", v18.clone());
            let v49: string = append(
                append(
                    string("content.render () / effect 2 / hash_url: "),
                    fable_library_rust::String_::fromString(v25),
                ),
                string(""),
            );
            let v51: bool = true;
            leptos::logging::log!("{}", v49);
            match &v18 {
                Dice_ui::US21::US21_0(v18_0_0) => {
                    let v52: leptos_router::location::Url = v18_0_0.clone();
                    let v54: std::string::String = v52.clone().pathname;
                    let v66: Dice_ui::US22 = if startsWith(
                        fable_library_rust::String_::fromString(v54),
                        string("/dice"),
                        false,
                    ) {
                        Dice_ui::US22::US22_0(Dice_ui::US19::US19_1(Dice_ui::US20::US20_0))
                    } else {
                        Dice_ui::US22::US22_1
                    };
                    let v83: Dice_ui::US22 = match &v66 {
                        Dice_ui::US22::US22_0(v66_0_0) => Dice_ui::US22::US22_0(match &v66 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => {
                            let v70: std::string::String = v52.clone().pathname;
                            if startsWith(
                                fable_library_rust::String_::fromString(v70),
                                string("/lists"),
                                false,
                            ) {
                                Dice_ui::US22::US22_0(Dice_ui::US19::US19_2)
                            } else {
                                Dice_ui::US22::US22_1
                            }
                        }
                    };
                    let v100: Dice_ui::US22 = match &v83 {
                        Dice_ui::US22::US22_0(v83_0_0) => Dice_ui::US22::US22_0(match &v83 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => {
                            let v87: std::string::String = v52.clone().pathname;
                            if startsWith(
                                fable_library_rust::String_::fromString(v87),
                                string("/transactions"),
                                false,
                            ) {
                                Dice_ui::US22::US22_0(Dice_ui::US19::US19_3)
                            } else {
                                Dice_ui::US22::US22_1
                            }
                        }
                    };
                    let v117: Dice_ui::US22 = match &v100 {
                        Dice_ui::US22::US22_0(v100_0_0) => Dice_ui::US22::US22_0(match &v100 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => {
                            let v104: std::string::String = v52.pathname;
                            if startsWith(
                                fable_library_rust::String_::fromString(v104),
                                string("/settings"),
                                false,
                            ) {
                                Dice_ui::US22::US22_0(Dice_ui::US19::US19_4)
                            } else {
                                Dice_ui::US22::US22_1
                            }
                        }
                    };
                    let v122: Dice_ui::US19 = match &v117 {
                        Dice_ui::US22::US22_0(v117_0_0) => match &v117 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => Dice_ui::US19::US19_1(Dice_ui::US20::US20_0),
                    };
                    let v129: std::string::String = format!("{:#?}", v122.clone());
                    let v153: string = append(
                        append(
                            string("content.render () / effect 2 / new_tab: "),
                            fable_library_rust::String_::fromString(v129),
                        ),
                        string(""),
                    );
                    let v155: bool = true;
                    leptos::logging::log!("{}", v153);
                    let v157: bool = true;
                    leptos::prelude::SignalSet::set(&v1, v122);
                    ()
                }
                Dice_ui::US21::US21_1(v18_1_0) => {
                    let v159: string = append(
                        append(
                            string("content.render () / effect 2 / hash_url error: "),
                            toString(v18_1_0.clone()),
                        ),
                        string(""),
                    );
                    let v161: bool = true;
                    leptos::logging::log!("{}", v159);
                    ()
                }
            }
        }
        pub fn closure56(
            unitVar: (),
            v0_: bool,
            v0__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v0_1: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v0_, v0__1));
            (v0_1.0.clone(), v0_1.1.clone())
        }
        pub fn closure57(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method68() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure57((), arg10_0040)
            })
        }
        pub fn method69(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure58(unitVar: (), _arg: (bool, std::string::String)) -> std::string::String {
            _arg.1.clone()
        }
        pub fn closure59(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn closure55(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v3.l3.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure56((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v11 = Dice_ui::method68();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method69(v10);
            let v14: Vec<(bool, std::string::String)> = v12
                .into_iter()
                .filter(|x| v11(x.clone().clone()))
                .collect::<Vec<_>>();
            let v17: Vec<std::string::String> = v14
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure58((), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v20: Vec<string> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(x.clone())
                })
                .collect::<Vec<_>>();
            let v26: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string("use_transactions.render (2) / accounts create_memo / result: "),
                        sprintf!("{:?}", v20.clone()),
                    ),
                    string(""),
                ),
            );
            let v28: bool = true;
            leptos::logging::log!("{}", v26);
            v20
        }
        pub fn closure61(unitVar: (), v0_1: string) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                append(
                    append(string("https://api3.nearblocks.io/v1/account/"), v0_1),
                    string(""),
                ),
                Dice_ui::US24::US24_0,
                string(""),
                false,
                true,
            )
        }
        pub fn closure60(
            v0_1: leptos::prelude::Memo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Vec<string> = v0_1();
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v2
                .into_iter()
                .map(|x| Func1::new(move |v: string| Dice_ui::closure61((), v))(x.clone()))
                .collect::<Vec<_>>();
            let v7: Array<(string, Dice_ui::US24, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v5);
            let v13: string =
                Dice_ui::method11(200_i64,
                                  append(append(string("use_transactions.render (3) / accounts_metadata create_memo / result: "),
                                                sprintf!("{:?}", v7.clone())),
                                         string("")));
            let v15: bool = true;
            leptos::logging::log!("{}", v13);
            v7
        }
        pub fn method70(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure64(v0_1: string, v1: i32) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                append(
                    append(
                        append(
                            append(
                                append(
                                    append(string("https://api3.nearblocks.io/v1/account/"), v0_1),
                                    string("/txns?&order=desc&page="),
                                ),
                                toString(v1 + 1_i32),
                            ),
                            string("&per_page="),
                        ),
                        toString(25_i32),
                    ),
                    string(""),
                ),
                Dice_ui::US24::US24_0,
                string(""),
                false,
                true,
            )
        }
        pub fn closure63(
            v0_1: LrcPtr<Dice_ui::Heap0>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US24, string, bool, bool)>) {
            let v2: i32 = v0_1.l3;
            let v3: Array<i32> = new_init(&0_i32, v2);
            let v4: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method70(v2, v4.clone()) {
                let v6: i32 = v4.l0.get().clone();
                v3.get_mut()[v6 as usize] = v6;
                {
                    let v7: i32 = v6 + 1_i32;
                    v4.l0.set(v7);
                    ()
                }
            }
            {
                let v9: Vec<i32> = v3.clone().to_vec();
                (
                    v1.clone(),
                    v9.into_iter()
                        .map(|x| {
                            Func1::new({
                                let v1 = v1.clone();
                                move |v: i32| Dice_ui::closure64(v1.clone(), v)
                            })(x.clone())
                        })
                        .collect::<Vec<_>>(),
                )
            }
        }
        pub fn closure62(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v4.l3.clone());
            let v9: Vec<string> = v1();
            let v12: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v9
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v7 = v7.clone();
                        move |v: string| Dice_ui::closure63(v7.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v18: string =
                Dice_ui::method11(200_i64,
                                  append(append(string("use_transactions.render (4) / accounts_requests create_memo / result: "),
                                                sprintf!("{:?}",
                                                         v12.clone())),
                                         string("")));
            let v20: bool = true;
            leptos::logging::log!("{}", v18);
            v12
        }
        pub fn closure66(
            unitVar: (),
            _arg: (string, Vec<(string, Dice_ui::US24, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            _arg.1.clone()
        }
        pub fn method71(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method72(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn method73(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn closure65(
            v0_1: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v0_1();
            let v5: Vec<Vec<(string, Dice_ui::US24, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        )| Dice_ui::closure66((), arg10_0040),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US24, string, bool, bool)>().to_vec();
            let v10: Array<Vec<(string, Dice_ui::US24, string, bool, bool)>> =
                fable_library_rust::NativeArray_::array_from(v5);
            let v11: i32 = count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method71(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<(string, Dice_ui::US24, string, bool, bool)> = v12.l1.get().clone();
                let v17: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                    Dice_ui::method72(v10[v14].clone());
                let v18: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method73(v15);
                let v20: bool = true;
                let mut v18 = v18;
                let v22: bool = true;
                v18.extend(v17);
                let v24: Vec<(string, Dice_ui::US24, string, bool, bool)> = v18;
                let v25: i32 = v14 + 1_i32;
                v12.l0.set(v25);
                v12.l1.set(v24);
                ()
            }
            {
                let v26: Vec<(string, Dice_ui::US24, string, bool, bool)> = v12.l1.get().clone();
                let v32: string =
                    Dice_ui::method11(200_i64,
                                      append(append(string("use_transactions.render (5) / txns_requests create_memo / result: "),
                                                    sprintf!("{:?}",
                                                             v26.clone())),
                                             string("")));
                let v34: bool = true;
                leptos::logging::log!("{}", v32);
                v26
            }
        }
        pub fn closure69(
            v0_1: string,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> string {
            v0_1
        }
        pub fn closure68(
            unitVar: (),
            _arg: (string, Vec<(string, Dice_ui::US24, string, bool, bool)>),
        ) -> Vec<string> {
            _arg.1
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let _arg = _arg.clone();
                        move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                            Dice_ui::closure69(_arg.0.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn method74(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn method75(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method76(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn closure67(
            v0_1: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v0_1();
            let v5: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        )| Dice_ui::closure68((), arg10_0040),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Vec<string> = new_empty::<string>().to_vec();
            let v10: Array<Vec<string>> = fable_library_rust::NativeArray_::array_from(v5);
            let v11: i32 = count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut2> = LrcPtr::new(Dice_ui::Mut2 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method74(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<string> = v12.l1.get().clone();
                let v17: Vec<string> = Dice_ui::method75(v10[v14].clone());
                let v18: Vec<string> = Dice_ui::method76(v15);
                let v20: bool = true;
                let mut v18 = v18;
                let v22: bool = true;
                v18.extend(v17);
                let v24: Vec<string> = v18;
                let v25: i32 = v14 + 1_i32;
                v12.l0.set(v25);
                v12.l1.set(v24);
                ()
            }
            {
                let v26: Vec<string> = v12.l1.get().clone();
                let v28: Array<string> = fable_library_rust::NativeArray_::array_from(v26);
                let v34: string =
                    Dice_ui::method11(200_i64,
                                      append(append(string("use_transactions.render (6) / urls_accounts create_memo / result: "),
                                                    sprintf!("{:?}",
                                                             v28.clone())),
                                             string("")));
                let v36: bool = true;
                leptos::logging::log!("{}", v34);
                v28
            }
        }
        pub fn closure72(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            (v0_1.clone().action, v0_1.method)
        }
        pub fn method77(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure73(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1)
        }
        pub fn method78() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure73((), v))
        }
        pub fn closure71(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().receipt_id;
            let v4: std::string::String = v0_1.clone().predecessor_account_id;
            let v6: std::string::String = v0_1.clone().receiver_account_id;
            let v8: std::string::String = v0_1.clone().transaction_hash;
            let v10: std::string::String = v0_1.clone().included_in_block_hash;
            let v12: std::string::String = v0_1.clone().block_timestamp;
            let v14: crate::model::near::nearblocks::Block = v0_1.clone().block;
            let v16: u32 = v14.block_height;
            let v18: Vec<crate::model::near::nearblocks::Action> = v0_1.clone().actions;
            let v21: Vec<(std::string::String, Option<std::string::String>)> = v18
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Action| {
                        Dice_ui::closure72((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v24: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method77(fable_library_rust::NativeArray_::array_from(v21));
            let v26: crate::model::near::nearblocks::ActionsAgg = v0_1.clone().actions_agg;
            let v28: f64 = v26.deposit;
            let v30: crate::model::near::nearblocks::Outcomes = v0_1.clone().outcomes;
            let v32: bool = v30.status;
            let v34: crate::model::near::nearblocks::OutcomesAgg = v0_1.clone().outcomes_agg;
            let v36: f64 = v34.transaction_fee;
            let v38: Option<Vec<std::string::String>> = v0_1.logs;
            (
                v2,
                v4,
                v6,
                v8,
                v10,
                v12,
                v16,
                v24,
                v28,
                v32,
                v36,
                defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method78(), v38),
                ),
            )
        }
        pub fn method79(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure70(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Txn| {
                        Dice_ui::closure71((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method79(fable_library_rust::NativeArray_::array_from(v5))
        }
        pub fn closure74(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::SignalGet::get(&v0_1);
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn closure75(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> (
            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) {
            let v3: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::SignalGet::get(&v1);
            let v5: bool = true;
            let _optionm_map_ = v3.map(|x| {
                //;
                let v7: std::sync::Arc<rexie::Rexie> = x;
                let v10: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v7);
                let v12: bool = true;
                v10
            });
            (_optionm_map_, v0_1())
        }
        pub fn method82(v0_1: string) -> string {
            v0_1
        }
        pub fn method83(
            v0_1: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
        ) -> Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> {
            v0_1
        }
        pub fn closure76(
            v0_1: std::sync::Arc<rexie::Rexie>,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let v6: string = append(
                append(
                    append(append(string("url["), _arg.0.clone()), string("](")),
                    sprintf!("{:?}", _arg.2.clone()),
                ),
                string(")"),
            );
            let v7: string = append(
                append(string("state_core.get_data () / id: "), v6.clone()),
                string(""),
            );
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v11: bool = true;
            let __future_init = Box::pin(async {
                //;
                let v13: Array<string> = new_array(&[string("store")]);
                let v15: Vec<string> = v13.to_vec();
                let v18: Vec<std::string::String> = v15
                    .into_iter()
                    .map(|x| Func1::new(move |v: string| Dice_ui::closure12((), v))(x.clone()))
                    .collect::<Vec<_>>();
                let v19: std::sync::Arc<rexie::Rexie> = Dice_ui::method16(v0_1);
                let v21: Result<rexie::Transaction, rexie::Error> =
                    v19.transaction(&v18, rexie::TransactionMode::ReadOnly);
                let v22 = Dice_ui::method17();
                let v27: Result<rexie::Transaction, std::string::String> = v21.map_err(|x| v22(x));
                let v38: rexie::Transaction = v27?;
                let v39: string = Dice_ui::method18();
                let v44: &str = &*v39;
                let v65: Result<rexie::Store, rexie::Error> = v38.store(v44);
                let v66 = Dice_ui::method19();
                let v71: Result<rexie::Store, std::string::String> = v65.map_err(|x| v66(x));
                let v82: rexie::Store = v71?;
                let v83: string = Dice_ui::method82(v6);
                let v88: &str = &*v83;
                let v109: wasm_bindgen::JsValue = wasm_bindgen::JsValue::from_str(v88);
                let v111: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<wasm_bindgen::JsValue>, rexie::Error>,
                        >,
                    >,
                > = Box::pin(rexie::Store::get(&v82, v109));
                let v113: Result<Option<wasm_bindgen::JsValue>, rexie::Error> = v111.await;
                let v114 = Dice_ui::method21();
                let v119: Result<Option<wasm_bindgen::JsValue>, std::string::String> =
                    v113.map_err(|x| v114(x));
                let v130: Option<wasm_bindgen::JsValue> = v119?;
                let v144: Dice_ui::US6 =
                    defaultValue(Dice_ui::US6::US6_1, map(Dice_ui::method22(), v130));
                let v244: Dice_ui::US26 = match &v144 {
                    Dice_ui::US6::US6_0(v144_0_0) => {
                        let v149: wasm_bindgen::JsValue = Dice_ui::method23(match &v144 {
                            Dice_ui::US6::US6_0(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v151: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                            serde_wasm_bindgen::from_value(v149);
                        let v152 = Dice_ui::method24();
                        let v157: Result<Option<serde_json::Value>, std::string::String> =
                            v151.map_err(|x| v152(x));
                        let v168: Option<serde_json::Value> = v157?;
                        let v182: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method25(), v168));
                        match &v182 {
                            Dice_ui::US7::US7_0(v182_0_0) => {
                                let v187: serde_json::Value = Dice_ui::method26(match &v182 {
                                    Dice_ui::US7::US7_0(x) => x.clone(),
                                    _ => unreachable!(),
                                });
                                let v189: Result<Vec<u8>, serde_json::Error> =
                                    serde_json::from_value(v187);
                                let v190 = Dice_ui::method27();
                                let v195: Result<Vec<u8>, std::string::String> =
                                    v189.map_err(|x| v190(x));
                                let v206: Vec<u8> = v195?;
                                let v208: Array<u8> =
                                    fable_library_rust::NativeArray_::array_from(v206);
                                let v210: string = append(
                                    append(
                                        string("state_core.get_data () / data_len: "),
                                        toString(count(v208.clone())),
                                    ),
                                    string(""),
                                );
                                let v212: bool = true;
                                leptos::logging::log!("{}", v210);
                                let v214: Vec<u8> = v208.to_vec();
                                let v216: &[u8] = v214.as_slice();
                                let v218: bool = true;
                                let mut v216 = v216;
                                let v220: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> =
                                    borsh::BorshDeserialize::deserialize(&mut v216);
                                let v221 = Dice_ui::method28();
                                let v226: Result<LrcPtr<Dice_ui::Heap4>, std::string::String> =
                                    v220.map_err(|x| v221(x));
                                Dice_ui::US26::US26_0(v226?)
                            }
                            _ => Dice_ui::US26::US26_1,
                        }
                    }
                    _ => Dice_ui::US26::US26_1,
                };
                let v253: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                    Dice_ui::method83(Ok::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(
                        match &v244 {
                            Dice_ui::US26::US26_0(v244_0_0) => Some(match &v244 {
                                Dice_ui::US26::US26_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                        },
                    ));
                let v256: string = string("}");
                let v262: bool = true;
                let v257 = v253;
                let v272: string = append(
                    append(
                        append(append(string("true; v257 "), v256), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v273: bool = true;
                v257
            }); // rust.fix_closure';
            let v275 = __future_init;
            v275
        }
        pub fn method84(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn method85(
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            v0_1
        }
        pub fn method86(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                >,
            >,
        > {
            v0_1
        }
        pub fn method81(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
        ) -> leptos::prelude::Resource<
            (
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Vec<(string, Dice_ui::US24, string, bool, bool)>,
            ),
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            let v2: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure75(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        ) = x;
                        let v6: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                            patternInput.1.clone();
                        let v5: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            patternInput.0.clone();
                        let v8: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v9: string = sprintf!("{:?}", v5.clone());
                            let v17: string =
                    append(append(append(append(string("state_core.use_requests (3) / state_data_resource create_local_resource / request : "),
                                                Dice_ui::method11(400_i64,
                                                                  sprintf!("{:?}",
                                                                           v6.clone()))),
                                         string(" / database: ")), v9),
                           string(""));
                            let v19: bool = true;
                            leptos::logging::log!("{}", v17);
                            let v21: bool = true;
                            let _optionm_map_ = v5.map(|x| {
                                //;
                                let v23: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                                let v25: std::sync::Arc<rexie::Rexie> = v23.0;
                                let v27: bool = true;
                                v25
                            });
                            let v29: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                            let v43: Dice_ui::US4 =
                                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method15(), v29));
                            let v109: Dice_ui::US25 = if let Dice_ui::US4::US4_0(v43_0_0) = &v43 {
                                let v51: Vec<
                                    std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    >,
                                > = Dice_ui::method84(
                                    v6.into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v43 = v43.clone();
                                                move |arg10_0040_1: (
                                                    string,
                                                    Dice_ui::US24,
                                                    string,
                                                    bool,
                                                    bool,
                                                )| {
                                                    Dice_ui::closure76(
                                                        match &v43 {
                                                            Dice_ui::US4::US4_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        },
                                                        arg10_0040_1,
                                                    )
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>(),
                                );
                                let v53: futures::future::TryJoinAll<
                                    std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    >,
                                > = futures::future::try_join_all(v51);
                                let v55: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = v53.await;
                                Dice_ui::US25::US25_0(v55?)
                            } else {
                                let v64: &str = &*string("database=None");
                                Dice_ui::US25::US25_1(String::from(v64))
                            };
                            let v115: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = match &v109 {
                                Dice_ui::US25::US25_0(v109_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v109_0_0.clone(),
                                    )
                                }
                                Dice_ui::US25::US25_1(v109_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v109_1_0.clone(),
                                    )
                                }
                            };
                            let v121: string =
                    Dice_ui::method11(200_i64,
                                      append(append(string("state_core.use_requests (4) / state_data_resource create_local_resource / result: "),
                                                    sprintf!("{:?}",
                                                             v115.clone())),
                                             string("")));
                            let v123: bool = true;
                            leptos::logging::log!("{}", v121);
                            let v124: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = Dice_ui::method85(v115);
                            let v127: string = string("}");
                            let v133: bool = true;
                            let v128 = v124;
                            let v143: string = append(
                                append(
                                    append(append(string("true; v128 "), v127), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v144: bool = true;
                            v128
                        }); // rust.fix_closure';
                        let v146 = __future_init;
                        let v149: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method86(v146);
                        let v151: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            v149.await;
                        let v153: string = string("}}");
                        let v155: string = string("{");
                        let v161: bool = true;
                        let v156 = v151;
                        let v171: string = append(
                            append(
                                append(append(string("true; v156 "), v153), string("); ")),
                                v155,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v172: bool = true;
                        v156
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn closure77(
            v0_1: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method37(Dice_ui::method36());
            let v6 = Dice_ui::method38();
            let v7 = Dice_ui::method39();
            let v8: Dice_ui::US10 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v31: Dice_ui::US11 = match &v8 {
                Dice_ui::US10::US10_0(v8_0_0) => Dice_ui::US11::US11_0(defaultValue(
                    Dice_ui::US12::US12_1,
                    map(Dice_ui::method40(), v8_0_0.clone()),
                )),
                Dice_ui::US10::US10_1(v8_1_0) => Dice_ui::US11::US11_1(v8_1_0.clone()),
            };
            let v39: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US11::US11_0(v31_0_0) = &v31 {
                    if let Dice_ui::US12::US12_0(_) = &match &v31 {
                        Dice_ui::US11::US11_0(x) => x.clone(),
                        _ => unreachable!(),
                    } {
                        leptos::prelude::SignalGet::get(&v0_1)
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v45: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v39.clone()),
                    ),
                    string(""),
                ),
            );
            let v47: bool = true;
            leptos::logging::log!("{}", v45);
            v39
        }
        pub fn closure78(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            unitVar: (),
        ) -> (
            Vec<(string, Dice_ui::US24, string, bool, bool)>,
            Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        ) {
            (v0_1(), v1())
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US27 {
            Dice_ui::US27::US27_0(v0_1)
        }
        pub fn method88(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US27>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure79((), v)
                },
            )
        }
        pub fn closure80(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method89() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US25> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure80((), v))
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US25 {
            Dice_ui::US25::US25_1(v0_1)
        }
        pub fn method90() -> Func1<std::string::String, Dice_ui::US25> {
            Func1::new(move |v: std::string::String| Dice_ui::closure81((), v))
        }
        pub fn closure82(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method91() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US26> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure82((), v))
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US26) -> Dice_ui::US33 {
            Dice_ui::US33::US33_0(v0_1)
        }
        pub fn method93() -> Func1<Dice_ui::US26, Dice_ui::US33> {
            Func1::new(move |v: Dice_ui::US26| Dice_ui::closure85((), v))
        }
        pub fn method94(v0_1: Dice_ui::US24) -> Dice_ui::US24 {
            v0_1
        }
        pub fn method95(v0_1: string) -> string {
            v0_1
        }
        pub fn method96(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method97(v0_1: string) -> string {
            v0_1
        }
        pub fn method98(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method99(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method100(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure86(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method101() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure86((), v))
        }
        pub fn method102(
            v0_1: Result<Option<string>, std::string::String>,
        ) -> Result<Option<string>, std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: Dice_ui::US28,
            v1: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US24 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v54: Dice_ui::US30 = match &v0_1 {
                    Dice_ui::US28::US28_0(v0_1_0_0) => {
                        let v9: Dice_ui::US29 = match &v0_1 {
                            Dice_ui::US28::US28_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        Dice_ui::US30::US30_0(match &v9 {
                            Dice_ui::US29::US29_0(v9_0_0) => {
                                let v13: Option<Dice_ui::US26> = tryItem(
                                    v1,
                                    fable_library_rust::NativeArray_::array_from(v9_0_0.clone()),
                                );
                                let v27: Dice_ui::US33 = defaultValue(
                                    Dice_ui::US33::US33_1,
                                    map(Dice_ui::method93(), v13),
                                );
                                let v37: Dice_ui::US26 =
                                    if let Dice_ui::US33::US33_0(v27_0_0) = &v27 {
                                        let v31: Dice_ui::US26 = match &v27 {
                                            Dice_ui::US33::US33_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        };
                                        if let Dice_ui::US26::US26_0(v31_0_0) = &v31 {
                                            Dice_ui::US26::US26_0(match &v31 {
                                                Dice_ui::US26::US26_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                        } else {
                                            Dice_ui::US26::US26_1
                                        }
                                    } else {
                                        Dice_ui::US26::US26_1
                                    };
                                Dice_ui::US31::US31_0(match &v37 {
                                    Dice_ui::US26::US26_0(v37_0_0) => Dice_ui::US32::US32_0(
                                        fable_library_rust::String_::fromString(
                                            (match &v37 {
                                                Dice_ui::US26::US26_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                            .l0
                                            .clone(),
                                        ),
                                    ),
                                    _ => Dice_ui::US32::US32_1,
                                })
                            }
                            Dice_ui::US29::US29_1(v9_1_0) => Dice_ui::US31::US31_1(v9_1_0.clone()),
                        })
                    }
                    _ => Dice_ui::US30::US30_1,
                };
                let v59: string =
                    Dice_ui::method11(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                let v64: string = Dice_ui::method11(400_i64, sprintf!("{:?}", v0_1.clone()));
                let v69: string = Dice_ui::method11(400_i64, sprintf!("{:?}", v54.clone()));
                let v94: bool = if v6 {
                    true
                } else {
                    if let Dice_ui::US28::US28_0(v0_1_0_0) = &v0_1 {
                        let v70: Dice_ui::US29 = match &v0_1 {
                            Dice_ui::US28::US28_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US29::US29_0(v70_0_0) = &v70 {
                            if count(fable_library_rust::NativeArray_::array_from(match &v70 {
                                Dice_ui::US29::US29_0(x) => x.clone(),
                                _ => unreachable!(),
                            })) == 0_i32
                            {
                                false
                            } else {
                                if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                                    let v76: Dice_ui::US31 = match &v54 {
                                        Dice_ui::US30::US30_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    if let Dice_ui::US31::US31_0(v76_0_0) = &v76 {
                                        if let Dice_ui::US32::US32_1 = &match &v76 {
                                            Dice_ui::US31::US31_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        } {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                                let v82: Dice_ui::US31 = match &v54 {
                                    Dice_ui::US30::US30_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US31::US31_0(v82_0_0) = &v82 {
                                    if let Dice_ui::US32::US32_1 = &match &v82 {
                                        Dice_ui::US31::US31_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    } {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    } else {
                        if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                            let v88: Dice_ui::US31 = match &v54 {
                                Dice_ui::US30::US30_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            if let Dice_ui::US31::US31_0(v88_0_0) = &v88 {
                                if let Dice_ui::US32::US32_1 = &match &v88 {
                                    Dice_ui::US31::US31_0(x) => x.clone(),
                                    _ => unreachable!(),
                                } {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                };
                let v95: string =
                append(append(append(append(append(append(append(append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                        v64),
                                                                 string(" / state_data\': ")),
                                                          v69),
                                                   string(" / request: ")),
                                            v59),
                                     string(" / should_fetch: ")),
                              ofBoolean(v94)), string(""));
                let v97: bool = true;
                leptos::logging::log!("{}", v95);
                let v415: Dice_ui::US34 = if v94 == false {
                    Dice_ui::US34::US34_0(None::<string>)
                } else {
                    let v101: Dice_ui::US24 = Dice_ui::method94(v3);
                    let v207: reqwest_wasm::RequestBuilder = match &v101 {
                        Dice_ui::US24::US24_1 => {
                            let v154: string = Dice_ui::method97(v2.clone());
                            let v159: &str = &*v154;
                            let v203: std::string::String = Dice_ui::method98(String::from(v159));
                            reqwest_wasm::Client::builder()
                                .build()
                                .map_err(|err| err.to_string())?
                                .post(v203)
                        }
                        _ => {
                            let v102: string = Dice_ui::method95(v2.clone());
                            let v107: &str = &*v102;
                            let v151: std::string::String = Dice_ui::method96(String::from(v107));
                            reqwest_wasm::Client::builder()
                                .build()
                                .map_err(|err| err.to_string())?
                                .get(v151)
                        }
                    };
                    let v212: &str = &*_arg.2.clone();
                    let v236: std::string::String = String::from(v212);
                    let v257: reqwest_wasm::RequestBuilder =
                        reqwest_wasm::RequestBuilder::body(v207, v236);
                    let v366: reqwest_wasm::RequestBuilder = Dice_ui::method100(if v5 == false {
                        v257
                    } else {
                        let v262: std::string::String =
                            reqwest_wasm::header::CONTENT_TYPE.to_string();
                        let v264: string = fable_library_rust::String_::fromString(v262);
                        let v265: reqwest_wasm::RequestBuilder = Dice_ui::method99(v257);
                        let v270: &str = &*v264;
                        let v294: std::string::String = String::from(v270);
                        let v319: &str = &*string("application/json");
                        let v343: std::string::String = String::from(v319);
                        reqwest_wasm::RequestBuilder::header(v265, v294, v343)
                    });
                    let v368: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::RequestBuilder::send(v366));
                    let v370: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v368.await;
                    let v371 = Dice_ui::method101();
                    let v376: Result<reqwest_wasm::Response, std::string::String> =
                        v370.map_err(|x| v371(x));
                    let v387: reqwest_wasm::Response = v376?;
                    let v389: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<std::string::String, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::Response::text(v387));
                    let v391: Result<std::string::String, reqwest_wasm::Error> = v389.await;
                    let v392 = Dice_ui::method101();
                    let v397: Result<std::string::String, std::string::String> =
                        v391.map_err(|x| v392(x));
                    let v408: std::string::String = v397?;
                    Dice_ui::US34::US34_0(Some(fable_library_rust::String_::fromString(v408)))
                };
                let v422: Result<Option<string>, std::string::String> =
                    Dice_ui::method102(match &v415 {
                        Dice_ui::US34::US34_0(v415_0_0) => {
                            Ok::<Option<string>, std::string::String>(v415_0_0.clone())
                        }
                        Dice_ui::US34::US34_1(v415_1_0) => {
                            Err::<Option<string>, std::string::String>(v415_1_0.clone())
                        }
                    });
                let v425: string = string("}");
                let v431: bool = true;
                let v426 = v422;
                let v441: string = append(
                    append(
                        append(append(string("true; v426 "), v425), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v442: bool = true;
                v426
            }); // rust.fix_closure';
            let v444 = __future_init;
            v444
        }
        pub fn closure83(
            v0_1: Dice_ui::US28,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure84(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method92(
            v0_1: Dice_ui::US28,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v)
            })
        }
        pub fn method103(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn method104(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method105(
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Result<Vec<Option<string>>, std::string::String> {
            v0_1
        }
        pub fn method106(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<string>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<Option<string>>, std::string::String>>>,
        > {
            v0_1
        }
        pub fn method87(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
        ) -> leptos::prelude::Resource<
            (
                Vec<(string, Dice_ui::US24, string, bool, bool)>,
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            ),
            Result<Vec<Option<string>>, std::string::String>,
        > {
            let v2: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure78(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                            Option<
                                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                            >,
                        ) = x;
                        let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                            patternInput.0.clone();
                        let v12: string =
                    append(append(string("state_core.use_requests (7) / json create_local_resource / requests: "),
                                  Dice_ui::method11(400_i64,
                                                    sprintf!("{:?}",
                                                             v5.clone()))),
                           string(""));
                        let v14: bool = true;
                        leptos::logging::log!("{}", v12);
                        let v16: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v30: Dice_ui::US27 = defaultValue(
                                Dice_ui::US27::US27_1,
                                map(Dice_ui::method88(), patternInput.1.clone()),
                            );
                            let v72: Dice_ui::US28 = match &v30 {
                                Dice_ui::US27::US27_0(v30_0_0) => {
                                    let v34: Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    > = match &v30 {
                                        Dice_ui::US27::US27_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    };
                                    let v35 = Dice_ui::method89();
                                    let v36 = Dice_ui::method90();
                                    let v37: Dice_ui::US25 = match &v34 {
                                        Err(v34_1_0) => v36(v34_1_0.clone()),
                                        Ok(v34_0_0) => v35(v34_0_0.clone()),
                                    };
                                    Dice_ui::US28::US28_0(match &v37 {
                                        Dice_ui::US25::US25_0(v37_0_0) => {
                                            let v40: bool = true;
                                            let _vec_map: Vec<_> = v37_0_0
                                                .clone()
                                                .into_iter()
                                                .map(|x| {
                                                    //;
                                                    let v42: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                    let v56: Dice_ui::US26 = defaultValue(
                                                        Dice_ui::US26::US26_1,
                                                        map(Dice_ui::method91(), v42),
                                                    );
                                                    let v61: bool = true;
                                                    v56
                                                })
                                                .collect::<Vec<_>>();
                                            Dice_ui::US29::US29_0(_vec_map)
                                        }
                                        Dice_ui::US25::US25_1(v37_1_0) => {
                                            Dice_ui::US29::US29_1(v37_1_0.clone())
                                        }
                                    })
                                }
                                _ => Dice_ui::US28::US28_1,
                            };
                            let v78: string = append(
                                append(
                                    string(
                                        "state_core.use_requests (8) / result_memo / state_data: ",
                                    ),
                                    Dice_ui::method11(400_i64, sprintf!("{:?}", v72.clone())),
                                ),
                                string(""),
                            );
                            let v80: bool = true;
                            leptos::logging::log!("{}", v78);
                            let v81 = Dice_ui::method92(v72);
                            let v82: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                                Dice_ui::method103(v5);
                            let v85: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method104(
                                v82.iter()
                                    .enumerate()
                                    .map(|(i, x)| v81(i.try_into().unwrap())(x.clone()))
                                    .collect::<Vec<_>>(),
                            );
                            let v87: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v85);
                            let v89: Result<Vec<Option<string>>, std::string::String> = v87.await;
                            let v93: Result<Vec<Option<string>>, std::string::String> =
                                Dice_ui::method105(Ok::<Vec<Option<string>>, std::string::String>(
                                    v89?,
                                ));
                            let v96: string = string("}");
                            let v102: bool = true;
                            let v97 = v93;
                            let v112: string = append(
                                append(
                                    append(append(string("true; v97 "), v96), string("); ")),
                                    string(""),
                                ),
                                string(" // rust.fix_closure\'"),
                            );
                            let v113: bool = true;
                            v97
                        }); // rust.fix_closure';
                        let v115 = __future_init;
                        let v118: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Vec<Option<string>>, std::string::String>,
                                >,
                            >,
                        > = Dice_ui::method106(v115);
                        let v120: Result<Vec<Option<string>>, std::string::String> = v118.await;
                        let v122: string = string("}}");
                        let v124: string = string("{");
                        let v130: bool = true;
                        let v125 = v120;
                        let v140: string = append(
                            append(
                                append(append(string("true; v125 "), v122), string("); ")),
                                v124,
                            ),
                            string(" // rust.fix_closure\'"),
                        );
                        let v141: bool = true;
                        v125
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn method107(v0_1: string) -> string {
            v0_1
        }
        pub fn closure89(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method108() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure89((), v))
        }
        pub fn method109(v0_1: Result<(), std::string::String>) -> Result<(), std::string::String> {
            v0_1
        }
        pub fn closure88(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: std::sync::Arc<rexie::Rexie>,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v9: string =
                append(append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                              v2.clone()), string(""));
                let v11: bool = true;
                leptos::logging::log!("{}", v9);
                let v12: string = append(
                    append(
                        append(append(string("url["), v2), string("](")),
                        sprintf!("{:?}", _arg.2.clone()),
                    ),
                    string(")"),
                );
                let v17: string = append(
                    append(
                        string("state_core.set_data () / data_len: "),
                        toString(length(sprintf!("{:?}", v0_1.clone())) as i64),
                    ),
                    string(""),
                );
                let v19: bool = true;
                leptos::logging::log!("{}", v17);
                let v21: bool = true;
                let __future_init = Box::pin(async move {
                    //;
                    let v23: bool = true;
                    let mut data = Vec::new();
                    let v25: bool = true;
                    borsh::BorshSerialize::serialize(&v0_1, &mut data).unwrap();
                    let v27: Vec<u8> = data;
                    let v29: wasm_bindgen::JsValue = serde_wasm_bindgen::to_value(&v27).unwrap();
                    let v30: string = Dice_ui::method107(v12);
                    let v35: &str = &*v30;
                    let v56: rexie::Transaction =
                        v1.transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                    let v58: rexie::Store = v56.store("store")?;
                    let v60: bool = true;
                    v58.put(&v29, Some(&v35.into())).await?;
                    let v62: bool = true;
                    v56.done().await?;
                    let v64: Result<(), rexie::Error> =
                        Dice_ui::method52(Ok::<(), rexie::Error>(()));
                    let v67: string = string("}");
                    let v73: bool = true;
                    let v68 = v64;
                    let v83: string = append(
                        append(
                            append(append(string("true; v68 "), v67), string("); ")),
                            string(""),
                        ),
                        string(" // rust.fix_closure\'"),
                    );
                    let v84: bool = true;
                    v68
                }); // rust.fix_closure';
                let v86 = __future_init;
                let v88: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                > = v86;
                let v90: Result<(), rexie::Error> = v88.await;
                let v91 = Dice_ui::method108();
                let v96: Result<(), std::string::String> = v90.map_err(|x| v91(x));
                let v107: bool = true;
                v96?;
                let v109: Result<(), std::string::String> =
                    Dice_ui::method109(Ok::<(), std::string::String>(()));
                let v110: string = string("}");
                let v116: bool = true;
                let v111 = v109;
                let v126: string = append(
                    append(
                        append(append(string("true; v111 "), v110), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v127: bool = true;
                v111
            }); // rust.fix_closure';
            let v129 = __future_init;
            v129
        }
        pub fn method110(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method111(
            v0_1: Result<Vec<()>, std::string::String>,
        ) -> Result<Vec<()>, std::string::String> {
            v0_1
        }
        pub fn closure87(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>>,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v7: string = append(
                append(
                    string("state_core.use_requests (10) / set_state_data_action / value_len: "),
                    toString(length(sprintf!("{:?}", v2.clone())) as i64),
                ),
                string(""),
            );
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v11: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v13: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                    leptos::prelude::SignalGetUntracked::get_untracked(&v0_1);
                let v15: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                    leptos::prelude::SignalGetUntracked::get_untracked(&v1);
                let v17: bool = true;
                let _optionm_map_ = v15.map(|x| {
                    //;
                    let v19: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                    let v21: std::sync::Arc<rexie::Rexie> = v19.0;
                    let v23: bool = true;
                    v21
                });
                let v25: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                let v39: Dice_ui::US4 =
                    defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method15(), v25));
                let v62: Dice_ui::US35 = if let Dice_ui::US4::US4_0(v39_0_0) = &v39 {
                    let v47: Vec<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = Dice_ui::method110(
                        v13.into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v2 = v2.clone();
                                    let v39 = v39.clone();
                                    move |arg10_0040: (
                                        string,
                                        Dice_ui::US24,
                                        string,
                                        bool,
                                        bool,
                                    )| {
                                        Dice_ui::closure88(
                                            v2.clone(),
                                            match &v39 {
                                                Dice_ui::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            },
                                            arg10_0040,
                                        )
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>(),
                    );
                    let v49: futures::future::TryJoinAll<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = futures::future::try_join_all(v47);
                    let v51: Result<Vec<()>, std::string::String> = v49.await;
                    Dice_ui::US35::US35_0(v51?)
                } else {
                    let v57: bool = true;
                    leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                    Dice_ui::US35::US35_0(new_empty::<()>().to_vec())
                };
                let v69: Result<Vec<()>, std::string::String> = Dice_ui::method111(match &v62 {
                    Dice_ui::US35::US35_0(v62_0_0) => {
                        Ok::<Vec<()>, std::string::String>(v62_0_0.clone())
                    }
                    Dice_ui::US35::US35_1(v62_1_0) => {
                        Err::<Vec<()>, std::string::String>(v62_1_0.clone())
                    }
                });
                let v72: string = string("}");
                let v78: bool = true;
                let v73 = v69;
                let v88: string = append(
                    append(
                        append(append(string("true; v73 "), v72), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v89: bool = true;
                v73
            }); // rust.fix_closure';
            let v91 = __future_init;
            v91
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US38 {
            Dice_ui::US38::US38_0(v0_1)
        }
        pub fn method112() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US38>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure91((), v)
            })
        }
        pub fn closure92(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US40 {
            Dice_ui::US40::US40_0(v0_1)
        }
        pub fn method113() -> Func1<Vec<Option<string>>, Dice_ui::US40> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure92((), v))
        }
        pub fn closure93(unitVar: (), v0_1: std::string::String) -> Dice_ui::US40 {
            Dice_ui::US40::US40_1(v0_1)
        }
        pub fn method114() -> Func1<std::string::String, Dice_ui::US40> {
            Func1::new(move |v: std::string::String| Dice_ui::closure93((), v))
        }
        pub fn closure94(unitVar: (), v0_1: string) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method115() -> Func1<string, Dice_ui::US32> {
            Func1::new(move |v: string| Dice_ui::closure94((), v))
        }
        pub fn closure97(unitVar: (), v0_1: Dice_ui::US32) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method117() -> Func1<Dice_ui::US32, Dice_ui::US43> {
            Func1::new(move |v: Dice_ui::US32| Dice_ui::closure97((), v))
        }
        pub fn closure98(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method118(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure98((), v))
        }
        pub fn method119(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure96(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v51: Dice_ui::US30 = match &v0_1 {
                Dice_ui::US36::US36_0(v0_1_0_0) => {
                    let v8: Dice_ui::US37 = match &v0_1 {
                        Dice_ui::US36::US36_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US30::US30_0(match &v8 {
                        Dice_ui::US37::US37_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US26> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US33 =
                                defaultValue(Dice_ui::US33::US33_1, map(Dice_ui::method93(), v10));
                            let v34: Dice_ui::US26 = if let Dice_ui::US33::US33_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US26 = match &v24 {
                                    Dice_ui::US33::US33_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US26::US26_0(v28_0_0) = &v28 {
                                    Dice_ui::US26::US26_0(match &v28 {
                                        Dice_ui::US26::US26_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US26::US26_1
                                }
                            } else {
                                Dice_ui::US26::US26_1
                            };
                            Dice_ui::US31::US31_0(match &v34 {
                                Dice_ui::US26::US26_0(v34_0_0) => {
                                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US26::US26_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US32::US32_1,
                            })
                        }
                        Dice_ui::US37::US37_1(v8_1_0) => Dice_ui::US31::US31_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US30::US30_1,
            };
            let v62: string = append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            Dice_ui::method11(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            ),
                        ),
                        string(" / state_data: "),
                    ),
                    Dice_ui::method11(400_i64, sprintf!("{:?}", v51.clone())),
                ),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                append(
                    string("state_core.use_request (16) / effect / json: "),
                    Dice_ui::method11(400_i64, sprintf!("{:?}", v1.clone())),
                ),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US32 = match &v1 {
                Dice_ui::US42::US42_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US32> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone()),
                    );
                    let v90: Dice_ui::US43 =
                        defaultValue(Dice_ui::US43::US43_1, map(Dice_ui::method117(), v76));
                    if let Dice_ui::US43::US43_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US32 = match &v90 {
                            Dice_ui::US43::US43_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v94_0_0) = &v94 {
                            Dice_ui::US32::US32_0(match &v94 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            Dice_ui::US32::US32_1
                        }
                    } else {
                        Dice_ui::US32::US32_1
                    }
                }
                _ => Dice_ui::US32::US32_1,
            };
            if let Dice_ui::US32::US32_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method49(match &v104 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                });
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method50();
                let v138: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method118();
                let v149: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method119(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US30::US30_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US31 = match &v51 {
                        Dice_ui::US30::US30_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US31::US31_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US32 = match &v152 {
                            Dice_ui::US31::US31_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method49(match &v153 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method50();
                            let v187: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method118();
                            let v198: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method119(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                ),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            ),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v222: string = append(
                        append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104, v51)),
                        ),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure95(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure96(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method116(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure95(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure90(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            >,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v0_1();
            let v9: string = append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                ),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                v1();
            let v27: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method88(), v13));
            let v71: Dice_ui::US36 = match &v27 {
                Dice_ui::US27::US27_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v32 = Dice_ui::method89();
                    let v33 = Dice_ui::method90();
                    let v34: Dice_ui::US25 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v34 {
                        Dice_ui::US25::US25_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method91(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v60))
                        }
                        Dice_ui::US25::US25_1(v34_1_0) => Dice_ui::US37::US37_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v77: string = append(
                append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    Dice_ui::method11(400_i64, sprintf!("{:?}", v71.clone())),
                ),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::prelude::SignalGet::get(&v2);
            let v95: Dice_ui::US38 =
                defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method112(), v81));
            let v106: Dice_ui::US39 = match &v95 {
                Dice_ui::US38::US38_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v100 = Dice_ui::method113();
                    let v101 = Dice_ui::method114();
                    Dice_ui::US39::US39_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US39::US39_1,
            };
            let v142: Dice_ui::US41 = match &v106 {
                Dice_ui::US39::US39_0(v106_0_0) => {
                    let v107: Dice_ui::US40 = match &v106 {
                        Dice_ui::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US41::US41_0(match &v107 {
                        Dice_ui::US40::US40_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method115(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US42::US42_0(_vec_map)
                        }
                        Dice_ui::US40::US40_1(v107_1_0) => Dice_ui::US42::US42_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US41::US41_1,
            };
            let v145: Vec<Dice_ui::US32> = new_empty::<Dice_ui::US32>().to_vec();
            let v149: Dice_ui::US42 = match &v142 {
                Dice_ui::US41::US41_0(v142_0_0) => match &v142 {
                    Dice_ui::US41::US41_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => Dice_ui::US42::US42_0(v145),
            };
            match &v149 {
                Dice_ui::US42::US42_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US32 = x;
                        if let Dice_ui::US32::US32_0(v154_0_0) = &v154 {
                            let v160: &str = &*match &v154 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3, v204.clone());
                            ()
                        }
                        {
                            let v208: bool = true;
                            let v210: bool = true;
                        }
                    });
                    {
                        //;
                        ()
                    }
                }
                _ => (),
            }
            {
                let v212 = Dice_ui::method116(v71, v149.clone());
                let v213: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method103(v5);
                let v215: Vec<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = v213
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v212(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v217: Array<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = fable_library_rust::NativeArray_::array_from(v215);
                let v223: string = Dice_ui::method11(
                    200_i64,
                    append(
                        append(
                            string("state_core.use_requests (18) / result_func func0 / result: "),
                            sprintf!("{:?}", v217.clone()),
                        ),
                        string(""),
                    ),
                );
                let v225: bool = true;
                leptos::logging::log!("{}", v223);
                v217
            }
        }
        pub fn method121(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure101(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method121(v0_1), v1)
        }
        pub fn method120(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure101(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method122(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn closure100(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2 = Dice_ui::method120(v0_1);
            let v3: Result<Option<crate::model::near::nearblocks::Root>, std::string::String> =
                Dice_ui::method122(v1);
            v3.map(|x| v2(x))
        }
        pub fn closure99(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::Signal<bool> = leptos::prelude::loading(&v1.clone());
            let v7: bool = leptos::prelude::SignalGet::get(&v5);
            let v9: leptos::prelude::Signal<bool> = leptos::prelude::loading(&v2.clone());
            let v11: bool = leptos::prelude::SignalGet::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::SignalGet::get(&v1);
            let v27: Dice_ui::US4 =
                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method15(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::SignalGet::get(&v2);
            let v46: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method88(), v32));
            let v90: Dice_ui::US36 = match &v46 {
                Dice_ui::US27::US27_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v51 = Dice_ui::method89();
                    let v52 = Dice_ui::method90();
                    let v53: Dice_ui::US25 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v53 {
                        Dice_ui::US25::US25_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method91(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v79))
                        }
                        Dice_ui::US25::US25_1(v53_1_0) => Dice_ui::US37::US37_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v95: string = Dice_ui::method11(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method11(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                        v95),
                                                                 string(" / database_loading: ")),
                                                          ofBoolean(v7)),
                                                   string(" / state_data: ")),
                                            v100),
                                     string(" / state_data_loading: ")),
                              ofBoolean(v11)), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v3();
            let v107: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v105.to_vec();
            let v110: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v_1: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure100(v0_1.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v116: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v110.clone()),
                    ),
                    string(""),
                ),
            );
            let v118: bool = true;
            leptos::logging::log!("{}", v116);
            v110
        }
        pub fn method80(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::Memo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v8: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method7();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure74(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::prelude::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>> =
                leptos::prelude::Memo::new(move |_| v11(()));
            let v14: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method81(v0_1.clone(), v8.clone());
            let v17 = {
                let clo_1 = Func0::new({
                    let v14 = v14.clone();
                    move || Dice_ui::closure77(v14.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v19: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v17(()));
            let v20: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            > = Dice_ui::method87(v0_1.clone(), v19.clone());
            let v23 = Box::pin(Func1::new({
                let v0_1 = v0_1.clone();
                let v13 = v13.clone();
                move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure87(v0_1.clone(), v13.clone(), v)
            }));
            let v24: string =
                string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))");
            let v25: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(*std::sync::Arc::new(
                move |value: &std::sync::Arc<Heap4>| v23(value.clone()),
            ));
            let v28 = {
                let clo_2 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v19 = v19.clone();
                    let v20 = v20.clone();
                    let v25 = v25.clone();
                    move || {
                        Dice_ui::closure90(v0_1.clone(), v19.clone(), v20.clone(), v25.clone(), ())
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v30: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v28(()));
            let v33 = {
                let clo_3 = Func0::new({
                    let v1 = v1.clone();
                    let v14 = v14.clone();
                    let v30 = v30.clone();
                    let v8 = v8.clone();
                    move || Dice_ui::closure99(v1.clone(), v8.clone(), v14.clone(), v30.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            leptos::prelude::Memo::new(move |_| v33(()))
        }
        pub fn closure104(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US44 {
            Dice_ui::US44::US44_0(v0_1)
        }
        pub fn method123() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US44,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure104((), v),
            )
        }
        pub fn closure105(unitVar: (), v0_1: std::string::String) -> Dice_ui::US44 {
            Dice_ui::US44::US44_1(v0_1)
        }
        pub fn method124() -> Func1<std::string::String, Dice_ui::US44> {
            Func1::new(move |v: std::string::String| Dice_ui::closure105((), v))
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US44 {
            let v1 = Dice_ui::method123();
            let v2 = Dice_ui::method124();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn closure107(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US46 {
            Dice_ui::US46::US46_0(v0_1)
        }
        pub fn method125() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US46,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure107((), v),
            )
        }
        pub fn closure106(unitVar: (), v0_1: Dice_ui::US44) -> Dice_ui::US45 {
            match &v0_1 {
                Dice_ui::US44::US44_0(v0_1_0_0) => Dice_ui::US45::US45_0(defaultValue(
                    Dice_ui::US46::US46_1,
                    map(Dice_ui::method125(), v0_1_0_0.clone()),
                )),
                Dice_ui::US44::US44_1(v0_1_1_0) => Dice_ui::US45::US45_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure108(unitVar: (), v0_1: Dice_ui::US45) -> bool {
            if let Dice_ui::US45::US45_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US46::US46_1 = &match &v0_1 {
                    Dice_ui::US45::US45_0(x) => x.clone(),
                    _ => unreachable!(),
                } {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method126() -> Func1<Dice_ui::US45, bool> {
            Func1::new(move |v: Dice_ui::US45| Dice_ui::closure108((), v))
        }
        pub fn method127(v0_1: Vec<Dice_ui::US45>) -> Vec<Dice_ui::US45> {
            v0_1
        }
        pub fn closure111(
            unitVar: (),
            v0_: usize,
            v0__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = v0_1.1.clone();
            (
                v0_1.0.clone(),
                b.0.clone(),
                b.1.clone(),
                b.2.clone(),
                b.3.clone(),
                b.4.clone(),
                b.5.clone(),
                b.6.clone(),
                b.7.clone(),
                b.8.clone(),
                b.9.clone(),
                b.10.clone(),
                b.11.clone(),
            )
        }
        pub fn closure112(
            v0_1: i32,
            v1: string,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            (
                v1,
                v0_1 as usize,
                LrcPtr::new(Dice_ui::Heap5 {
                    l0: _arg.1.clone(),
                    l1: _arg.2.clone(),
                    l2: _arg.3.clone(),
                    l3: _arg.4.clone(),
                    l4: _arg.5.clone(),
                    l5: _arg.6.clone(),
                    l6: _arg.7.clone(),
                    l7: _arg.8.clone(),
                    l8: _arg.9.clone(),
                    l9: _arg.10.clone(),
                    l10: _arg.11.clone(),
                    l11: _arg.12.clone(),
                }),
            )
        }
        pub fn closure110(v0_1: Array<string>, v1: i32, v2: Dice_ui::US45) -> Dice_ui::US49 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US45::US45_0(v2_0_0) => {
                    let v4: Dice_ui::US46 = v2_0_0.clone();
                    Dice_ui::US49::US49_0(match &v4 {
                        Dice_ui::US46::US46_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US46::US46_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new(
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure111(
                                                (),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        },
                                    )(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v18: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v16);
                            let v20: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v18.to_vec();
                            Dice_ui::US50::US50_0(
                                v20.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1 = v1.clone();
                                            let v3 = v3.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure112(v1, v3.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US50::US50_1,
                    })
                }
                Dice_ui::US45::US45_1(v2_1_0) => Dice_ui::US49::US49_1(v2_1_0.clone()),
            }
        }
        pub fn closure109(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US45, Dice_ui::US49> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US45| Dice_ui::closure110(v0_1.clone(), v1, v)
            })
        }
        pub fn method128(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US45, Dice_ui::US49>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure109(v0_1.clone(), v)
            })
        }
        pub fn method129(v0_1: Vec<Dice_ui::US45>) -> Vec<Dice_ui::US45> {
            v0_1
        }
        pub fn closure113(unitVar: (), v0_1: Dice_ui::US49) -> Dice_ui::US51 {
            match &v0_1 {
                Dice_ui::US49::US49_0(v0_1_0_0) => {
                    let v1: Dice_ui::US50 = v0_1_0_0.clone();
                    Dice_ui::US51::US51_0(match &v1 {
                        Dice_ui::US50::US50_0(v1_0_0) => Some(match &v1 {
                            Dice_ui::US50::US50_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US49::US49_1(v0_1_1_0) => Dice_ui::US51::US51_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure114(
            unitVar: (),
            v0_1: Dice_ui::US51,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            match &v0_1 {
                Dice_ui::US51::US51_0(v0_1_0_0) => Ok::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_0_0.clone()),
                Dice_ui::US51::US51_1(v0_1_1_0) => Err::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_1_0.clone()),
            }
        }
        pub fn method130(v0_1: i32, v1: LrcPtr<Dice_ui::Mut3>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure115(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US51 {
            Dice_ui::US51::US51_0(v0_1)
        }
        pub fn method131(
        ) -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US51> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure115((), v)
                },
            )
        }
        pub fn closure116(unitVar: (), v0_1: std::string::String) -> Dice_ui::US51 {
            Dice_ui::US51::US51_1(v0_1)
        }
        pub fn method132() -> Func1<std::string::String, Dice_ui::US51> {
            Func1::new(move |v: std::string::String| Dice_ui::closure116((), v))
        }
        pub fn closure117(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method133() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US50> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure117((), v)
            })
        }
        pub fn method134(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method135(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method136(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure118(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method137() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure118((), arg10_0040)
            })
        }
        pub fn method138(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure102(
            v0_1: leptos::prelude::Memo<Array<string>>,
            v1: leptos::prelude::Memo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v1();
            let v6: Vec<Dice_ui::US44> = v3
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure103((), v),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v9: Vec<Dice_ui::US45> = v6
                .into_iter()
                .map(|x| {
                    Func1::new(move |v_1: Dice_ui::US44| Dice_ui::closure106((), v_1))(x.clone())
                })
                .collect::<Vec<_>>();
            let v15: string = append(
                append(
                    string("transactions.render (8) / txns move / root: "),
                    Dice_ui::method11(400_i64, sprintf!("{:?}", v9.clone())),
                ),
                string(""),
            );
            let v17: bool = true;
            leptos::logging::log!("{}", v15);
            let v18 = Dice_ui::method126();
            let v19: Vec<Dice_ui::US45> = Dice_ui::method127(v9.clone());
            let v21: Vec<Dice_ui::US45> = v19
                .into_iter()
                .filter(|x| v18(x.clone().clone()))
                .collect::<Vec<_>>();
            let v28: bool = count(fable_library_rust::NativeArray_::array_from(v21))
                == count(fable_library_rust::NativeArray_::array_from(v9.clone()));
            let v140: Dice_ui::US47 = if v28 {
                Dice_ui::US47::US47_0(Dice_ui::US48::US48_1)
            } else {
                let v33 = Dice_ui::method128(v0_1());
                let v34: Vec<Dice_ui::US45> = Dice_ui::method129(v9);
                let v36: Vec<Dice_ui::US49> = v34
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v33(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v39: Vec<Dice_ui::US51> = v36
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v_2: Dice_ui::US49| Dice_ui::closure113((), v_2))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v42: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v39
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v_3: Dice_ui::US51| Dice_ui::closure114((), v_3))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v45: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v47: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v42);
                let v48: i32 = count(v47.clone());
                let v50: LrcPtr<Dice_ui::Mut3> = LrcPtr::new(Dice_ui::Mut3 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(Dice_ui::US52::US52_0(v45)),
                });
                while Dice_ui::method130(v48, v50.clone()) {
                    let v52: i32 = v50.l0.get().clone();
                    let v53: Dice_ui::US52 = v50.l1.get().clone();
                    let v54: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v47[v52].clone();
                    let v55 = Dice_ui::method131();
                    let v56 = Dice_ui::method132();
                    let v57: Dice_ui::US51 = match &v54 {
                        Err(v54_1_0) => v56(v54_1_0.clone()),
                        Ok(v54_0_0) => v55(v54_0_0.clone()),
                    };
                    let v80: Dice_ui::US49 = match &v57 {
                        Dice_ui::US51::US51_0(v57_0_0) => Dice_ui::US49::US49_0(defaultValue(
                            Dice_ui::US50::US50_1,
                            map(Dice_ui::method133(), v57_0_0.clone()),
                        )),
                        Dice_ui::US51::US51_1(v57_1_0) => Dice_ui::US49::US49_1(v57_1_0.clone()),
                    };
                    let v101: Dice_ui::US52 = if let Dice_ui::US52::US52_0(v53_0_0) = &v53 {
                        match &v80 {
                            Dice_ui::US49::US49_0(v80_0_0) => {
                                let v82: Dice_ui::US50 = v80_0_0.clone();
                                if let Dice_ui::US50::US50_0(v82_0_0) = &v82 {
                                    let v84: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method134(match &v82 {
                                            Dice_ui::US50::US50_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        });
                                    let v85: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method135(match &v53 {
                                            Dice_ui::US52::US52_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        });
                                    let v87: bool = true;
                                    let mut v85 = v85;
                                    let v89: bool = true;
                                    v85.extend(v84);
                                    Dice_ui::US52::US52_0(v85)
                                } else {
                                    v53.clone()
                                }
                            }
                            Dice_ui::US49::US49_1(v80_1_0) => {
                                Dice_ui::US52::US52_1(v80_1_0.clone())
                            }
                        }
                    } else {
                        if let Dice_ui::US49::US49_1(v80_1_0) = &v80 {
                            Dice_ui::US52::US52_1(match &v80 {
                                Dice_ui::US49::US49_1(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            v53.clone()
                        }
                    };
                    let v102: i32 = v52 + 1_i32;
                    v50.l0.set(v102);
                    v50.l1.set(v101);
                    ()
                }
                {
                    let v103: Dice_ui::US52 = v50.l1.get().clone();
                    let v117: Dice_ui::US52 = match &v103 {
                        Dice_ui::US52::US52_0(v103_0_0) => {
                            let v105: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method136(v103_0_0.clone());
                            let v106 = Dice_ui::method137();
                            let v108: bool = true;
                            let mut v105 = v105;
                            let v110: bool = true;
                            v105.sort_by_key(|x| v106(x.clone()));
                            Dice_ui::US52::US52_0(v105)
                        }
                        Dice_ui::US52::US52_1(v103_1_0) => Dice_ui::US52::US52_1(v103_1_0.clone()),
                    };
                    let v132: Dice_ui::US53 = match &v117 {
                        Dice_ui::US52::US52_0(v117_0_0) => {
                            let v119: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method138(v117_0_0.clone());
                            let v121: bool = true;
                            let mut v119 = v119;
                            let v123: bool = true;
                            v119.reverse();
                            let v125: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v119;
                            Dice_ui::US53::US53_0(fable_library_rust::NativeArray_::array_from(
                                v125,
                            ))
                        }
                        Dice_ui::US52::US52_1(v117_1_0) => Dice_ui::US53::US53_1(v117_1_0.clone()),
                    };
                    match &v132 {
                        Dice_ui::US53::US53_0(v132_0_0) => {
                            Dice_ui::US47::US47_0(Dice_ui::US48::US48_0(v132_0_0.clone()))
                        }
                        Dice_ui::US53::US53_1(v132_1_0) => Dice_ui::US47::US47_1(v132_1_0.clone()),
                    }
                }
            };
            let v153: Dice_ui::US54 = match &v140 {
                Dice_ui::US47::US47_0(v140_0_0) => {
                    let v141: Dice_ui::US48 = v140_0_0.clone();
                    Dice_ui::US54::US54_0(match &v141 {
                        Dice_ui::US48::US48_0(v141_0_0) => Some(match &v141 {
                            Dice_ui::US48::US48_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US47::US47_1(v140_1_0) => Dice_ui::US54::US54_1(v140_1_0.clone()),
            };
            let v159: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v153 {
                Dice_ui::US54::US54_0(v153_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v153_0_0.clone()),
                Dice_ui::US54::US54_1(v153_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v153_1_0.clone()),
            };
            let v165: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        append(
                            append(
                                string("use_transactions.render (9) / txns create_memo / result: "),
                                sprintf!("{:?}", v159.clone()),
                            ),
                            string(" / loading: "),
                        ),
                        ofBoolean(v28),
                    ),
                    string(""),
                ),
            );
            let v167: bool = true;
            leptos::logging::log!("{}", v165);
            v159
        }
        pub fn closure120(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US54 {
            Dice_ui::US54::US54_0(v0_1)
        }
        pub fn method139(
        ) -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US54> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure120((), v)
                },
            )
        }
        pub fn closure121(unitVar: (), v0_1: std::string::String) -> Dice_ui::US54 {
            Dice_ui::US54::US54_1(v0_1)
        }
        pub fn method140() -> Func1<std::string::String, Dice_ui::US54> {
            Func1::new(move |v: std::string::String| Dice_ui::closure121((), v))
        }
        pub fn closure122(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US48 {
            Dice_ui::US48::US48_0(v0_1)
        }
        pub fn method141() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US48> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure122((), v)
            })
        }
        pub fn closure124(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method142() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure124((), v))
        }
        pub fn method143() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))
        }
        pub fn method144(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure125(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US24::US24_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method145() -> Func1<string, (string, Dice_ui::US24, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure125((), v))
        }
        pub fn method146(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn closure123(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US24, string, bool, bool), std::string::String> {
            let v8: &str = &*string("2.0");
            let v32: std::string::String = String::from(v8);
            let v57: &str = &*string("dontcare");
            let v81: std::string::String = String::from(v57);
            let v106: &str = &*string("EXPERIMENTAL_tx_status");
            let v130: std::string::String = String::from(v106);
            let v156: &str = &*string("bowen");
            let v200: Array<std::string::String> =
                new_array(&[(_arg.2.clone()).l3.clone(), String::from(v156)]);
            let v202: Vec<std::string::String> = v200.to_vec();
            let v204: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                jsonrpc: v32,
                id: v81,
                method: v130,
                params: v202,
            };
            let v206: Result<std::string::String, serde_json::Error> = serde_json::to_string(&v204);
            let v207 = Dice_ui::method142();
            let v212: Result<std::string::String, std::string::String> = v206.map_err(|x| v207(x));
            let v222 = Dice_ui::method143();
            let v223: Result<std::string::String, std::string::String> = Dice_ui::method144(v212);
            let v225: Result<string, std::string::String> = v223.map(|x| v222(x));
            let v226 = Dice_ui::method145();
            let v227: Result<string, std::string::String> = Dice_ui::method146(v225);
            v227.map(|x| v226(x))
        }
        pub fn closure119(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US24, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v3 = Dice_ui::method139();
            let v4 = Dice_ui::method140();
            let v5: Dice_ui::US54 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US47 = match &v5 {
                Dice_ui::US54::US54_0(v5_0_0) => Dice_ui::US47::US47_0(defaultValue(
                    Dice_ui::US48::US48_1,
                    map(Dice_ui::method141(), v5_0_0.clone()),
                )),
                Dice_ui::US54::US54_1(v5_1_0) => Dice_ui::US47::US47_1(v5_1_0.clone()),
            };
            let v50: Dice_ui::US55 = match &v28 {
                Dice_ui::US47::US47_0(v28_0_0) => {
                    let v29: Dice_ui::US48 = v28_0_0.clone();
                    if let Dice_ui::US48::US48_0(v29_0_0) = &v29 {
                        let v32: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = match &v29 {
                            Dice_ui::US48::US48_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .to_vec();
                        let v35: Vec<
                            Result<
                                (string, Dice_ui::US24, string, bool, bool),
                                std::string::String,
                            >,
                        > = v32
                            .into_iter()
                            .map(|x| {
                                Func1::new(
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure123((), arg10_0040)
                                    },
                                )(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v37: Result<
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                            std::string::String,
                        > = v35.into_iter().collect();
                        let v39: Vec<(string, Dice_ui::US24, string, bool, bool)> = v37?;
                        Dice_ui::US55::US55_0(Dice_ui::US56::US56_0(
                            fable_library_rust::NativeArray_::array_from(v39),
                        ))
                    } else {
                        Dice_ui::US55::US55_0(Dice_ui::US56::US56_1)
                    }
                }
                Dice_ui::US47::US47_1(v28_1_0) => Dice_ui::US55::US55_1(v28_1_0.clone()),
            };
            let v63: Dice_ui::US57 = match &v50 {
                Dice_ui::US55::US55_0(v50_0_0) => {
                    let v51: Dice_ui::US56 = v50_0_0.clone();
                    Dice_ui::US57::US57_0(match &v51 {
                        Dice_ui::US56::US56_0(v51_0_0) => Some(match &v51 {
                            Dice_ui::US56::US56_0(x) => x.clone(),
                            _ => unreachable!(),
                        }),
                        _ => None::<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    })
                }
                Dice_ui::US55::US55_1(v50_1_0) => Dice_ui::US57::US57_1(v50_1_0.clone()),
            };
            let v69: Result<
                Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                std::string::String,
            > = match &v63 {
                Dice_ui::US57::US57_0(v63_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >(v63_0_0.clone()),
                Dice_ui::US57::US57_1(v63_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >(v63_1_0.clone()),
            };
            let v75: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string(
                            "use_transactions.render (10) / rpc_requests create_memo / result: ",
                        ),
                        sprintf!("{:?}", v69.clone()),
                    ),
                    string(""),
                ),
            );
            let v77: bool = true;
            leptos::logging::log!("{}", v75);
            v69
        }
        pub fn closure127(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
        ) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method147(
        ) -> Func1<Option<Array<(string, Dice_ui::US24, string, bool, bool)>>, Dice_ui::US57>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US24, string, bool, bool)>>| {
                    Dice_ui::closure127((), v)
                },
            )
        }
        pub fn closure128(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method148() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure128((), v))
        }
        pub fn closure129(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method149(
        ) -> Func1<Array<(string, Dice_ui::US24, string, bool, bool)>, Dice_ui::US56> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US24, string, bool, bool)>| {
                    Dice_ui::closure129((), v)
                },
            )
        }
        pub fn closure126(
            v0_1: leptos::prelude::Memo<
                Result<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                std::string::String,
            > = v0_1();
            let v3 = Dice_ui::method147();
            let v4 = Dice_ui::method148();
            let v5: Dice_ui::US57 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US55 = match &v5 {
                Dice_ui::US57::US57_0(v5_0_0) => Dice_ui::US55::US55_0(defaultValue(
                    Dice_ui::US56::US56_1,
                    map(Dice_ui::method149(), v5_0_0.clone()),
                )),
                Dice_ui::US57::US57_1(v5_1_0) => Dice_ui::US55::US55_1(v5_1_0.clone()),
            };
            let v34: Array<(string, Dice_ui::US24, string, bool, bool)> =
                if let Dice_ui::US55::US55_0(v28_0_0) = &v28 {
                    let v29: Dice_ui::US56 = match &v28 {
                        Dice_ui::US55::US55_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US56::US56_0(v29_0_0) = &v29 {
                        match &v29 {
                            Dice_ui::US56::US56_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                    } else {
                        new_empty::<(string, Dice_ui::US24, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US24, string, bool, bool)>()
                };
            let v36: Vec<(string, Dice_ui::US24, string, bool, bool)> = v34.to_vec();
            let v42: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' create_memo / result: ",
                        ),
                        sprintf!("{:?}", v36.clone()),
                    ),
                    string(""),
                ),
            );
            let v44: bool = true;
            leptos::logging::log!("{}", v42);
            v36
        }
        pub fn closure134(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn closure133(
            unitVar: (),
            v0_1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            v0_1.into_iter()
                .map(|(k, v)| {
                    (
                        k,
                        Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                            Dice_ui::closure134((), v)
                        })(v),
                    )
                })
                .collect()
        }
        pub fn closure132(
            unitVar: (),
            v0_1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().predecessor_id;
            let v4: crate::model::near::rpc::ReceiptDetail = v0_1.clone().receipt;
            let v6: crate::model::near::rpc::ActionDetail = v4.action;
            let v8: Vec<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = v6.clone().actions;
            let v11: Vec<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = v8
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |v: std::collections::HashMap<
                            std::string::String,
                            crate::model::near::rpc::TransferDetail,
                        >| Dice_ui::closure133((), v),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v13: Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = fable_library_rust::NativeArray_::array_from(v11);
            let v15: std::string::String = v6.clone().gas_price;
            let v17: Vec<std::string::String> = v6.clone().input_data_ids;
            let v19: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v17);
            let v21: Vec<std::string::String> = v6.clone().output_data_receivers;
            (
                v2,
                v13,
                v15,
                v19,
                fable_library_rust::NativeArray_::array_from(v21),
                v6.clone().signer_id,
                v6.signer_public_key,
                v0_1.clone().receipt_id,
                v0_1.receiver_id,
            )
        }
        pub fn closure136(
            unitVar: (),
            v0_1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            (v0_1.clone().cost, v0_1.clone().cost_category, v0_1.gas_used)
        }
        pub fn closure138(
            unitVar: (),
            v0_1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            (v0_1.clone().direction, v0_1.hash)
        }
        pub fn closure137(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Proof| Dice_ui::closure138((), v))(
                        x.clone(),
                    )
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v3)
        }
        pub fn method151() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure137((), v))
        }
        pub fn closure135(
            unitVar: (),
            v0_1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: std::string::String = v0_1.clone().block_hash;
            let v4: std::string::String = v0_1.clone().id;
            let v6: crate::model::near::rpc::OutcomeDetail = v0_1.clone().outcome;
            let v8: std::string::String = v6.clone().executor_id;
            let v10: u64 = v6.clone().gas_burnt;
            let v12: Vec<std::string::String> = v6.clone().logs;
            let v14: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v12);
            let v16: crate::model::near::rpc::Metadata = v6.clone().metadata;
            let v18: Vec<crate::model::near::rpc::GasProfile> = v16.clone().gas_profile;
            let v21: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v18
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::GasProfile| {
                        Dice_ui::closure136((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v23: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v21);
            let v25: u8 = v16.version;
            let v27: Vec<std::string::String> = v6.clone().receipt_ids;
            let v29: Array<std::string::String> = fable_library_rust::NativeArray_::array_from(v27);
            let v31: std::collections::HashMap<std::string::String, std::string::String> =
                v6.clone().status;
            let v33: Option<std::string::String> = v6.tokens_burnt;
            let v35: Option<Vec<crate::model::near::rpc::Proof>> = v0_1.proof;
            (
                v2,
                v4,
                v8,
                v10,
                v14,
                v23,
                v25,
                v29,
                v31,
                v33,
                defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method151(), v35),
                ),
            )
        }
        pub fn closure131(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Receipt| {
                        Dice_ui::closure132((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v7: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v5);
            let v9: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v12: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v9
                .into_iter()
                .map(|x| {
                    Func1::new(move |v_1: crate::model::near::rpc::ReceiptsOutcome| {
                        Dice_ui::closure135((), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (v7, fable_library_rust::NativeArray_::array_from(v12))
        }
        pub fn method150() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure131((), v)
            })
        }
        pub fn closure140(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method153() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure140((), v))
        }
        pub fn closure139(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method153(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method152() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure139((), v))
        }
        pub fn closure130(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v6: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method150(), v4);
            let v31: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v6, map(Dice_ui::method152(), v31), v0_1.id)
        }
        pub fn closure144(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method156(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure144((), v))
        }
        pub fn method157(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure143(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v51: Dice_ui::US30 = match &v0_1 {
                Dice_ui::US36::US36_0(v0_1_0_0) => {
                    let v8: Dice_ui::US37 = match &v0_1 {
                        Dice_ui::US36::US36_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US30::US30_0(match &v8 {
                        Dice_ui::US37::US37_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US26> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US33 =
                                defaultValue(Dice_ui::US33::US33_1, map(Dice_ui::method93(), v10));
                            let v34: Dice_ui::US26 = if let Dice_ui::US33::US33_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US26 = match &v24 {
                                    Dice_ui::US33::US33_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                if let Dice_ui::US26::US26_0(v28_0_0) = &v28 {
                                    Dice_ui::US26::US26_0(match &v28 {
                                        Dice_ui::US26::US26_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    })
                                } else {
                                    Dice_ui::US26::US26_1
                                }
                            } else {
                                Dice_ui::US26::US26_1
                            };
                            Dice_ui::US31::US31_0(match &v34 {
                                Dice_ui::US26::US26_0(v34_0_0) => {
                                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US26::US26_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US32::US32_1,
                            })
                        }
                        Dice_ui::US37::US37_1(v8_1_0) => Dice_ui::US31::US31_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US30::US30_1,
            };
            let v62: string = append(
                append(
                    append(
                        append(
                            string("state_core.use_request (15) / result memo / request: "),
                            Dice_ui::method11(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            ),
                        ),
                        string(" / state_data: "),
                    ),
                    Dice_ui::method11(400_i64, sprintf!("{:?}", v51.clone())),
                ),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                append(
                    string("state_core.use_request (16) / effect / json: "),
                    Dice_ui::method11(400_i64, sprintf!("{:?}", v1.clone())),
                ),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US32 = match &v1 {
                Dice_ui::US42::US42_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US32> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone()),
                    );
                    let v90: Dice_ui::US43 =
                        defaultValue(Dice_ui::US43::US43_1, map(Dice_ui::method117(), v76));
                    if let Dice_ui::US43::US43_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US32 = match &v90 {
                            Dice_ui::US43::US43_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v94_0_0) = &v94 {
                            Dice_ui::US32::US32_0(match &v94 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            })
                        } else {
                            Dice_ui::US32::US32_1
                        }
                    } else {
                        Dice_ui::US32::US32_1
                    }
                }
                _ => Dice_ui::US32::US32_1,
            };
            if let Dice_ui::US32::US32_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method49(match &v104 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                });
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method50();
                let v138: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method156();
                let v149: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method157(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US30::US30_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US31 = match &v51 {
                        Dice_ui::US30::US30_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US31::US31_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US32 = match &v152 {
                            Dice_ui::US31::US31_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                        if let Dice_ui::US32::US32_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method49(match &v153 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            });
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method50();
                            let v187: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method156();
                            let v198: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method157(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                ),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            ),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v222: string = append(
                        append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104, v51)),
                        ),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure142(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure143(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method155(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure142(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure141(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            >,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v0_1();
            let v9: string = append(
                append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                ),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                v1();
            let v27: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method88(), v13));
            let v71: Dice_ui::US36 = match &v27 {
                Dice_ui::US27::US27_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v32 = Dice_ui::method89();
                    let v33 = Dice_ui::method90();
                    let v34: Dice_ui::US25 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v34 {
                        Dice_ui::US25::US25_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method91(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v60))
                        }
                        Dice_ui::US25::US25_1(v34_1_0) => Dice_ui::US37::US37_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v77: string = append(
                append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    Dice_ui::method11(400_i64, sprintf!("{:?}", v71.clone())),
                ),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::prelude::SignalGet::get(&v2);
            let v95: Dice_ui::US38 =
                defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method112(), v81));
            let v106: Dice_ui::US39 = match &v95 {
                Dice_ui::US38::US38_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    let v100 = Dice_ui::method113();
                    let v101 = Dice_ui::method114();
                    Dice_ui::US39::US39_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US39::US39_1,
            };
            let v142: Dice_ui::US41 = match &v106 {
                Dice_ui::US39::US39_0(v106_0_0) => {
                    let v107: Dice_ui::US40 = match &v106 {
                        Dice_ui::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    Dice_ui::US41::US41_0(match &v107 {
                        Dice_ui::US40::US40_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method115(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US42::US42_0(_vec_map)
                        }
                        Dice_ui::US40::US40_1(v107_1_0) => Dice_ui::US42::US42_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US41::US41_1,
            };
            let v145: Vec<Dice_ui::US32> = new_empty::<Dice_ui::US32>().to_vec();
            let v149: Dice_ui::US42 = match &v142 {
                Dice_ui::US41::US41_0(v142_0_0) => match &v142 {
                    Dice_ui::US41::US41_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => Dice_ui::US42::US42_0(v145),
            };
            match &v149 {
                Dice_ui::US42::US42_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US32 = x;
                        if let Dice_ui::US32::US32_0(v154_0_0) = &v154 {
                            let v160: &str = &*match &v154 {
                                Dice_ui::US32::US32_0(x) => x.clone(),
                                _ => unreachable!(),
                            };
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3, v204.clone());
                            ()
                        }
                        {
                            let v208: bool = true;
                            let v210: bool = true;
                        }
                    });
                    {
                        //;
                        ()
                    }
                }
                _ => (),
            }
            {
                let v212 = Dice_ui::method155(v71, v149.clone());
                let v213: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method103(v5);
                let v215: Vec<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = v213
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v212(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v217: Array<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = fable_library_rust::NativeArray_::array_from(v215);
                let v223: string = Dice_ui::method11(
                    200_i64,
                    append(
                        append(
                            string("state_core.use_requests (18) / result_func func0 / result: "),
                            sprintf!("{:?}", v217.clone()),
                        ),
                        string(""),
                    ),
                );
                let v225: bool = true;
                leptos::logging::log!("{}", v223);
                v217
            }
        }
        pub fn method159(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure147(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method159(v0_1), v1)
        }
        pub fn method158(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure147(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method160(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn closure146(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2 = Dice_ui::method158(v0_1);
            let v3: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> =
                Dice_ui::method160(v1);
            v3.map(|x| v2(x))
        }
        pub fn closure145(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::Signal<bool> = leptos::prelude::loading(&v1.clone());
            let v7: bool = leptos::prelude::SignalGet::get(&v5);
            let v9: leptos::prelude::Signal<bool> = leptos::prelude::loading(&v2.clone());
            let v11: bool = leptos::prelude::SignalGet::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::SignalGet::get(&v1);
            let v27: Dice_ui::US4 =
                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method15(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::SignalGet::get(&v2);
            let v46: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method88(), v32));
            let v90: Dice_ui::US36 = match &v46 {
                Dice_ui::US27::US27_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        };
                    let v51 = Dice_ui::method89();
                    let v52 = Dice_ui::method90();
                    let v53: Dice_ui::US25 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v53 {
                        Dice_ui::US25::US25_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method91(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(v79))
                        }
                        Dice_ui::US25::US25_1(v53_1_0) => Dice_ui::US37::US37_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v95: string = Dice_ui::method11(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method11(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append(append(append(append(append(append(append(append(string("state_core.use_request (19) / result move / database: "),
                                                                        v95),
                                                                 string(" / database_loading: ")),
                                                          ofBoolean(v7)),
                                                   string(" / state_data: ")),
                                            v100),
                                     string(" / state_data_loading: ")),
                              ofBoolean(v11)), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v3();
            let v107: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v105.to_vec();
            let v110: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v_1: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure146(v0_1.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v116: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v110.clone()),
                    ),
                    string(""),
                ),
            );
            let v118: bool = true;
            leptos::logging::log!("{}", v116);
            v110
        }
        pub fn method154(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::Memo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v8: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method7();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure74(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::prelude::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>> =
                leptos::prelude::Memo::new(move |_| v11(()));
            let v14: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method81(v0_1.clone(), v8.clone());
            let v17 = {
                let clo_1 = Func0::new({
                    let v14 = v14.clone();
                    move || Dice_ui::closure77(v14.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v19: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v17(()));
            let v20: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            > = Dice_ui::method87(v0_1.clone(), v19.clone());
            let v23 = Box::pin(Func1::new({
                let v0_1 = v0_1.clone();
                let v13 = v13.clone();
                move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure87(v0_1.clone(), v13.clone(), v)
            }));
            let v24: string =
                string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))");
            let v25: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(*std::sync::Arc::new(
                move |value: &std::sync::Arc<Heap4>| v23(value.clone()),
            ));
            let v28 = {
                let clo_2 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v19 = v19.clone();
                    let v20 = v20.clone();
                    let v25 = v25.clone();
                    move || {
                        Dice_ui::closure141(v0_1.clone(), v19.clone(), v20.clone(), v25.clone(), ())
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v30: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v28(()));
            let v33 = {
                let clo_3 = Func0::new({
                    let v1 = v1.clone();
                    let v14 = v14.clone();
                    let v30 = v30.clone();
                    let v8 = v8.clone();
                    move || {
                        Dice_ui::closure145(v1.clone(), v8.clone(), v14.clone(), v30.clone(), ())
                    }
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            leptos::prelude::Memo::new(move |_| v33(()))
        }
        pub fn method161() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure149(unitVar: (), v0_1: Dice_ui::US15) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(v0_1)
        }
        pub fn method162() -> Func1<Dice_ui::US15, Dice_ui::US59> {
            Func1::new(move |v: Dice_ui::US15| Dice_ui::closure149((), v))
        }
        pub fn closure150(unitVar: (), v0_1: std::string::String) -> Dice_ui::US59 {
            Dice_ui::US59::US59_1(v0_1)
        }
        pub fn method163() -> Func1<std::string::String, Dice_ui::US59> {
            Func1::new(move |v: std::string::String| Dice_ui::closure150((), v))
        }
        pub fn closure151(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US61 {
            Dice_ui::US61::US61_0(v0_1)
        }
        pub fn method164() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US61> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure151((), v))
        }
        pub fn closure152(unitVar: (), v0_1: std::string::String) -> Dice_ui::US61 {
            Dice_ui::US61::US61_1(v0_1)
        }
        pub fn method165() -> Func1<std::string::String, Dice_ui::US61> {
            Func1::new(move |v: std::string::String| Dice_ui::closure152((), v))
        }
        pub fn method166(
            v0_1: Result<Dice_ui::US58, std::string::String>,
        ) -> Result<Dice_ui::US58, std::string::String> {
            v0_1
        }
        pub fn closure148(
            unitVar: (),
            v0_1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US58, std::string::String>>>,
        > {
            let v4: string = append(
                append(
                    string("dice_view.render (2) / set_max_action / value: "),
                    sprintf!("{:?}", v0_1),
                ),
                string(""),
            );
            let v6: bool = true;
            leptos::logging::log!("{}", v4);
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v14: &str = &*string("2.0");
                let v38: std::string::String = String::from(v14);
                let v63: &str = &*string("dontcare");
                let v87: std::string::String = String::from(v63);
                let v112: &str = &*string("EXPERIMENTAL_tx_status");
                let v136: std::string::String = String::from(v112);
                let v161: &str = &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                let v185: std::string::String = String::from(v161);
                let v210: &str = &*string("bowen");
                let v254: Array<std::string::String> = new_array(&[v185, String::from(v210)]);
                let v256: Vec<std::string::String> = v254.to_vec();
                let v258: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                    jsonrpc: v38,
                    id: v87,
                    method: v136,
                    params: v256,
                };
                let v259: string = Dice_ui::method161();
                let v264: &str = &*v259;
                let v308: std::string::String = Dice_ui::method98(String::from(v264));
                let v310: reqwest_wasm::RequestBuilder = reqwest_wasm::Client::builder()
                    .build()
                    .map_err(|err| err.to_string())?
                    .post(v308);
                let v313: reqwest_wasm::RequestBuilder =
                    Dice_ui::method100(reqwest_wasm::RequestBuilder::json(v310, &v258));
                let v315: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                        >,
                    >,
                > = Box::pin(reqwest_wasm::RequestBuilder::send(v313));
                let v317: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v315.await;
                let v318 = Dice_ui::method101();
                let v323: Result<reqwest_wasm::Response, std::string::String> =
                    v317.map_err(|x| v318(x));
                let v334: reqwest_wasm::Response = v323?;
                let v336: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<std::string::String, reqwest_wasm::Error>,
                        >,
                    >,
                > = Box::pin(reqwest_wasm::Response::text(v334));
                let v338: Result<std::string::String, reqwest_wasm::Error> = v336.await;
                let v339 = Dice_ui::method101();
                let v344: Result<std::string::String, std::string::String> =
                    v338.map_err(|x| v339(x));
                let v357: Result<Dice_ui::US15, std::string::String> =
                    Ok::<Dice_ui::US15, std::string::String>(Dice_ui::US15::US15_0(v344?));
                let v363: string =
                Dice_ui::method11(200_i64,
                                  append(append(string("dice_view.render (x) / roll_action create_action / result1 / result: "),
                                                sprintf!("{:?}",
                                                         v357.clone())),
                                         string("")));
                let v365: bool = true;
                leptos::logging::log!("{}", v363);
                let v366 = Dice_ui::method162();
                let v367 = Dice_ui::method163();
                let v368: Dice_ui::US59 = match &v357 {
                    Err(v357_1_0) => v367(v357_1_0.clone()),
                    Ok(v357_0_0) => v366(v357_0_0.clone()),
                };
                let v512: Dice_ui::US60 = if let Dice_ui::US59::US59_0(v368_0_0) = &v368 {
                    let v369: Dice_ui::US15 = match &v368 {
                        Dice_ui::US59::US59_0(x) => x.clone(),
                        _ => unreachable!(),
                    };
                    if let Dice_ui::US15::US15_0(v369_0_0) = &v369 {
                        let v373: string = Dice_ui::method49(
                            fable_library_rust::String_::fromString(match &v369 {
                                Dice_ui::US15::US15_0(x) => x.clone(),
                                _ => unreachable!(),
                            }),
                        );
                        let v378: &str = &*v373;
                        let v399: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                            serde_json::from_str(&v378);
                        let v400 = Dice_ui::method50();
                        let v412: Result<
                            crate::model::near::rpc::RpcResponse,
                            std::string::String,
                        > = v399.map_err(|x| v400(x));
                        let v415 = Dice_ui::method164();
                        let v416 = Dice_ui::method165();
                        let v417: Dice_ui::US61 = match &v412 {
                            Err(v412_1_0) => v416(v412_1_0.clone()),
                            Ok(v412_0_0) => v415(v412_0_0.clone()),
                        };
                        let v496: Dice_ui::US62 = match &v417 {
                            Dice_ui::US61::US61_0(v417_0_0) => {
                                let v418: crate::model::near::rpc::RpcResponse = v417_0_0.clone();
                                let v420: std::string::String = v418.clone().jsonrpc;
                                let v422: Option<crate::model::near::rpc::TransactionStatus> =
                                    v418.clone().result;
                                let v424: Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )> = map(Dice_ui::method150(), v422);
                                let v449: Option<crate::model::near::rpc::RpcError> =
                                    v418.clone().error;
                                Dice_ui::US62::US62_0(
                                    v420,
                                    v424,
                                    map(Dice_ui::method152(), v449),
                                    v418.id,
                                )
                            }
                            Dice_ui::US61::US61_1(v417_1_0) => {
                                Dice_ui::US62::US62_1(v417_1_0.clone())
                            }
                        };
                        match &v496 {
                            Dice_ui::US62::US62_0(v496_0_0, v496_0_1, v496_0_2, v496_0_3) => {
                                Dice_ui::US60::US60_0(Dice_ui::US58::US58_0(
                                    v496_0_0.clone(),
                                    v496_0_1.clone(),
                                    v496_0_2.clone(),
                                    v496_0_3.clone(),
                                ))
                            }
                            Dice_ui::US62::US62_1(v496_1_0) => {
                                Dice_ui::US60::US60_1(v496_1_0.clone())
                            }
                        }
                    } else {
                        Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                    }
                } else {
                    Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                };
                let v518: Result<Dice_ui::US58, std::string::String> = match &v512 {
                    Dice_ui::US60::US60_0(v512_0_0) => {
                        Ok::<Dice_ui::US58, std::string::String>(v512_0_0.clone())
                    }
                    Dice_ui::US60::US60_1(v512_1_0) => {
                        Err::<Dice_ui::US58, std::string::String>(v512_1_0.clone())
                    }
                };
                let v524: string =
                Dice_ui::method11(200_i64,
                                  append(append(string("dice_view.render (x) / roll_action create_action / result2 / result: "),
                                                sprintf!("{:?}",
                                                         v518.clone())),
                                         string("")));
                let v526: bool = true;
                leptos::logging::log!("{}", v524);
                let v527: Result<Dice_ui::US58, std::string::String> = Dice_ui::method166(v518);
                let v530: string = string("}");
                let v536: bool = true;
                let v531 = v527;
                let v546: string = append(
                    append(
                        append(append(string("true; v531 "), v530), string("); ")),
                        string(""),
                    ),
                    string(" // rust.fix_closure\'"),
                );
                let v547: bool = true;
                v531
            }); // rust.fix_closure';
            let v549 = __future_init;
            v549
        }
        pub fn closure155(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method168() -> Func1<Dice_ui::US58, Dice_ui::US60> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure155((), v))
        }
        pub fn closure156(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method169() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure156((), v))
        }
        pub fn closure154(
            unitVar: (),
            v0_1: Result<Dice_ui::US58, std::string::String>,
        ) -> Dice_ui::US60 {
            let v1 = Dice_ui::method168();
            let v2 = Dice_ui::method169();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method167() -> Func1<Result<Dice_ui::US58, std::string::String>, Dice_ui::US60> {
            Func1::new(move |v: Result<Dice_ui::US58, std::string::String>| {
                Dice_ui::closure154((), v)
            })
        }
        pub fn closure157(unitVar: (), v0_1: Dice_ui::US60) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method170() -> Func1<Dice_ui::US60, Dice_ui::US63> {
            Func1::new(move |v: Dice_ui::US60| Dice_ui::closure157((), v))
        }
        pub fn closure153(
            v0_1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::RwSignal<Option<Result<Dice_ui::US58, std::string::String>>> =
                leptos::prelude::Action::value(&v0_1);
            let v4: Option<Result<Dice_ui::US58, std::string::String>> =
                leptos::prelude::SignalGet::get(&v2);
            let v6: Option<Dice_ui::US60> = map(Dice_ui::method167(), v4);
            let v32: Dice_ui::US63 =
                defaultValue(Dice_ui::US63::US63_1, map(Dice_ui::method170(), v6));
            let v53: Dice_ui::US60 = if let Dice_ui::US63::US63_0(v32_0_0) = &v32 {
                let v36: Dice_ui::US60 = match &v32 {
                    Dice_ui::US63::US63_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                match &v36 {
                    Dice_ui::US60::US60_0(v36_0_0) => {
                        let v39: Dice_ui::US58 = v36_0_0.clone();
                        if let Dice_ui::US58::US58_0(v39_0_0, v39_0_1, v39_0_2, v39_0_3) = &v39 {
                            Dice_ui::US60::US60_0(Dice_ui::US58::US58_0(
                                match &v39 {
                                    Dice_ui::US58::US58_0(x, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v39 {
                                    Dice_ui::US58::US58_0(_, x, _, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v39 {
                                    Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                                    _ => unreachable!(),
                                },
                                match &v39 {
                                    Dice_ui::US58::US58_0(_, _, _, x) => x.clone(),
                                    _ => unreachable!(),
                                },
                            ))
                        } else {
                            Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                        }
                    }
                    Dice_ui::US60::US60_1(v36_1_0) => Dice_ui::US60::US60_1(v36_1_0.clone()),
                }
            } else {
                Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
            };
            let v69: Dice_ui::US64 = match &v53 {
                Dice_ui::US60::US60_0(v53_0_0) => {
                    let v54: Dice_ui::US58 = v53_0_0.clone();
                    Dice_ui::US64::US64_0(match &v54 {
                        Dice_ui::US58::US58_0(v54_0_0, v54_0_1, v54_0_2, v54_0_3) => Some((
                            match &v54 {
                                Dice_ui::US58::US58_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v54 {
                                Dice_ui::US58::US58_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v54 {
                                Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            },
                            match &v54 {
                                Dice_ui::US58::US58_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            },
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US60::US60_1(v53_1_0) => Dice_ui::US64::US64_1(v53_1_0.clone()),
            };
            let v75: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v69 {
                Dice_ui::US64::US64_0(v69_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_0_0.clone()),
                Dice_ui::US64::US64_1(v69_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_1_0.clone()),
            };
            let v81: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string("dice_view.render (x) / roll create_memo / result: "),
                        sprintf!("{:?}", v75.clone()),
                    ),
                    string(""),
                ),
            );
            let v83: bool = true;
            leptos::logging::log!("{}", v81);
            v75
        }
        pub fn closure159(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(v0_1)
        }
        pub fn method171() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US64,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure159((), v),
            )
        }
        pub fn closure160(unitVar: (), v0_1: std::string::String) -> Dice_ui::US64 {
            Dice_ui::US64::US64_1(v0_1)
        }
        pub fn method172() -> Func1<std::string::String, Dice_ui::US64> {
            Func1::new(move |v: std::string::String| Dice_ui::closure160((), v))
        }
        pub fn closure161(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method173() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US58,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure161((), arg10_0040),
            )
        }
        pub fn closure162(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method174() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US65,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure162((), arg10_0040),
            )
        }
        pub fn closure158(
            v0_1: leptos::prelude::Memo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = v0_1();
            let v3 = Dice_ui::method171();
            let v4 = Dice_ui::method172();
            let v5: Dice_ui::US64 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v31: Dice_ui::US60 = match &v5 {
                Dice_ui::US64::US64_0(v5_0_0) => Dice_ui::US60::US60_0(defaultValue(
                    Dice_ui::US58::US58_1,
                    map(Dice_ui::method173(), v5_0_0.clone()),
                )),
                Dice_ui::US64::US64_1(v5_1_0) => Dice_ui::US60::US60_1(v5_1_0.clone()),
            };
            let v72: Dice_ui::US32 = if let Dice_ui::US60::US60_0(v31_0_0) = &v31 {
                let v32: Dice_ui::US58 = match &v31 {
                    Dice_ui::US60::US60_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US58::US58_0(v32_0_0, v32_0_1, v32_0_2, v32_0_3) = &v32 {
                    let v55: Dice_ui::US65 = defaultValue(
                        Dice_ui::US65::US65_1,
                        map(
                            Dice_ui::method174(),
                            match &v32 {
                                Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            },
                        ),
                    );
                    if let Dice_ui::US65::US65_0(
                        v55_0_0,
                        v55_0_1,
                        v55_0_2,
                        v55_0_3,
                        v55_0_4,
                        v55_0_5,
                    ) = &v55
                    {
                        Dice_ui::US32::US32_0(append(
                            append(
                                append(
                                    append(
                                        append(
                                            append(
                                                append(
                                                    toString(match &v55 {
                                                        Dice_ui::US65::US65_0(x, _, _, _, _, _) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }),
                                                    string(": "),
                                                ),
                                                toString(match &v55 {
                                                    Dice_ui::US65::US65_0(_, _, _, _, x, _) => {
                                                        x.clone()
                                                    }
                                                    _ => unreachable!(),
                                                }),
                                            ),
                                            string(" - "),
                                        ),
                                        toString(match &v55 {
                                            Dice_ui::US65::US65_0(_, _, _, _, _, x) => x.clone(),
                                            _ => unreachable!(),
                                        }),
                                    ),
                                    string(" ("),
                                ),
                                toString(match &v55 {
                                    Dice_ui::US65::US65_0(_, x, _, _, _, _) => x.clone(),
                                    _ => unreachable!(),
                                }),
                            ),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US32::US32_1
                    }
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            let v79: Option<string> = match &v72 {
                Dice_ui::US32::US32_0(v72_0_0) => Some(match &v72 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => None::<string>,
            };
            let v85: string = Dice_ui::method11(
                200_i64,
                append(
                    append(
                        string("dice_view.render (x) / error_message create_memo / result: "),
                        sprintf!("{:?}", v79.clone()),
                    ),
                    string(""),
                ),
            );
            let v87: bool = true;
            leptos::logging::log!("{}", v85);
            v79
        }
        pub fn closure163(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US32 {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::prelude::SignalGet::get(&v3.l3.clone());
            let v21: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method47(), v6.l1.clone()),
            );
            match &v21 {
                Dice_ui::US15::US15_0(v21_0_0) => {
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(match &v21 {
                        Dice_ui::US15::US15_0(x) => x.clone(),
                        _ => unreachable!(),
                    }))
                }
                _ => Dice_ui::US32::US32_1,
            }
        }
        pub fn closure166(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure165(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure166(v0_1, v)
            })
        }
        pub fn method175() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure165((), v))
        }
        pub fn method176(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure164(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::prelude::SignalGet::get(&v3.l3.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure56((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v11 = Dice_ui::method68();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method69(v10);
            let v14: Vec<(bool, std::string::String)> = v12
                .into_iter()
                .filter(|x| v11(x.clone().clone()))
                .collect::<Vec<_>>();
            let v17: Vec<std::string::String> = v14
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure58((), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v18 = Dice_ui::method175();
            let v19: Vec<std::string::String> = Dice_ui::method176(v17);
            v19.iter()
                .enumerate()
                .map(|(i, x)| v18(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure168(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<std::string::String>,
            leptos::prelude::WriteSignal<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure169(
            unitVar: (),
            _arg: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::prelude::ReadSignal<std::string::String>) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure167(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = v0_1();
            let v5: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<std::string::String>,
                                leptos::prelude::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure168((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            v5.into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        )| Dice_ui::closure169((), arg10_0040_1),
                    )(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn method177(v0_1: Array<leptos::prelude::AnyView>) -> Array<leptos::prelude::AnyView> {
            v0_1
        }
        pub fn closure175(
            unitVar: (),
            v0_1: leptos::prelude::Memo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method183() -> Func1<
            leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US66,
        > {
            Func1::new(
                move |v: leptos::prelude::Memo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure175((), v),
            )
        }
        pub fn closure179(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            let v4: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2);
            let v6: &leptos::prelude::Fragment = &v4;
            leptos::prelude::AnyView::from(*v6.clone())
        }
        pub fn method187() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure179((), ()))
        }
        pub fn method188(v0_1: leptos::prelude::AnyView) -> leptos::prelude::AnyView {
            v0_1
        }
        pub fn closure178(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v6: string = string(
                " d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v7() }</path> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method186() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure178((), ()))
        }
        pub fn closure177(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v14: string =
                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v15 = Dice_ui::method186();
            let v18: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v14), string(">move || { v15() }</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v15() }</svg> };
            let v23: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v20));
            let v27: string = string("vec![v23]");
            let v28: Vec<leptos::prelude::AnyView> = vec![v23];
            let v30: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v28);
            let v32: &leptos::prelude::Fragment = &v30;
            leptos::prelude::AnyView::from(*v32.clone())
        }
        pub fn method185() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure177((), ()))
        }
        pub fn closure180(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("No data");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method189() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure180((), ()))
        }
        pub fn closure176(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"[height:17px]\"");
            let v3 = Dice_ui::method185();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v2), string(">move || { v3() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                leptos::prelude::view! { <span  class="[height:17px]">move || { v3() }</span> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v13 = Dice_ui::method189();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v12), string(">move || { v13() }</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v13() }</pre> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method184() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure176((), ()))
        }
        pub fn method190(
            v0_1: leptos::prelude::Memo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>
        {
            v0_1
        }
        pub fn closure181(
            unitVar: (),
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            _arg.0.clone()
        }
        pub fn method191() -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            Func1::new(
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure181((), arg10_0040)
                },
            )
        }
        pub fn method193(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure183(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: i32,
            v4: std::string::String,
            unitVar: (),
        ) {
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v9: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v2.l0.clone());
            let v12: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v9.l3.clone());
            let v20: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v2.l0.clone());
            let v26: &str = &*v6;
            let v73: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v12.l0.clone(),
                l1: Some(String::from(v26)),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v75: bool = true;
            leptos::prelude::SignalSet::set(&v20.l3.clone(), v73);
            ()
        }
        pub fn closure185(
            unitVar: (),
            v0_1: leptos::prelude::Memo<Dice_ui::US32>,
        ) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method195() -> Func1<leptos::prelude::Memo<Dice_ui::US32>, Dice_ui::US68> {
            Func1::new(move |v: leptos::prelude::Memo<Dice_ui::US32>| Dice_ui::closure185((), v))
        }
        pub fn closure186(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure188(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            let v4: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2);
            let v6: &leptos::prelude::Fragment = &v4;
            leptos::prelude::AnyView::from(*v6.clone())
        }
        pub fn method197() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure188((), ()))
        }
        pub fn closure187(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v10: string = string(
                " stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"",
            );
            let v11 = Dice_ui::method197();
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v10),
                                string(">move || { v11() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v11() }</circle> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v24: string =
                string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v25 = Dice_ui::method187();
            let v28: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<path "), v24),
                                string(">move || { v25() }</"),
                            ),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v25() }</path> };
            let v33: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v30));
            let v36: string = string("v33");
            let v37: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v42: string = append(
                append(string("vec!["), append(string("v37, "), v36)),
                string("]"),
            );
            let v43: Vec<leptos::prelude::AnyView> = vec![v37, v33];
            let v45: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v43);
            let v47: &leptos::prelude::Fragment = &v45;
            leptos::prelude::AnyView::from(*v47.clone())
        }
        pub fn method196() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure187((), ()))
        }
        pub fn closure184(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v5: string = fable_library_rust::String_::fromString(v3);
            let v19: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method195(), v1));
            let v29: Dice_ui::US43 = match &v19 {
                Dice_ui::US68::US68_0(v19_0_0) => Dice_ui::US43::US43_0(match &v19 {
                    Dice_ui::US68::US68_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US43::US43_1,
            };
            let v36: Dice_ui::US32 = if let Dice_ui::US43::US43_0(v29_0_0) = &v29 {
                let v30: Dice_ui::US32 = match &v29 {
                    Dice_ui::US43::US43_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US32::US32_0(v30_0_0) = &v30 {
                    Dice_ui::US32::US32_0(match &v30 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            let v72: leptos::prelude::AnyView = if let Dice_ui::US32::US32_0(v36_0_0) = &v36 {
                if v5.clone()
                    == match &v36 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                {
                    let v41 = {
                        let clo = Func0::new(move || Dice_ui::closure186((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v54: string =
                            string(" class=move || \" \".to_owned() + &v41(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v55 = Dice_ui::method196();
                    let v58: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<svg "), v54),
                                        string(">move || { v55() }</"),
                                    ),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v60: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v41(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v55() }</svg> };
                    leptos::prelude::IntoAny::into_any(v60)
                } else {
                    let v64: Array<leptos::prelude::AnyView> =
                        Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                    leptos::prelude::CollectView::collect_view(v64)
                }
            } else {
                let v69: Array<leptos::prelude::AnyView> =
                    Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                leptos::prelude::CollectView::collect_view(v69)
            };
            let v77: &str = &*v5;
            let v101: std::string::String = String::from(v77);
            let v123: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v101)),
            );
            let v127: string = string("v123");
            let v128: leptos::prelude::AnyView = Dice_ui::method188(v72);
            let v133: string = append(
                append(string("vec!["), append(string("v128, "), v127)),
                string("]"),
            );
            let v134: Vec<leptos::prelude::AnyView> = vec![v128, v123];
            let v136: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v134);
            let v138: &leptos::prelude::Fragment = &v136;
            leptos::prelude::AnyView::from(*v138.clone())
        }
        pub fn method194(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: std::string::String,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure184(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure182(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::Fragment {
            let v6: std::string::String = leptos::prelude::SignalGet::get(&_arg.1.clone());
            let v7: std::string::String = Dice_ui::method193(v6.clone());
            let v8 = Func0::new({
                let _arg = _arg.clone();
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v6 = v6.clone();
                move || {
                    Dice_ui::closure183(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        _arg.0.clone(),
                        v6.clone(),
                        (),
                    )
                }
            });
            {
                let v10: string =
                    string("class=\"flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v16: string = append(
                    append(
                        string(" aria-label=v7"),
                        append(
                            append(
                                string(" on:click=move |_| v8()"),
                                append(append(append(string(" "), v10), string("")), string("")),
                            ),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v17 = Dice_ui::method194(v0_1.clone(), v1.clone(), v2.clone(), v6.clone());
                let v20: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<button "), v16),
                                    string(">move || { v17() }</"),
                                ),
                                string("button"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v22: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Button, _, _>,
                > = leptos::prelude::view! { <button  aria-label=v7 on:click=move |_| v8() class="flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500">move || { v17() }</button> };
                let v25: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v22));
                let v29: string = string("vec![v25]");
                let v30: Vec<leptos::prelude::AnyView> = vec![v25];
                leptos::prelude::Fragment::new(v30)
            }
        }
        pub fn method192(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), leptos::prelude::Fragment>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure182(v0_1.clone(), v1.clone(), v2.clone(), arg10_0040)
                }
            })
        }
        pub fn closure174(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v16: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method183(), v0_1.clone()),
            );
            let v26: Dice_ui::US67 = match &v16 {
                Dice_ui::US66::US66_0(v16_0_0) => Dice_ui::US67::US67_0(match &v16 {
                    Dice_ui::US66::US66_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US67::US67_1,
            };
            let v29: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v32: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v26 {
                Dice_ui::US67::US67_0(v26_0_0) => match &v26 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => v29,
            };
            let v105: leptos::prelude::Fragment = if count(
                fable_library_rust::NativeArray_::array_from(v32),
            ) as u64
                == 0_u64
            {
                let v39: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v40 = Dice_ui::method184();
                let v43: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<div "), v39),
                                    string(">move || { v40() }</"),
                                ),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v45: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v40() }</div> };
                let v48: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v45));
                let v52: string = string("vec![v48]");
                let v53: Vec<leptos::prelude::AnyView> = vec![v48];
                leptos::prelude::Fragment::new(v53)
            } else {
                let v69: Dice_ui::US66 = defaultValue(
                    Dice_ui::US66::US66_1,
                    map(Dice_ui::method183(), v0_1.clone()),
                );
                match &v69 {
                    Dice_ui::US66::US66_0(v69_0_0) => {
                        let v74: leptos::prelude::Memo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = Dice_ui::method190(match &v69 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v75 = Dice_ui::method191();
                        let v76 = Dice_ui::method192(v0_1, v1, v2);
                        let v88: string =
                                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v76(x) let:x key=move |x| v75(x.to_owned()) each=v74 /> })");
                        let v90: leptos::prelude::AnyView = Dice_ui::method188(
                            leptos::prelude::IntoAny::into_any(
                                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v76(x) let:x key=move |x| v75(x.to_owned()) each=v74 /> },
                            ),
                        );
                        let v94: string = string("vec![v90]");
                        let v95: Vec<leptos::prelude::AnyView> = vec![v90];
                        leptos::prelude::Fragment::new(v95)
                    }
                    _ => {
                        let v99: string = string("vec![]");
                        let v100: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::Fragment::new(v100)
                    }
                }
            };
            let v107: &leptos::prelude::Fragment = &v105;
            leptos::prelude::AnyView::from(*v107.clone())
        }
        pub fn method182(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure174(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure173(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v5: string = append(append(append(string(" "), v3), string("")), string(""));
            let v6 = Dice_ui::method182(v0_1, v1, v2);
            let v9: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v5), string(">move || { v6() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v6() }</div> };
            let v14: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v11));
            let v18: string = string("vec![v14]");
            let v19: Vec<leptos::prelude::AnyView> = vec![v14];
            leptos::prelude::Fragment::new(v19)
        }
        pub fn method181(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure173(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn method199(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure189(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: Func0<leptos::prelude::Fragment> =
                Dice_ui::method199(Func0::new(move || v0_1()));
            let v5: leptos::prelude::Fragment = (move || v3())();
            let v8: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v5));
            let v13: string = string("vec![v8]");
            let v14: Vec<leptos::prelude::AnyView> = vec![v8];
            leptos::prelude::Fragment::new(v14)
        }
        pub fn method198(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure189(v0_1.clone(), ())
            })
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure192(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure193(v0_1: leptos::prelude::AnyView, unitVar: ()) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::AnyView = Dice_ui::method188(v0_1);
            let v6: string = string("vec![v1]");
            let v7: Vec<leptos::prelude::AnyView> = vec![v1];
            let v9: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v7);
            let v11: &leptos::prelude::Fragment = &v9;
            leptos::prelude::AnyView::from(*v11.clone())
        }
        pub fn method201(v0_1: leptos::prelude::AnyView) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure193(v0_1.clone(), ())
            })
        }
        pub fn closure195(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure196(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure199(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v16: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method195(), v1));
            let v26: Dice_ui::US43 = match &v16 {
                Dice_ui::US68::US68_0(v16_0_0) => Dice_ui::US43::US43_0(match &v16 {
                    Dice_ui::US68::US68_0(x) => x.clone(),
                    _ => unreachable!(),
                }()),
                _ => Dice_ui::US43::US43_1,
            };
            let v33: Dice_ui::US32 = if let Dice_ui::US43::US43_0(v26_0_0) = &v26 {
                let v27: Dice_ui::US32 = match &v26 {
                    Dice_ui::US43::US43_0(x) => x.clone(),
                    _ => unreachable!(),
                };
                if let Dice_ui::US32::US32_0(v27_0_0) = &v27 {
                    Dice_ui::US32::US32_0(match &v27 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    })
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            match &v33 {
                Dice_ui::US32::US32_0(v33_0_0) => match &v33 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => string("Select..."),
            }
        }
        pub fn method205(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure199(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure200(v0_1: Func0<string>, unitVar: ()) -> leptos::prelude::AnyView {
            let v1: string = v0_1();
            let v6: &str = &*v1;
            let v30: std::string::String = String::from(v6);
            let v52: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v30)),
            );
            let v57: string = string("vec![v52]");
            let v58: Vec<leptos::prelude::AnyView> = vec![v52];
            let v60: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v58);
            let v62: &leptos::prelude::Fragment = &v60;
            leptos::prelude::AnyView::from(*v62.clone())
        }
        pub fn method206(v0_1: Func0<string>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure200(v0_1.clone(), ())
            })
        }
        pub fn closure198(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v6: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v7 = Dice_ui::method206(Dice_ui::method205(v0_1, v1, v2));
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v6), string(">move || { v7() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v7() }</span> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method204(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure198(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v6: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v7() }</path> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method208() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure203((), ()))
        }
        pub fn closure201(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure202((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11: string =
                string(" class=move || \" \".to_owned() + &v2(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v12 = Dice_ui::method208();
            let v15: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v11), string(">move || { v12() }</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v2(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v12() }</svg> };
            let v20: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v17));
            let v24: string = string("vec![v20]");
            let v25: Vec<leptos::prelude::AnyView> = vec![v20];
            let v27: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v25);
            let v29: &leptos::prelude::Fragment = &v27;
            leptos::prelude::AnyView::from(*v29.clone())
        }
        pub fn method207() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure201((), ()))
        }
        pub fn closure197(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v5: string = string(" class=\"flex items-center gap-2\"");
            let v6 = Dice_ui::method204(v0_1, v1, v2);
            let v9: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v5), string(">move || { v6() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v6() }</div> };
            let v13: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v11);
            let v15: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v16 = Dice_ui::method207();
            let v19: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v15),
                                string(">move || { v16() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v16() }</span> };
            let v24: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v21));
            let v27: string = string("v24");
            let v28: leptos::prelude::AnyView = Dice_ui::method188(v13);
            let v33: string = append(
                append(string("vec!["), append(string("v28, "), v27)),
                string("]"),
            );
            let v34: Vec<leptos::prelude::AnyView> = vec![v28, v24];
            let v36: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v34);
            let v38: &leptos::prelude::Fragment = &v36;
            leptos::prelude::AnyView::from(*v38.clone())
        }
        pub fn method203(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure197(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure204(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::Fragment = v0_1();
            let v3: &leptos::prelude::Fragment = &v1;
            leptos::prelude::AnyView::from(*v3.clone())
        }
        pub fn method209(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure204(v0_1.clone(), ())
            })
        }
        pub fn closure194(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v6 = {
                let clo = Func0::new(move || Dice_ui::closure195((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v9 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    move || Dice_ui::closure196(v0_1.clone(), v1.clone(), v2.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v9(()) + \" \" + &v6(())");
            let v12: string = append(append(append(string(" "), v10), string("")), string(""));
            let v13 = Dice_ui::method203(v0_1.clone(), v1.clone(), v2.clone());
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v9(()) + " " + &v6(())>move || { v13() }</summary> };
            let v20: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v18);
            let v22: string = string(" class=\"flex flex-1 flex-col\"");
            let v23 = Dice_ui::method209(v3);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v22), string(">move || { v23() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v23() }</div> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v20);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method202(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure194(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure190(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: leptos::prelude::AnyView,
            v4: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v7 = {
                let clo = Func0::new(move || Dice_ui::closure191((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v10 = {
                let clo_1 = Func0::new(move || Dice_ui::closure192((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v13: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v14 = Dice_ui::method201(v3);
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v13), string(">move || { v14() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v14() }</div> };
            let v21: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v19);
            let v22: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v7(())");
            let v25: string = append(
                append(
                    string(" open=move || v10(())"),
                    append(append(append(string(" "), v22), string("")), string("")),
                ),
                string(""),
            );
            let v26 = Dice_ui::method202(v0_1, v1, v2, v4);
            let v29: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v25),
                                string(">move || { v26() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v10(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v7(())>move || { v26() }</details> };
            let v34: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v31));
            let v37: string = string("v34");
            let v38: leptos::prelude::AnyView = Dice_ui::method188(v21);
            let v43: string = append(
                append(string("vec!["), append(string("v38, "), v37)),
                string("]"),
            );
            let v44: Vec<leptos::prelude::AnyView> = vec![v38, v34];
            let v46: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v44);
            let v48: &leptos::prelude::Fragment = &v46;
            leptos::prelude::AnyView::from(*v48.clone())
        }
        pub fn method200(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: leptos::prelude::AnyView,
            v4: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure190(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure172(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<Dice_ui::US32>,
            v2: leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v8: &str = &*string("Account");
            let v32: std::string::String = String::from(v8);
            let v53: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32));
            let v56: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            > = Some(v2);
            let v59: Option<leptos::prelude::Memo<Dice_ui::US32>> = Some(v1);
            let v63: Array<leptos::prelude::AnyView> =
                Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
            let v70: string = string(" class=\"flex flex-col [position:relative]\"");
            let v71 = Dice_ui::method200(
                v56.clone(),
                v59.clone(),
                v0_1.clone(),
                leptos::prelude::CollectView::collect_view(v63),
                Dice_ui::method198(Dice_ui::method181(v56, v59, v0_1)),
            );
            let v74: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v70), string(">move || { v71() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v76: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v71() }</div> };
            let v79: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v76));
            let v82: string = string("v79");
            let v83: leptos::prelude::AnyView = Dice_ui::method188(v53);
            let v88: string = append(
                append(string("vec!["), append(string("v83, "), v82)),
                string("]"),
            );
            let v89: Vec<leptos::prelude::AnyView> = vec![v83, v79];
            let v91: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v89);
            let v93: &leptos::prelude::Fragment = &v91;
            leptos::prelude::AnyView::from(*v93.clone())
        }
        pub fn method180(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<Dice_ui::US32>,
            v2: leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure172(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure206(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> i32 {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            (leptos::prelude::SignalGetUntracked::get_untracked(&v3.l3.clone())).l2
        }
        pub fn method211(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<i32> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure206(v0_1.clone(), ())
            })
        }
        pub fn closure207(v0_1: LrcPtr<Dice_ui::Heap2>, v1: std::string::String) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v4.l3.clone());
            let v15: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v18: string = toString(v1);
            let v30: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v7.l0.clone(),
                l1: v7.l1.clone(),
                l2: if string("") == v18.clone() {
                    1_i32
                } else {
                    toInt32(v18)
                },
                l3: v7.l3,
                l4: v7.l4.clone(),
            });
            let v32: bool = true;
            leptos::prelude::SignalSet::set(&v15.l3.clone(), v30);
            ()
        }
        pub fn method212(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure207(v0_1.clone(), v)
            })
        }
        pub fn closure208(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure205(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::AnyView {
            let v6: &str = &*string("Max");
            let v30: std::string::String = String::from(v6);
            let v51: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v30));
            let v52 = Dice_ui::method211(v0_1.clone());
            let v53 = Dice_ui::method212(v0_1);
            let v56 = {
                let clo = Func0::new(move || Dice_ui::closure208((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v66: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v53(leptos::prelude::event_target_value(&event)) prop:value=move || v52() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v56(()) /> }");
            let v68: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v53(leptos::prelude::event_target_value(&event)) prop:value=move || v52() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v56(()) /> };
            let v71: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v68));
            let v74: string = string("v71");
            let v75: leptos::prelude::AnyView = Dice_ui::method188(v51);
            let v80: string = append(
                append(string("vec!["), append(string("v75, "), v74)),
                string("]"),
            );
            let v81: Vec<leptos::prelude::AnyView> = vec![v75, v71];
            let v83: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v81);
            let v85: &leptos::prelude::Fragment = &v83;
            leptos::prelude::AnyView::from(*v85.clone())
        }
        pub fn method210(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure205(v0_1.clone(), ())
            })
        }
        pub fn closure210(
            v0_1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::ReadSignal<bool> = leptos::prelude::Action::pending(&v0_1);
            leptos::prelude::SignalGet::get(&v2)
        }
        pub fn method214(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure211(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v9: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                l0: (leptos::prelude::SignalGetUntracked::get_untracked(&v4.l3.clone())).l2,
            });
            let v11: bool = true;
            leptos::prelude::Action::dispatch(&v1, v9.clone());
            ()
        }
        pub fn closure213(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            let v4: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2);
            let v6: &leptos::prelude::Fragment = &v4;
            leptos::prelude::AnyView::from(*v6.clone())
        }
        pub fn method218() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure216((), ()))
        }
        pub fn closure215(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v12: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v13 = Dice_ui::method218();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v13() }</animate> };
            let v20: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v18);
            let v32: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v33 = Dice_ui::method218();
            let v35: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v32),
                                string(">move || { v33() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v33() }</animate> };
            let v39: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v37);
            let v51: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v52 = Dice_ui::method218();
            let v54: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v51),
                                string(">move || { v52() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v56: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v52() }</animate> };
            let v59: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v56));
            let v62: string = string("v59");
            let v63: leptos::prelude::AnyView = Dice_ui::method188(v39);
            let v67: string = append(string("v63, "), v62);
            let v68: leptos::prelude::AnyView = Dice_ui::method188(v20);
            let v72: string = append(
                append(string("vec!["), append(string("v68, "), v67)),
                string("]"),
            );
            let v73: Vec<leptos::prelude::AnyView> = vec![v68, v63, v59];
            let v75: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v73);
            let v77: &leptos::prelude::Fragment = &v75;
            leptos::prelude::AnyView::from(*v77.clone())
        }
        pub fn method217() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure215((), ()))
        }
        pub fn closure217(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v12: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v13 = Dice_ui::method218();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v13() }</animate> };
            let v20: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v18);
            let v32: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v33 = Dice_ui::method218();
            let v35: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v32),
                                string(">move || { v33() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v33() }</animate> };
            let v39: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v37);
            let v51: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v52 = Dice_ui::method218();
            let v54: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v51),
                                string(">move || { v52() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v56: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v52() }</animate> };
            let v59: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v56));
            let v62: string = string("v59");
            let v63: leptos::prelude::AnyView = Dice_ui::method188(v39);
            let v67: string = append(string("v63, "), v62);
            let v68: leptos::prelude::AnyView = Dice_ui::method188(v20);
            let v72: string = append(
                append(string("vec!["), append(string("v68, "), v67)),
                string("]"),
            );
            let v73: Vec<leptos::prelude::AnyView> = vec![v68, v63, v59];
            let v75: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v73);
            let v77: &leptos::prelude::Fragment = &v75;
            leptos::prelude::AnyView::from(*v77.clone())
        }
        pub fn method219() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure217((), ()))
        }
        pub fn closure218(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v12: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
            let v13 = Dice_ui::method218();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v13() }</animate> };
            let v20: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v18);
            let v32: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
            let v33 = Dice_ui::method218();
            let v35: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v32),
                                string(">move || { v33() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v33() }</animate> };
            let v39: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v37);
            let v51: string =
                string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
            let v52 = Dice_ui::method218();
            let v54: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<animate "), v51),
                                string(">move || { v52() }</"),
                            ),
                            string("animate"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v56: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Animate, _, _>> = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v52() }</animate> };
            let v59: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v56));
            let v62: string = string("v59");
            let v63: leptos::prelude::AnyView = Dice_ui::method188(v39);
            let v67: string = append(string("v63, "), v62);
            let v68: leptos::prelude::AnyView = Dice_ui::method188(v20);
            let v72: string = append(
                append(string("vec!["), append(string("v68, "), v67)),
                string("]"),
            );
            let v73: Vec<leptos::prelude::AnyView> = vec![v68, v63, v59];
            let v75: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v73);
            let v77: &leptos::prelude::Fragment = &v75;
            leptos::prelude::AnyView::from(*v77.clone())
        }
        pub fn method220() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure218((), ()))
        }
        pub fn closure214(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v12: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
            let v13 = Dice_ui::method217();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<rect "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Rect, _, _>> = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v13() }</rect> };
            let v30: string =
                string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
            let v31 = Dice_ui::method219();
            let v33: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<rect "), v30),
                                string(">move || { v31() }</"),
                            ),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v35: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Rect, _, _>> = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v31() }</rect> };
            let v47: string = string(
                " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
            );
            let v48 = Dice_ui::method220();
            let v50: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<rect "), v47),
                                string(">move || { v48() }</"),
                            ),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v52: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Rect, _, _>> = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v48() }</rect> };
            let v54: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v35);
            let v58: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v18);
            let v59: leptos::prelude::AnyView = Dice_ui::method188(v54);
            let v62: string = string("v59");
            let v63: leptos::prelude::AnyView = Dice_ui::method188(v56);
            let v67: string = append(string("v63, "), v62);
            let v68: leptos::prelude::AnyView = Dice_ui::method188(v58);
            let v72: string = append(
                append(string("vec!["), append(string("v68, "), v67)),
                string("]"),
            );
            let v73: Vec<leptos::prelude::AnyView> = vec![v68, v63, v59];
            let v75: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v73);
            let v77: &leptos::prelude::Fragment = &v75;
            leptos::prelude::AnyView::from(*v77.clone())
        }
        pub fn method216() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure214((), ()))
        }
        pub fn closure212(v0_1: Func0<bool>, unitVar: ()) -> leptos::prelude::AnyView {
            let v6: &str = &*string("Roll");
            let v30: std::string::String = String::from(v6);
            let v51: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v30));
            let v89: leptos::prelude::AnyView = Dice_ui::method188(if v0_1() {
                let v56 = {
                    let clo = Func0::new(move || Dice_ui::closure213((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v75: string =
                                           string(" class=move || \" \".to_owned() + &v56(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                let v76 = Dice_ui::method216();
                let v79: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<svg "), v75),
                                    string(">move || { v76() }</"),
                                ),
                                string("svg"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v81: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v56(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v76() }</svg> };
                leptos::prelude::IntoAny::into_any(v81)
            } else {
                let v85: Array<leptos::prelude::AnyView> =
                    Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                leptos::prelude::CollectView::collect_view(v85)
            });
            let v93: string = string("v89");
            let v94: leptos::prelude::AnyView = Dice_ui::method188(v51);
            let v99: string = append(
                append(string("vec!["), append(string("v94, "), v93)),
                string("]"),
            );
            let v100: Vec<leptos::prelude::AnyView> = vec![v94, v89];
            let v102: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v100);
            let v104: &leptos::prelude::Fragment = &v102;
            leptos::prelude::AnyView::from(*v104.clone())
        }
        pub fn method215(v0_1: Func0<bool>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure220(v0_1: string, unitVar: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method222(v0_1: string) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure220(v0_1.clone(), ())
            })
        }
        pub fn closure219(v0_1: string, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = string(" class=\"[height:17px]\"");
            let v4 = Dice_ui::method185();
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">move || { v4() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                leptos::prelude::view! { <span  class="[height:17px]">move || { v4() }</span> };
            let v11: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v9);
            let v13: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v14 = Dice_ui::method222(v0_1);
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v13), string(">move || { v14() }</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v14() }</pre> };
            let v22: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v19));
            let v25: string = string("v22");
            let v26: leptos::prelude::AnyView = Dice_ui::method188(v11);
            let v31: string = append(
                append(string("vec!["), append(string("v26, "), v25)),
                string("]"),
            );
            let v32: Vec<leptos::prelude::AnyView> = vec![v26, v22];
            let v34: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v32);
            let v36: &leptos::prelude::Fragment = &v34;
            leptos::prelude::AnyView::from(*v36.clone())
        }
        pub fn method221(v0_1: string) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure219(v0_1.clone(), ())
            })
        }
        pub fn closure209(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            v2: leptos::prelude::Memo<Option<string>>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v5: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure210(v1.clone(), ())
                })()
            });
            let v6: Func0<bool> = Dice_ui::method214(v5.clone());
            let v7 = Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure211(v0_1.clone(), v1.clone(), ())
            });
            {
                let v9: string =
                    string("class=\"flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v15: string = append(
                    append(
                        string(" on:click=move |_| v7()"),
                        append(
                            append(
                                string(" prop:disabled=move || v6()"),
                                append(append(append(string(" "), v9), string("")), string("")),
                            ),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v16 = Dice_ui::method215(v5);
                let v19: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<button "), v15),
                                    string(">move || { v16() }</"),
                                ),
                                string("button"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v21: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Button, _, _>,
                > = leptos::prelude::view! { <button  on:click=move |_| v7() prop:disabled=move || v6() class="flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500">move || { v16() }</button> };
                let v23: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v21);
                let v25: Option<string> = v2();
                let v39: Dice_ui::US32 =
                    defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method115(), v25));
                let v59: leptos::prelude::AnyView = Dice_ui::method188(
                    if let Dice_ui::US32::US32_0(v39_0_0) = &v39 {
                        let v45: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v46 = Dice_ui::method221(match &v39 {
                            Dice_ui::US32::US32_0(x) => x.clone(),
                            _ => unreachable!(),
                        });
                        let v49: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v45),
                                            string(">move || { v46() }</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v51: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v46() }</div> };
                        leptos::prelude::IntoAny::into_any(v51)
                    } else {
                        let v55: Array<leptos::prelude::AnyView> =
                            Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                        leptos::prelude::CollectView::collect_view(v55)
                    },
                );
                let v62: string = string("v59");
                let v63: leptos::prelude::AnyView = Dice_ui::method188(v23);
                let v68: string = append(
                    append(string("vec!["), append(string("v63, "), v62)),
                    string("]"),
                );
                let v69: Vec<leptos::prelude::AnyView> = vec![v63, v59];
                let v71: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v69);
                let v73: &leptos::prelude::Fragment = &v71;
                leptos::prelude::AnyView::from(*v73.clone())
            }
        }
        pub fn method213(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            v2: leptos::prelude::Memo<Option<string>>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure209(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure171(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            v2: leptos::prelude::Memo<Option<string>>,
            v3: leptos::prelude::Memo<Dice_ui::US32>,
            v4: leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v7: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v8 = Dice_ui::method180(v0_1.clone(), v3, v4);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">move || { v8() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v8() }</div> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v18 = Dice_ui::method210(v0_1.clone());
            let v20: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v17), string(">move || { v18() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v22: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v18() }</div> };
            let v24: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v22);
            let v26: string = string(" class=\"flex\"");
            let v27 = Dice_ui::method213(v0_1, v1, v2);
            let v29: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v26), string(">move || { v27() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v27() }</div> };
            let v34: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v31));
            let v37: string = string("v34");
            let v38: leptos::prelude::AnyView = Dice_ui::method188(v24);
            let v42: string = append(string("v38, "), v37);
            let v43: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v47: string = append(
                append(string("vec!["), append(string("v43, "), v42)),
                string("]"),
            );
            let v48: Vec<leptos::prelude::AnyView> = vec![v43, v38, v34];
            let v50: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v48);
            let v52: &leptos::prelude::Fragment = &v50;
            leptos::prelude::AnyView::from(*v52.clone())
        }
        pub fn method179(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            v2: leptos::prelude::Memo<Option<string>>,
            v3: leptos::prelude::Memo<Dice_ui::US32>,
            v4: leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure171(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure170(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            v2: leptos::prelude::Memo<Option<string>>,
            v3: leptos::prelude::Memo<Dice_ui::US32>,
            v4: leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v8 = Dice_ui::method179(v0_1, v1, v2, v3, v4);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">move || { v8() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v8() }</div> };
            let v16: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v13));
            let v20: string = string("vec![v16]");
            let v21: Vec<leptos::prelude::AnyView> = vec![v16];
            leptos::prelude::Fragment::new(v21)
        }
        pub fn method178(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            v2: leptos::prelude::Memo<Option<string>>,
            v3: leptos::prelude::Memo<Dice_ui::US32>,
            v4: leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure170(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure222(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure223(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure226(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure229(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method227() -> Func0<string> {
            Func0::new(move || Dice_ui::closure229((), ()))
        }
        pub fn closure228(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v4 = Dice_ui::method206(Dice_ui::method227());
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">move || { v4() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4() }</span> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            let v19: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v17);
            let v21: &leptos::prelude::Fragment = &v19;
            leptos::prelude::AnyView::from(*v21.clone())
        }
        pub fn method226() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure228((), ()))
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"flex items-center gap-2\"");
            let v3 = Dice_ui::method226();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v2), string(">move || { v3() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3() }</div> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v13 = Dice_ui::method207();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v13() }</span> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method225() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure227((), ()))
        }
        pub fn closure224(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure225((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure226((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v9: string = append(append(append(string(" "), v7), string("")), string(""));
            let v10 = Dice_ui::method225();
            let v13: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v9),
                                string(">move || { v10() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v6(()) + " " + &v3(())>move || { v10() }</summary> };
            let v17: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v15);
            let v19: string = string(" class=\"flex flex-1 flex-col\"");
            let v20 = Dice_ui::method209(v0_1);
            let v23: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v19), string(">move || { v20() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v20() }</div> };
            let v28: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v25));
            let v31: string = string("v28");
            let v32: leptos::prelude::AnyView = Dice_ui::method188(v17);
            let v37: string = append(
                append(string("vec!["), append(string("v32, "), v31)),
                string("]"),
            );
            let v38: Vec<leptos::prelude::AnyView> = vec![v32, v28];
            let v40: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v38);
            let v42: &leptos::prelude::Fragment = &v40;
            leptos::prelude::AnyView::from(*v42.clone())
        }
        pub fn method224(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure224(v0_1.clone(), ())
            })
        }
        pub fn closure221(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure222((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure223((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v11 = Dice_ui::method201(v0_1);
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">move || { v11() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v11() }</div> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v22: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v23 = Dice_ui::method224(v1);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v7(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4(())>move || { v23() }</details> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method223(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure221(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("No account selected");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method230() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure231(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"[height:17px]\"");
            let v3 = Dice_ui::method185();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v2), string(">move || { v3() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                leptos::prelude::view! { <span  class="[height:17px]">move || { v3() }</span> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
            let v13 = Dice_ui::method230();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v12), string(">move || { v13() }</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v13() }</pre> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method229() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure231((), ()))
        }
        pub fn closure234(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US32) {
            let v3: string = fable_library_rust::String_::fromString(_arg.0.clone());
            let v17: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method47(), _arg.1.clone()),
            );
            (
                v3,
                match &v17 {
                    Dice_ui::US15::US15_0(v17_0_0) => {
                        Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(match &v17 {
                            Dice_ui::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }))
                    }
                    _ => Dice_ui::US32::US32_1,
                },
            )
        }
        pub fn closure235(unitVar: (), _arg: (string, Dice_ui::US32)) -> bool {
            let v1: Dice_ui::US32 = _arg.1.clone();
            if string("FUNCTION_CALL") == _arg.0.clone() {
                if let Dice_ui::US32::US32_0(v1_0_0) = &v1 {
                    string("generate_random_number")
                        == match &v1 {
                            Dice_ui::US32::US32_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method232() -> Func1<(string, Dice_ui::US32), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US32)| {
                Dice_ui::closure235((), arg10_0040)
            })
        }
        pub fn method233(v0_1: Vec<(string, Dice_ui::US32)>) -> Vec<(string, Dice_ui::US32)> {
            v0_1
        }
        pub fn closure233(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: Vec<(string, Dice_ui::US32)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure234((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v9 = Dice_ui::method232();
            let v10: Vec<(string, Dice_ui::US32)> = Dice_ui::method233(v8);
            let v12: Vec<(string, Dice_ui::US32)> = v10
                .into_iter()
                .filter(|x| v9(x.clone().clone()))
                .collect::<Vec<_>>();
            if count(fable_library_rust::NativeArray_::array_from(v12)) > 0_i32 {
                _arg.0.clone() == fable_library_rust::String_::fromString(v2.l2.clone())
            } else {
                false
            }
        }
        pub fn method231() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure233((), arg10_0040)
            })
        }
        pub fn method234(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Block Timestamp");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method236() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure238(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Predecessor");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method237() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure238((), ()))
        }
        pub fn closure239(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Receiver");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method238() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure239((), ()))
        }
        pub fn closure240(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Fee");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method239() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure240((), ()))
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Result");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method240() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Status");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method241() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure242((), ()))
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v3 = Dice_ui::method236();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v2), string(">move || { v3() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3() }</th> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v13 = Dice_ui::method237();
            let v15: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v12), string(">move || { v13() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v17: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v13() }</th> };
            let v19: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v17);
            let v21: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v22 = Dice_ui::method238();
            let v24: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v21), string(">move || { v22() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v22() }</th> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v31 = Dice_ui::method239();
            let v33: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v30), string(">move || { v31() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v35: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v31() }</th> };
            let v37: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v35);
            let v39: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v40 = Dice_ui::method240();
            let v42: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v39), string(">move || { v40() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v40() }</th> };
            let v46: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v44);
            let v48: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v49 = Dice_ui::method241();
            let v51: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v48), string(">move || { v49() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v53: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v49() }</th> };
            let v56: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v53));
            let v59: string = string("v56");
            let v60: leptos::prelude::AnyView = Dice_ui::method188(v46);
            let v64: string = append(string("v60, "), v59);
            let v65: leptos::prelude::AnyView = Dice_ui::method188(v37);
            let v68: string = append(string("v65, "), v64);
            let v69: leptos::prelude::AnyView = Dice_ui::method188(v28);
            let v72: string = append(string("v69, "), v68);
            let v73: leptos::prelude::AnyView = Dice_ui::method188(v19);
            let v76: string = append(string("v73, "), v72);
            let v77: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v81: string = append(
                append(string("vec!["), append(string("v77, "), v76)),
                string("]"),
            );
            let v82: Vec<leptos::prelude::AnyView> = vec![v77, v73, v69, v65, v60, v56];
            let v84: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v82);
            let v86: &leptos::prelude::Fragment = &v84;
            leptos::prelude::AnyView::from(*v86.clone())
        }
        pub fn method235() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure236((), ()))
        }
        pub fn method244(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure246(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US69 {
            Dice_ui::US69::US69_0(v0_1)
        }
        pub fn method245() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US69> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure246((), v))
        }
        pub fn closure245(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v9: i64 = Dice_ui::method244(toInt64(fable_library_rust::String_::fromString(
                v0_1.l5.clone(),
            ))) / 1000_i64;
            let v11: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v9);
            let v25: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_1, map(Dice_ui::method245(), v11));
            let v44: Dice_ui::US32 = match &v25 {
                Dice_ui::US69::US69_0(v25_0_0) => {
                    let v31: chrono::NaiveDateTime = match &v25 {
                        Dice_ui::US69::US69_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v33: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v31);
                    let v35: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v36: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v38: std::string::String = v33.format(v36).to_string();
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v38))
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v50: Dice_ui::US70 = match &v44 {
                Dice_ui::US32::US32_0(v44_0_0) => Dice_ui::US70::US70_0(match &v44 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US70::US70_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v55: string = match &v50 {
                Dice_ui::US70::US70_0(v50_0_0) => v50_0_0.clone(),
                Dice_ui::US70::US70_1(v50_1_0) => append(
                    append(string("sm\'.to_string result / Error: "), v50_1_0.clone()),
                    string(""),
                ),
            };
            let v60: &str = &*v55;
            let v84: std::string::String = String::from(v60);
            let v106: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v84)),
            );
            let v111: string = string("vec![v106]");
            let v112: Vec<leptos::prelude::AnyView> = vec![v106];
            let v114: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v112);
            let v116: &leptos::prelude::Fragment = &v114;
            leptos::prelude::AnyView::from(*v116.clone())
        }
        pub fn method243(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure245(v0_1.clone(), ())
            })
        }
        pub fn closure247(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l1.clone());
            let v8: &str = &*v3;
            let v32: std::string::String = String::from(v8);
            let v54: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32)),
            );
            let v59: string = string("vec![v54]");
            let v60: Vec<leptos::prelude::AnyView> = vec![v54];
            let v62: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v60);
            let v64: &leptos::prelude::Fragment = &v62;
            leptos::prelude::AnyView::from(*v64.clone())
        }
        pub fn method246(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure247(v0_1.clone(), ())
            })
        }
        pub fn closure248(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l2.clone());
            let v8: &str = &*v3;
            let v32: std::string::String = String::from(v8);
            let v54: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32)),
            );
            let v59: string = string("vec![v54]");
            let v60: Vec<leptos::prelude::AnyView> = vec![v54];
            let v62: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v60);
            let v64: &leptos::prelude::Fragment = &v62;
            leptos::prelude::AnyView::from(*v64.clone())
        }
        pub fn method247(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure248(v0_1.clone(), ())
            })
        }
        pub fn closure249(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = toString(v0_1.l10);
            let v10: &str = &*v3;
            let v34: std::string::String = String::from(v10);
            let v56: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v34)),
            );
            let v61: string = string("vec![v56]");
            let v62: Vec<leptos::prelude::AnyView> = vec![v56];
            let v64: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v62);
            let v66: &leptos::prelude::Fragment = &v64;
            leptos::prelude::AnyView::from(*v66.clone())
        }
        pub fn method248(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure249(v0_1.clone(), ())
            })
        }
        pub fn method250(v0_1: i32, v1: LrcPtr<Dice_ui::Mut4>) -> bool {
            v1.l0.get().clone() < v0_1
        }
        pub fn closure250(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v152: leptos::prelude::Fragment = if count(v0_1.l11.clone()) as u64 == 0_u64 {
                let v9: &str = &*string("");
                let v33: std::string::String = String::from(v9);
                let v55: leptos::prelude::AnyView = Dice_ui::method188(
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v33)),
                );
                let v59: string = string("vec![v55]");
                let v60: Vec<leptos::prelude::AnyView> = vec![v55];
                leptos::prelude::Fragment::new(v60)
            } else {
                let v63: Array<std::string::String> = v0_1.l11.clone();
                let v64: i32 = count(v63.clone());
                let v66: LrcPtr<Dice_ui::Mut4> = LrcPtr::new(Dice_ui::Mut4 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(Dice_ui::US32::US32_1),
                });
                while Dice_ui::method250(v64, v66.clone()) {
                    let v68: i32 = v66.l0.get().clone();
                    let v71: i32 = v68.wrapping_neg() + v64 - 1_i32;
                    let v72: Dice_ui::US32 = v66.l1.get().clone();
                    let v73: std::string::String = v63[v71].clone();
                    let v77: Array<string> = split(
                        fable_library_rust::String_::fromString(v73),
                        string(" / result: "),
                        -1_i32,
                        0_i32,
                    );
                    let v86: Dice_ui::US32 = if let Dice_ui::US32::US32_1 = &v72 {
                        if count(v77.clone()) as u64 == 2_u64 {
                            let v82: string = v77[0_i32].clone();
                            Dice_ui::US32::US32_0(v77[1_i32].clone())
                        } else {
                            v72.clone()
                        }
                    } else {
                        v72
                    };
                    let v87: i32 = v68 + 1_i32;
                    v66.l0.set(v87);
                    v66.l1.set(v86);
                    ()
                }
                {
                    let v88: Dice_ui::US32 = v66.l1.get().clone();
                    let v92: string = match &v88 {
                        Dice_ui::US32::US32_0(v88_0_0) => match &v88 {
                            Dice_ui::US32::US32_0(x) => x.clone(),
                            _ => unreachable!(),
                        },
                        _ => string("?"),
                    };
                    let v97: &str = &*v92;
                    let v121: std::string::String = String::from(v97);
                    let v143: leptos::prelude::AnyView =
                        Dice_ui::method188(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v121),
                        ));
                    let v148: string = string("vec![v143]");
                    let v149: Vec<leptos::prelude::AnyView> = vec![v143];
                    leptos::prelude::Fragment::new(v149)
                }
            };
            let v154: &leptos::prelude::Fragment = &v152;
            leptos::prelude::AnyView::from(*v154.clone())
        }
        pub fn method249(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure250(v0_1.clone(), ())
            })
        }
        pub fn closure251(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v5: string = if v0_1.l9 {
                string("Ok")
            } else {
                string("Outcome Error")
            };
            let v6 = Dice_ui::method171();
            let v7 = Dice_ui::method172();
            let v8: Dice_ui::US64 = match &v1 {
                Err(v1_1_0) => v7(v1_1_0.clone()),
                Ok(v1_0_0) => v6(v1_0_0.clone()),
            };
            let v34: Dice_ui::US60 = match &v8 {
                Dice_ui::US64::US64_0(v8_0_0) => Dice_ui::US60::US60_0(defaultValue(
                    Dice_ui::US58::US58_1,
                    map(Dice_ui::method173(), v8_0_0.clone()),
                )),
                Dice_ui::US64::US64_1(v8_1_0) => Dice_ui::US60::US60_1(v8_1_0.clone()),
            };
            let v130: Dice_ui::US70 = match &v34 {
                Dice_ui::US60::US60_0(v34_0_0) => {
                    let v35: Dice_ui::US58 = v34_0_0.clone();
                    if let Dice_ui::US58::US58_0(v35_0_0, v35_0_1, v35_0_2, v35_0_3) = &v35 {
                        let v38: Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )> = match &v35 {
                            Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                            _ => unreachable!(),
                        };
                        let v58: Dice_ui::US65 = defaultValue(
                            Dice_ui::US65::US65_1,
                            map(Dice_ui::method174(), v38.clone()),
                        );
                        match &v58 {
                            Dice_ui::US65::US65_0(
                                v58_0_0,
                                v58_0_1,
                                v58_0_2,
                                v58_0_3,
                                v58_0_4,
                                v58_0_5,
                            ) => {
                                let v86: Dice_ui::US65 = defaultValue(
                                    Dice_ui::US65::US65_1,
                                    map(Dice_ui::method174(), v38.clone()),
                                );
                                let v99: Dice_ui::US32 = if let Dice_ui::US65::US65_0(
                                    v86_0_0,
                                    v86_0_1,
                                    v86_0_2,
                                    v86_0_3,
                                    v86_0_4,
                                    v86_0_5,
                                ) = &v86
                                {
                                    Dice_ui::US32::US32_0(append(
                                        append(
                                            append(
                                                append(
                                                    append(
                                                        append(
                                                            append(
                                                                toString(match &v86 {
                                                                    Dice_ui::US65::US65_0(
                                                                        x,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                        _,
                                                                    ) => x.clone(),
                                                                    _ => unreachable!(),
                                                                }),
                                                                string(": "),
                                                            ),
                                                            toString(match &v86 {
                                                                Dice_ui::US65::US65_0(
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    _,
                                                                    x,
                                                                    _,
                                                                ) => x.clone(),
                                                                _ => unreachable!(),
                                                            }),
                                                        ),
                                                        string(" - "),
                                                    ),
                                                    toString(match &v86 {
                                                        Dice_ui::US65::US65_0(_, _, _, _, _, x) => {
                                                            x.clone()
                                                        }
                                                        _ => unreachable!(),
                                                    }),
                                                ),
                                                string(" ("),
                                            ),
                                            toString(match &v86 {
                                                Dice_ui::US65::US65_0(_, x, _, _, _, _) => {
                                                    x.clone()
                                                }
                                                _ => unreachable!(),
                                            }),
                                        ),
                                        string(")"),
                                    ))
                                } else {
                                    Dice_ui::US32::US32_1
                                };
                                Dice_ui::US70::US70_1(match &v99 {
                                    Dice_ui::US32::US32_0(v99_0_0) => match &v99 {
                                        Dice_ui::US32::US32_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    },
                                    _ => Dice_ui::method11(400_i64, sprintf!("{:?}", ())),
                                })
                            }
                            _ => Dice_ui::US70::US70_0(Dice_ui::method11(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        match &v35 {
                                            Dice_ui::US58::US58_0(x, _, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        match &v35 {
                                            Dice_ui::US58::US58_0(_, x, _, _) => x.clone(),
                                            _ => unreachable!(),
                                        },
                                        v38.clone(),
                                        match &v35 {
                                            Dice_ui::US58::US58_0(_, _, _, x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                    )
                                ),
                            )),
                        }
                    } else {
                        Dice_ui::US70::US70_1(sprintf!(
                            "RPC Response: {}",
                            Dice_ui::method11(400_i64, sprintf!("{:?}", v34.clone()))
                        ))
                    }
                }
                Dice_ui::US60::US60_1(v34_1_0) => {
                    Dice_ui::US70::US70_1(fable_library_rust::String_::fromString(v34_1_0.clone()))
                }
            };
            let v142: string = sprintf!(
                "{} / {}",
                v5,
                match &v130 {
                    Dice_ui::US70::US70_0(v130_0_0) => sprintf!(
                        "RPC Response: {}",
                        Dice_ui::method11(400_i64, sprintf!("{:?}", v130_0_0.clone()))
                    ),
                    Dice_ui::US70::US70_1(v130_1_0) => sprintf!("Error: {}", v130_1_0.clone()),
                }
            );
            let v147: &str = &*v142;
            let v171: std::string::String = String::from(v147);
            let v193: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v171)),
            );
            let v198: string = string("vec![v193]");
            let v199: Vec<leptos::prelude::AnyView> = vec![v193];
            let v201: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v199);
            let v203: &leptos::prelude::Fragment = &v201;
            leptos::prelude::AnyView::from(*v203.clone())
        }
        pub fn method251(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure251(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure244(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v5 = Dice_ui::method243(v0_1.clone());
            let v8: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v4), string(">move || { v5() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v5() }</td> };
            let v12: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v10);
            let v14: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v15 = Dice_ui::method246(v0_1.clone());
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v14), string(">move || { v15() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v15() }</td> };
            let v21: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v19);
            let v23: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v24 = Dice_ui::method247(v0_1.clone());
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v23), string(">move || { v24() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v24() }</td> };
            let v30: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v28);
            let v32: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v33 = Dice_ui::method248(v0_1.clone());
            let v35: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v32), string(">move || { v33() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v33() }</td> };
            let v39: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v37);
            let v41: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v42 = Dice_ui::method249(v0_1.clone());
            let v44: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v41), string(">move || { v42() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v46: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v42() }</td> };
            let v48: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v46);
            let v50: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v51 = Dice_ui::method251(v0_1, v1);
            let v53: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v50), string(">move || { v51() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v55: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v51() }</td> };
            let v58: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v55));
            let v61: string = string("v58");
            let v62: leptos::prelude::AnyView = Dice_ui::method188(v48);
            let v66: string = append(string("v62, "), v61);
            let v67: leptos::prelude::AnyView = Dice_ui::method188(v39);
            let v70: string = append(string("v67, "), v66);
            let v71: leptos::prelude::AnyView = Dice_ui::method188(v30);
            let v74: string = append(string("v71, "), v70);
            let v75: leptos::prelude::AnyView = Dice_ui::method188(v21);
            let v78: string = append(string("v75, "), v74);
            let v79: leptos::prelude::AnyView = Dice_ui::method188(v12);
            let v83: string = append(
                append(string("vec!["), append(string("v79, "), v78)),
                string("]"),
            );
            let v84: Vec<leptos::prelude::AnyView> = vec![v79, v75, v71, v67, v62, v58];
            let v86: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v84);
            let v88: &leptos::prelude::Fragment = &v86;
            leptos::prelude::AnyView::from(*v88.clone())
        }
        pub fn method242(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure244(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure243(
            v0_1: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::prelude::AnyView {
            let v5: Array<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = fable_library_rust::NativeArray_::array_from(v0_1);
            let v6: i32 = _arg.1.clone() as i32;
            let v18: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
            let v19 = Dice_ui::method242(_arg.2.clone(), v5[v6].clone());
            let v22: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<tr "), v18), string(">move || { v19() }</")),
                            string("tr"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> = leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v19() }</tr> };
            leptos::prelude::IntoAny::into_any(v24)
        }
        pub fn closure253(
            v0_1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v2: &leptos::prelude::Fragment = &v0_1;
            leptos::prelude::AnyView::from(*v2.clone())
        }
        pub fn method253(v0_1: leptos::prelude::Fragment) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure253(v0_1.clone(), ())
            })
        }
        pub fn closure254(
            v0_1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v2: &leptos::prelude::Fragment = &v0_1;
            leptos::prelude::AnyView::from(*v2.clone())
        }
        pub fn method254(v0_1: leptos::prelude::Fragment) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure254(v0_1.clone(), ())
            })
        }
        pub fn closure252(
            v0_1: leptos::prelude::Fragment,
            v1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4: string = string(" class=\"ltr:text-left rtl:text-right\"");
            let v5 = Dice_ui::method253(v0_1);
            let v8: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<thead "), v4), string(">move || { v5() }</")),
                            string("thead"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Thead, _, _>> = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v5() }</thead> };
            let v12: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v10);
            let v14: string = string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
            let v15 = Dice_ui::method254(v1);
            let v18: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<tbody "), v14),
                                string(">move || { v15() }</"),
                            ),
                            string("tbody"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tbody, _, _>> = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v15() }</tbody> };
            let v23: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v20));
            let v26: string = string("v23");
            let v27: leptos::prelude::AnyView = Dice_ui::method188(v12);
            let v32: string = append(
                append(string("vec!["), append(string("v27, "), v26)),
                string("]"),
            );
            let v33: Vec<leptos::prelude::AnyView> = vec![v27, v23];
            let v35: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v33);
            let v37: &leptos::prelude::Fragment = &v35;
            leptos::prelude::AnyView::from(*v37.clone())
        }
        pub fn method252(
            v0_1: leptos::prelude::Fragment,
            v1: leptos::prelude::Fragment,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure252(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure256(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2 = {
                let clo = Func0::new(move || Dice_ui::closure257((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v21: string =
                string(" class=move || \" \".to_owned() + &v2(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
            let v22 = Dice_ui::method216();
            let v25: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v21), string(">move || { v22() }</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v2(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v22() }</svg> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v35: &str = &*string("Loading...");
            let v59: std::string::String = String::from(v35);
            let v81: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v59)),
            );
            let v84: string = string("v81");
            let v85: leptos::prelude::AnyView = Dice_ui::method188(v29);
            let v90: string = append(
                append(string("vec!["), append(string("v85, "), v84)),
                string("]"),
            );
            let v91: Vec<leptos::prelude::AnyView> = vec![v85, v81];
            let v93: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v91);
            let v95: &leptos::prelude::Fragment = &v93;
            leptos::prelude::AnyView::from(*v95.clone())
        }
        pub fn method256() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure256((), ()))
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"flex flex-1 [gap:4px] items-center\"");
            let v3 = Dice_ui::method256();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v2), string(">move || { v3() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v3() }</div> };
            let v11: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v8));
            let v15: string = string("vec![v11]");
            let v16: Vec<leptos::prelude::AnyView> = vec![v11];
            let v18: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v16);
            let v20: &leptos::prelude::Fragment = &v18;
            leptos::prelude::AnyView::from(*v20.clone())
        }
        pub fn method255() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure255((), ()))
        }
        pub fn closure230(
            v0_1: leptos::prelude::Memo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v2();
            let v130: leptos::prelude::AnyView = Dice_ui::method188(
                if count(fable_library_rust::NativeArray_::array_from(v4)) as u64 == 0_u64 {
                    let v11: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v12 = Dice_ui::method229();
                    let v15: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<div "), v11),
                                        string(">move || { v12() }</"),
                                    ),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v17: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v12() }</div> };
                    leptos::prelude::IntoAny::into_any(v17)
                } else {
                    let v21: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v22 = Dice_ui::method139();
                    let v23 = Dice_ui::method140();
                    let v24: Dice_ui::US54 = match &v21 {
                        Err(v21_1_0) => v23(v21_1_0.clone()),
                        Ok(v21_0_0) => v22(v21_0_0.clone()),
                    };
                    let v47: Dice_ui::US47 = match &v24 {
                        Dice_ui::US54::US54_0(v24_0_0) => Dice_ui::US47::US47_0(defaultValue(
                            Dice_ui::US48::US48_1,
                            map(Dice_ui::method141(), v24_0_0.clone()),
                        )),
                        Dice_ui::US54::US54_1(v24_1_0) => Dice_ui::US47::US47_1(v24_1_0.clone()),
                    };
                    match &v47 {
                        Dice_ui::US47::US47_0(v47_0_0) => {
                            let v48: Dice_ui::US48 = v47_0_0.clone();
                            if let Dice_ui::US48::US48_0(v48_0_0) = &v48 {
                                let v51: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    match &v48 {
                                        Dice_ui::US48::US48_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .to_vec();
                                let v52 = Dice_ui::method231();
                                let v53: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method234(v51);
                                let v55: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v53
                                    .into_iter()
                                    .filter(|x| v52(x.clone().clone()))
                                    .collect::<Vec<_>>();
                                let v56 = Dice_ui::method235();
                                let v60: string = string(
                                    "leptos::prelude::view! { <tr >move || { v56() }</tr> }",
                                );
                                let v62: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v56() }</tr> };
                                let v65: leptos::prelude::AnyView =
                                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v62));
                                let v69: string = string("vec![v65]");
                                let v70: Vec<leptos::prelude::AnyView> = vec![v65];
                                let v72: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v70);
                                let v74: Vec<
                                    Result<
                                        Option<(
                                            std::string::String,
                                            Option<(
                                                Array<(
                                                    std::string::String,
                                                    Array<
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            (
                                                                std::string::String,
                                                                Option<std::string::String>,
                                                                Option<f64>,
                                                                Option<std::string::String>,
                                                            ),
                                                        >,
                                                    >,
                                                    std::string::String,
                                                    Array<std::string::String>,
                                                    Array<std::string::String>,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    u64,
                                                    Array<std::string::String>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    u8,
                                                    Array<std::string::String>,
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        std::string::String,
                                                    >,
                                                    Option<std::string::String>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                )>,
                                            )>,
                                            Option<(
                                                std::string::String,
                                                std::string::String,
                                                Option<(
                                                    Option<std::string::String>,
                                                    Option<std::string::String>,
                                                )>,
                                                i32,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Option<std::string::String>,
                                        )>,
                                        std::string::String,
                                    >,
                                > = v0_1();
                                let v77: Vec<leptos::prelude::AnyView> = v55
                                    .into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v74 = v74.clone();
                                            move |arg10_0040: (
                                                string,
                                                usize,
                                                LrcPtr<Dice_ui::Heap5>,
                                            )| {
                                                Dice_ui::closure243(v74.clone(), arg10_0040)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>();
                                let v80: Array<leptos::prelude::AnyView> = Dice_ui::method177(
                                    fable_library_rust::NativeArray_::array_from(v77),
                                );
                                let v83: leptos::prelude::AnyView = Dice_ui::method188(
                                    leptos::prelude::CollectView::collect_view(v80),
                                );
                                let v87: string = string("vec![v83]");
                                let v88: Vec<leptos::prelude::AnyView> = vec![v83];
                                let v92: string =
                                                       string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v93 =
                                    Dice_ui::method252(v72, leptos::prelude::Fragment::new(v88));
                                let v96: string = append(
                                    append(
                                        string("leptos::prelude::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<table "), v92),
                                                    string(">move || { v93() }</"),
                                                ),
                                                string("table"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v98: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v93() }</table> };
                                leptos::prelude::IntoAny::into_any(v98)
                            } else {
                                let v103: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v104 = Dice_ui::method255();
                                let v107: string = append(
                                    append(
                                        string("leptos::prelude::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v103),
                                                    string(">move || { v104() }</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v109: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v104() }</div> };
                                leptos::prelude::IntoAny::into_any(v109)
                            }
                        }
                        Dice_ui::US47::US47_1(v47_1_0) => {
                            let v118: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v119 = Dice_ui::method221(fable_library_rust::String_::fromString(
                                v47_1_0.clone(),
                            ));
                            let v122: string = append(
                                append(
                                    string("leptos::prelude::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v118),
                                                string(">move || { v119() }</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v124: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v119() }</div> };
                            leptos::prelude::IntoAny::into_any(v124)
                        }
                    }
                },
            );
            let v135: string = string("vec![v130]");
            let v136: Vec<leptos::prelude::AnyView> = vec![v130];
            leptos::prelude::Fragment::new(v136)
        }
        pub fn method228(
            v0_1: leptos::prelude::Memo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure230(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure260(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure264(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method261() -> Func0<string> {
            Func0::new(move || Dice_ui::closure264((), ()))
        }
        pub fn closure263(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v4 = Dice_ui::method206(Dice_ui::method261());
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">move || { v4() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4() }</span> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            let v19: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v17);
            let v21: &leptos::prelude::Fragment = &v19;
            leptos::prelude::AnyView::from(*v21.clone())
        }
        pub fn method260() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure263((), ()))
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"flex items-center gap-2\"");
            let v3 = Dice_ui::method260();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v2), string(">move || { v3() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3() }</div> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v13 = Dice_ui::method207();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v13() }</span> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method259() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure262((), ()))
        }
        pub fn closure259(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure260((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure261((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v9: string = append(append(append(string(" "), v7), string("")), string(""));
            let v10 = Dice_ui::method259();
            let v13: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v9),
                                string(">move || { v10() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v6(()) + " " + &v3(())>move || { v10() }</summary> };
            let v17: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v15);
            let v19: string = string(" class=\"flex flex-1 flex-col\"");
            let v20 = Dice_ui::method209(v0_1);
            let v23: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v19), string(">move || { v20() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v20() }</div> };
            let v28: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v25));
            let v31: string = string("v28");
            let v32: leptos::prelude::AnyView = Dice_ui::method188(v17);
            let v37: string = append(
                append(string("vec!["), append(string("v32, "), v31)),
                string("]"),
            );
            let v38: Vec<leptos::prelude::AnyView> = vec![v32, v28];
            let v40: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v38);
            let v42: &leptos::prelude::Fragment = &v40;
            leptos::prelude::AnyView::from(*v42.clone())
        }
        pub fn method258(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure259(v0_1.clone(), ())
            })
        }
        pub fn closure258(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure222((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure223((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v11 = Dice_ui::method201(v0_1);
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">move || { v11() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v11() }</div> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v22: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v23 = Dice_ui::method258(v1);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v7(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4(())>move || { v23() }</details> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method257(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure258(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure267(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure266(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure267(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method262() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure266((), v))
        }
        pub fn method263(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure265(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::prelude::SignalGet::get(&v3.l3.clone());
            let v8 = Dice_ui::method262();
            let v9: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method263(v6.l0.clone());
            v9.iter()
                .enumerate()
                .map(|(i, x)| v8(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure269(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure270(
            v0_1: i32,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            (v0_1, _arg.0.clone(), _arg.1.clone())
        }
        pub fn closure268(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::SignalGet::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v8: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure269((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            v8.into_iter()
                .map(|x| {
                    Func1::new({
                        let v3 = v3.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure270(v3, arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure271(
            v0_1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v0_1();
            count(fable_library_rust::NativeArray_::array_from(v2))
        }
        pub fn method264(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method265(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure275(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            leptos::prelude::SignalGet::get(&((LrcPtr::new((v0_, v0__1))).1.clone()).0.clone())
        }
        pub fn closure274(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v11: i32 = count(fable_library_rust::NativeArray_::array_from(v8.clone()));
            let v17: &str = &*string("");
            let v41: std::string::String = String::from(v17);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v41)));
            let v65: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v66: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method264(v65.0.clone(), v65.1.clone());
            let v67: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method265(v8);
            let v69: bool = true;
            let mut v67 = v67;
            let v71: bool = true;
            v67.push(v66);
            let v73: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v67;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v73
                    .into_iter()
                    .map(|x| {
                        Func1::new(
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure275((), tupledArg.0.clone(), tupledArg.1.clone())
                            },
                        )(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure276(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + v0_1
        }
        pub fn closure273(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v5: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v9: bool = true;
            leptos::prelude::SignalUpdate::update(&v5.l3.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure274(v1.clone(), v)
                })(x.clone())
            });
            let v12: bool = true;
            leptos::prelude::SignalUpdate::update(&v2, |x| {
                *x = Func1::new(move |v_1: i32| Dice_ui::closure276((), v_1))(x.clone())
            });
            ()
        }
        pub fn closure272(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v5: bool = true;
            leptos::prelude::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    move || Dice_ui::closure273(v0_1.clone(), v1.clone(), v2.clone(), ())
                })()
            });
            ()
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v6: string =
                string(" d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v7() }</path> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method266() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure278((), ()))
        }
        pub fn closure279(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v5)
        }
        pub fn closure280(
            v0_1: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v0_1));
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            let v13: &leptos::prelude::Fragment = &v11;
            leptos::prelude::AnyView::from(*v13.clone())
        }
        pub fn method267(
            v0_1: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure280(v0_1.clone(), ())
            })
        }
        pub fn method270(
            v0_1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
        ) -> leptos::prelude::Memo<
            Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        > {
            v0_1
        }
        pub fn closure283(
            unitVar: (),
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (i32, i32) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn method271() -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (i32, i32),
        > {
            Func1::new(
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure283((), arg10_0040),
            )
        }
        pub fn method274(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn closure286(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append(append(string("account-"), toString(v0_1)), string(""));
            let v6: &str = &*v1;
            String::from(v6)
        }
        pub fn method277(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure290(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method277(v1 == v0_1) {
                v2.clone()
            } else {
                LrcPtr::new((v2.0.clone() == false, v2.1.clone()))
            }
        }
        pub fn closure289(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure290(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method276(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure289(v0_1, v)
            })
        }
        pub fn closure288(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v5.l3.clone());
            let v16: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v18 = Dice_ui::method276(v1);
            let v19: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method263(v8.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v19
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v18(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v8.l1.clone(),
                l2: v8.l2,
                l3: v8.l3,
                l4: v8.l4.clone(),
            });
            let v24: bool = true;
            leptos::prelude::SignalSet::set(&v16.l3.clone(), v22);
            ()
        }
        pub fn closure291(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::SignalGet::get(&v0_1)).0.clone()
        }
        pub fn method278(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure291(v0_1.clone(), ())
            })
        }
        pub fn method279(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure286(v0_1, ())
            })
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v6: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v7() }</path> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method281() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure293((), ()))
        }
        pub fn closure294(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v6: string = append(
                append(
                    string(" clip-rule=\"evenodd\""),
                    append(
                        append(append(string(" "), v1), string(" fill-rule=\"evenodd\"")),
                        string(""),
                    ),
                ),
                string(""),
            );
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v7() }</path> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method282() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure294((), ()))
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v10: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v11 = Dice_ui::method281();
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v10), string(">move || { v11() }</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v11() }</svg> };
            let v26: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v27 = Dice_ui::method282();
            let v29: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v26), string(">move || { v27() }</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v31: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v27() }</svg> };
            let v33: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v31);
            let v35: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v36: leptos::prelude::AnyView = Dice_ui::method188(v33);
            let v39: string = string("v36");
            let v40: leptos::prelude::AnyView = Dice_ui::method188(v35);
            let v45: string = append(
                append(string("vec!["), append(string("v40, "), v39)),
                string("]"),
            );
            let v46: Vec<leptos::prelude::AnyView> = vec![v40, v36];
            let v48: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v46);
            let v50: &leptos::prelude::Fragment = &v48;
            leptos::prelude::AnyView::from(*v50.clone())
        }
        pub fn method280() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure292((), ()))
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            let v4: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2);
            let v6: &leptos::prelude::Fragment = &v4;
            leptos::prelude::AnyView::from(*v6.clone())
        }
        pub fn method283() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure295((), ()))
        }
        pub fn closure287(
            v0_1: i32,
            v1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3 = Func1::new({
                let v0_1 = v0_1.clone();
                let v2 = v2.clone();
                move |v: leptos::ev::Event| Dice_ui::closure288(v2.clone(), v0_1, v)
            });
            {
                let v5 = Dice_ui::method278(v1);
                let v6 = Dice_ui::method279(v0_1);
                let v7: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v20: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v5()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v3(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v6()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v7),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v22: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v5() on:change=move |event| v3(event) id=move || v6() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v24: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v22);
                let v25: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v26: string = append(append(append(string(" "), v25), string("")), string(""));
                let v27 = Dice_ui::method280();
                let v30: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v26),
                                    string(">move || { v27() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v32: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v27() }</span> };
                let v34: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v32);
                let v35: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v36: string = append(append(append(string(" "), v35), string("")), string(""));
                let v37 = Dice_ui::method283();
                let v39: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v36),
                                    string(">move || { v37() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v41: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v37() }</span> };
                let v44: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v41));
                let v47: string = string("v44");
                let v48: leptos::prelude::AnyView = Dice_ui::method188(v34);
                let v52: string = append(string("v48, "), v47);
                let v53: leptos::prelude::AnyView = Dice_ui::method188(v24);
                let v57: string = append(
                    append(string("vec!["), append(string("v53, "), v52)),
                    string("]"),
                );
                let v58: Vec<leptos::prelude::AnyView> = vec![v53, v48, v44];
                let v60: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v58);
                let v62: &leptos::prelude::Fragment = &v60;
                leptos::prelude::AnyView::from(*v62.clone())
            }
        }
        pub fn method275(
            v0_1: i32,
            v1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure287(v0_1, v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure296(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> std::string::String {
            (leptos::prelude::SignalGet::get(&v0_1)).1.clone()
        }
        pub fn method284(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure296(v0_1.clone(), ())
            })
        }
        pub fn method287(v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure299(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method287(v2 == v0_1) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure298(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure299(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method286(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure298(v0_1, v1.clone(), v)
            })
        }
        pub fn closure297(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: std::string::String) {
            let v5: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v5.l3.clone());
            let v16: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v18 = Dice_ui::method286(v1, v2);
            let v19: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method263(v8.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v19
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v18(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v8.l1.clone(),
                l2: v8.l2,
                l3: v8.l3,
                l4: v8.l4.clone(),
            });
            let v24: bool = true;
            leptos::prelude::SignalSet::set(&v16.l3.clone(), v22);
            ()
        }
        pub fn method285(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32) -> Func1<std::string::String, ()> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: std::string::String| Dice_ui::closure297(v0_1.clone(), v1, v)
            })
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method288(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure305(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn method290() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure305((), v))
        }
        pub fn closure304(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v11: bool = (LrcPtr::new((v1_, v1__1))).0.clone() == v0_1;
            (Dice_ui::method290())(v11)
        }
        pub fn method289(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure304(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure303(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method288(v0_1());
            let v11 = Dice_ui::method289(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new(
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure275((), tupledArg.0.clone(), tupledArg.1.clone())
                            },
                        )(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure302(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v6: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v10: bool = true;
            leptos::prelude::SignalUpdate::update(&v6.l3.clone(), |x| {
                *x = Func1::new({
                    let v1 = v1.clone();
                    let v3 = v3.clone();
                    move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure303(v1.clone(), v3, v)
                })(x.clone())
            });
            let v13: bool = true;
            leptos::prelude::SignalUpdate::update(&v2, |x| {
                *x = Func1::new(move |v_1: i32| Dice_ui::closure276((), v_1))(x.clone())
            });
            ()
        }
        pub fn closure301(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v6: bool = true;
            leptos::prelude::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || Dice_ui::closure302(v0_1.clone(), v1.clone(), v2.clone(), v3, ())
                })()
            });
            ()
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure307(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v6: string = string(
                " d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
            );
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v7() }</path> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method291() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure307((), ()))
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v5)
        }
        pub fn closure285(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<i32>,
            v2: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::prelude::WriteSignal<i32>,
            v4: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v6: i32 = Dice_ui::method274(v5);
            let v7 = Func0::new({
                let v6 = v6.clone();
                move || Dice_ui::closure286(v6, ())
            });
            {
                let v13: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v7()");
                let v14 = Dice_ui::method275(v6, v4.clone(), v0_1.clone());
                let v17: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<label "), v13),
                                    string(">move || { v14() }</"),
                                ),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v19: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v7()>move || { v14() }</label> };
                let v21: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v19);
                let v22 = Dice_ui::method284(v4);
                let v23 = Dice_ui::method285(v0_1.clone(), v6);
                let v26 = {
                    let clo = Func0::new(move || Dice_ui::closure300((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v35: string =
                    string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v23(leptos::prelude::event_target_value(&event)) prop:value=move || v22() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v26(()) /> }");
                let v37: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v23(leptos::prelude::event_target_value(&event)) prop:value=move || v22() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v26(()) /> };
                let v39: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v37);
                let v88: leptos::prelude::AnyView = Dice_ui::method188(if v1() == 1_i32 {
                    let v44: Array<leptos::prelude::AnyView> =
                        Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                    leptos::prelude::CollectView::collect_view(v44)
                } else {
                    let v47 = Func0::new({
                        let v0_1 = v0_1.clone();
                        let v2 = v2.clone();
                        let v3 = v3.clone();
                        let v6 = v6.clone();
                        move || Dice_ui::closure301(v0_1.clone(), v2.clone(), v3.clone(), v6, ())
                    });
                    {
                        let v51 = {
                            let clo_1 = Func0::new(move || Dice_ui::closure306((), ()));
                            Func1::new({
                                let clo_1 = clo_1.clone();
                                move |arg_1: ()| clo_1()
                            })
                        };
                        let v63: string =
                                                   string(" class=move || \" \".to_owned() + &v51(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v64 = Dice_ui::method291();
                        let v67: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<svg "), v63),
                                            string(">move || { v64() }</"),
                                        ),
                                        string("svg"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v69: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v51(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v64() }</svg> };
                        let v74 = {
                            let clo_2 = Func0::new(move || Dice_ui::closure308((), ()));
                            Func1::new({
                                let clo_2 = clo_2.clone();
                                move |arg_2: ()| clo_2()
                            })
                        };
                        let v75: string =
                                                   string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v74(())");
                        let v78: string = append(
                            append(
                                string(" aria-label=\"Delete\""),
                                append(
                                    append(
                                        string(" on:click=move |_| v47()"),
                                        append(
                                            append(append(string(" "), v75), string("")),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(""),
                        );
                        let v79 = Dice_ui::method267(v69);
                        let v82: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<button "), v78),
                                            string(">move || { v79() }</"),
                                        ),
                                        string("button"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v84: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v47() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v74(())>move || { v79() }</button> };
                        leptos::prelude::IntoAny::into_any(v84)
                    }
                });
                let v91: string = string("v88");
                let v92: leptos::prelude::AnyView = Dice_ui::method188(v39);
                let v96: string = append(string("v92, "), v91);
                let v97: leptos::prelude::AnyView = Dice_ui::method188(v21);
                let v101: string = append(
                    append(string("vec!["), append(string("v97, "), v96)),
                    string("]"),
                );
                let v102: Vec<leptos::prelude::AnyView> = vec![v97, v92, v88];
                let v104: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v102);
                let v106: &leptos::prelude::Fragment = &v104;
                leptos::prelude::AnyView::from(*v106.clone())
            }
        }
        pub fn method273(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<i32>,
            v2: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::prelude::WriteSignal<i32>,
            v4: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            v5: i32,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                move || {
                    Dice_ui::closure285(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5,
                        (),
                    )
                }
            })
        }
        pub fn closure284(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<i32>,
            v2: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::prelude::WriteSignal<i32>,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::Fragment {
            let v9: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
            let v10 = Dice_ui::method273(v0_1, v1, v2, v3, _arg.2.clone(), _arg.1.clone());
            let v13: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v9), string(">move || { v10() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v10() }</div> };
            let v18: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v15));
            let v22: string = string("vec![v18]");
            let v23: Vec<leptos::prelude::AnyView> = vec![v18];
            leptos::prelude::Fragment::new(v23)
        }
        pub fn method272(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<i32>,
            v2: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::prelude::WriteSignal<i32>,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::prelude::Fragment,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| {
                    Dice_ui::closure284(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        arg10_0040,
                    )
                }
            })
        }
        pub fn closure282(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::Memo<i32>,
            v3: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v5: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = Dice_ui::method270(v1);
            let v6 = Dice_ui::method271();
            let v7 = Dice_ui::method272(v0_1, v2, v3, v4);
            let v19: string =
                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v7(x) let:x key=move |x| v6(x.to_owned()) each=v5 /> })");
            let v21: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(
                    leptos::prelude::view! { <leptos::prelude::For  children=move |x| v7(x) let:x key=move |x| v6(x.to_owned()) each=v5 /> },
                ),
            );
            let v25: string = string("vec![v21]");
            let v26: Vec<leptos::prelude::AnyView> = vec![v21];
            let v28: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v26);
            let v30: &leptos::prelude::Fragment = &v28;
            leptos::prelude::AnyView::from(*v30.clone())
        }
        pub fn method269(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::Memo<i32>,
            v3: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure282(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure281(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::Memo<i32>,
            v3: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v8 = Dice_ui::method269(v0_1, v1, v2, v3, v4);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v7), string(">move || { v8() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v8() }</div> };
            let v16: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v13));
            let v20: string = string("vec![v16]");
            let v21: Vec<leptos::prelude::AnyView> = vec![v16];
            leptos::prelude::Fragment::new(v21)
        }
        pub fn method268(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::Memo<i32>,
            v3: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                move || {
                    Dice_ui::closure281(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure311(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure312(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure315(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method296(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure315((), ()))
        }
        pub fn closure314(v0_1: leptos::prelude::AnyView, unitVar: ()) -> leptos::prelude::AnyView {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v5 = Dice_ui::method206(Dice_ui::method296(v0_1));
            let v8: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">move || { v5() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5() }</span> };
            let v13: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v10));
            let v17: string = string("vec![v13]");
            let v18: Vec<leptos::prelude::AnyView> = vec![v13];
            let v20: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v18);
            let v22: &leptos::prelude::Fragment = &v20;
            leptos::prelude::AnyView::from(*v22.clone())
        }
        pub fn method295(v0_1: leptos::prelude::AnyView) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure314(v0_1.clone(), ())
            })
        }
        pub fn closure313(v0_1: leptos::prelude::AnyView, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v4 = Dice_ui::method295(v0_1);
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">move || { v4() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4() }</div> };
            let v11: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v9);
            let v13: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v14 = Dice_ui::method207();
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v13),
                                string(">move || { v14() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v14() }</span> };
            let v22: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v19));
            let v25: string = string("v22");
            let v26: leptos::prelude::AnyView = Dice_ui::method188(v11);
            let v31: string = append(
                append(string("vec!["), append(string("v26, "), v25)),
                string("]"),
            );
            let v32: Vec<leptos::prelude::AnyView> = vec![v26, v22];
            let v34: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v32);
            let v36: &leptos::prelude::Fragment = &v34;
            leptos::prelude::AnyView::from(*v36.clone())
        }
        pub fn method294(v0_1: leptos::prelude::AnyView) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure313(v0_1.clone(), ())
            })
        }
        pub fn closure310(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure311((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    move || Dice_ui::closure312(v0_1.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())");
            let v10: string = append(append(append(string(" "), v8), string("")), string(""));
            let v11 = Dice_ui::method294(v0_1.clone());
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v10),
                                string(">move || { v11() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v7(()) + " " + &v4(())>move || { v11() }</summary> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v20: string = string(" class=\"flex flex-1 flex-col\"");
            let v21 = Dice_ui::method209(v1);
            let v24: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v20), string(">move || { v21() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v21() }</div> };
            let v29: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v26));
            let v32: string = string("v29");
            let v33: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v38: string = append(
                append(string("vec!["), append(string("v33, "), v32)),
                string("]"),
            );
            let v39: Vec<leptos::prelude::AnyView> = vec![v33, v29];
            let v41: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v39);
            let v43: &leptos::prelude::Fragment = &v41;
            leptos::prelude::AnyView::from(*v43.clone())
        }
        pub fn method293(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure310(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure309(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure222((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure223((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v11 = Dice_ui::method201(v0_1.clone());
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">move || { v11() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v11() }</div> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v22: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v23 = Dice_ui::method293(v0_1, v1);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v7(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4(())>move || { v23() }</details> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method292(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure309(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure318(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Dark Mode");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method299() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure318((), ()))
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("dark-mode");
            String::from(v5)
        }
        pub fn closure323(unitVar: (), v0_1: bool) -> bool {
            v0_1 == false
        }
        pub fn closure322(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::prelude::SignalUpdate::update(&v4.l0.clone(), |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure323((), v))(x.clone())
            });
            ()
        }
        pub fn closure324(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::prelude::SignalGet::get(&v3.l0.clone())
        }
        pub fn method302(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure324(v0_1.clone(), ())
            })
        }
        pub fn method303() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure320((), ()))
        }
        pub fn closure321(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::AnyView {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure322(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method302(v0_1.clone());
                let v4 = Dice_ui::method303();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v3() on:change=move |event| v1(event) id=move || v4() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v22: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v24: string = append(append(append(string(" "), v23), string("")), string(""));
                let v25 = Dice_ui::method280();
                let v28: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v24),
                                    string(">move || { v25() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v30: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v25() }</span> };
                let v32: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v30);
                let v33: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v34: string = append(append(append(string(" "), v33), string("")), string(""));
                let v35 = Dice_ui::method283();
                let v37: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v34),
                                    string(">move || { v35() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v35() }</span> };
                let v42: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v39));
                let v45: string = string("v42");
                let v46: leptos::prelude::AnyView = Dice_ui::method188(v32);
                let v50: string = append(string("v46, "), v45);
                let v51: leptos::prelude::AnyView = Dice_ui::method188(v22);
                let v55: string = append(
                    append(string("vec!["), append(string("v51, "), v50)),
                    string("]"),
                );
                let v56: Vec<leptos::prelude::AnyView> = vec![v51, v46, v42];
                let v58: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v56);
                let v60: &leptos::prelude::Fragment = &v58;
                leptos::prelude::AnyView::from(*v60.clone())
            }
        }
        pub fn method301(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure321(v0_1.clone(), ())
            })
        }
        pub fn closure319(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure320((), ()));
            {
                let v7: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v8 = Dice_ui::method301(v0_1);
                let v11: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<label "), v7),
                                    string(">move || { v8() }</"),
                                ),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v13: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v1()>move || { v8() }</label> };
                let v16: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v13));
                let v20: string = string("vec![v16]");
                let v21: Vec<leptos::prelude::AnyView> = vec![v16];
                leptos::prelude::Fragment::new(v21)
            }
        }
        pub fn method300(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure319(v0_1.clone(), ())
            })
        }
        pub fn closure325(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure327(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure329(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure330(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::Fragment = v0_1();
            let v3: &leptos::prelude::Fragment = &v1;
            leptos::prelude::AnyView::from(*v3.clone())
        }
        pub fn method305(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure330(v0_1.clone(), ())
            })
        }
        pub fn closure328(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method304(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure328(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure331(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Debug");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method306() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure331((), ()))
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("debug");
            String::from(v5)
        }
        pub fn closure335(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::prelude::SignalUpdate::update(&v4.l1.clone(), |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure323((), v))(x.clone())
            });
            ()
        }
        pub fn closure336(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            leptos::prelude::SignalGet::get(&v3.l1.clone())
        }
        pub fn method309(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure336(v0_1.clone(), ())
            })
        }
        pub fn method310() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure333((), ()))
        }
        pub fn closure334(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::AnyView {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure335(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method309(v0_1.clone());
                let v4 = Dice_ui::method310();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v3() on:change=move |event| v1(event) id=move || v4() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v22: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v24: string = append(append(append(string(" "), v23), string("")), string(""));
                let v25 = Dice_ui::method280();
                let v28: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v24),
                                    string(">move || { v25() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v30: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v25() }</span> };
                let v32: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v30);
                let v33: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v34: string = append(append(append(string(" "), v33), string("")), string(""));
                let v35 = Dice_ui::method283();
                let v37: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v34),
                                    string(">move || { v35() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v35() }</span> };
                let v42: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v39));
                let v45: string = string("v42");
                let v46: leptos::prelude::AnyView = Dice_ui::method188(v32);
                let v50: string = append(string("v46, "), v45);
                let v51: leptos::prelude::AnyView = Dice_ui::method188(v22);
                let v55: string = append(
                    append(string("vec!["), append(string("v51, "), v50)),
                    string("]"),
                );
                let v56: Vec<leptos::prelude::AnyView> = vec![v51, v46, v42];
                let v58: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v56);
                let v60: &leptos::prelude::Fragment = &v58;
                leptos::prelude::AnyView::from(*v60.clone())
            }
        }
        pub fn method308(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure334(v0_1.clone(), ())
            })
        }
        pub fn closure332(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure333((), ()));
            {
                let v7: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v8 = Dice_ui::method308(v0_1);
                let v11: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<label "), v7),
                                    string(">move || { v8() }</"),
                                ),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v13: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v1()>move || { v8() }</label> };
                let v16: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v13));
                let v20: string = string("vec![v16]");
                let v21: Vec<leptos::prelude::AnyView> = vec![v16];
                leptos::prelude::Fragment::new(v21)
            }
        }
        pub fn method307(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure332(v0_1.clone(), ())
            })
        }
        pub fn closure337(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure338(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method311(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure338(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure317(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::AnyView {
            let v1 = Dice_ui::method299();
            let v2 = Dice_ui::method300(v0_1.clone());
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure325((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v7() -> string {
                Dice_ui::closure326((), ())
            }
            let v8 = {
                let clo_1 = Func0::from(v7);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v10() -> string {
                Dice_ui::closure327((), ())
            }
            let v11 = {
                let clo_2 = Func0::from(v10);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(append(append(string(" "), v12), string("")), string(""));
            let v15 = Dice_ui::method304(v1, v2);
            let v18: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v14), string(">move || { v15() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v15() }</dl> };
            let v21 = Dice_ui::method306();
            let v22 = Dice_ui::method307(v0_1);
            let v25 = {
                let clo_3 = Func0::new(move || Dice_ui::closure337((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v27 = {
                let clo_4 = Func0::from(v7);
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v29 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v27(()) + \" \" + &v25(())");
            let v31: string = append(append(append(string(" "), v30), string("")), string(""));
            let v32 = Dice_ui::method311(v21, v22);
            let v34: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v31), string(">move || { v32() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v27(()) + " " + &v25(())>move || { v32() }</dl> };
            let v38: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v36);
            let v40: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v20);
            let v41: leptos::prelude::AnyView = Dice_ui::method188(v38);
            let v44: string = string("v41");
            let v45: leptos::prelude::AnyView = Dice_ui::method188(v40);
            let v50: string = append(
                append(string("vec!["), append(string("v45, "), v44)),
                string("]"),
            );
            let v51: Vec<leptos::prelude::AnyView> = vec![v45, v41];
            let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
            let v55: &leptos::prelude::Fragment = &v53;
            leptos::prelude::AnyView::from(*v55.clone())
        }
        pub fn method298(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure317(v0_1.clone(), ())
            })
        }
        pub fn closure316(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method298(v0_1);
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">move || { v4() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v4() }</div> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            leptos::prelude::Fragment::new(v17)
        }
        pub fn method297(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure316(v0_1.clone(), ())
            })
        }
        pub fn closure341(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure342(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure345(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method316() -> Func0<string> {
            Func0::new(move || Dice_ui::closure345((), ()))
        }
        pub fn closure344(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v4 = Dice_ui::method206(Dice_ui::method316());
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">move || { v4() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4() }</span> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            let v19: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v17);
            let v21: &leptos::prelude::Fragment = &v19;
            leptos::prelude::AnyView::from(*v21.clone())
        }
        pub fn method315() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure344((), ()))
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"flex items-center gap-2\"");
            let v3 = Dice_ui::method315();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v2), string(">move || { v3() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3() }</div> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v13 = Dice_ui::method207();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v13() }</span> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method314() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure343((), ()))
        }
        pub fn closure340(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure341((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure342((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v9: string = append(append(append(string(" "), v7), string("")), string(""));
            let v10 = Dice_ui::method314();
            let v13: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v9),
                                string(">move || { v10() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v6(()) + " " + &v3(())>move || { v10() }</summary> };
            let v17: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v15);
            let v19: string = string(" class=\"flex flex-1 flex-col\"");
            let v20 = Dice_ui::method209(v0_1);
            let v23: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v19), string(">move || { v20() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v20() }</div> };
            let v28: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v25));
            let v31: string = string("v28");
            let v32: leptos::prelude::AnyView = Dice_ui::method188(v17);
            let v37: string = append(
                append(string("vec!["), append(string("v32, "), v31)),
                string("]"),
            );
            let v38: Vec<leptos::prelude::AnyView> = vec![v32, v28];
            let v40: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v38);
            let v42: &leptos::prelude::Fragment = &v40;
            leptos::prelude::AnyView::from(*v42.clone())
        }
        pub fn method313(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure340(v0_1.clone(), ())
            })
        }
        pub fn closure339(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure222((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure223((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v11 = Dice_ui::method201(v0_1);
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">move || { v11() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v11() }</div> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v22: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v23 = Dice_ui::method313(v1);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v7(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4(())>move || { v23() }</details> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method312(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure339(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure347(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Global State");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method318() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure347((), ()))
        }
        pub fn method320(v0_1: LrcPtr<Dice_ui::Heap2>) -> LrcPtr<Dice_ui::Heap2> {
            v0_1
        }
        pub fn closure350(unitVar: (), v0_1: std::string::String) -> Dice_ui::US71 {
            Dice_ui::US71::US71_0(v0_1)
        }
        pub fn method321() -> Func1<std::string::String, Dice_ui::US71> {
            Func1::new(move |v: std::string::String| Dice_ui::closure350((), v))
        }
        pub fn closure351(unitVar: (), v0_1: std::string::String) -> Dice_ui::US71 {
            Dice_ui::US71::US71_1(v0_1)
        }
        pub fn method322() -> Func1<std::string::String, Dice_ui::US71> {
            Func1::new(move |v: std::string::String| Dice_ui::closure351((), v))
        }
        pub fn closure349(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v4: LrcPtr<Dice_ui::Heap2> = Dice_ui::method320(v0_1);
            let v6: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v4).map_err(|x| x.to_string());
            let v7 = Dice_ui::method321();
            let v8 = Dice_ui::method322();
            let v9: Dice_ui::US71 = match &v6 {
                Err(v6_1_0) => v8(v6_1_0.clone()),
                Ok(v6_0_0) => v7(v6_0_0.clone()),
            };
            match &v9 {
                Dice_ui::US71::US71_0(v9_0_0) => {
                    fable_library_rust::String_::fromString(v9_0_0.clone())
                }
                Dice_ui::US71::US71_1(v9_1_0) => append(
                    append(string("Error: "), toString(v9_1_0.clone())),
                    string(""),
                ),
            }
        }
        pub fn closure352(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure353(v0_1: string, unitVar: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method323(v0_1: string) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure353(v0_1.clone(), ())
            })
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9 = {
                let clo = Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure349(v6.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11: leptos::prelude::Memo<string> = leptos::prelude::Memo::new(move |_| v9(()));
            let v13: string = v11();
            let v16 = {
                let clo_1 = Func0::new(move || Dice_ui::closure352((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v17: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v16(())");
            let v19: string = append(append(append(string(" "), v17), string("")), string(""));
            let v20 = Dice_ui::method323(v13);
            let v23: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v19), string(">move || { v20() }</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v16(())>move || { v20() }</pre> };
            let v28: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v25));
            let v32: string = string("vec![v28]");
            let v33: Vec<leptos::prelude::AnyView> = vec![v28];
            leptos::prelude::Fragment::new(v33)
        }
        pub fn method319() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure348((), ()))
        }
        pub fn closure354(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure355(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method324(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure355(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure346(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method318();
            let v1 = Dice_ui::method319();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure354((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure326((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure327((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v13: string = append(append(append(string(" "), v11), string("")), string(""));
            let v14 = Dice_ui::method324(v0_1, v1);
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v13), string(">move || { v14() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v14() }</dl> };
            let v22: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v19));
            let v26: string = string("vec![v22]");
            let v27: Vec<leptos::prelude::AnyView> = vec![v22];
            leptos::prelude::Fragment::new(v27)
        }
        pub fn method317() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure346((), ()))
        }
        pub fn closure358(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure359(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure362(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method329() -> Func0<string> {
            Func0::new(move || Dice_ui::closure362((), ()))
        }
        pub fn closure361(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v4 = Dice_ui::method206(Dice_ui::method329());
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">move || { v4() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4() }</span> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            let v19: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v17);
            let v21: &leptos::prelude::Fragment = &v19;
            leptos::prelude::AnyView::from(*v21.clone())
        }
        pub fn method328() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure361((), ()))
        }
        pub fn closure360(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"flex items-center gap-2\"");
            let v3 = Dice_ui::method328();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v2), string(">move || { v3() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3() }</div> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v13 = Dice_ui::method207();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v13() }</span> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method327() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure360((), ()))
        }
        pub fn closure357(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure358((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure359((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v9: string = append(append(append(string(" "), v7), string("")), string(""));
            let v10 = Dice_ui::method327();
            let v13: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v9),
                                string(">move || { v10() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v6(()) + " " + &v3(())>move || { v10() }</summary> };
            let v17: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v15);
            let v19: string = string(" class=\"flex flex-1 flex-col\"");
            let v20 = Dice_ui::method209(v0_1);
            let v23: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v19), string(">move || { v20() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v20() }</div> };
            let v28: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v25));
            let v31: string = string("v28");
            let v32: leptos::prelude::AnyView = Dice_ui::method188(v17);
            let v37: string = append(
                append(string("vec!["), append(string("v32, "), v31)),
                string("]"),
            );
            let v38: Vec<leptos::prelude::AnyView> = vec![v32, v28];
            let v40: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v38);
            let v42: &leptos::prelude::Fragment = &v40;
            leptos::prelude::AnyView::from(*v42.clone())
        }
        pub fn method326(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure357(v0_1.clone(), ())
            })
        }
        pub fn closure356(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure222((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure223((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v11 = Dice_ui::method201(v0_1);
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">move || { v11() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v11() }</div> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v22: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v23 = Dice_ui::method326(v1);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v7(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4(())>move || { v23() }</details> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method325(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure356(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure363(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v3: bool = true;
            leptos::prelude::SignalUpdate::update(&v0_1, |x| {
                *x = Func1::new(move |v: bool| Dice_ui::closure323((), v))(x.clone())
            });
            ()
        }
        pub fn closure364(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure365(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v6: string = append(
                append(
                    append(string(" "), v2),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                ),
                string(""),
            );
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v7() }</path> };
            let v14: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v12);
            let v20: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v21 = Dice_ui::method187();
            let v23: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<path "), v20),
                                string(">move || { v21() }</"),
                            ),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v21() }</path> };
            let v28: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v25));
            let v31: string = string("v28");
            let v32: leptos::prelude::AnyView = Dice_ui::method188(v14);
            let v37: string = append(
                append(string("vec!["), append(string("v32, "), v31)),
                string("]"),
            );
            let v38: Vec<leptos::prelude::AnyView> = vec![v32, v28];
            let v40: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v38);
            let v42: &leptos::prelude::Fragment = &v40;
            leptos::prelude::AnyView::from(*v42.clone())
        }
        pub fn method330() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure365((), ()))
        }
        pub fn method331(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure366(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str = Dice_ui::method331(if leptos::prelude::SignalGet::get(&v0_1) {
                let v4: string = string("r#\"\"#");
                r#""#
            } else {
                let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                r#"bg-gray-300 hover:bg-gray-200"#
            });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure369(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Settings");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method334() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure369((), ()))
        }
        pub fn closure370(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: Func0<leptos::prelude::Fragment> =
                Dice_ui::method199(Func0::new(move || v0_1()));
            let v5: leptos::prelude::Fragment = (move || v3())();
            let v8: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v5));
            let v13: string = string("vec![v8]");
            let v14: Vec<leptos::prelude::AnyView> = vec![v8];
            leptos::prelude::Fragment::new(v14)
        }
        pub fn method335(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure370(v0_1.clone(), ())
            })
        }
        pub fn closure372(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::Fragment = v0_1();
            let v3: &leptos::prelude::Fragment = &v1;
            leptos::prelude::AnyView::from(*v3.clone())
        }
        pub fn method337(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure372(v0_1.clone(), ())
            })
        }
        pub fn closure373(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            let v4: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2);
            let v6: &leptos::prelude::Fragment = &v4;
            leptos::prelude::AnyView::from(*v6.clone())
        }
        pub fn method338() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure373((), ()))
        }
        pub fn closure371(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3: string = string(" class=\"pr-[15px] [font-size:13px]\"");
            let v4 = Dice_ui::method337(v0_1);
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">move || { v4() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v4() }</span> };
            let v11: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v9);
            let v13: string = string(" class=\"h-px flex-1 bg-gray-300\"");
            let v14 = Dice_ui::method338();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v13),
                                string(">move || { v14() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v14() }</span> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v11);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method336(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure371(v0_1.clone(), ())
            })
        }
        pub fn closure374(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Table View");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method339() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure374((), ()))
        }
        pub fn closure376(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("table-view");
            String::from(v5)
        }
        pub fn closure379(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure378(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::prelude::SignalUpdate::update(&v4.l3.clone(), |x| {
                *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure379((), v))(
                    x.clone(),
                )
            });
            ()
        }
        pub fn closure380(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::SignalGetUntracked::get_untracked(&v0_1.l0.clone());
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::SignalGet::get(&v3.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method342(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure380(v0_1.clone(), ())
            })
        }
        pub fn method343() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure376((), ()))
        }
        pub fn closure377(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::AnyView {
            let v1 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure378(v0_1.clone(), v)
            });
            {
                let v3 = Dice_ui::method342(v0_1.clone());
                let v4 = Dice_ui::method343();
                let v5: string =
                    string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v18: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                string("<input "),
                                append(
                                    append(
                                        string(" prop:checked=move || v3()"),
                                        append(
                                            append(
                                                string(" on:change=move |event| v1(event)"),
                                                append(
                                                    append(
                                                        string(" id=move || v4()"),
                                                        append(
                                                            append(
                                                                string(" type=\"checkbox\""),
                                                                append(
                                                                    append(
                                                                        append(string(" "), v5),
                                                                        string(""),
                                                                    ),
                                                                    string(""),
                                                                ),
                                                            ),
                                                            string(""),
                                                        ),
                                                    ),
                                                    string(""),
                                                ),
                                            ),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(" />"),
                        ),
                    ),
                    string(" }"),
                );
                let v20: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v3() on:change=move |event| v1(event) id=move || v4() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v22: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v20);
                let v23: string =
                    string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v24: string = append(append(append(string(" "), v23), string("")), string(""));
                let v25 = Dice_ui::method280();
                let v28: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v24),
                                    string(">move || { v25() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v30: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v25() }</span> };
                let v32: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v30);
                let v33: string =
                    string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v34: string = append(append(append(string(" "), v33), string("")), string(""));
                let v35 = Dice_ui::method283();
                let v37: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<span "), v34),
                                    string(">move || { v35() }</"),
                                ),
                                string("span"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v35() }</span> };
                let v42: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v39));
                let v45: string = string("v42");
                let v46: leptos::prelude::AnyView = Dice_ui::method188(v32);
                let v50: string = append(string("v46, "), v45);
                let v51: leptos::prelude::AnyView = Dice_ui::method188(v22);
                let v55: string = append(
                    append(string("vec!["), append(string("v51, "), v50)),
                    string("]"),
                );
                let v56: Vec<leptos::prelude::AnyView> = vec![v51, v46, v42];
                let v58: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v56);
                let v60: &leptos::prelude::Fragment = &v58;
                leptos::prelude::AnyView::from(*v60.clone())
            }
        }
        pub fn method341(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure377(v0_1.clone(), ())
            })
        }
        pub fn closure375(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure376((), ()));
            {
                let v7: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v8 = Dice_ui::method341(v0_1);
                let v11: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<label "), v7),
                                    string(">move || { v8() }</"),
                                ),
                                string("label"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v13: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v1()>move || { v8() }</label> };
                let v16: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v13));
                let v20: string = string("vec![v16]");
                let v21: Vec<leptos::prelude::AnyView> = vec![v16];
                leptos::prelude::Fragment::new(v21)
            }
        }
        pub fn method340(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure375(v0_1.clone(), ())
            })
        }
        pub fn closure381(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure382(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method344(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure382(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure368(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::AnyView {
            let v5: string = string(" class=\"flex items-center pb-[6px]\"");
            let v6 = Dice_ui::method336(Dice_ui::method335(Dice_ui::method334()));
            let v9: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v5), string(">move || { v6() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v6() }</span> };
            let v13: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v11);
            let v14 = Dice_ui::method339();
            let v15 = Dice_ui::method340(v0_1);
            let v18 = {
                let clo = Func0::new(move || Dice_ui::closure381((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v21 = {
                let clo_1 = Func0::new(move || Dice_ui::closure326((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v24 = {
                let clo_2 = Func0::new(move || Dice_ui::closure327((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v25: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v24(()) + \" \" + &v21(()) + \" \" + &v18(())");
            let v26: string = append(append(append(string(" "), v25), string("")), string(""));
            let v27 = Dice_ui::method344(v14, v15);
            let v30: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v26), string(">move || { v27() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v24(()) + " " + &v21(()) + " " + &v18(())>move || { v27() }</dl> };
            let v35: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v32));
            let v38: string = string("v35");
            let v39: leptos::prelude::AnyView = Dice_ui::method188(v13);
            let v44: string = append(
                append(string("vec!["), append(string("v39, "), v38)),
                string("]"),
            );
            let v45: Vec<leptos::prelude::AnyView> = vec![v39, v35];
            let v47: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v45);
            let v49: &leptos::prelude::Fragment = &v47;
            leptos::prelude::AnyView::from(*v49.clone())
        }
        pub fn method333(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure368(v0_1.clone(), ())
            })
        }
        pub fn closure386(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                append(string("Transaction "), toString(v0_1 + 1_i64)),
                string(""),
            );
            let v6: &str = &*v1;
            let v30: std::string::String = String::from(v6);
            let v52: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v30)),
            );
            let v57: string = string("vec![v52]");
            let v58: Vec<leptos::prelude::AnyView> = vec![v52];
            leptos::prelude::Fragment::new(v58)
        }
        pub fn method347(v0_1: i64) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure386(v0_1, ())
            })
        }
        pub fn closure388(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Account");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method349() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure388((), ()))
        }
        pub fn closure389(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method350(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure389(v0_1.clone(), ())
            })
        }
        pub fn closure390(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure391(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure392(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method351(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure392(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure393(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Timestamp");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method352() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure393((), ()))
        }
        pub fn closure394(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v19: i64 =
                Dice_ui::method244(toInt64(fable_library_rust::String_::fromString(v5))) / 1000_i64;
            let v21: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v19);
            let v35: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_1, map(Dice_ui::method245(), v21));
            let v54: Dice_ui::US32 = match &v35 {
                Dice_ui::US69::US69_0(v35_0_0) => {
                    let v41: chrono::NaiveDateTime = match &v35 {
                        Dice_ui::US69::US69_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v43: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v41);
                    let v45: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v46: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v48: std::string::String = v43.format(v46).to_string();
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v48))
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v60: Dice_ui::US70 = match &v54 {
                Dice_ui::US32::US32_0(v54_0_0) => Dice_ui::US70::US70_0(match &v54 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US70::US70_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v65: string = match &v60 {
                Dice_ui::US70::US70_0(v60_0_0) => v60_0_0.clone(),
                Dice_ui::US70::US70_1(v60_1_0) => append(
                    append(string("sm\'.to_string result / Error: "), v60_1_0.clone()),
                    string(""),
                ),
            };
            let v70: &str = &*v65;
            let v94: std::string::String = String::from(v70);
            let v116: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v94)),
            );
            let v121: string = string("vec![v116]");
            let v122: Vec<leptos::prelude::AnyView> = vec![v116];
            leptos::prelude::Fragment::new(v122)
        }
        pub fn method353(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure394(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure395(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure396(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure397(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method354(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure397(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure398(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Predecessor");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method355() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure398((), ()))
        }
        pub fn closure399(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            let v69: string = string("vec![v64]");
            let v70: Vec<leptos::prelude::AnyView> = vec![v64];
            leptos::prelude::Fragment::new(v70)
        }
        pub fn method356(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure399(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure400(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure401(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure402(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method357(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure402(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure403(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receiver");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method358() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure403((), ()))
        }
        pub fn closure404(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            let v69: string = string("vec![v64]");
            let v70: Vec<leptos::prelude::AnyView> = vec![v64];
            leptos::prelude::Fragment::new(v70)
        }
        pub fn method359(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure404(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure405(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure406(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure407(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method360(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure407(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure408(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Actions");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method361() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure408((), ()))
        }
        pub fn closure411(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == v2.clone() {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == v2.clone() {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == v2.clone() {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v16: &str = &*v11;
            let v40: std::string::String = String::from(v16);
            let v62: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v40)),
            );
            let v67: string = string("vec![v62]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v62];
            leptos::prelude::Fragment::new(v68)
        }
        pub fn method363(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure411(v0_1.clone(), ())
            })
        }
        pub fn closure414(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Method");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method366() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure414((), ()))
        }
        pub fn closure415(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: Dice_ui::US15 =
                defaultValue(Dice_ui::US15::US15_1, map(Dice_ui::method47(), v0_1));
            match &v14 {
                Dice_ui::US15::US15_0(v14_0_0) => {
                    let v20: string = fable_library_rust::String_::fromString(match &v14 {
                        Dice_ui::US15::US15_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    let v25: &str = &*v20;
                    let v49: std::string::String = String::from(v25);
                    let v71: leptos::prelude::AnyView =
                        Dice_ui::method188(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v49),
                        ));
                    let v76: string = string("vec![v71]");
                    let v77: Vec<leptos::prelude::AnyView> = vec![v71];
                    leptos::prelude::Fragment::new(v77)
                }
                _ => {
                    let v85: &str = &*string("None");
                    let v109: std::string::String = String::from(v85);
                    let v131: leptos::prelude::AnyView =
                        Dice_ui::method188(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v109),
                        ));
                    let v136: string = string("vec![v131]");
                    let v137: Vec<leptos::prelude::AnyView> = vec![v131];
                    leptos::prelude::Fragment::new(v137)
                }
            }
        }
        pub fn method367(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure415(v0_1.clone(), ())
            })
        }
        pub fn closure416(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure417(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure419(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure418(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure419((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method368(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure418(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure413(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1 = Dice_ui::method366();
            let v2 = Dice_ui::method367(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure416((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure417((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure327((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(append(append(string(" "), v12), string("")), string(""));
            let v15 = Dice_ui::method368(v1, v2);
            let v18: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v14), string(">move || { v15() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v15() }</dl> };
            let v23: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v20));
            let v27: string = string("vec![v23]");
            let v28: Vec<leptos::prelude::AnyView> = vec![v23];
            let v30: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v28);
            let v32: &leptos::prelude::Fragment = &v30;
            leptos::prelude::AnyView::from(*v32.clone())
        }
        pub fn method365(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure413(v0_1.clone(), ())
            })
        }
        pub fn closure412(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method365(v0_1);
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">move || { v4() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4() }</div> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            leptos::prelude::Fragment::new(v17)
        }
        pub fn method364(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure412(v0_1.clone(), ())
            })
        }
        pub fn closure420(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure421(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure422(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure424(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure423(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure424((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method369(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure423(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure410(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v2 = Dice_ui::method363(_arg.0.clone());
            let v3 = Dice_ui::method364(_arg.1.clone());
            let v6 = {
                let clo = Func0::new(move || Dice_ui::closure420((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v9 = {
                let clo_1 = Func0::new(move || Dice_ui::closure421((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v12 = {
                let clo_2 = Func0::new(move || Dice_ui::closure422((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v13: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v12(()) + \" \" + &v9(()) + \" \" + &v6(())");
            let v15: string = append(append(append(string(" "), v13), string("")), string(""));
            let v16 = Dice_ui::method369(v2, v3);
            let v19: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">move || { v16() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v12(()) + " " + &v9(()) + " " + &v6(())>move || { v16() }</dl> };
            leptos::prelude::IntoAny::into_any(v21)
        }
        pub fn closure409(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v16: Vec<leptos::prelude::AnyView> = v13
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure410((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v19: Array<leptos::prelude::AnyView> =
                Dice_ui::method177(fable_library_rust::NativeArray_::array_from(v16));
            let v22: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::CollectView::collect_view(v19));
            let v27: string = string("vec![v22]");
            let v28: Vec<leptos::prelude::AnyView> = vec![v22];
            leptos::prelude::Fragment::new(v28)
        }
        pub fn method362(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure409(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure425(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure426(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure428(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure427(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure428((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method370(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure427(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure429(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Deposit");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method371() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure429((), ()))
        }
        pub fn closure430(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v8);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            let v71: string = string("vec![v66]");
            let v72: Vec<leptos::prelude::AnyView> = vec![v66];
            leptos::prelude::Fragment::new(v72)
        }
        pub fn method372(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure430(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure431(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure432(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure433(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method373(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure433(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure434(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Outcome Status");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method374() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure434((), ()))
        }
        pub fn closure435(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = ofBoolean(v9);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            let v71: string = string("vec![v66]");
            let v72: Vec<leptos::prelude::AnyView> = vec![v66];
            leptos::prelude::Fragment::new(v72)
        }
        pub fn method375(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure435(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure436(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure437(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure438(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method376(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure438(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure439(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Fee");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method377() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure439((), ()))
        }
        pub fn closure440(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v10);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            let v71: string = string("vec![v66]");
            let v72: Vec<leptos::prelude::AnyView> = vec![v66];
            leptos::prelude::Fragment::new(v72)
        }
        pub fn method378(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure440(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure441(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure442(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure443(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method379(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure443(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure444(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Height");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method380() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure444((), ()))
        }
        pub fn closure445(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v6);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            let v71: string = string("vec![v66]");
            let v72: Vec<leptos::prelude::AnyView> = vec![v66];
            leptos::prelude::Fragment::new(v72)
        }
        pub fn method381(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure445(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure446(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure447(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure448(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method382(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure448(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure449(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Hash");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method383() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure449((), ()))
        }
        pub fn closure450(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            let v69: string = string("vec![v64]");
            let v70: Vec<leptos::prelude::AnyView> = vec![v64];
            leptos::prelude::Fragment::new(v70)
        }
        pub fn method384(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure450(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure451(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure452(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure453(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method385(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure453(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure454(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Hash");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method386() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure454((), ()))
        }
        pub fn closure455(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            let v69: string = string("vec![v64]");
            let v70: Vec<leptos::prelude::AnyView> = vec![v64];
            leptos::prelude::Fragment::new(v70)
        }
        pub fn method387(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure455(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure456(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure457(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure458(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method388(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure458(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure459(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receipt ID");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method389() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure459((), ()))
        }
        pub fn closure460(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            let v69: string = string("vec![v64]");
            let v70: Vec<leptos::prelude::AnyView> = vec![v64];
            leptos::prelude::Fragment::new(v70)
        }
        pub fn method390(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure460(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure461(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure462(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure463(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method391(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure463(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure464(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Logs");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method392() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure464((), ()))
        }
        pub fn method394() -> string {
            string("\n")
        }
        pub fn closure466(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure465(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(x.clone())
                })
                .collect::<Vec<_>>();
            let v19: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v16));
            let v31: string = replace(
                join(Dice_ui::method394(), toArray(v19)),
                string("\\n"),
                string("\n"),
            );
            let v34 = {
                let clo = Func0::new(move || Dice_ui::closure466((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v35: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v34(())");
            let v37: string = append(append(append(string(" "), v35), string("")), string(""));
            let v38 = Dice_ui::method323(v31);
            let v41: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v37), string(">move || { v38() }</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v34(())>move || { v38() }</pre> };
            let v46: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v43));
            let v50: string = string("vec![v46]");
            let v51: Vec<leptos::prelude::AnyView> = vec![v46];
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method393(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure465(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure467(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure468(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure469(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure329((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v8 = Dice_ui::method305(v0_1);
            let v11: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dt "), v7), string(">move || { v8() }</")),
                            string("dt"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v13: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v8() }</dt> };
            let v15: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v13);
            let v17: string = string(
                " class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v4(())",
            );
            let v18 = Dice_ui::method305(v1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dd "), v17), string(">move || { v18() }</")),
                            string("dd"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v4(())>move || { v18() }</dd> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v15);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method395(
            v0_1: Func0<leptos::prelude::Fragment>,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure469(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure387(
            v0_1: string,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: u32,
            v8: Array<(std::string::String, Option<std::string::String>)>,
            v9: f64,
            v10: bool,
            v11: f64,
            v12: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v13 = Dice_ui::method349();
            let v14 = Dice_ui::method350(v0_1);
            let v17 = {
                let clo = Func0::new(move || Dice_ui::closure390((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v20 = {
                let clo_1 = Func0::new(move || Dice_ui::closure391((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v22() -> string {
                Dice_ui::closure327((), ())
            }
            let v23 = {
                let clo_2 = Func0::from(v22);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v24: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v23(()) + \" \" + &v20(()) + \" \" + &v17(())");
            let v26: string = append(append(append(string(" "), v24), string("")), string(""));
            let v27 = Dice_ui::method351(v13, v14);
            let v30: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v26), string(">move || { v27() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v32: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v23(()) + " " + &v20(()) + " " + &v17(())>move || { v27() }</dl> };
            let v34: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v32);
            let v35 = Dice_ui::method352();
            let v36 = Dice_ui::method353(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v39 = {
                let clo_3 = Func0::new(move || Dice_ui::closure395((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v42 = {
                let clo_4 = Func0::new(move || Dice_ui::closure396((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v44 = {
                let clo_5 = Func0::from(v22);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v45: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v44(()) + \" \" + &v42(()) + \" \" + &v39(())");
            let v46: string = append(append(append(string(" "), v45), string("")), string(""));
            let v47 = Dice_ui::method354(v35, v36);
            let v49: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v46), string(">move || { v47() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v51: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v44(()) + " " + &v42(()) + " " + &v39(())>move || { v47() }</dl> };
            let v53: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v51);
            let v54 = Dice_ui::method355();
            let v55 = Dice_ui::method356(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v58 = {
                let clo_6 = Func0::new(move || Dice_ui::closure400((), ()));
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v61 = {
                let clo_7 = Func0::new(move || Dice_ui::closure401((), ()));
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v63 = {
                let clo_8 = Func0::from(v22);
                Func1::new({
                    let clo_8 = clo_8.clone();
                    move |arg_8: ()| clo_8()
                })
            };
            let v64: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v63(()) + \" \" + &v61(()) + \" \" + &v58(())");
            let v65: string = append(append(append(string(" "), v64), string("")), string(""));
            let v66 = Dice_ui::method357(v54, v55);
            let v68: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v65), string(">move || { v66() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v70: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v63(()) + " " + &v61(()) + " " + &v58(())>move || { v66() }</dl> };
            let v72: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v70);
            let v73 = Dice_ui::method358();
            let v74 = Dice_ui::method359(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v77 = {
                let clo_9 = Func0::new(move || Dice_ui::closure405((), ()));
                Func1::new({
                    let clo_9 = clo_9.clone();
                    move |arg_9: ()| clo_9()
                })
            };
            let v80 = {
                let clo_10 = Func0::new(move || Dice_ui::closure406((), ()));
                Func1::new({
                    let clo_10 = clo_10.clone();
                    move |arg_10: ()| clo_10()
                })
            };
            let v82 = {
                let clo_11 = Func0::from(v22);
                Func1::new({
                    let clo_11 = clo_11.clone();
                    move |arg_11: ()| clo_11()
                })
            };
            let v83: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v82(()) + \" \" + &v80(()) + \" \" + &v77(())");
            let v84: string = append(append(append(string(" "), v83), string("")), string(""));
            let v85 = Dice_ui::method360(v73, v74);
            let v87: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v84), string(">move || { v85() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v89: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v82(()) + " " + &v80(()) + " " + &v77(())>move || { v85() }</dl> };
            let v91: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v89);
            let v92 = Dice_ui::method361();
            let v93 = Dice_ui::method362(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v96 = {
                let clo_12 = Func0::new(move || Dice_ui::closure425((), ()));
                Func1::new({
                    let clo_12 = clo_12.clone();
                    move |arg_12: ()| clo_12()
                })
            };
            let v99 = {
                let clo_13 = Func0::new(move || Dice_ui::closure426((), ()));
                Func1::new({
                    let clo_13 = clo_13.clone();
                    move |arg_13: ()| clo_13()
                })
            };
            let v101 = {
                let clo_14 = Func0::from(v22);
                Func1::new({
                    let clo_14 = clo_14.clone();
                    move |arg_14: ()| clo_14()
                })
            };
            let v102: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v101(()) + \" \" + &v99(()) + \" \" + &v96(())");
            let v103: string = append(append(append(string(" "), v102), string("")), string(""));
            let v104 = Dice_ui::method370(v92, v93);
            let v106: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v103),
                                string(">move || { v104() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v108: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v101(()) + " " + &v99(()) + " " + &v96(())>move || { v104() }</dl> };
            let v110: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v108);
            let v111 = Dice_ui::method371();
            let v112 = Dice_ui::method372(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v115 = {
                let clo_15 = Func0::new(move || Dice_ui::closure431((), ()));
                Func1::new({
                    let clo_15 = clo_15.clone();
                    move |arg_15: ()| clo_15()
                })
            };
            let v118 = {
                let clo_16 = Func0::new(move || Dice_ui::closure432((), ()));
                Func1::new({
                    let clo_16 = clo_16.clone();
                    move |arg_16: ()| clo_16()
                })
            };
            let v120 = {
                let clo_17 = Func0::from(v22);
                Func1::new({
                    let clo_17 = clo_17.clone();
                    move |arg_17: ()| clo_17()
                })
            };
            let v121: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v120(()) + \" \" + &v118(()) + \" \" + &v115(())");
            let v122: string = append(append(append(string(" "), v121), string("")), string(""));
            let v123 = Dice_ui::method373(v111, v112);
            let v125: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v122),
                                string(">move || { v123() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v127: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v120(()) + " " + &v118(()) + " " + &v115(())>move || { v123() }</dl> };
            let v129: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v127);
            let v130 = Dice_ui::method374();
            let v131 = Dice_ui::method375(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v134 = {
                let clo_18 = Func0::new(move || Dice_ui::closure436((), ()));
                Func1::new({
                    let clo_18 = clo_18.clone();
                    move |arg_18: ()| clo_18()
                })
            };
            let v137 = {
                let clo_19 = Func0::new(move || Dice_ui::closure437((), ()));
                Func1::new({
                    let clo_19 = clo_19.clone();
                    move |arg_19: ()| clo_19()
                })
            };
            let v139 = {
                let clo_20 = Func0::from(v22);
                Func1::new({
                    let clo_20 = clo_20.clone();
                    move |arg_20: ()| clo_20()
                })
            };
            let v140: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v139(()) + \" \" + &v137(()) + \" \" + &v134(())");
            let v141: string = append(append(append(string(" "), v140), string("")), string(""));
            let v142 = Dice_ui::method376(v130, v131);
            let v144: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v141),
                                string(">move || { v142() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v146: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v139(()) + " " + &v137(()) + " " + &v134(())>move || { v142() }</dl> };
            let v148: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v146);
            let v149 = Dice_ui::method377();
            let v150 = Dice_ui::method378(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v153 = {
                let clo_21 = Func0::new(move || Dice_ui::closure441((), ()));
                Func1::new({
                    let clo_21 = clo_21.clone();
                    move |arg_21: ()| clo_21()
                })
            };
            let v156 = {
                let clo_22 = Func0::new(move || Dice_ui::closure442((), ()));
                Func1::new({
                    let clo_22 = clo_22.clone();
                    move |arg_22: ()| clo_22()
                })
            };
            let v158 = {
                let clo_23 = Func0::from(v22);
                Func1::new({
                    let clo_23 = clo_23.clone();
                    move |arg_23: ()| clo_23()
                })
            };
            let v159: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v158(()) + \" \" + &v156(()) + \" \" + &v153(())");
            let v160: string = append(append(append(string(" "), v159), string("")), string(""));
            let v161 = Dice_ui::method379(v149, v150);
            let v163: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v160),
                                string(">move || { v161() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v165: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v158(()) + " " + &v156(()) + " " + &v153(())>move || { v161() }</dl> };
            let v167: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v165);
            let v168 = Dice_ui::method380();
            let v169 = Dice_ui::method381(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v172 = {
                let clo_24 = Func0::new(move || Dice_ui::closure446((), ()));
                Func1::new({
                    let clo_24 = clo_24.clone();
                    move |arg_24: ()| clo_24()
                })
            };
            let v175 = {
                let clo_25 = Func0::new(move || Dice_ui::closure447((), ()));
                Func1::new({
                    let clo_25 = clo_25.clone();
                    move |arg_25: ()| clo_25()
                })
            };
            let v177 = {
                let clo_26 = Func0::from(v22);
                Func1::new({
                    let clo_26 = clo_26.clone();
                    move |arg_26: ()| clo_26()
                })
            };
            let v178: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v177(()) + \" \" + &v175(()) + \" \" + &v172(())");
            let v179: string = append(append(append(string(" "), v178), string("")), string(""));
            let v180 = Dice_ui::method382(v168, v169);
            let v182: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v179),
                                string(">move || { v180() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v184: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v177(()) + " " + &v175(()) + " " + &v172(())>move || { v180() }</dl> };
            let v186: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v184);
            let v187 = Dice_ui::method383();
            let v188 = Dice_ui::method384(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v191 = {
                let clo_27 = Func0::new(move || Dice_ui::closure451((), ()));
                Func1::new({
                    let clo_27 = clo_27.clone();
                    move |arg_27: ()| clo_27()
                })
            };
            let v194 = {
                let clo_28 = Func0::new(move || Dice_ui::closure452((), ()));
                Func1::new({
                    let clo_28 = clo_28.clone();
                    move |arg_28: ()| clo_28()
                })
            };
            let v196 = {
                let clo_29 = Func0::from(v22);
                Func1::new({
                    let clo_29 = clo_29.clone();
                    move |arg_29: ()| clo_29()
                })
            };
            let v197: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v196(()) + \" \" + &v194(()) + \" \" + &v191(())");
            let v198: string = append(append(append(string(" "), v197), string("")), string(""));
            let v199 = Dice_ui::method385(v187, v188);
            let v201: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v198),
                                string(">move || { v199() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v203: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v196(()) + " " + &v194(()) + " " + &v191(())>move || { v199() }</dl> };
            let v205: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v203);
            let v206 = Dice_ui::method386();
            let v207 = Dice_ui::method387(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v210 = {
                let clo_30 = Func0::new(move || Dice_ui::closure456((), ()));
                Func1::new({
                    let clo_30 = clo_30.clone();
                    move |arg_30: ()| clo_30()
                })
            };
            let v213 = {
                let clo_31 = Func0::new(move || Dice_ui::closure457((), ()));
                Func1::new({
                    let clo_31 = clo_31.clone();
                    move |arg_31: ()| clo_31()
                })
            };
            let v215 = {
                let clo_32 = Func0::from(v22);
                Func1::new({
                    let clo_32 = clo_32.clone();
                    move |arg_32: ()| clo_32()
                })
            };
            let v216: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v215(()) + \" \" + &v213(()) + \" \" + &v210(())");
            let v217: string = append(append(append(string(" "), v216), string("")), string(""));
            let v218 = Dice_ui::method388(v206, v207);
            let v220: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v217),
                                string(">move || { v218() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v222: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v215(()) + " " + &v213(()) + " " + &v210(())>move || { v218() }</dl> };
            let v224: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v222);
            let v225 = Dice_ui::method389();
            let v226 = Dice_ui::method390(
                v1.clone(),
                v2.clone(),
                v3.clone(),
                v4.clone(),
                v5.clone(),
                v6.clone(),
                v7,
                v8.clone(),
                v9,
                v10,
                v11,
                v12.clone(),
            );
            let v229 = {
                let clo_33 = Func0::new(move || Dice_ui::closure461((), ()));
                Func1::new({
                    let clo_33 = clo_33.clone();
                    move |arg_33: ()| clo_33()
                })
            };
            let v232 = {
                let clo_34 = Func0::new(move || Dice_ui::closure462((), ()));
                Func1::new({
                    let clo_34 = clo_34.clone();
                    move |arg_34: ()| clo_34()
                })
            };
            let v234 = {
                let clo_35 = Func0::from(v22);
                Func1::new({
                    let clo_35 = clo_35.clone();
                    move |arg_35: ()| clo_35()
                })
            };
            let v235: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v234(()) + \" \" + &v232(()) + \" \" + &v229(())");
            let v236: string = append(append(append(string(" "), v235), string("")), string(""));
            let v237 = Dice_ui::method391(v225, v226);
            let v239: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<dl "), v236),
                                string(">move || { v237() }</"),
                            ),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v241: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v234(()) + " " + &v232(()) + " " + &v229(())>move || { v237() }</dl> };
            let v243: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v241);
            let v270: leptos::prelude::AnyView = Dice_ui::method188(
                if count(v12.clone()) as u64 == 0_u64 {
                    let v247: Array<leptos::prelude::AnyView> =
                        Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                    leptos::prelude::CollectView::collect_view(v247)
                } else {
                    let v250 = Dice_ui::method392();
                    let v251 =
                        Dice_ui::method393(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
                    let v254 = {
                        let clo_36 = Func0::new(move || Dice_ui::closure467((), ()));
                        Func1::new({
                            let clo_36 = clo_36.clone();
                            move |arg_36: ()| clo_36()
                        })
                    };
                    let v257 = {
                        let clo_37 = Func0::new(move || Dice_ui::closure468((), ()));
                        Func1::new({
                            let clo_37 = clo_37.clone();
                            move |arg_37: ()| clo_37()
                        })
                    };
                    let v259 = {
                        let clo_38 = Func0::from(v22);
                        Func1::new({
                            let clo_38 = clo_38.clone();
                            move |arg_38: ()| clo_38()
                        })
                    };
                    let v260: string =
                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v259(()) + \" \" + &v257(()) + \" \" + &v254(())");
                    let v261: string =
                        append(append(append(string(" "), v260), string("")), string(""));
                    let v262 = Dice_ui::method395(v250, v251);
                    let v264: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<dl "), v261),
                                        string(">move || { v262() }</"),
                                    ),
                                    string("dl"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v266: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Dl, _, _>,
                    > = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v259(()) + " " + &v257(()) + " " + &v254(())>move || { v262() }</dl> };
                    leptos::prelude::IntoAny::into_any(v266)
                },
            );
            let v273: string = string("v270");
            let v274: leptos::prelude::AnyView = Dice_ui::method188(v243);
            let v278: string = append(string("v274, "), v273);
            let v279: leptos::prelude::AnyView = Dice_ui::method188(v224);
            let v282: string = append(string("v279, "), v278);
            let v283: leptos::prelude::AnyView = Dice_ui::method188(v205);
            let v286: string = append(string("v283, "), v282);
            let v287: leptos::prelude::AnyView = Dice_ui::method188(v186);
            let v290: string = append(string("v287, "), v286);
            let v291: leptos::prelude::AnyView = Dice_ui::method188(v167);
            let v294: string = append(string("v291, "), v290);
            let v295: leptos::prelude::AnyView = Dice_ui::method188(v148);
            let v298: string = append(string("v295, "), v294);
            let v299: leptos::prelude::AnyView = Dice_ui::method188(v129);
            let v302: string = append(string("v299, "), v298);
            let v303: leptos::prelude::AnyView = Dice_ui::method188(v110);
            let v306: string = append(string("v303, "), v302);
            let v307: leptos::prelude::AnyView = Dice_ui::method188(v91);
            let v310: string = append(string("v307, "), v306);
            let v311: leptos::prelude::AnyView = Dice_ui::method188(v72);
            let v314: string = append(string("v311, "), v310);
            let v315: leptos::prelude::AnyView = Dice_ui::method188(v53);
            let v318: string = append(string("v315, "), v314);
            let v319: leptos::prelude::AnyView = Dice_ui::method188(v34);
            let v323: string = append(
                append(string("vec!["), append(string("v319, "), v318)),
                string("]"),
            );
            let v324: Vec<leptos::prelude::AnyView> = vec![
                v319, v315, v311, v307, v303, v299, v295, v291, v287, v283, v279, v274, v270,
            ];
            let v326: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v324);
            let v328: &leptos::prelude::Fragment = &v326;
            leptos::prelude::AnyView::from(*v328.clone())
        }
        pub fn method348(
            v0_1: string,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: u32,
            v8: Array<(std::string::String, Option<std::string::String>)>,
            v9: f64,
            v10: bool,
            v11: f64,
            v12: Array<std::string::String>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure387(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6.clone(),
                        v7,
                        v8.clone(),
                        v9,
                        v10,
                        v11,
                        v12.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure385(
            v0_1: string,
            v1: i64,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: std::string::String,
            v8: u32,
            v9: Array<(std::string::String, Option<std::string::String>)>,
            v10: f64,
            v11: bool,
            v12: f64,
            v13: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v18: string = string(" class=\"flex items-center pb-[6px]\"");
            let v19 = Dice_ui::method336(Dice_ui::method335(Dice_ui::method347(v1)));
            let v22: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v18),
                                string(">move || { v19() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v24: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v19() }</span> };
            let v26: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v24);
            let v28: string = string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
            let v29 = Dice_ui::method348(v0_1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
            let v32: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v28), string(">move || { v29() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v29() }</div> };
            let v37: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v34));
            let v40: string = string("v37");
            let v41: leptos::prelude::AnyView = Dice_ui::method188(v26);
            let v46: string = append(
                append(string("vec!["), append(string("v41, "), v40)),
                string("]"),
            );
            let v47: Vec<leptos::prelude::AnyView> = vec![v41, v37];
            let v49: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v47);
            let v51: &leptos::prelude::Fragment = &v49;
            leptos::prelude::AnyView::from(*v51.clone())
        }
        pub fn method346(
            v0_1: string,
            v1: i64,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: std::string::String,
            v7: std::string::String,
            v8: u32,
            v9: Array<(std::string::String, Option<std::string::String>)>,
            v10: f64,
            v11: bool,
            v12: f64,
            v13: Array<std::string::String>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v12 = v12.clone();
                let v13 = v13.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure385(
                        v0_1.clone(),
                        v1,
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6.clone(),
                        v7.clone(),
                        v8,
                        v9.clone(),
                        v10,
                        v11,
                        v12,
                        v13.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure384(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::prelude::AnyView {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v16: i64 = _arg.1.clone() as i64;
            let v21: bool = true;
            leptos::logging::log!("{}", string("transaction.render (1)"));
            let v23: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v25: LrcPtr<Dice_ui::Heap2> = v23.unwrap();
            let v28: string = string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
            let v29 = Dice_ui::method346(
                _arg.0.clone(),
                v16,
                v2.l0.clone(),
                v2.l1.clone(),
                v2.l2.clone(),
                v2.l3.clone(),
                v2.l4.clone(),
                v2.l5.clone(),
                v2.l6,
                v2.l7.clone(),
                v2.l8,
                v2.l9,
                v2.l10,
                v2.l11.clone(),
            );
            let v32: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v28), string(">move || { v29() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v34: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v29() }</div> };
            leptos::prelude::IntoAny::into_any(v34)
        }
        pub fn closure383(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v2: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v0_1.to_vec();
            let v5: Vec<leptos::prelude::AnyView> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                        Dice_ui::closure384((), arg10_0040)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Array<leptos::prelude::AnyView> =
                Dice_ui::method177(fable_library_rust::NativeArray_::array_from(v5));
            let v11: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::CollectView::collect_view(v8));
            let v16: string = string("vec![v11]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v11];
            let v19: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v17);
            let v21: &leptos::prelude::Fragment = &v19;
            leptos::prelude::AnyView::from(*v21.clone())
        }
        pub fn method345(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure383(v0_1.clone(), ())
            })
        }
        pub fn closure472(v0_1: string, unitVar: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method397(v0_1: string) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure472(v0_1.clone(), ())
            })
        }
        pub fn closure473(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v9: i64 = Dice_ui::method244(toInt64(fable_library_rust::String_::fromString(
                v0_1.l5.clone(),
            ))) / 1000_i64;
            let v11: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v9);
            let v25: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_1, map(Dice_ui::method245(), v11));
            let v44: Dice_ui::US32 = match &v25 {
                Dice_ui::US69::US69_0(v25_0_0) => {
                    let v31: chrono::NaiveDateTime = match &v25 {
                        Dice_ui::US69::US69_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .naive_utc();
                    let v33: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v31);
                    let v35: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v36: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v38: std::string::String = v33.format(v36).to_string();
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v38))
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v50: Dice_ui::US70 = match &v44 {
                Dice_ui::US32::US32_0(v44_0_0) => Dice_ui::US70::US70_0(match &v44 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }),
                _ => Dice_ui::US70::US70_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v55: string = match &v50 {
                Dice_ui::US70::US70_0(v50_0_0) => v50_0_0.clone(),
                Dice_ui::US70::US70_1(v50_1_0) => append(
                    append(string("sm\'.to_string result / Error: "), v50_1_0.clone()),
                    string(""),
                ),
            };
            let v60: &str = &*v55;
            let v84: std::string::String = String::from(v60);
            let v106: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v84)),
            );
            let v111: string = string("vec![v106]");
            let v112: Vec<leptos::prelude::AnyView> = vec![v106];
            let v114: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v112);
            let v116: &leptos::prelude::Fragment = &v114;
            leptos::prelude::AnyView::from(*v116.clone())
        }
        pub fn method398(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure473(v0_1.clone(), ())
            })
        }
        pub fn closure474(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l1.clone());
            let v8: &str = &*v3;
            let v32: std::string::String = String::from(v8);
            let v54: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32)),
            );
            let v59: string = string("vec![v54]");
            let v60: Vec<leptos::prelude::AnyView> = vec![v54];
            let v62: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v60);
            let v64: &leptos::prelude::Fragment = &v62;
            leptos::prelude::AnyView::from(*v64.clone())
        }
        pub fn method399(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure474(v0_1.clone(), ())
            })
        }
        pub fn closure475(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l2.clone());
            let v8: &str = &*v3;
            let v32: std::string::String = String::from(v8);
            let v54: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32)),
            );
            let v59: string = string("vec![v54]");
            let v60: Vec<leptos::prelude::AnyView> = vec![v54];
            let v62: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v60);
            let v64: &leptos::prelude::Fragment = &v62;
            leptos::prelude::AnyView::from(*v64.clone())
        }
        pub fn method400(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure475(v0_1.clone(), ())
            })
        }
        pub fn closure477(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v2 = Dice_ui::method363(_arg.0.clone());
            let v3 = Dice_ui::method364(_arg.1.clone());
            let v6 = {
                let clo = Func0::new(move || Dice_ui::closure420((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v9 = {
                let clo_1 = Func0::new(move || Dice_ui::closure421((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v12 = {
                let clo_2 = Func0::new(move || Dice_ui::closure422((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v13: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v12(()) + \" \" + &v9(()) + \" \" + &v6(())");
            let v15: string = append(append(append(string(" "), v13), string("")), string(""));
            let v16 = Dice_ui::method369(v2, v3);
            let v19: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v15), string(">move || { v16() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v21: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v12(()) + " " + &v9(()) + " " + &v6(())>move || { v16() }</dl> };
            leptos::prelude::IntoAny::into_any(v21)
        }
        pub fn closure476(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: Vec<(std::string::String, Option<std::string::String>)> =
                v0_1.l7.clone().to_vec();
            let v6: Vec<leptos::prelude::AnyView> = v3
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure477((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v9: Array<leptos::prelude::AnyView> =
                Dice_ui::method177(fable_library_rust::NativeArray_::array_from(v6));
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::CollectView::collect_view(v9));
            let v17: string = string("vec![v12]");
            let v18: Vec<leptos::prelude::AnyView> = vec![v12];
            let v20: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v18);
            let v22: &leptos::prelude::Fragment = &v20;
            leptos::prelude::AnyView::from(*v22.clone())
        }
        pub fn method401(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure476(v0_1.clone(), ())
            })
        }
        pub fn closure478(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = toString(v0_1.l8);
            let v10: &str = &*v3;
            let v34: std::string::String = String::from(v10);
            let v56: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v34)),
            );
            let v61: string = string("vec![v56]");
            let v62: Vec<leptos::prelude::AnyView> = vec![v56];
            let v64: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v62);
            let v66: &leptos::prelude::Fragment = &v64;
            leptos::prelude::AnyView::from(*v66.clone())
        }
        pub fn method402(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure478(v0_1.clone(), ())
            })
        }
        pub fn closure479(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = toString(v0_1.l10);
            let v10: &str = &*v3;
            let v34: std::string::String = String::from(v10);
            let v56: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v34)),
            );
            let v61: string = string("vec![v56]");
            let v62: Vec<leptos::prelude::AnyView> = vec![v56];
            let v64: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v62);
            let v66: &leptos::prelude::Fragment = &v64;
            leptos::prelude::AnyView::from(*v66.clone())
        }
        pub fn method403(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure479(v0_1.clone(), ())
            })
        }
        pub fn closure480(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = toString(v0_1.l6);
            let v10: &str = &*v3;
            let v34: std::string::String = String::from(v10);
            let v56: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v34)),
            );
            let v61: string = string("vec![v56]");
            let v62: Vec<leptos::prelude::AnyView> = vec![v56];
            let v64: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v62);
            let v66: &leptos::prelude::Fragment = &v64;
            leptos::prelude::AnyView::from(*v66.clone())
        }
        pub fn method404(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure480(v0_1.clone(), ())
            })
        }
        pub fn closure482(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn closure481(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v106: leptos::prelude::Fragment = if count(v0_1.l11.clone()) as u64 == 0_u64 {
                let v9: &str = &*string("");
                let v33: std::string::String = String::from(v9);
                let v55: leptos::prelude::AnyView = Dice_ui::method188(
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v33)),
                );
                let v59: string = string("vec![v55]");
                let v60: Vec<leptos::prelude::AnyView> = vec![v55];
                leptos::prelude::Fragment::new(v60)
            } else {
                let v65: Vec<std::string::String> = v0_1.l11.clone().to_vec();
                let v68: Vec<string> = v65
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v: std::string::String| Dice_ui::closure59((), v))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v71: LrcPtr<dyn IEnumerable_1<string>> =
                    ofArray(fable_library_rust::NativeArray_::array_from(v68));
                let v83: string = replace(
                    join(Dice_ui::method394(), toArray(v71)),
                    string("\\n"),
                    string("\n"),
                );
                let v86 = {
                    let clo = Func0::new(move || Dice_ui::closure482((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v87: string =
                        string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v86(())");
                let v89: string = append(append(append(string(" "), v87), string("")), string(""));
                let v90 = Dice_ui::method323(v83);
                let v93: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<pre "), v89),
                                    string(">move || { v90() }</"),
                                ),
                                string("pre"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v95: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v86(())>move || { v90() }</pre> };
                let v98: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v95));
                let v102: string = string("vec![v98]");
                let v103: Vec<leptos::prelude::AnyView> = vec![v98];
                leptos::prelude::Fragment::new(v103)
            };
            let v108: &leptos::prelude::Fragment = &v106;
            leptos::prelude::AnyView::from(*v108.clone())
        }
        pub fn method405(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure481(v0_1.clone(), ())
            })
        }
        pub fn closure483(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = ofBoolean(v0_1.l9);
            let v10: &str = &*v3;
            let v34: std::string::String = String::from(v10);
            let v56: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v34)),
            );
            let v61: string = string("vec![v56]");
            let v62: Vec<leptos::prelude::AnyView> = vec![v56];
            let v64: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v62);
            let v66: &leptos::prelude::Fragment = &v64;
            leptos::prelude::AnyView::from(*v66.clone())
        }
        pub fn method406(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure483(v0_1.clone(), ())
            })
        }
        pub fn closure484(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l3.clone());
            let v8: &str = &*v3;
            let v32: std::string::String = String::from(v8);
            let v54: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32)),
            );
            let v59: string = string("vec![v54]");
            let v60: Vec<leptos::prelude::AnyView> = vec![v54];
            let v62: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v60);
            let v64: &leptos::prelude::Fragment = &v62;
            leptos::prelude::AnyView::from(*v64.clone())
        }
        pub fn method407(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure484(v0_1.clone(), ())
            })
        }
        pub fn closure485(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l4.clone());
            let v8: &str = &*v3;
            let v32: std::string::String = String::from(v8);
            let v54: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32)),
            );
            let v59: string = string("vec![v54]");
            let v60: Vec<leptos::prelude::AnyView> = vec![v54];
            let v62: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v60);
            let v64: &leptos::prelude::Fragment = &v62;
            leptos::prelude::AnyView::from(*v64.clone())
        }
        pub fn method408(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure485(v0_1.clone(), ())
            })
        }
        pub fn closure486(v0_1: LrcPtr<Dice_ui::Heap5>, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = fable_library_rust::String_::fromString(v0_1.l0.clone());
            let v8: &str = &*v3;
            let v32: std::string::String = String::from(v8);
            let v54: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v32)),
            );
            let v59: string = string("vec![v54]");
            let v60: Vec<leptos::prelude::AnyView> = vec![v54];
            let v62: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v60);
            let v64: &leptos::prelude::Fragment = &v62;
            leptos::prelude::AnyView::from(*v64.clone())
        }
        pub fn method409(v0_1: LrcPtr<Dice_ui::Heap5>) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure486(v0_1.clone(), ())
            })
        }
        pub fn closure471(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: string,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v5 = Dice_ui::method397(v1);
            let v8: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v4), string(">move || { v5() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v5() }</td> };
            let v12: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v10);
            let v14: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v15 = Dice_ui::method398(v0_1.clone());
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v14), string(">move || { v15() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v15() }</td> };
            let v21: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v19);
            let v23: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v24 = Dice_ui::method399(v0_1.clone());
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v23), string(">move || { v24() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v24() }</td> };
            let v30: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v28);
            let v32: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v33 = Dice_ui::method400(v0_1.clone());
            let v35: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v32), string(">move || { v33() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v37: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v33() }</td> };
            let v39: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v37);
            let v41: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v42 = Dice_ui::method401(v0_1.clone());
            let v44: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v41), string(">move || { v42() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v46: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v42() }</td> };
            let v48: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v46);
            let v50: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v51 = Dice_ui::method402(v0_1.clone());
            let v53: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v50), string(">move || { v51() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v55: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v51() }</td> };
            let v57: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v55);
            let v59: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v60 = Dice_ui::method403(v0_1.clone());
            let v62: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v59), string(">move || { v60() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v64: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v60() }</td> };
            let v66: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v64);
            let v68: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v69 = Dice_ui::method404(v0_1.clone());
            let v71: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v68), string(">move || { v69() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v73: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v69() }</td> };
            let v75: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v73);
            let v77: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
            let v78 = Dice_ui::method405(v0_1.clone());
            let v80: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v77), string(">move || { v78() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v82: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v78() }</td> };
            let v84: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v82);
            let v86: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v87 = Dice_ui::method406(v0_1.clone());
            let v89: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v86), string(">move || { v87() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v91: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v87() }</td> };
            let v93: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v91);
            let v95: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v96 = Dice_ui::method407(v0_1.clone());
            let v98: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<td "), v95), string(">move || { v96() }</")),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v100: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v96() }</td> };
            let v102: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v100);
            let v104: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v105 = Dice_ui::method408(v0_1.clone());
            let v107: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<td "), v104),
                                string(">move || { v105() }</"),
                            ),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v109: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v105() }</td> };
            let v111: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v109);
            let v113: string =
                string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
            let v114 = Dice_ui::method409(v0_1);
            let v116: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<td "), v113),
                                string(">move || { v114() }</"),
                            ),
                            string("td"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v118: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> = leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v114() }</td> };
            let v121: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v118));
            let v124: string = string("v121");
            let v125: leptos::prelude::AnyView = Dice_ui::method188(v111);
            let v129: string = append(string("v125, "), v124);
            let v130: leptos::prelude::AnyView = Dice_ui::method188(v102);
            let v133: string = append(string("v130, "), v129);
            let v134: leptos::prelude::AnyView = Dice_ui::method188(v93);
            let v137: string = append(string("v134, "), v133);
            let v138: leptos::prelude::AnyView = Dice_ui::method188(v84);
            let v141: string = append(string("v138, "), v137);
            let v142: leptos::prelude::AnyView = Dice_ui::method188(v75);
            let v145: string = append(string("v142, "), v141);
            let v146: leptos::prelude::AnyView = Dice_ui::method188(v66);
            let v149: string = append(string("v146, "), v145);
            let v150: leptos::prelude::AnyView = Dice_ui::method188(v57);
            let v153: string = append(string("v150, "), v149);
            let v154: leptos::prelude::AnyView = Dice_ui::method188(v48);
            let v157: string = append(string("v154, "), v153);
            let v158: leptos::prelude::AnyView = Dice_ui::method188(v39);
            let v161: string = append(string("v158, "), v157);
            let v162: leptos::prelude::AnyView = Dice_ui::method188(v30);
            let v165: string = append(string("v162, "), v161);
            let v166: leptos::prelude::AnyView = Dice_ui::method188(v21);
            let v169: string = append(string("v166, "), v165);
            let v170: leptos::prelude::AnyView = Dice_ui::method188(v12);
            let v174: string = append(
                append(string("vec!["), append(string("v170, "), v169)),
                string("]"),
            );
            let v175: Vec<leptos::prelude::AnyView> = vec![
                v170, v166, v162, v158, v154, v150, v146, v142, v138, v134, v130, v125, v121,
            ];
            let v177: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v175);
            let v179: &leptos::prelude::Fragment = &v177;
            leptos::prelude::AnyView::from(*v179.clone())
        }
        pub fn method396(
            v0_1: LrcPtr<Dice_ui::Heap5>,
            v1: string,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure471(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure470(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> {
            let v5: bool = true;
            leptos::logging::log!("{}", string("transaction.tr_render (1)"));
            let v8: string = string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
            let v9 = Dice_ui::method396(_arg.2.clone(), _arg.0.clone());
            let v12: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<tr "), v8), string(">move || { v9() }</")),
                            string("tr"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v9() }</tr> }
        }
        pub fn closure487(
            unitVar: (),
            v0_1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>>,
        ) -> leptos::prelude::AnyView {
            leptos::prelude::IntoAny::into_any(v0_1)
        }
        pub fn closure489(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Account");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method411() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure489((), ()))
        }
        pub fn closure490(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Block Timestamp");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method412() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure490((), ()))
        }
        pub fn closure491(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Predecessor");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method413() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure491((), ()))
        }
        pub fn closure492(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Receiver");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method414() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure492((), ()))
        }
        pub fn closure493(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Action");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method415() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure493((), ()))
        }
        pub fn closure494(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Deposit");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method416() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure494((), ()))
        }
        pub fn closure495(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Fee");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method417() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure495((), ()))
        }
        pub fn closure496(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Block Height");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method418() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure496((), ()))
        }
        pub fn method421(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method421: loop {
                break '_method421 (if v1.get().clone() < count(v0_1.get().clone()) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if length(fable_library_rust::String_::fromString(v4)) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method421;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method420(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method420: loop {
                break '_method420 (if v1.get().clone() < count(v0_1.get().clone()) {
                    if Dice_ui::method421(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = v1.get().clone() + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method420;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure497(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v6: string = if false == Dice_ui::method420(v0_1, 0_i32) {
                string("")
            } else {
                string("Logs")
            };
            let v11: &str = &*v6;
            let v35: std::string::String = String::from(v11);
            let v57: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v35)),
            );
            let v62: string = string("vec![v57]");
            let v63: Vec<leptos::prelude::AnyView> = vec![v57];
            let v65: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v63);
            let v67: &leptos::prelude::Fragment = &v65;
            leptos::prelude::AnyView::from(*v67.clone())
        }
        pub fn method419(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure497(v0_1.clone(), ())
            })
        }
        pub fn closure498(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Outcome Status");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method422() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure498((), ()))
        }
        pub fn closure499(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Hash");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method423() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure499((), ()))
        }
        pub fn closure500(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Block Hash");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method424() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure500((), ()))
        }
        pub fn closure501(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Receipt ID");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method425() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure501((), ()))
        }
        pub fn closure488(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v4 = Dice_ui::method411();
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v3), string(">move || { v4() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v4() }</th> };
            let v11: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v9);
            let v13: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v14 = Dice_ui::method412();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v13), string(">move || { v14() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v14() }</th> };
            let v20: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v18);
            let v22: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v23 = Dice_ui::method413();
            let v25: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v22), string(">move || { v23() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v23() }</th> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v32 = Dice_ui::method414();
            let v34: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v31), string(">move || { v32() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v32() }</th> };
            let v38: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v36);
            let v40: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v41 = Dice_ui::method415();
            let v43: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v40), string(">move || { v41() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v45: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v41() }</th> };
            let v47: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v45);
            let v49: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v50 = Dice_ui::method416();
            let v52: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v49), string(">move || { v50() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v54: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v50() }</th> };
            let v56: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v54);
            let v58: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v59 = Dice_ui::method417();
            let v61: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v58), string(">move || { v59() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v63: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v59() }</th> };
            let v65: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v63);
            let v67: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v68 = Dice_ui::method418();
            let v70: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v67), string(">move || { v68() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v72: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v68() }</th> };
            let v74: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v72);
            let v76: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v77 = Dice_ui::method419(v0_1);
            let v79: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v76), string(">move || { v77() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v81: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v77() }</th> };
            let v83: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v81);
            let v85: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v86 = Dice_ui::method422();
            let v88: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v85), string(">move || { v86() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v90: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v86() }</th> };
            let v92: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v90);
            let v94: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v95 = Dice_ui::method423();
            let v97: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<th "), v94), string(">move || { v95() }</")),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v99: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v95() }</th> };
            let v101: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v99);
            let v103: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v104 = Dice_ui::method424();
            let v106: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<th "), v103),
                                string(">move || { v104() }</"),
                            ),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v108: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v104() }</th> };
            let v110: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v108);
            let v112: string = string(
                " class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"",
            );
            let v113 = Dice_ui::method425();
            let v115: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<th "), v112),
                                string(">move || { v113() }</"),
                            ),
                            string("th"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v117: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Th, _, _>> = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v113() }</th> };
            let v120: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v117));
            let v123: string = string("v120");
            let v124: leptos::prelude::AnyView = Dice_ui::method188(v110);
            let v128: string = append(string("v124, "), v123);
            let v129: leptos::prelude::AnyView = Dice_ui::method188(v101);
            let v132: string = append(string("v129, "), v128);
            let v133: leptos::prelude::AnyView = Dice_ui::method188(v92);
            let v136: string = append(string("v133, "), v132);
            let v137: leptos::prelude::AnyView = Dice_ui::method188(v83);
            let v140: string = append(string("v137, "), v136);
            let v141: leptos::prelude::AnyView = Dice_ui::method188(v74);
            let v144: string = append(string("v141, "), v140);
            let v145: leptos::prelude::AnyView = Dice_ui::method188(v65);
            let v148: string = append(string("v145, "), v144);
            let v149: leptos::prelude::AnyView = Dice_ui::method188(v56);
            let v152: string = append(string("v149, "), v148);
            let v153: leptos::prelude::AnyView = Dice_ui::method188(v47);
            let v156: string = append(string("v153, "), v152);
            let v157: leptos::prelude::AnyView = Dice_ui::method188(v38);
            let v160: string = append(string("v157, "), v156);
            let v161: leptos::prelude::AnyView = Dice_ui::method188(v29);
            let v164: string = append(string("v161, "), v160);
            let v165: leptos::prelude::AnyView = Dice_ui::method188(v20);
            let v168: string = append(string("v165, "), v164);
            let v169: leptos::prelude::AnyView = Dice_ui::method188(v11);
            let v173: string = append(
                append(string("vec!["), append(string("v169, "), v168)),
                string("]"),
            );
            let v174: Vec<leptos::prelude::AnyView> = vec![
                v169, v165, v161, v157, v153, v149, v145, v141, v137, v133, v129, v124, v120,
            ];
            let v176: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v174);
            let v178: &leptos::prelude::Fragment = &v176;
            leptos::prelude::AnyView::from(*v178.clone())
        }
        pub fn method410(
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure488(v0_1.clone(), ())
            })
        }
        pub fn closure367(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v21: leptos::prelude::AnyView = if leptos::prelude::SignalGet::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v9 = Dice_ui::method333(v0_1.clone());
                let v12: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(append(string("<div "), v8), string(">move || { v9() }</")),
                                string("div"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v14: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v9() }</div> };
                leptos::prelude::IntoAny::into_any(v14)
            } else {
                let v18: Array<leptos::prelude::AnyView> =
                    Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                leptos::prelude::CollectView::collect_view(v18)
            };
            let v23: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v2();
            let v169: leptos::prelude::AnyView = Dice_ui::method188(
                if count(fable_library_rust::NativeArray_::array_from(v23)) as u64 == 0_u64 {
                    let v30: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v31 = Dice_ui::method229();
                    let v34: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<div "), v30),
                                        string(">move || { v31() }</"),
                                    ),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v36: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v31() }</div> };
                    leptos::prelude::IntoAny::into_any(v36)
                } else {
                    let v40: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v41 = Dice_ui::method139();
                    let v42 = Dice_ui::method140();
                    let v43: Dice_ui::US54 = match &v40 {
                        Err(v40_1_0) => v42(v40_1_0.clone()),
                        Ok(v40_0_0) => v41(v40_0_0.clone()),
                    };
                    let v66: Dice_ui::US47 = match &v43 {
                        Dice_ui::US54::US54_0(v43_0_0) => Dice_ui::US47::US47_0(defaultValue(
                            Dice_ui::US48::US48_1,
                            map(Dice_ui::method141(), v43_0_0.clone()),
                        )),
                        Dice_ui::US54::US54_1(v43_1_0) => Dice_ui::US47::US47_1(v43_1_0.clone()),
                    };
                    match &v66 {
                        Dice_ui::US47::US47_0(v66_0_0) => {
                            let v67: Dice_ui::US48 = v66_0_0.clone();
                            if let Dice_ui::US48::US48_0(v67_0_0) = &v67 {
                                let v68: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> = match &v67
                                {
                                    Dice_ui::US48::US48_0(x) => x.clone(),
                                    _ => unreachable!(),
                                };
                                let v71: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::SignalGetUntracked::get_untracked(
                                        &v0_1.l0.clone(),
                                    );
                                if if let Dice_ui::US1::US1_0 =
                                    &(leptos::prelude::SignalGet::get(&v71.l3.clone())).l4
                                {
                                    true
                                } else {
                                    false
                                } {
                                    let v77: string =
                                                           string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                    let v79: string = append(
                                        append(append(string(" "), v77), string("")),
                                        string(""),
                                    );
                                    let v80 = Dice_ui::method345(v68.clone());
                                    let v83: string = append(
                                        append(
                                            string("leptos::prelude::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<div "), v79),
                                                        string(">move || { v80() }</"),
                                                    ),
                                                    string("div"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v85: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                    > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v80() }</div> };
                                    leptos::prelude::IntoAny::into_any(v85)
                                } else {
                                    let v89: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        v68.clone().to_vec();
                                    let v92: Vec<
                                        leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        >,
                                    > = v89
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new(
                                                move |arg10_0040: (
                                                    string,
                                                    usize,
                                                    LrcPtr<Dice_ui::Heap5>,
                                                )| {
                                                    Dice_ui::closure470((), arg10_0040)
                                                },
                                            )(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                    let v95: Vec<leptos::prelude::AnyView> = v92
                                        .into_iter()
                                        .map(|x| {
                                            Func1::new(
                                                move |v: leptos::prelude::View<
                                                    leptos::html::HtmlElement<
                                                        leptos::html::Tr,
                                                        _,
                                                        _,
                                                    >,
                                                >| {
                                                    Dice_ui::closure487((), v)
                                                },
                                            )(x.clone())
                                        })
                                        .collect::<Vec<_>>();
                                    let v98: Array<leptos::prelude::AnyView> = Dice_ui::method177(
                                        fable_library_rust::NativeArray_::array_from(v95),
                                    );
                                    let v101: leptos::prelude::AnyView = Dice_ui::method188(
                                        leptos::prelude::CollectView::collect_view(v98),
                                    );
                                    let v106: string = string("vec![v101]");
                                    let v107: Vec<leptos::prelude::AnyView> = vec![v101];
                                    let v109: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v107);
                                    let v112: bool = true;
                                    leptos::logging::log!(
                                        "{}",
                                        string("transaction.tr_head_render (1)")
                                    );
                                    let v113 = Dice_ui::method410(v68);
                                    let v116: string = string(
                                        "leptos::prelude::view! { <tr >move || { v113() }</tr> }",
                                    );
                                    let v118: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    > = leptos::prelude::view! { <tr >move || { v113() }</tr> };
                                    let v121: leptos::prelude::AnyView = Dice_ui::method188(
                                        leptos::prelude::IntoAny::into_any(v118),
                                    );
                                    let v125: string = string("vec![v121]");
                                    let v126: Vec<leptos::prelude::AnyView> = vec![v121];
                                    let v130: string =
                                                           string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                    let v131 = Dice_ui::method252(
                                        leptos::prelude::Fragment::new(v126),
                                        v109,
                                    );
                                    let v134: string = append(
                                        append(
                                            string("leptos::prelude::view! { "),
                                            append(
                                                append(
                                                    append(
                                                        append(string("<table "), v130),
                                                        string(">move || { v131() }</"),
                                                    ),
                                                    string("table"),
                                                ),
                                                string(">"),
                                            ),
                                        ),
                                        string(" }"),
                                    );
                                    let v136: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                    > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v131() }</table> };
                                    leptos::prelude::IntoAny::into_any(v136)
                                }
                            } else {
                                let v142: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v143 = Dice_ui::method255();
                                let v146: string = append(
                                    append(
                                        string("leptos::prelude::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v142),
                                                    string(">move || { v143() }</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v148: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v143() }</div> };
                                leptos::prelude::IntoAny::into_any(v148)
                            }
                        }
                        Dice_ui::US47::US47_1(v66_1_0) => {
                            let v157: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v158 = Dice_ui::method221(fable_library_rust::String_::fromString(
                                v66_1_0.clone(),
                            ));
                            let v161: string = append(
                                append(
                                    string("leptos::prelude::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<div "), v157),
                                                string(">move || { v158() }</"),
                                            ),
                                            string("div"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v163: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v158() }</div> };
                            leptos::prelude::IntoAny::into_any(v163)
                        }
                    }
                },
            );
            let v173: string = string("v169");
            let v174: leptos::prelude::AnyView = Dice_ui::method188(v21);
            let v179: string = append(
                append(string("vec!["), append(string("v174, "), v173)),
                string("]"),
            );
            let v180: Vec<leptos::prelude::AnyView> = vec![v174, v169];
            leptos::prelude::Fragment::new(v180)
        }
        pub fn method332(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move || Dice_ui::closure367(v0_1.clone(), v1.clone(), v2.clone(), v3.clone(), ())
            })
        }
        pub fn closure504(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure505(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure508(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method430(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure508((), ()))
        }
        pub fn closure507(v0_1: leptos::prelude::AnyView, unitVar: ()) -> leptos::prelude::AnyView {
            let v4: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v5 = Dice_ui::method206(Dice_ui::method430(v0_1));
            let v8: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v4), string(">move || { v5() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5() }</span> };
            let v13: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v10));
            let v17: string = string("vec![v13]");
            let v18: Vec<leptos::prelude::AnyView> = vec![v13];
            let v20: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v18);
            let v22: &leptos::prelude::Fragment = &v20;
            leptos::prelude::AnyView::from(*v22.clone())
        }
        pub fn method429(v0_1: leptos::prelude::AnyView) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure507(v0_1.clone(), ())
            })
        }
        pub fn closure506(v0_1: leptos::prelude::AnyView, unitVar: ()) -> leptos::prelude::AnyView {
            let v3: string = string(" class=\"flex items-center gap-2\"");
            let v4 = Dice_ui::method429(v0_1);
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">move || { v4() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4() }</div> };
            let v11: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v9);
            let v13: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v14 = Dice_ui::method207();
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v13),
                                string(">move || { v14() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v14() }</span> };
            let v22: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v19));
            let v25: string = string("v22");
            let v26: leptos::prelude::AnyView = Dice_ui::method188(v11);
            let v31: string = append(
                append(string("vec!["), append(string("v26, "), v25)),
                string("]"),
            );
            let v32: Vec<leptos::prelude::AnyView> = vec![v26, v22];
            let v34: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v32);
            let v36: &leptos::prelude::Fragment = &v34;
            leptos::prelude::AnyView::from(*v36.clone())
        }
        pub fn method428(v0_1: leptos::prelude::AnyView) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure506(v0_1.clone(), ())
            })
        }
        pub fn closure503(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure504((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new({
                    let v0_1 = v0_1.clone();
                    move || Dice_ui::closure505(v0_1.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v8: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v7(()) + \" \" + &v4(())");
            let v10: string = append(append(append(string(" "), v8), string("")), string(""));
            let v11 = Dice_ui::method428(v0_1.clone());
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v10),
                                string(">move || { v11() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v7(()) + " " + &v4(())>move || { v11() }</summary> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v20: string = string(" class=\"flex flex-1 flex-col\"");
            let v21 = Dice_ui::method209(v1);
            let v24: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v20), string(">move || { v21() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v21() }</div> };
            let v29: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v26));
            let v32: string = string("v29");
            let v33: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v38: string = append(
                append(string("vec!["), append(string("v33, "), v32)),
                string("]"),
            );
            let v39: Vec<leptos::prelude::AnyView> = vec![v33, v29];
            let v41: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v39);
            let v43: &leptos::prelude::Fragment = &v41;
            leptos::prelude::AnyView::from(*v43.clone())
        }
        pub fn method427(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure503(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure502(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure222((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure223((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v11 = Dice_ui::method201(v0_1.clone());
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">move || { v11() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v11() }</div> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v22: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v23 = Dice_ui::method427(v0_1, v1);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v7(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4(())>move || { v23() }</details> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method426(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure502(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure510(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Transactions");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn method432() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure510((), ()))
        }
        pub fn closure512(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure511(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v9: std::string::String = format!("{:#?}", v2);
            let v11: string = fable_library_rust::String_::fromString(v9);
            let v35 = {
                let clo = Func0::new(move || Dice_ui::closure512((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v36: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35(())");
            let v38: string = append(append(append(string(" "), v36), string("")), string(""));
            let v39 = Dice_ui::method323(v11);
            let v42: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<pre "), v38), string(">move || { v39() }</")),
                            string("pre"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v35(())>move || { v39() }</pre> };
            let v47: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v44));
            let v51: string = string("vec![v47]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v47];
            leptos::prelude::Fragment::new(v52)
        }
        pub fn method433(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure511(v0_1.clone(), ())
            })
        }
        pub fn closure509(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method432();
            let v2 = Dice_ui::method433(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure354((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure326((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure327((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(append(append(string(" "), v12), string("")), string(""));
            let v15 = Dice_ui::method324(v1, v2);
            let v18: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<dl "), v14), string(">move || { v15() }</")),
                            string("dl"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v15() }</dl> };
            let v23: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v20));
            let v27: string = string("vec![v23]");
            let v28: Vec<leptos::prelude::AnyView> = vec![v23];
            leptos::prelude::Fragment::new(v28)
        }
        pub fn method431(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure509(v0_1.clone(), ())
            })
        }
        pub fn closure515(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure516(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure519(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method438() -> Func0<string> {
            Func0::new(move || Dice_ui::closure519((), ()))
        }
        pub fn closure518(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v3: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v4 = Dice_ui::method206(Dice_ui::method438());
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<span "), v3), string(">move || { v4() }</")),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4() }</span> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            let v19: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v17);
            let v21: &leptos::prelude::Fragment = &v19;
            leptos::prelude::AnyView::from(*v21.clone())
        }
        pub fn method437() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure518((), ()))
        }
        pub fn closure517(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: string = string(" class=\"flex items-center gap-2\"");
            let v3 = Dice_ui::method437();
            let v6: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v2), string(">move || { v3() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v8: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3() }</div> };
            let v10: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v8);
            let v12: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v13 = Dice_ui::method207();
            let v16: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<span "), v12),
                                string(">move || { v13() }</"),
                            ),
                            string("span"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v18: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v13() }</span> };
            let v21: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v18));
            let v24: string = string("v21");
            let v25: leptos::prelude::AnyView = Dice_ui::method188(v10);
            let v30: string = append(
                append(string("vec!["), append(string("v25, "), v24)),
                string("]"),
            );
            let v31: Vec<leptos::prelude::AnyView> = vec![v25, v21];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v35: &leptos::prelude::Fragment = &v33;
            leptos::prelude::AnyView::from(*v35.clone())
        }
        pub fn method436() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure517((), ()))
        }
        pub fn closure514(
            v0_1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3 = {
                let clo = Func0::new(move || Dice_ui::closure515((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v6 = {
                let clo_1 = Func0::new(move || Dice_ui::closure516((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v7: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v6(()) + \" \" + &v3(())");
            let v9: string = append(append(append(string(" "), v7), string("")), string(""));
            let v10 = Dice_ui::method436();
            let v13: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<summary "), v9),
                                string(">move || { v10() }</"),
                            ),
                            string("summary"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v15: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Summary, _, _>> = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v6(()) + " " + &v3(())>move || { v10() }</summary> };
            let v17: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v15);
            let v19: string = string(" class=\"flex flex-1 flex-col\"");
            let v20 = Dice_ui::method209(v0_1);
            let v23: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v19), string(">move || { v20() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v25: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v20() }</div> };
            let v28: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v25));
            let v31: string = string("v28");
            let v32: leptos::prelude::AnyView = Dice_ui::method188(v17);
            let v37: string = append(
                append(string("vec!["), append(string("v32, "), v31)),
                string("]"),
            );
            let v38: Vec<leptos::prelude::AnyView> = vec![v32, v28];
            let v40: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v38);
            let v42: &leptos::prelude::Fragment = &v40;
            leptos::prelude::AnyView::from(*v42.clone())
        }
        pub fn method435(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure514(v0_1.clone(), ())
            })
        }
        pub fn closure513(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure222((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure223((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v11 = Dice_ui::method201(v0_1);
            let v14: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v10), string(">move || { v11() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v16: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v11() }</div> };
            let v18: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v16);
            let v19: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4(())");
            let v22: string = append(
                append(
                    string(" open=move || v7(())"),
                    append(append(append(string(" "), v19), string("")), string("")),
                ),
                string(""),
            );
            let v23 = Dice_ui::method435(v1);
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<details "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("details"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Details, _, _>> = leptos::prelude::view! { <details  open=move || v7(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4(())>move || { v23() }</details> };
            let v31: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v28));
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v18);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method434(
            v0_1: leptos::prelude::AnyView,
            v1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure513(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure520(
            v0_1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v2: &leptos::prelude::Fragment = &v0_1;
            leptos::prelude::AnyView::from(*v2.clone())
        }
        pub fn method439(v0_1: leptos::prelude::Fragment) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure520(v0_1.clone(), ())
            })
        }
        pub fn closure54(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v2: Dice_ui::US19 = leptos::prelude::SignalGet::get(&v0_1);
            let v533: Dice_ui::US23 = match &v2 {
                Dice_ui::US19::US19_1(v2_1_0) => {
                    let v6: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v8: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v10: LrcPtr<Dice_ui::Heap2> = v8.unwrap();
                    let v13: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v16 = {
                        let clo = Func0::new({
                            let v10 = v10.clone();
                            move || Dice_ui::closure55(v10.clone(), ())
                        });
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v18: leptos::prelude::Memo<Vec<string>> =
                        leptos::prelude::Memo::new(move |_| v16(()));
                    let v21 = {
                        let clo_1 = Func0::new({
                            let v18 = v18.clone();
                            move || Dice_ui::closure60(v18.clone(), ())
                        });
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v23: leptos::prelude::Memo<
                        Array<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v21(()));
                    let v26 = {
                        let clo_2 = Func0::new({
                            let v10 = v10.clone();
                            let v18 = v18.clone();
                            move || Dice_ui::closure62(v10.clone(), v18.clone(), ())
                        });
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v28: leptos::prelude::Memo<
                        Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
                    > = leptos::prelude::Memo::new(move |_| v26(()));
                    let v31 = {
                        let clo_3 = Func0::new({
                            let v28 = v28.clone();
                            move || Dice_ui::closure65(v28.clone(), ())
                        });
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v33: leptos::prelude::Memo<
                        Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v31(()));
                    let v36 = {
                        let clo_4 = Func0::new({
                            let v28 = v28.clone();
                            move || Dice_ui::closure67(v28.clone(), ())
                        });
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v38: leptos::prelude::Memo<Array<string>> =
                        leptos::prelude::Memo::new(move |_| v36(()));
                    let v40: leptos::prelude::Memo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method80(
                        v33,
                        Func1::new(move |v: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure70((), v)
                        }),
                    );
                    let v46: string = Dice_ui::method11(
                        200_i64,
                        append(
                            append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v40.clone()),
                            ),
                            string(""),
                        ),
                    );
                    let v48: bool = true;
                    leptos::logging::log!("{}", v46);
                    let v51 = {
                        let clo_5 = Func0::new({
                            let v38 = v38.clone();
                            let v40 = v40.clone();
                            move || Dice_ui::closure102(v38.clone(), v40.clone(), ())
                        });
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v53: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v51(()));
                    let v56 = {
                        let clo_6 = Func0::new({
                            let v53 = v53.clone();
                            move || Dice_ui::closure119(v53.clone(), ())
                        });
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v58: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v56(()));
                    let v61 = {
                        let clo_7 = Func0::new({
                            let v58 = v58.clone();
                            move || Dice_ui::closure126(v58.clone(), ())
                        });
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v65: leptos::prelude::Memo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method154(
                        leptos::prelude::Memo::new(move |_| v61(())),
                        Func1::new(move |v_1: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure130((), v_1)
                        }),
                    );
                    let v71: string = Dice_ui::method11(
                        200_i64,
                        append(
                            append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v65.clone()),
                            ),
                            string(""),
                        ),
                    );
                    let v73: bool = true;
                    leptos::logging::log!("{}", v71);
                    let v76 = Box::pin(Func1::new(move |v_2: LrcPtr<Dice_ui::Heap6>| {
                        Dice_ui::closure148((), v_2)
                    }));
                    let v77: string =
                            string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap6>| $0(value.clone())))");
                    let v78: leptos::prelude::Action<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US58, std::string::String>,
                    > = leptos::prelude::Action::new(*std::sync::Arc::new(
                        move |value: &std::sync::Arc<Heap6>| v76(value.clone()),
                    ));
                    let v81 = {
                        let clo_8 = Func0::new({
                            let v78 = v78.clone();
                            move || Dice_ui::closure153(v78.clone(), ())
                        });
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v83: leptos::prelude::Memo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v81(()));
                    let v86 = {
                        let clo_9 = Func0::new({
                            let v83 = v83.clone();
                            move || Dice_ui::closure158(v83.clone(), ())
                        });
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v88: leptos::prelude::Memo<Option<string>> =
                        leptos::prelude::Memo::new(move |_| v86(()));
                    let v91 = {
                        let clo_10 = Func0::new({
                            let v10 = v10.clone();
                            move || Dice_ui::closure163(v10.clone(), ())
                        });
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v93: leptos::prelude::Memo<Dice_ui::US32> =
                        leptos::prelude::Memo::new(move |_| v91(()));
                    let v96 = {
                        let clo_11 = Func0::new({
                            let v10 = v10.clone();
                            move || Dice_ui::closure164(v10.clone(), ())
                        });
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v98: leptos::prelude::Memo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v96(()));
                    let v101 = {
                        let clo_12 = Func0::new({
                            let v98 = v98.clone();
                            move || Dice_ui::closure167(v98.clone(), ())
                        });
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    let v103: leptos::prelude::Memo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::Memo::new(move |_| v101(()));
                    let v105: Array<leptos::prelude::AnyView> =
                        Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                    let v112: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v113 = Dice_ui::method223(
                        leptos::prelude::CollectView::collect_view(v105),
                        Dice_ui::method198(Dice_ui::method178(
                            v10.clone(),
                            v78.clone(),
                            v88,
                            v93,
                            v103,
                        )),
                    );
                    let v116: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<div "), v112),
                                        string(">move || { v113() }</"),
                                    ),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v118: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v113() }</div> };
                    let v120: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v118);
                    let v122: Array<leptos::prelude::AnyView> =
                        Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                    let v128: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v129 = Dice_ui::method257(
                        leptos::prelude::CollectView::collect_view(v122),
                        Dice_ui::method198(Dice_ui::method228(v65, v53.clone(), v28.clone())),
                    );
                    let v131: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<div "), v128),
                                        string(">move || { v129() }</"),
                                    ),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v133: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v129() }</div> };
                    let v136: leptos::prelude::AnyView =
                        Dice_ui::method188(leptos::prelude::IntoAny::into_any(v133));
                    let v139: string = string("v136");
                    let v140: leptos::prelude::AnyView = Dice_ui::method188(v120);
                    let v145: string = append(
                        append(string("vec!["), append(string("v140, "), v139)),
                        string("]"),
                    );
                    let v146: Vec<leptos::prelude::AnyView> = vec![v140, v136];
                    Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v146))
                }
                Dice_ui::US19::US19_2 => {
                    let v152: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v154: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v156: LrcPtr<Dice_ui::Heap2> = v154.unwrap();
                    let v162: &str = &*string("???");
                    let v186: std::string::String = String::from(v162);
                    let v208: leptos::prelude::AnyView =
                        Dice_ui::method188(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v186),
                        ));
                    let v213: string = string("vec![v208]");
                    let v214: Vec<leptos::prelude::AnyView> = vec![v208];
                    Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v214))
                }
                Dice_ui::US19::US19_4 => {
                    let v390: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v392: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v394: LrcPtr<Dice_ui::Heap2> = v392.unwrap();
                    let v397 = {
                        let clo_13 = Func0::new({
                            let v394 = v394.clone();
                            move || Dice_ui::closure265(v394.clone(), ())
                        });
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v399: leptos::prelude::Memo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v397(()));
                    let patternInput: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v402: leptos::prelude::WriteSignal<i32> = patternInput.1.clone();
                    let v405 = {
                        let clo_14 = Func0::new({
                            let patternInput = patternInput.clone();
                            let v399 = v399.clone();
                            move || Dice_ui::closure268(v399.clone(), patternInput.0.clone(), ())
                        });
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v407: leptos::prelude::Memo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::Memo::new(move |_| v405(()));
                    let v410 = {
                        let clo_15 = Func0::new({
                            let v407 = v407.clone();
                            move || Dice_ui::closure271(v407.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v412: leptos::prelude::Memo<i32> =
                        leptos::prelude::Memo::new(move |_| v410(()));
                    let v413 = Func0::new({
                        let v394 = v394.clone();
                        let v399 = v399.clone();
                        let v402 = v402.clone();
                        move || Dice_ui::closure272(v394.clone(), v399.clone(), v402.clone(), ())
                    });
                    {
                        let v417 = {
                            let clo_16 = Func0::new(move || Dice_ui::closure277((), ()));
                            Func1::new({
                                let clo_16 = clo_16.clone();
                                move |arg_16: ()| clo_16()
                            })
                        };
                        let v430: string =
                                string(" class=move || \" \".to_owned() + &v417(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v431 = Dice_ui::method266();
                        let v434: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<svg "), v430),
                                            string(">move || { v431() }</"),
                                        ),
                                        string("svg"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v436: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v417(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v431() }</svg> };
                        let v441 = {
                            let clo_17 = Func0::new(move || Dice_ui::closure279((), ()));
                            Func1::new({
                                let clo_17 = clo_17.clone();
                                move |arg_17: ()| clo_17()
                            })
                        };
                        let v442: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v441(())");
                        let v445: string = append(
                            append(
                                string(" aria-label=\"Add\""),
                                append(
                                    append(
                                        string(" on:click=move |_| v413()"),
                                        append(
                                            append(append(string(" "), v442), string("")),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(""),
                        );
                        let v446 = Dice_ui::method267(v436);
                        let v449: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<button "), v445),
                                            string(">move || { v446() }</"),
                                        ),
                                        string("button"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v451: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v413() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v441(())>move || { v446() }</button> };
                        let v453: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v451);
                        let v455: Array<leptos::prelude::AnyView> =
                            Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                        let v457: leptos::prelude::AnyView =
                            leptos::prelude::CollectView::collect_view(v455);
                        let v461: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v462 = Dice_ui::method292(
                            v453,
                            Dice_ui::method198(Dice_ui::method268(
                                v394.clone(),
                                v407.clone(),
                                v412,
                                v399.clone(),
                                v402.clone(),
                            )),
                        );
                        let v465: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v461),
                                            string(">move || { v462() }</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v467: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v462() }</div> };
                        let v469: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v467);
                        let v471: Array<leptos::prelude::AnyView> =
                            Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                        let v477: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v478 = Dice_ui::method312(
                            leptos::prelude::CollectView::collect_view(v471),
                            Dice_ui::method198(Dice_ui::method297(v394.clone())),
                        );
                        let v480: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v477),
                                            string(">move || { v478() }</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v482: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v478() }</div> };
                        let v484: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v482);
                        let v487: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::SignalGetUntracked::get_untracked(&v394.l0.clone());
                        let v511: leptos::prelude::AnyView = Dice_ui::method188(
                            if leptos::prelude::SignalGet::get(&v487.l1.clone()) {
                                let v492: Array<leptos::prelude::AnyView> =
                                    Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                                let v498: string =
                                    string(" class=\"flex flex-col [position:relative]\"");
                                let v499 = Dice_ui::method325(
                                    leptos::prelude::CollectView::collect_view(v492),
                                    Dice_ui::method198(Dice_ui::method317()),
                                );
                                let v501: string = append(
                                    append(
                                        string("leptos::prelude::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v498),
                                                    string(">move || { v499() }</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v503: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v499() }</div> };
                                leptos::prelude::IntoAny::into_any(v503)
                            } else {
                                let v507: Array<leptos::prelude::AnyView> =
                                    Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                                leptos::prelude::CollectView::collect_view(v507)
                            },
                        );
                        let v514: string = string("v511");
                        let v515: leptos::prelude::AnyView = Dice_ui::method188(v484);
                        let v519: string = append(string("v515, "), v514);
                        let v520: leptos::prelude::AnyView = Dice_ui::method188(v469);
                        let v524: string = append(
                            append(string("vec!["), append(string("v520, "), v519)),
                            string("]"),
                        );
                        let v525: Vec<leptos::prelude::AnyView> = vec![v520, v515, v511];
                        Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v525))
                    }
                }
                Dice_ui::US19::US19_3 => {
                    let v220: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v222: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v224: LrcPtr<Dice_ui::Heap2> = v222.unwrap();
                    let v227: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v230 = {
                        let clo_18 = Func0::new({
                            let v224 = v224.clone();
                            move || Dice_ui::closure55(v224.clone(), ())
                        });
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v232: leptos::prelude::Memo<Vec<string>> =
                        leptos::prelude::Memo::new(move |_| v230(()));
                    let v235 = {
                        let clo_19 = Func0::new({
                            let v232 = v232.clone();
                            move || Dice_ui::closure60(v232.clone(), ())
                        });
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v237: leptos::prelude::Memo<
                        Array<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v235(()));
                    let v240 = {
                        let clo_20 = Func0::new({
                            let v224 = v224.clone();
                            let v232 = v232.clone();
                            move || Dice_ui::closure62(v224.clone(), v232.clone(), ())
                        });
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v242: leptos::prelude::Memo<
                        Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
                    > = leptos::prelude::Memo::new(move |_| v240(()));
                    let v245 = {
                        let clo_21 = Func0::new({
                            let v242 = v242.clone();
                            move || Dice_ui::closure65(v242.clone(), ())
                        });
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v247: leptos::prelude::Memo<
                        Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v245(()));
                    let v250 = {
                        let clo_22 = Func0::new({
                            let v242 = v242.clone();
                            move || Dice_ui::closure67(v242.clone(), ())
                        });
                        Func1::new({
                            let clo_22 = clo_22.clone();
                            move |arg_22: ()| clo_22()
                        })
                    };
                    let v252: leptos::prelude::Memo<Array<string>> =
                        leptos::prelude::Memo::new(move |_| v250(()));
                    let v254: leptos::prelude::Memo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method80(
                        v247,
                        Func1::new(move |v_3: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure70((), v_3)
                        }),
                    );
                    let v260: string = Dice_ui::method11(
                        200_i64,
                        append(
                            append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v254.clone()),
                            ),
                            string(""),
                        ),
                    );
                    let v262: bool = true;
                    leptos::logging::log!("{}", v260);
                    let v265 = {
                        let clo_23 = Func0::new({
                            let v252 = v252.clone();
                            let v254 = v254.clone();
                            move || Dice_ui::closure102(v252.clone(), v254.clone(), ())
                        });
                        Func1::new({
                            let clo_23 = clo_23.clone();
                            move |arg_23: ()| clo_23()
                        })
                    };
                    let v267: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v265(()));
                    let v270 = {
                        let clo_24 = Func0::new({
                            let v267 = v267.clone();
                            move || Dice_ui::closure119(v267.clone(), ())
                        });
                        Func1::new({
                            let clo_24 = clo_24.clone();
                            move |arg_24: ()| clo_24()
                        })
                    };
                    let v272: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v270(()));
                    let v275 = {
                        let clo_25 = Func0::new({
                            let v272 = v272.clone();
                            move || Dice_ui::closure126(v272.clone(), ())
                        });
                        Func1::new({
                            let clo_25 = clo_25.clone();
                            move |arg_25: ()| clo_25()
                        })
                    };
                    let v285: string = Dice_ui::method11(
                        200_i64,
                        append(
                            append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method154(
                                        leptos::prelude::Memo::new(move |_| { v275(()) }),
                                        Func1::new(
                                            move |v_4: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure130((), v_4)
                                            }
                                        )
                                    )
                                ),
                            ),
                            string(""),
                        ),
                    );
                    let v287: bool = true;
                    leptos::logging::log!("{}", v285);
                    let patternInput_1: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v289: leptos::prelude::ReadSignal<bool> = patternInput_1.0.clone();
                    let v291 = Func0::new({
                        let patternInput_1 = patternInput_1.clone();
                        move || Dice_ui::closure363(patternInput_1.1.clone(), ())
                    });
                    {
                        let v295 = {
                            let clo_26 = Func0::new(move || Dice_ui::closure364((), ()));
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v308: string =
                                string(" class=move || \" \".to_owned() + &v295(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v309 = Dice_ui::method330();
                        let v312: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<svg "), v308),
                                            string(">move || { v309() }</"),
                                        ),
                                        string("svg"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v314: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v295(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v309() }</svg> };
                        let v319 = {
                            let clo_27 = Func0::new({
                                let v289 = v289.clone();
                                move || Dice_ui::closure366(v289.clone(), ())
                            });
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v320: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v319(())");
                        let v323: string = append(
                            append(
                                string(" aria-label=\"Settings\""),
                                append(
                                    append(
                                        string(" on:click=move |_| v291()"),
                                        append(
                                            append(append(string(" "), v320), string("")),
                                            string(""),
                                        ),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(""),
                        );
                        let v324 = Dice_ui::method267(v314);
                        let v327: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<button "), v323),
                                            string(">move || { v324() }</"),
                                        ),
                                        string("button"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v329: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v291() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v319(())>move || { v324() }</button> };
                        let v331: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v329);
                        let v333: Array<leptos::prelude::AnyView> =
                            Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                        let v335: leptos::prelude::AnyView =
                            leptos::prelude::CollectView::collect_view(v333);
                        let v339: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v340 = Dice_ui::method426(
                            v331,
                            Dice_ui::method198(Dice_ui::method332(
                                v224.clone(),
                                v267.clone(),
                                v242.clone(),
                                v289.clone(),
                            )),
                        );
                        let v343: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<div "), v339),
                                            string(">move || { v340() }</"),
                                        ),
                                        string("div"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v345: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v340() }</div> };
                        let v347: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v345);
                        let v350: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::SignalGetUntracked::get_untracked(&v224.l0.clone());
                        let v374: leptos::prelude::AnyView = Dice_ui::method188(
                            if leptos::prelude::SignalGet::get(&v350.l1.clone()) {
                                let v355: Array<leptos::prelude::AnyView> =
                                    Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                                let v361: string =
                                    string(" class=\"flex flex-col [position:relative]\"");
                                let v362 = Dice_ui::method434(
                                    leptos::prelude::CollectView::collect_view(v355),
                                    Dice_ui::method198(Dice_ui::method431(v267.clone())),
                                );
                                let v364: string = append(
                                    append(
                                        string("leptos::prelude::view! { "),
                                        append(
                                            append(
                                                append(
                                                    append(string("<div "), v361),
                                                    string(">move || { v362() }</"),
                                                ),
                                                string("div"),
                                            ),
                                            string(">"),
                                        ),
                                    ),
                                    string(" }"),
                                );
                                let v366: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v362() }</div> };
                                leptos::prelude::IntoAny::into_any(v366)
                            } else {
                                let v370: Array<leptos::prelude::AnyView> =
                                    Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                                leptos::prelude::CollectView::collect_view(v370)
                            },
                        );
                        let v377: string = string("v374");
                        let v378: leptos::prelude::AnyView = Dice_ui::method188(v347);
                        let v383: string = append(
                            append(string("vec!["), append(string("v378, "), v377)),
                            string("]"),
                        );
                        let v384: Vec<leptos::prelude::AnyView> = vec![v378, v374];
                        Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v384))
                    }
                }
                _ => Dice_ui::US23::US23_1,
            };
            let v552: leptos::prelude::AnyView = Dice_ui::method188(match &v533 {
                Dice_ui::US23::US23_0(v533_0_0) => {
                    let v537: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v538 = Dice_ui::method439(match &v533 {
                        Dice_ui::US23::US23_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    let v541: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<div "), v537),
                                        string(">move || { v538() }</"),
                                    ),
                                    string("div"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v543: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v538() }</div> };
                    leptos::prelude::IntoAny::into_any(v543)
                }
                _ => {
                    let v547: Array<leptos::prelude::AnyView> =
                        Dice_ui::method177(new_empty::<leptos::prelude::AnyView>());
                    leptos::prelude::CollectView::collect_view(v547)
                }
            });
            let v557: string = string("vec![v552]");
            let v558: Vec<leptos::prelude::AnyView> = vec![v552];
            let v560: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v558);
            let v562: &leptos::prelude::Fragment = &v560;
            leptos::prelude::AnyView::from(*v562.clone())
        }
        pub fn method67(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure54(v0_1.clone(), ())
            })
        }
        pub fn closure523(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Tab");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method442() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure523((), ()))
        }
        pub fn closure525(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_4 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method444(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure525(v0_1.clone(), ())
            })
        }
        pub fn closure526(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Settings");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method445() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure526((), ()))
        }
        pub fn closure527(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_3 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method446(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure527(v0_1.clone(), ())
            })
        }
        pub fn closure528(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Transactions");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method447() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure528((), ()))
        }
        pub fn closure529(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_2 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method448(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure529(v0_1.clone(), ())
            })
        }
        pub fn closure530(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Lists");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method449() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure530((), ()))
        }
        pub fn closure531(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_1(_) = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method450(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure531(v0_1.clone(), ())
            })
        }
        pub fn closure532(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v5: &str = &*string("Dice");
            let v29: std::string::String = String::from(v5);
            let v51: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            let v59: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v57);
            let v61: &leptos::prelude::Fragment = &v59;
            leptos::prelude::AnyView::from(*v61.clone())
        }
        pub fn method451() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure532((), ()))
        }
        pub fn closure524(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1 = Dice_ui::method444(v0_1.clone());
            let v4: string = string(" selected=v1()");
            let v5 = Dice_ui::method445();
            let v8: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<option "), v4),
                                string(">move || { v5() }</"),
                            ),
                            string("option"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Option_, _, _>> =
                leptos::prelude::view! { <option  selected=v1()>move || { v5() }</option> };
            let v12: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v10);
            let v13 = Dice_ui::method446(v0_1.clone());
            let v15: string = string(" selected=v13()");
            let v16 = Dice_ui::method447();
            let v18: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<option "), v15),
                                string(">move || { v16() }</"),
                            ),
                            string("option"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Option_, _, _>> =
                leptos::prelude::view! { <option  selected=v13()>move || { v16() }</option> };
            let v22: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v20);
            let v23 = Dice_ui::method448(v0_1.clone());
            let v25: string = string(" selected=v23()");
            let v26 = Dice_ui::method449();
            let v28: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<option "), v25),
                                string(">move || { v26() }</"),
                            ),
                            string("option"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v30: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Option_, _, _>> =
                leptos::prelude::view! { <option  selected=v23()>move || { v26() }</option> };
            let v32: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v30);
            let v33 = Dice_ui::method450(v0_1);
            let v35: string = string(" selected=v33()");
            let v36 = Dice_ui::method451();
            let v38: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<option "), v35),
                                string(">move || { v36() }</"),
                            ),
                            string("option"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v40: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Option_, _, _>> =
                leptos::prelude::view! { <option  selected=v33()>move || { v36() }</option> };
            let v42: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v40);
            let v43: leptos::prelude::AnyView = Dice_ui::method188(v12);
            let v46: string = string("v43");
            let v47: leptos::prelude::AnyView = Dice_ui::method188(v22);
            let v51: string = append(string("v47, "), v46);
            let v52: leptos::prelude::AnyView = Dice_ui::method188(v32);
            let v55: string = append(string("v52, "), v51);
            let v56: leptos::prelude::AnyView = Dice_ui::method188(v42);
            let v60: string = append(
                append(string("vec!["), append(string("v56, "), v55)),
                string("]"),
            );
            let v61: Vec<leptos::prelude::AnyView> = vec![v56, v52, v47, v43];
            let v63: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v61);
            let v65: &leptos::prelude::Fragment = &v63;
            leptos::prelude::AnyView::from(*v65.clone())
        }
        pub fn method443(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure524(v0_1.clone(), ())
            })
        }
        pub fn closure522(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v5: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v6 = Dice_ui::method442();
            let v9: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<label "), v5), string(">move || { v6() }</")),
                            string("label"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v11: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v6() }</label> };
            let v13: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v11);
            let v17: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v18 = Dice_ui::method443(v0_1);
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<select "), v17),
                                string(">move || { v18() }</"),
                            ),
                            string("select"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Select, _, _>> = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v18() }</select> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v29: string = string("v26");
            let v30: leptos::prelude::AnyView = Dice_ui::method188(v13);
            let v35: string = append(
                append(string("vec!["), append(string("v30, "), v29)),
                string("]"),
            );
            let v36: Vec<leptos::prelude::AnyView> = vec![v30, v26];
            let v38: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v36);
            let v40: &leptos::prelude::Fragment = &v38;
            leptos::prelude::AnyView::from(*v40.clone())
        }
        pub fn method441(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure522(v0_1.clone(), ())
            })
        }
        pub fn closure536(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure537(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                append(append(v0_1(), string("#/")), string("settings")),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure538(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_4 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure539(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_4 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn method456(v0_1: leptos::prelude::Fragment) -> leptos::prelude::Fragment {
            v0_1
        }
        pub fn closure540(
            v0_1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::Fragment = Dice_ui::method456(v0_1);
            let v3: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1);
            let v9: &str = &*string("Settings");
            let v33: std::string::String = String::from(v9);
            let v55: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v33)),
            );
            let v59: string = string("v55");
            let v60: leptos::prelude::AnyView = Dice_ui::method188(v3);
            let v65: string = append(
                append(string("vec!["), append(string("v60, "), v59)),
                string("]"),
            );
            let v66: Vec<leptos::prelude::AnyView> = vec![v60, v55];
            let v68: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v66);
            let v70: &leptos::prelude::Fragment = &v68;
            leptos::prelude::AnyView::from(*v70.clone())
        }
        pub fn method455(v0_1: leptos::prelude::Fragment) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure540(v0_1.clone(), ())
            })
        }
        pub fn closure541(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v6: string =
                string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v7() }</path> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method457() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure541((), ()))
        }
        pub fn closure542(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                append(append(v0_1(), string("#/")), string("transactions")),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure543(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_3 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure544(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_3 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure545(
            v0_1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::Fragment = Dice_ui::method456(v0_1);
            let v3: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1);
            let v9: &str = &*string("Transactions");
            let v33: std::string::String = String::from(v9);
            let v55: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v33)),
            );
            let v59: string = string("v55");
            let v60: leptos::prelude::AnyView = Dice_ui::method188(v3);
            let v65: string = append(
                append(string("vec!["), append(string("v60, "), v59)),
                string("]"),
            );
            let v66: Vec<leptos::prelude::AnyView> = vec![v60, v55];
            let v68: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v66);
            let v70: &leptos::prelude::Fragment = &v68;
            leptos::prelude::AnyView::from(*v70.clone())
        }
        pub fn method458(v0_1: leptos::prelude::Fragment) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure545(v0_1.clone(), ())
            })
        }
        pub fn closure546(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v6: string =
                string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v7 = Dice_ui::method187();
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<path "), v6), string(">move || { v7() }</")),
                            string("path"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v7() }</path> };
            let v14: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v12);
            let v22: string = string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
            let v23 = Dice_ui::method197();
            let v26: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v22),
                                string(">move || { v23() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v28: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v23() }</circle> };
            let v30: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v28);
            let v38: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
            let v39 = Dice_ui::method197();
            let v41: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v38),
                                string(">move || { v39() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v39() }</circle> };
            let v45: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v43);
            let v53: string = string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
            let v54 = Dice_ui::method197();
            let v56: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v53),
                                string(">move || { v54() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v58: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v54() }</circle> };
            let v61: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v58));
            let v64: string = string("v61");
            let v65: leptos::prelude::AnyView = Dice_ui::method188(v45);
            let v69: string = append(string("v65, "), v64);
            let v70: leptos::prelude::AnyView = Dice_ui::method188(v30);
            let v73: string = append(string("v70, "), v69);
            let v74: leptos::prelude::AnyView = Dice_ui::method188(v14);
            let v78: string = append(
                append(string("vec!["), append(string("v74, "), v73)),
                string("]"),
            );
            let v79: Vec<leptos::prelude::AnyView> = vec![v74, v70, v65, v61];
            let v81: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v79);
            let v83: &leptos::prelude::Fragment = &v81;
            leptos::prelude::AnyView::from(*v83.clone())
        }
        pub fn method459() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure546((), ()))
        }
        pub fn closure547(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                append(append(v0_1(), string("#/")), string("lists")),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure548(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_2 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure549(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_2 = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure550(
            v0_1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::Fragment = Dice_ui::method456(v0_1);
            let v3: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1);
            let v9: &str = &*string("Lists");
            let v33: std::string::String = String::from(v9);
            let v55: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v33)),
            );
            let v59: string = string("v55");
            let v60: leptos::prelude::AnyView = Dice_ui::method188(v3);
            let v65: string = append(
                append(string("vec!["), append(string("v60, "), v59)),
                string("]"),
            );
            let v66: Vec<leptos::prelude::AnyView> = vec![v60, v55];
            let v68: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v66);
            let v70: &leptos::prelude::Fragment = &v68;
            leptos::prelude::AnyView::from(*v70.clone())
        }
        pub fn method460(v0_1: leptos::prelude::Fragment) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure550(v0_1.clone(), ())
            })
        }
        pub fn closure552(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            let v4: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2);
            let v6: &leptos::prelude::Fragment = &v4;
            leptos::prelude::AnyView::from(*v6.clone())
        }
        pub fn method462() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure552((), ()))
        }
        pub fn closure551(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v14: string =
                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
            let v15 = Dice_ui::method462();
            let v18: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<rect "), v14),
                                string(">move || { v15() }</"),
                            ),
                            string("rect"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v20: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Rect, _, _>> = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v15() }</rect> };
            let v22: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v20);
            let v30: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
            let v31 = Dice_ui::method197();
            let v34: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v30),
                                string(">move || { v31() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v36: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v31() }</circle> };
            let v38: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v36);
            let v46: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
            let v47 = Dice_ui::method197();
            let v49: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v46),
                                string(">move || { v47() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v51: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v47() }</circle> };
            let v53: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v51);
            let v61: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
            let v62 = Dice_ui::method197();
            let v64: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v61),
                                string(">move || { v62() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v66: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v62() }</circle> };
            let v68: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v66);
            let v76: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
            let v77 = Dice_ui::method197();
            let v79: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v76),
                                string(">move || { v77() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v81: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v77() }</circle> };
            let v83: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v81);
            let v91: string = string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
            let v92 = Dice_ui::method197();
            let v94: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(
                                append(string("<circle "), v91),
                                string(">move || { v92() }</"),
                            ),
                            string("circle"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v96: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Circle, _, _>> = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v92() }</circle> };
            let v99: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v96));
            let v102: string = string("v99");
            let v103: leptos::prelude::AnyView = Dice_ui::method188(v83);
            let v107: string = append(string("v103, "), v102);
            let v108: leptos::prelude::AnyView = Dice_ui::method188(v68);
            let v111: string = append(string("v108, "), v107);
            let v112: leptos::prelude::AnyView = Dice_ui::method188(v53);
            let v115: string = append(string("v112, "), v111);
            let v116: leptos::prelude::AnyView = Dice_ui::method188(v38);
            let v119: string = append(string("v116, "), v115);
            let v120: leptos::prelude::AnyView = Dice_ui::method188(v22);
            let v124: string = append(
                append(string("vec!["), append(string("v120, "), v119)),
                string("]"),
            );
            let v125: Vec<leptos::prelude::AnyView> = vec![v120, v116, v112, v108, v103, v99];
            let v127: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v125);
            let v129: &leptos::prelude::Fragment = &v127;
            leptos::prelude::AnyView::from(*v129.clone())
        }
        pub fn method461() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure551((), ()))
        }
        pub fn closure553(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                append(append(v0_1(), string("#/")), string("dice")),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure554(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_1(_) = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure555(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_1(_) = &leptos::prelude::SignalGet::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure556(
            v0_1: leptos::prelude::Fragment,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::Fragment = Dice_ui::method456(v0_1);
            let v3: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1);
            let v9: &str = &*string("Dice");
            let v33: std::string::String = String::from(v9);
            let v55: leptos::prelude::AnyView = Dice_ui::method188(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v33)),
            );
            let v59: string = string("v55");
            let v60: leptos::prelude::AnyView = Dice_ui::method188(v3);
            let v65: string = append(
                append(string("vec!["), append(string("v60, "), v59)),
                string("]"),
            );
            let v66: Vec<leptos::prelude::AnyView> = vec![v60, v55];
            let v68: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v66);
            let v70: &leptos::prelude::Fragment = &v68;
            leptos::prelude::AnyView::from(*v70.clone())
        }
        pub fn method463(v0_1: leptos::prelude::Fragment) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure556(v0_1.clone(), ())
            })
        }
        pub fn closure535(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            v1: leptos::prelude::Memo<string>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            fn v3() -> string {
                Dice_ui::closure536((), ())
            }
            let v4 = {
                let clo = Func0::from(v3);
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v17: string =
                string(" class=move || \" \".to_owned() + &v4(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v18 = Dice_ui::method330();
            let v21: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<svg "), v17), string(">move || { v18() }</")),
                            string("svg"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v23: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v18() }</svg> };
            let v26: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v23));
            let v30: string = string("vec![v26]");
            let v31: Vec<leptos::prelude::AnyView> = vec![v26];
            let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
            let v34 = Func0::new({
                let v1 = v1.clone();
                move || Dice_ui::closure537(v1.clone(), ())
            });
            {
                let v38 = {
                    let clo_1 = Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Dice_ui::closure538(v0_1.clone(), ())
                    });
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v41 = {
                    let clo_2 = Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Dice_ui::closure539(v0_1.clone(), ())
                    });
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v43: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v41(())");
                let v47: string = append(
                    append(
                        string(" aria-current=move || if v38(()) { \"page\" } else { \"\" }"),
                        append(
                            append(append(string(" "), v43), string(" href=move || v34()")),
                            string(""),
                        ),
                    ),
                    string(""),
                );
                let v48 = Dice_ui::method455(v33);
                let v51: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(append(string("<a "), v47), string(">move || { v48() }</")),
                                string("a"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v53: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v38(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v41(()) href=move || v34()>move || { v48() }</a> };
                let v55: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v53);
                let v57 = {
                    let clo_3 = Func0::from(v3);
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v71: string =
                    string(" class=move || \"text-gray-700 \".to_owned() + &v57(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v72 = Dice_ui::method457();
                let v74: string = append(
                    append(
                        string("leptos::prelude::view! { "),
                        append(
                            append(
                                append(
                                    append(string("<svg "), v71),
                                    string(">move || { v72() }</"),
                                ),
                                string("svg"),
                            ),
                            string(">"),
                        ),
                    ),
                    string(" }"),
                );
                let v76: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v57(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v72() }</svg> };
                let v79: leptos::prelude::AnyView =
                    Dice_ui::method188(leptos::prelude::IntoAny::into_any(v76));
                let v83: string = string("vec![v79]");
                let v84: Vec<leptos::prelude::AnyView> = vec![v79];
                let v86: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v84);
                let v87 = Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure542(v1.clone(), ())
                });
                {
                    let v91 = {
                        let clo_4 = Func0::new({
                            let v0_1 = v0_1.clone();
                            move || Dice_ui::closure543(v0_1.clone(), ())
                        });
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v94 = {
                        let clo_5 = Func0::new({
                            let v0_1 = v0_1.clone();
                            move || Dice_ui::closure544(v0_1.clone(), ())
                        });
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v96: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v94(())");
                    let v100: string = append(
                        append(
                            string(" aria-current=move || if v91(()) { \"page\" } else { \"\" }"),
                            append(
                                append(append(string(" "), v96), string(" href=move || v87()")),
                                string(""),
                            ),
                        ),
                        string(""),
                    );
                    let v101 = Dice_ui::method458(v86);
                    let v103: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<a "), v100),
                                        string(">move || { v101() }</"),
                                    ),
                                    string("a"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v105: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v91(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v94(()) href=move || v87()>move || { v101() }</a> };
                    let v107: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v105);
                    let v109 = {
                        let clo_6 = Func0::from(v3);
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v123: string =
                        string(" class=move || \"text-gray-700 \".to_owned() + &v109(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v124 = Dice_ui::method459();
                    let v126: string = append(
                        append(
                            string("leptos::prelude::view! { "),
                            append(
                                append(
                                    append(
                                        append(string("<svg "), v123),
                                        string(">move || { v124() }</"),
                                    ),
                                    string("svg"),
                                ),
                                string(">"),
                            ),
                        ),
                        string(" }"),
                    );
                    let v128: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v109(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v124() }</svg> };
                    let v131: leptos::prelude::AnyView =
                        Dice_ui::method188(leptos::prelude::IntoAny::into_any(v128));
                    let v135: string = string("vec![v131]");
                    let v136: Vec<leptos::prelude::AnyView> = vec![v131];
                    let v138: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v136);
                    let v139 = Func0::new({
                        let v1 = v1.clone();
                        move || Dice_ui::closure547(v1.clone(), ())
                    });
                    {
                        let v143 = {
                            let clo_7 = Func0::new({
                                let v0_1 = v0_1.clone();
                                move || Dice_ui::closure548(v0_1.clone(), ())
                            });
                            Func1::new({
                                let clo_7 = clo_7.clone();
                                move |arg_7: ()| clo_7()
                            })
                        };
                        let v146 = {
                            let clo_8 = Func0::new({
                                let v0_1 = v0_1.clone();
                                move || Dice_ui::closure549(v0_1.clone(), ())
                            });
                            Func1::new({
                                let clo_8 = clo_8.clone();
                                move |arg_8: ()| clo_8()
                            })
                        };
                        let v148: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v146(())");
                        let v152: string = append(
                            append(
                                string(
                                    " aria-current=move || if v143(()) { \"page\" } else { \"\" }",
                                ),
                                append(
                                    append(
                                        append(string(" "), v148),
                                        string(" href=move || v139()"),
                                    ),
                                    string(""),
                                ),
                            ),
                            string(""),
                        );
                        let v153 = Dice_ui::method460(v138);
                        let v155: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<a "), v152),
                                            string(">move || { v153() }</"),
                                        ),
                                        string("a"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v157: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v143(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v146(()) href=move || v139()>move || { v153() }</a> };
                        let v159: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v157);
                        let v161 = {
                            let clo_9 = Func0::from(v3);
                            Func1::new({
                                let clo_9 = clo_9.clone();
                                move |arg_9: ()| clo_9()
                            })
                        };
                        let v173: string =
                            string(" class=move || \" \".to_owned() + &v161(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v174 = Dice_ui::method461();
                        let v176: string = append(
                            append(
                                string("leptos::prelude::view! { "),
                                append(
                                    append(
                                        append(
                                            append(string("<svg "), v173),
                                            string(">move || { v174() }</"),
                                        ),
                                        string("svg"),
                                    ),
                                    string(">"),
                                ),
                            ),
                            string(" }"),
                        );
                        let v178: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v161(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v174() }</svg> };
                        let v181: leptos::prelude::AnyView =
                            Dice_ui::method188(leptos::prelude::IntoAny::into_any(v178));
                        let v185: string = string("vec![v181]");
                        let v186: Vec<leptos::prelude::AnyView> = vec![v181];
                        let v188: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v186);
                        let v189 = Func0::new({
                            let v1 = v1.clone();
                            move || Dice_ui::closure553(v1.clone(), ())
                        });
                        {
                            let v193 = {
                                let clo_10 = Func0::new({
                                    let v0_1 = v0_1.clone();
                                    move || Dice_ui::closure554(v0_1.clone(), ())
                                });
                                Func1::new({
                                    let clo_10 = clo_10.clone();
                                    move |arg_10: ()| clo_10()
                                })
                            };
                            let v196 = {
                                let clo_11 = Func0::new({
                                    let v0_1 = v0_1.clone();
                                    move || Dice_ui::closure555(v0_1.clone(), ())
                                });
                                Func1::new({
                                    let clo_11 = clo_11.clone();
                                    move |arg_11: ()| clo_11()
                                })
                            };
                            let v198: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v196(())");
                            let v202: string =
                                append(append(string(" aria-current=move || if v193(()) { \"page\" } else { \"\" }"),
                                              append(append(append(string(" "),
                                                                   v198),
                                                            string(" href=move || v189()")),
                                                     string(""))),
                                       string(""));
                            let v203 = Dice_ui::method463(v188);
                            let v205: string = append(
                                append(
                                    string("leptos::prelude::view! { "),
                                    append(
                                        append(
                                            append(
                                                append(string("<a "), v202),
                                                string(">move || { v203() }</"),
                                            ),
                                            string("a"),
                                        ),
                                        string(">"),
                                    ),
                                ),
                                string(" }"),
                            );
                            let v207: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v193(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v196(()) href=move || v189()>move || { v203() }</a> };
                            let v209: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v207);
                            let v210: leptos::prelude::AnyView = Dice_ui::method188(v55);
                            let v213: string = string("v210");
                            let v214: leptos::prelude::AnyView = Dice_ui::method188(v107);
                            let v218: string = append(string("v214, "), v213);
                            let v219: leptos::prelude::AnyView = Dice_ui::method188(v159);
                            let v222: string = append(string("v219, "), v218);
                            let v223: leptos::prelude::AnyView = Dice_ui::method188(v209);
                            let v227: string = append(
                                append(string("vec!["), append(string("v223, "), v222)),
                                string("]"),
                            );
                            let v228: Vec<leptos::prelude::AnyView> = vec![v223, v219, v214, v210];
                            let v230: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v228);
                            let v232: &leptos::prelude::Fragment = &v230;
                            leptos::prelude::AnyView::from(*v232.clone())
                        }
                    }
                }
            }
        }
        pub fn method454(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            v1: leptos::prelude::Memo<string>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure535(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure534(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            v1: leptos::prelude::Memo<string>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v2: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v6: string = append(
                append(
                    string(" aria-label=\"Tabs\""),
                    append(append(append(string(" "), v2), string("")), string("")),
                ),
                string(""),
            );
            let v7 = Dice_ui::method454(v0_1, v1);
            let v10: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<nav "), v6), string(">move || { v7() }</")),
                            string("nav"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v12: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Nav, _, _>> = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v7() }</nav> };
            let v15: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v12));
            let v19: string = string("vec![v15]");
            let v20: Vec<leptos::prelude::AnyView> = vec![v15];
            let v22: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v20);
            let v24: &leptos::prelude::Fragment = &v22;
            leptos::prelude::AnyView::from(*v24.clone())
        }
        pub fn method453(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            v1: leptos::prelude::Memo<string>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure534(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure533(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            v1: leptos::prelude::Memo<string>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v4: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v5 = Dice_ui::method453(v0_1, v1);
            let v8: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v4), string(">move || { v5() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v10: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v5() }</div> };
            let v13: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v10));
            let v17: string = string("vec![v13]");
            let v18: Vec<leptos::prelude::AnyView> = vec![v13];
            let v20: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v18);
            let v22: &leptos::prelude::Fragment = &v20;
            leptos::prelude::AnyView::from(*v22.clone())
        }
        pub fn method452(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            v1: leptos::prelude::Memo<string>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure533(v0_1.clone(), v1.clone(), ())
            })
        }
        pub fn closure521(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v5: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v8 = {
                let clo = Func0::new({
                    let v5 = v5.clone();
                    move || Dice_ui::closure47(v5.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v10: leptos::prelude::Memo<string> = leptos::prelude::Memo::new(move |_| v8(()));
            let v13: string = string(" class=\"hidden\"");
            let v14 = Dice_ui::method441(v0_1.clone());
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v13), string(">move || { v14() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v14() }</div> };
            let v21: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v22 = Dice_ui::method452(v0_1, v10);
            let v24: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v21), string(">move || { v22() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v22() }</div> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v19);
            let v31: leptos::prelude::AnyView = Dice_ui::method188(v28);
            let v34: string = string("v31");
            let v35: leptos::prelude::AnyView = Dice_ui::method188(v30);
            let v40: string = append(
                append(string("vec!["), append(string("v35, "), v34)),
                string("]"),
            );
            let v41: Vec<leptos::prelude::AnyView> = vec![v35, v31];
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: &leptos::prelude::Fragment = &v43;
            leptos::prelude::AnyView::from(*v45.clone())
        }
        pub fn method440(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure521(v0_1.clone(), ())
            })
        }
        pub fn closure53(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v3: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v4 = Dice_ui::method67(v0_1.clone());
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<main "), v3), string(">move || { v4() }</")),
                            string("main"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v4() }</main> };
            let v11: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v9);
            let v13: string = string(" class=\"flex\"");
            let v14 = Dice_ui::method440(v0_1);
            let v17: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v13), string(">move || { v14() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v19: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v14() }</div> };
            let v22: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v19));
            let v25: string = string("v22");
            let v26: leptos::prelude::AnyView = Dice_ui::method188(v11);
            let v31: string = append(
                append(string("vec!["), append(string("v26, "), v25)),
                string("]"),
            );
            let v32: Vec<leptos::prelude::AnyView> = vec![v26, v22];
            let v34: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v32);
            let v36: &leptos::prelude::Fragment = &v34;
            leptos::prelude::AnyView::from(*v36.clone())
        }
        pub fn method66(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure53(v0_1.clone(), ())
            })
        }
        pub fn closure52(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v3: string = append(append(append(string(" "), v1), string("")), string(""));
            let v4 = Dice_ui::method66(v0_1);
            let v7: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v3), string(">move || { v4() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v9: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v4() }</div> };
            let v12: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v9));
            let v16: string = string("vec![v12]");
            let v17: Vec<leptos::prelude::AnyView> = vec![v12];
            let v19: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v17);
            let v21: &leptos::prelude::Fragment = &v19;
            leptos::prelude::AnyView::from(*v21.clone())
        }
        pub fn method65(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure52(v0_1.clone(), ())
            })
        }
        pub fn closure46(unitVar: (), unitVar_1: ()) -> leptos::prelude::AnyView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v4: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v6: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v8: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure47(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::prelude::Memo<string> = leptos::prelude::Memo::new(move |_| v11(()));
            let v15: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v17: LrcPtr<Dice_ui::Heap2> = v15.unwrap();
            let patternInput: (
                leptos::prelude::ReadSignal<Dice_ui::US19>,
                leptos::prelude::WriteSignal<Dice_ui::US19>,
            ) = leptos::prelude::signal(Dice_ui::US19::US19_0);
            let patternInput_1: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v27 = {
                let clo_1 = Func0::new({
                    let patternInput_1 = patternInput_1.clone();
                    let v13 = v13.clone();
                    let v17 = v17.clone();
                    let v4 = v4.clone();
                    let v6 = v6.clone();
                    move || {
                        Dice_ui::closure48(
                            v4.clone(),
                            v6.clone(),
                            v13.clone(),
                            v17.clone(),
                            patternInput_1.1.clone(),
                            patternInput_1.0.clone(),
                            (),
                        )
                    }
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v29: bool = true;
            leptos::prelude::Effect::new(move |_| v27(()));
            let v32 = {
                let clo_2 = Func0::new({
                    let patternInput = patternInput.clone();
                    let v4 = v4.clone();
                    move || Dice_ui::closure49(v4.clone(), patternInput.1.clone(), ())
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v34: bool = true;
            leptos::prelude::Effect::new(move |_| v32(()));
            let v37: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v38 = Dice_ui::method65(patternInput.0.clone());
            let v41: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v37), string(">move || { v38() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            let v43: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v38() }</div> };
            let v46: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v43));
            let v50: string = string("vec![v46]");
            let v51: Vec<leptos::prelude::AnyView> = vec![v46];
            let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
            let v55: &leptos::prelude::Fragment = &v53;
            leptos::prelude::AnyView::from(*v55.clone())
        }
        pub fn method60() -> Func0<leptos::prelude::AnyView> {
            Func0::new(move || Dice_ui::closure46((), ()))
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                append(string("home.render () / router: "), toString(v0_1)),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v11: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method7();
            let v14: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v15: leptos::prelude::Resource<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Dice_ui::US3,
            > = Dice_ui::method14(v11.clone());
            let v18 = {
                let clo = Func0::new({
                    let v15 = v15.clone();
                    let v7 = v7.clone();
                    move || Dice_ui::closure25(v7.clone(), v15.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v20: bool = true;
            leptos::prelude::Effect::new(move |_| v18(()));
            let v23 = {
                let clo_1 = Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure40(v7.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v25: leptos::prelude::Memo<
                std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>,
            > = leptos::prelude::Memo::new(move |_| v23(()));
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v31 = Box::pin(Func1::new({
                let v11 = v11.clone();
                move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure41(v11.clone(), v)
            }));
            let v32: string =
                string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap3>| $0(value.clone())))");
            let v33: leptos::prelude::Action<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::Action::new(*std::sync::Arc::new(
                    move |value: &std::sync::Arc<Heap3>| v31(value.clone()),
                ));
            let v36 = {
                let clo_2 = Func0::new({
                    let patternInput = patternInput.clone();
                    let v25 = v25.clone();
                    let v33 = v33.clone();
                    let v7 = v7.clone();
                    move || {
                        Dice_ui::closure42(
                            v7.clone(),
                            v25.clone(),
                            patternInput.1.clone(),
                            patternInput.0.clone(),
                            v33.clone(),
                            (),
                        )
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v38: bool = true;
            leptos::prelude::Effect::new(move |_| v36(()));
            let v40 = Dice_ui::method59(v7.clone());
            let v45: string = string(" class:dark={move || v40()} class=\"flex flex-1\"");
            let v46 = Dice_ui::method60();
            let v49: string = append(
                append(
                    string("leptos::prelude::view! { "),
                    append(
                        append(
                            append(append(string("<div "), v45), string(">move || { v46() }</")),
                            string("div"),
                        ),
                        string(">"),
                    ),
                ),
                string(" }"),
            );
            leptos::prelude::view! { <div  class:dark={move || v40()} class="flex flex-1">move || { v46() }</div> }
        }
        pub fn method6(
        ) -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method464(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure557(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v4: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v1));
            let v9: string = string("vec![v4]");
            let v10: Vec<leptos::prelude::AnyView> = vec![v4];
            let v13: leptos::prelude::Fragment =
                Dice_ui::method456(leptos::prelude::Fragment::new(v10));
            leptos::prelude::AnyView::from(v13)
        }
        pub fn method465(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure557(v0_1.clone(), ())
            })
        }
        pub fn closure558(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            leptos::prelude::Fragment::new(v2)
        }
        pub fn closure559(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v4: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v1));
            let v9: string = string("vec![v4]");
            let v10: Vec<leptos::prelude::AnyView> = vec![v4];
            let v13: leptos::prelude::Fragment =
                Dice_ui::method456(leptos::prelude::Fragment::new(v10));
            leptos::prelude::AnyView::from(v13)
        }
        pub fn method466(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure559(v0_1.clone(), ())
            })
        }
        pub fn closure560(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v4: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v1));
            let v9: string = string("vec![v4]");
            let v10: Vec<leptos::prelude::AnyView> = vec![v4];
            let v13: leptos::prelude::Fragment =
                Dice_ui::method456(leptos::prelude::Fragment::new(v10));
            leptos::prelude::AnyView::from(v13)
        }
        pub fn method467(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure560(v0_1.clone(), ())
            })
        }
        pub fn closure561(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v4: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v1));
            let v9: string = string("vec![v4]");
            let v10: Vec<leptos::prelude::AnyView> = vec![v4];
            let v13: leptos::prelude::Fragment =
                Dice_ui::method456(leptos::prelude::Fragment::new(v10));
            leptos::prelude::AnyView::from(v13)
        }
        pub fn method468(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure561(v0_1.clone(), ())
            })
        }
        pub fn method469(
            v0_1: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>,
        ) -> leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> {
            v0_1
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method6();
            let v6: &str = &*string("");
            let v50: std::string::String = Dice_ui::method464(String::from(v6));
            let v51 = Dice_ui::method465(v0_1.clone());
            let v61: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router_macro::path!(v50) /> })");
            let v62: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router_macro::path!(v50) /> },
                );
            let v68: &str = &*string("/");
            let v112: std::string::String = Dice_ui::method464(String::from(v68));
            let v113 = Dice_ui::method466(v0_1.clone());
            let v121: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router_macro::path!(v112) /> })");
            let v122: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router_macro::path!(v112) /> },
                );
            let v128: &str = &*string("/*");
            let v172: std::string::String = Dice_ui::method464(String::from(v128));
            let v173 = Dice_ui::method467(v0_1.clone());
            let v181: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router_macro::path!(v172) /> })");
            let v182: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router_macro::path!(v172) /> },
                );
            let v188: &str = &*string("*");
            let v232: std::string::String = Dice_ui::method464(String::from(v188));
            let v233 = Dice_ui::method468(v0_1);
            let v241: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router_macro::path!(v232) /> })");
            let v243: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method469(leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router_macro::path!(v232) /> },
                ));
            let v246: string = string("v243");
            let v247: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method469(v182);
            let v251: string = append(string("v247, "), v246);
            let v252: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method469(v122);
            let v255: string = append(string("v252, "), v251);
            let v256: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method469(v62);
            let v260: string = append(
                append(string("vec!["), append(string("v256, "), v255)),
                string("]"),
            );
            vec![v256, v252, v247, v243]
        }
        pub fn method5() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method470(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method470(Dice_ui::method5());
            let v7: &str = &*string("leptos.routes / fallback");
            let v31: std::string::String = String::from(v7);
            let v52: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v31));
            let v60: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> })");
            let v61 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> },
            );
            let v64: leptos::prelude::AnyView =
                Dice_ui::method188(leptos::prelude::IntoAny::into_any(v61));
            let v68: string = string("vec![v64]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v64];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method4() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure3((), ()))
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::RwSignal<bool> = leptos::prelude::RwSignal::new(false);
            let v8: leptos::prelude::RwSignal<bool> = leptos::prelude::RwSignal::new(false);
            let v14: &str = &*string("");
            let v38: std::string::String = String::from(v14);
            let v59: leptos::prelude::RwSignal<std::string::String> =
                leptos::prelude::RwSignal::new(v38);
            let v65: &str = &*string("i574n.near");
            let v89: std::string::String = String::from(v65);
            let v115: &str = &*string("luckier.near");
            let v160: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v89)),
                LrcPtr::new((true, String::from(v115))),
            ]);
            let v165: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v160.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v168: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v59,
                l3: leptos::prelude::RwSignal::new(v165),
            });
            let v170: leptos::prelude::RwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::RwSignal::new(v168);
            let v172: std::collections::HashMap<
                std::string::String,
                leptos::prelude::RwSignal<bool>,
            > = std::collections::HashMap::new();
            let v175: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v170,
                l1: leptos::prelude::RwSignal::new(v172),
            });
            let v177: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v175);
            let v178 = Dice_ui::method4();
            let v183: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> })");
            let v184 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> },
            );
            leptos::prelude::IntoAny::into_any(v184)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure562(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method471() -> Func0<()> {
            Func0::new(move || Dice_ui::closure562((), ()))
        }
        pub fn method472(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(append(string("main / args: "), toString(v0_1)), string(""));
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v21: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v28: string = append(
                    append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v21.clone()),
                    ),
                    string(""),
                );
                let v30: bool = true;
                leptos::logging::log!("{}", v28);
                if let Dice_ui::US0::US0_0(v21_0_0) = &v21 {
                    let v32: string = Dice_ui::method1();
                    let v37: &str = &*v32;
                    let v57: web_sys::HtmlElement = Dice_ui::method2(match &v21 {
                        Dice_ui::US0::US0_0(x) => x.clone(),
                        _ => unreachable!(),
                    });
                    v57.set_inner_html(v37);
                    Dice_ui::method3()
                } else {
                    let v59 = Dice_ui::method471();
                    let v62: Box<dyn Fn()> = Dice_ui::method472(Box::new(move || v59()));
                    let v64: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v62);
                    let v66: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v64);
                    let v68: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v66);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v68)
                        .unwrap();
                    v64.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_75bc3c80::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_6140596b;
pub use module_6140596b::*;
#[path = "../../deps/polyglot/lib/spiral/async__wasm.rs"]
mod module_daedefb8;
pub use module_daedefb8::*;
#[path = "../../deps/polyglot/lib/spiral/common_wasm.rs"]
mod module_70286a4c;
pub use module_70286a4c::*;
#[path = "../../deps/polyglot/lib/spiral/crypto_wasm.rs"]
mod module_4a98a962;
pub use module_4a98a962::*;
#[path = "../../deps/polyglot/lib/spiral/date_time_wasm.rs"]
mod module_94ca555f;
pub use module_94ca555f::*;
#[path = "../../deps/polyglot/lib/spiral/file_system_wasm.rs"]
mod module_b697ea1d;
pub use module_b697ea1d::*;
#[path = "../../deps/polyglot/lib/spiral/lib_wasm.rs"]
mod module_ed8da8a6;
pub use module_ed8da8a6::*;
#[path = "../../deps/polyglot/lib/spiral/networking_wasm.rs"]
mod module_9dd8007f;
pub use module_9dd8007f::*;
#[path = "../../deps/polyglot/lib/spiral/platform_wasm.rs"]
mod module_4c4781e;
pub use module_4c4781e::*;
#[path = "../../deps/polyglot/lib/spiral/runtime_wasm.rs"]
mod module_c40559dd;
pub use module_c40559dd::*;
#[path = "../../deps/polyglot/lib/spiral/sm_wasm.rs"]
mod module_fc92da1f;
pub use module_fc92da1f::*;
#[path = "../../deps/polyglot/lib/spiral/threading_wasm.rs"]
mod module_af40e92f;
pub use module_af40e92f::*;
#[path = "../../deps/polyglot/lib/spiral/trace_wasm.rs"]
mod module_981750e0;
pub use module_981750e0::*;
pub mod Polyglot {
    // pub use crate::module_6140596b::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
