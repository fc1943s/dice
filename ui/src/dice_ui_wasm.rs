#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_75bc3c80 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::getZero;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Hash,
            PartialEq,
            PartialOrd,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::RwSignal<bool>,
            pub l1: leptos::prelude::RwSignal<bool>,
            pub l2: leptos::prelude::RwSignal<std::string::String>,
            pub l3: leptos::prelude::RwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::RwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::RwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US2 {
            US2_0,
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(LrcPtr<Dice_ui::Heap3>),
            US3_1,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(std::sync::Arc<rexie::Rexie>),
            US4_1,
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(wasm_bindgen::JsValue),
            US6_1,
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(serde_json::Value),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US8_1(std::string::String),
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Dice_ui::US3),
            US9_1,
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Option<web_sys::Storage>),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(web_sys::Storage),
            US12_1,
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(Dice_ui::US12),
            US11_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Option<std::string::String>),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(std::string::String),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(Dice_ui::US15),
            US14_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(Dice_ui::US15),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US17 {
            US17_0(leptos::prelude::RwSignal<bool>),
            US17_1,
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0(bool),
            US18_1,
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US20 {
            US20_0,
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US19 {
            US19_0,
            US19_1(Dice_ui::US20),
            US19_2,
            US19_3,
            US19_4,
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US21 {
            US21_0(leptos_router::location::Url),
            US21_1(std::string::String),
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US22 {
            US22_0(Dice_ui::US19),
            US22_1,
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US23 {
            US23_0(leptos::prelude::Fragment),
            US23_1,
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US24 {
            US24_0,
            US24_1,
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Vec<string>>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US25_1(std::string::String),
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US26 {
            US26_0(LrcPtr<Dice_ui::Heap4>),
            US26_1,
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US27 {
            US27_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US27_1,
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Vec<Dice_ui::US26>),
            US29_1(std::string::String),
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Dice_ui::US29),
            US28_1,
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US32 {
            US32_0(string),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US31 {
            US31_0(Dice_ui::US32),
            US31_1(std::string::String),
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1,
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Dice_ui::US26),
            US33_1,
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Option<string>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Vec<()>),
            US35_1(std::string::String),
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US37 {
            US37_0(Array<Dice_ui::US26>),
            US37_1(std::string::String),
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Dice_ui::US37),
            US36_1,
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US38 {
            US38_0(Result<Vec<Option<string>>, std::string::String>),
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Vec<Option<string>>),
            US40_1(std::string::String),
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Dice_ui::US40),
            US39_1,
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US42 {
            US42_0(Vec<Dice_ui::US32>),
            US42_1(std::string::String),
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Dice_ui::US42),
            US41_1,
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US43 {
            US43_0(Dice_ui::US32),
            US43_1,
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US46_1,
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(Dice_ui::US46),
            US45_1(std::string::String),
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US48_1,
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Dice_ui::US48),
            US47_1(std::string::String),
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US50_1,
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Dice_ui::US50),
            US49_1(std::string::String),
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub struct Mut3 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US52>,
        }
        impl core::fmt::Display for Mut3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US56 {
            US56_0(Array<(string, Dice_ui::US24, string, bool, bool)>),
            US56_1,
        }
        impl core::fmt::Display for US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US55 {
            US55_0(Dice_ui::US56),
            US55_1(std::string::String),
        }
        impl core::fmt::Display for US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Option<Array<(string, Dice_ui::US24, string, bool, bool)>>),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US58_1,
        }
        impl core::fmt::Display for US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(Dice_ui::US15),
            US59_1(std::string::String),
        }
        impl core::fmt::Display for US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(Dice_ui::US58),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(crate::model::near::rpc::RpcResponse),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US62_1(std::string::String),
        }
        impl core::fmt::Display for US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(Dice_ui::US60),
            US63_1,
        }
        impl core::fmt::Display for US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US64_1(std::string::String),
        }
        impl core::fmt::Display for US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US65_1,
        }
        impl core::fmt::Display for US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(leptos::prelude::Memo<Dice_ui::US32>),
            US66_1,
        }
        impl core::fmt::Display for US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            ),
            US67_1,
        }
        impl core::fmt::Display for US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US68_1,
        }
        impl core::fmt::Display for US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US69 {
            US69_0(chrono::DateTime<chrono::Utc>),
            US69_1,
        }
        impl core::fmt::Display for US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US70 {
            US70_0(string),
            US70_1(string),
        }
        impl core::fmt::Display for US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut4 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US32>,
        }
        impl core::fmt::Display for Mut4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US71 {
            US71_0(std::string::String),
            US71_1(std::string::String),
        }
        impl core::fmt::Display for US71 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), unitVar_1: ()) -> Dice_ui::US2 {
            Dice_ui::US2::US2_1
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method7() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure7((), v))
        }
        pub fn method8(
            v0_1: Result<rexie::Rexie, std::string::String>,
        ) -> Result<rexie::Rexie, std::string::String> {
            v0_1
        }
        pub fn closure8(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method9() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure8((), v))
        }
        pub fn method10(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if (v2) <= (v0_1) {
                v1.clone()
            } else {
                let v8: f64 = (v0_1 as f64) / 2.0_f64;
                let v12: i64 = v8.ceil() as i64;
                let v18: i64 = v8.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some(((v12) - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some(((v2) - (v18)) as i32), Some(((v2) - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn method11(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn method12(
            v0_1: std::pin::Pin<
                Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
            >,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>
        {
            v0_1
        }
        pub fn method6() -> leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> {
            let v0_1: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || Func0::new(move || Dice_ui::closure6((), ()))(),
                |x| async move {
                    //;
                    {
                        let v3: Dice_ui::US2 = x;
                        let v5: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v8: bool = true;
                            leptos::logging::log!(
                                "{}",
                                string(
                                    "state_core.use_database (2) / database create_local_resource"
                                )
                            );
                            let v11: bool = true;
                            leptos::logging::log!("{}", string("state_core.build_database ()"));
                            let v13: bool = true;
                            let __future_init = Box::pin(async {
                                //;
                                let v14: string =
                    string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v15: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v17: Result<rexie::Rexie, rexie::Error> = v15.await;
                                let v18 = Dice_ui::method7();
                                let v33: Result<rexie::Rexie, std::string::String> =
                                    Dice_ui::method8(v17.map_err(|x| v18(x)));
                                let v36: string = string("}");
                                let v42: bool = true;
                                let v37 = v33;
                                let v52: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; v37 "), (v36))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v53: bool = true;
                                v37
                            }); // rust.fix_closure';
                            let v55 = __future_init;
                            let v57: std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<rexie::Rexie, std::string::String>,
                                    >,
                                >,
                            > = v55;
                            let v59: Result<rexie::Rexie, std::string::String> = v57.await;
                            let v64: rexie::Rexie = v59.unwrap();
                            let v75: rexie::Rexie = (Dice_ui::method9())(v64);
                            let v77: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v75);
                            let v83: string =
                    Dice_ui::method10(200_i64,
                                      append((append(string("state_core.use_database (3) / database create_local_resource / result: "),
                                                     sprintf!("{:?}",
                                                              v77.clone()))),
                                             string("")));
                            let v85: bool = true;
                            leptos::logging::log!("{}", v83);
                            let v86: std::sync::Arc<rexie::Rexie> = Dice_ui::method11(v77);
                            let v87: string = string("}");
                            let v93: bool = true;
                            let v88 = v86;
                            let v103: string = append(
                                (append(
                                    (append((append(string("true; v88 "), (v87))), string("); "))),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v104: bool = true;
                            v88
                        }); // rust.fix_closure';
                        let v106 = __future_init;
                        let v109: std::pin::Pin<
                            Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                        > = Dice_ui::method12(v106);
                        let v111: std::sync::Arc<rexie::Rexie> = v109.await;
                        let v113: string = string("}}");
                        let v115: string = string("{");
                        let v121: bool = true;
                        let v116 = v111;
                        let v131: string = append(
                            (append(
                                (append((append(string("true; v116 "), (v113))), string("); "))),
                                (v115),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v132: bool = true;
                        v116
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn closure10(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
                                            */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v7: */
                std::sync::Arc<rexie::Rexie>, /* = getZero();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v13: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v15: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v17: &std::sync::Arc<rexie::Rexie> = &v15.0;
                    let v19: &std::sync::Arc<rexie::Rexie> = &v13.0;
                    let v21: bool = std::sync::Arc::ptr_eq(v19, v17);
                    v21 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v2: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::RwSignal::get(&v0_1);
            let v4: bool = true;
            let _optionm_map_ = v2.map(|x| {
                //;
                let v6: std::sync::Arc<rexie::Rexie> = x;
                let v9: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v6);
                let v11: bool = true;
                v9
            });
            _optionm_map_
        }
        pub fn closure11(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method14() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US4> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure11((), v))
        }
        pub fn closure12(unitVar: (), v0_1: string) -> std::string::String {
            let v5: &str = &*v0_1;
            String::from(v5)
        }
        pub fn method15(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method16() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn method17() -> string {
            string("store")
        }
        pub fn closure14(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method18() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure14((), v))
        }
        pub fn method19() -> string {
            string("core-state-heap")
        }
        pub fn closure15(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method20() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method21() -> Func1<wasm_bindgen::JsValue, Dice_ui::US6> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure16((), v))
        }
        pub fn method22(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method23() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method24() -> Func1<serde_json::Value, Dice_ui::US7> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure18((), v))
        }
        pub fn method25(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure19(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method26() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method27() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure20((), v))
        }
        pub fn method28(
            v0_1: Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String>,
        ) -> Result<Option<Option<LrcPtr<Dice_ui::Heap3>>>, std::string::String> {
            v0_1
        }
        pub fn closure21(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method29() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US8> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            Dice_ui::US8::US8_1(v0_1)
        }
        pub fn method30() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure22((), v))
        }
        pub fn closure23(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method31() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US5> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method32() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US3> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure24((), v))
        }
        pub fn method33(v0_1: Dice_ui::US3) -> Dice_ui::US3 {
            v0_1
        }
        pub fn method34(
            v0_1: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US3>>> {
            v0_1
        }
        pub fn method13(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
        ) -> leptos::prelude::Resource<
            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            Dice_ui::US3,
        > {
            let v1: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        move || Dice_ui::closure9(v0_1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let v4: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = x;
                        let v6: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v10: string =
                    append((append(string("state_core.use_core_database (2) / core_state_heap create_local_resource / database: "),
                                   sprintf!("{:?}", v4.clone()))),
                           string(""));
                            let v12: bool = true;
                            leptos::logging::log!("{}", v10);
                            let v14: bool = true;
                            let _optionm_map_ = v4.map(|x| {
                                //;
                                let v16: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                                let v18: std::sync::Arc<rexie::Rexie> = v16.0;
                                let v20: bool = true;
                                v18
                            });
                            let v22: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                            let v36: Dice_ui::US4 =
                                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v22));
                            let v345: Dice_ui::US5 = match &v36 {
                                Dice_ui::US4::US4_0(v36_0_0) => {
                                    let v42: string =
                                        string("state_core.get_data () / id: core-state-heap");
                                    let v44: bool = true;
                                    leptos::logging::log!("{}", v42);
                                    let v46: bool = true;
                                    let __future_init = Box::pin(async {
                                        //;
                                        let v48: Array<string> = new_array(&[string("store")]);
                                        let v50: Vec<string> = v48.to_vec();
                                        let v53: Vec<std::string::String> = v50
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new(move |v: string| {
                                                    Dice_ui::closure12((), v)
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v54: std::sync::Arc<rexie::Rexie> = Dice_ui::method15(
                                            match &v36 {
                                                Dice_ui::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v56: Result<rexie::Transaction, rexie::Error> =
                                            v54.transaction(&v53, rexie::TransactionMode::ReadOnly);
                                        let v57 = Dice_ui::method16();
                                        let v62: Result<rexie::Transaction, std::string::String> =
                                            v56.map_err(|x| v57(x));
                                        let v73: rexie::Transaction = v62?;
                                        let v74: string = Dice_ui::method17();
                                        let v79: &str = &*v74;
                                        let v100: Result<rexie::Store, rexie::Error> =
                                            v73.store(v79);
                                        let v101 = Dice_ui::method18();
                                        let v106: Result<rexie::Store, std::string::String> =
                                            v100.map_err(|x| v101(x));
                                        let v117: rexie::Store = v106?;
                                        let v118: string = Dice_ui::method19();
                                        let v123: &str = &*v118;
                                        let v144: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v123);
                                        let v146: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v117, v144));
                                        let v148: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v146.await;
                                        let v149 = Dice_ui::method20();
                                        let v154: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v148.map_err(|x| v149(x));
                                        let v165: Option<wasm_bindgen::JsValue> = v154?;
                                        let v179: Dice_ui::US6 = defaultValue(
                                            Dice_ui::US6::US6_1,
                                            map(Dice_ui::method21(), v165),
                                        );
                                        let v279: Dice_ui::US5 = match &v179 {
                                            Dice_ui::US6::US6_0(v179_0_0) => {
                                                let v184: wasm_bindgen::JsValue = Dice_ui::method22(
                                                    match &v179 {
                                                        Dice_ui::US6::US6_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v186: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v184);
                                                let v187 = Dice_ui::method23();
                                                let v192: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v186.map_err(|x| v187(x));
                                                let v203: Option<serde_json::Value> = v192?;
                                                let v217: Dice_ui::US7 = defaultValue(
                                                    Dice_ui::US7::US7_1,
                                                    map(Dice_ui::method24(), v203),
                                                );
                                                match &v217 {
                                                    Dice_ui::US7::US7_0(v217_0_0) => {
                                                        let v222: serde_json::Value =
                                                            Dice_ui::method25(
                                                                match &v217 {
                                                                    Dice_ui::US7::US7_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v224: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v222);
                                                        let v225 = Dice_ui::method26();
                                                        let v230: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v224.map_err(|x| v225(x));
                                                        let v241: Vec<u8> = v230?;
                                                        let v243: Array<u8> =
                                                    fable_library_rust::NativeArray_::array_from(v241.clone());
                                                        let v245: string =
                                                    append((append(string("state_core.get_data () / data_len: "),
                                                                   (toString(get_Count(v243.clone()))))),
                                                           string(""));
                                                        let v247: bool = true;
                                                        leptos::logging::log!("{}", v245);
                                                        let v249: Vec<u8> = v243.to_vec();
                                                        let v251: &[u8] = v249.as_slice();
                                                        let v253: bool = true;
                                                        let mut v251 = v251;
                                                        let v255: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v251,
                                                        );
                                                        let v256 = Dice_ui::method27();
                                                        let v261: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v255.map_err(|x| v256(x));
                                                        Dice_ui::US5::US5_0(v261?)
                                                    }
                                                    _ => Dice_ui::US5::US5_1,
                                                }
                                            }
                                            _ => Dice_ui::US5::US5_1,
                                        };
                                        let v288: Result<
                                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            std::string::String,
                                        > = Dice_ui::method28(Ok::<
                                            Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            std::string::String,
                                        >(
                                            match &v279 {
                                            Dice_ui::US5::US5_0(v279_0_0) => Some(
                                                match &v279 {
                                                    Dice_ui::US5::US5_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        }
                                        ));
                                        let v291: string = string("}");
                                        let v297: bool = true;
                                        let v292 = v288;
                                        let v307: string = append(
                                            (append(
                                                (append(
                                                    (append(string("true; v292 "), (v291))),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v308: bool = true;
                                        v292
                                    }); // rust.fix_closure';
                                    let v310 = __future_init;
                                    let v312: std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    > = v310;
                                    let v314: Result<
                                        Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                        std::string::String,
                                    > = v312.await;
                                    let v315 = Dice_ui::method29();
                                    let v316 = Dice_ui::method30();
                                    let v317: Dice_ui::US8 = match &v314 {
                                        Err(v314_1_0) => v316(v314_1_0.clone()),
                                        Ok(v314_0_0) => v315(v314_0_0.clone()),
                                    };
                                    match &v317 {
                                        Dice_ui::US8::US8_0(v317_0_0) => defaultValue(
                                            Dice_ui::US5::US5_1,
                                            map(Dice_ui::method31(), v317_0_0.clone()),
                                        ),
                                        Dice_ui::US8::US8_1(v317_1_0) => {
                                            let v337: string =
                                        append((append(string("state_core.use_core_database (3) / error: "),
                                                       (toString(v317_1_0.clone())))),
                                               string(""));
                                            let v339: bool = true;
                                            leptos::logging::log!("{}", v337);
                                            Dice_ui::US5::US5_1
                                        }
                                    }
                                }
                                _ => Dice_ui::US5::US5_1,
                            };
                            let v367: Dice_ui::US9 = match &v345 {
                                Dice_ui::US5::US5_0(v345_0_0) => Dice_ui::US9::US9_0(defaultValue(
                                    Dice_ui::US3::US3_1,
                                    map(
                                        Dice_ui::method32(),
                                        match &v345 {
                                            Dice_ui::US5::US5_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                )),
                                _ => Dice_ui::US9::US9_1,
                            };
                            let v375: Dice_ui::US3 =
                                Dice_ui::method33(if let Dice_ui::US9::US9_0(v367_0_0) = &v367 {
                                    let v368: Dice_ui::US3 = v367_0_0.clone();
                                    if let Dice_ui::US3::US3_0(v368_0_0) = &v368 {
                                        Dice_ui::US3::US3_0(v368_0_0.clone())
                                    } else {
                                        Dice_ui::US3::US3_1
                                    }
                                } else {
                                    Dice_ui::US3::US3_1
                                });
                            let v378: string = string("}");
                            let v384: bool = true;
                            let v379 = v375;
                            let v394: string = append(
                                (append(
                                    (append(
                                        (append(string("true; v379 "), (v378))),
                                        string("); "),
                                    )),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v395: bool = true;
                            v379
                        }); // rust.fix_closure';
                        let v397 = __future_init;
                        let v400: std::pin::Pin<
                            Box<dyn std::future::Future<Output = Dice_ui::US3>>,
                        > = Dice_ui::method34(v397);
                        let v402: Dice_ui::US3 = v400.await;
                        let v404: string = string("}}");
                        let v406: string = string("{");
                        let v412: bool = true;
                        let v407 = v402;
                        let v422: string = append(
                            (append(
                                (append((append(string("true; v407 "), (v404))), string("); "))),
                                (v406),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v423: bool = true;
                        v407
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn method35() -> web_sys::Window {
            leptos::prelude::window()
        }
        pub fn method36(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure26(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US10 {
            Dice_ui::US10::US10_0(v0_1)
        }
        pub fn method37() -> Func1<Option<web_sys::Storage>, Dice_ui::US10> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure26((), v))
        }
        pub fn closure27(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US10 {
            Dice_ui::US10::US10_1(v0_1)
        }
        pub fn method38() -> Func1<wasm_bindgen::JsValue, Dice_ui::US10> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure27((), v))
        }
        pub fn closure28(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method39() -> Func1<web_sys::Storage, Dice_ui::US12> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure28((), v))
        }
        pub fn closure29(unitVar: (), v0_1: Dice_ui::US3) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method40() -> Func1<Dice_ui::US3, Dice_ui::US9> {
            Func1::new(move |v: Dice_ui::US3| Dice_ui::closure29((), v))
        }
        pub fn method41(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method42() -> string {
            string("core-state-heap")
        }
        pub fn closure30(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US13 {
            Dice_ui::US13::US13_0(v0_1)
        }
        pub fn method43() -> Func1<Option<std::string::String>, Dice_ui::US13> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure30((), v))
        }
        pub fn closure31(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US13 {
            Dice_ui::US13::US13_1(v0_1)
        }
        pub fn method44() -> Func1<wasm_bindgen::JsValue, Dice_ui::US13> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure31((), v))
        }
        pub fn method45(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure32(unitVar: (), v0_1: std::string::String) -> Dice_ui::US15 {
            Dice_ui::US15::US15_0(v0_1)
        }
        pub fn method46() -> Func1<std::string::String, Dice_ui::US15> {
            Func1::new(move |v: std::string::String| Dice_ui::closure32((), v))
        }
        pub fn method48(v0_1: string) -> string {
            v0_1
        }
        pub fn closure34(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method49() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure34((), v))
        }
        pub fn closure33(unitVar: (), v0_1: std::string::String) -> Dice_ui::US3 {
            let v3: string = Dice_ui::method48(fable_library_rust::String_::fromString(v0_1));
            let v8: &str = &*v3;
            let v29: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v8);
            let v30 = Dice_ui::method49();
            let v35: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v29.map_err(|x| v30(x));
            let v49: Option<LrcPtr<Dice_ui::Heap3>> = v35.ok();
            defaultValue(Dice_ui::US3::US3_1, map(Dice_ui::method32(), v49))
        }
        pub fn method47() -> Func1<std::string::String, Dice_ui::US3> {
            Func1::new(move |v: std::string::String| Dice_ui::closure33((), v))
        }
        pub fn closure36(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure37(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l1
        }
        pub fn closure38(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l2.clone()
        }
        pub fn closure39(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure35(v0_1: LrcPtr<Dice_ui::Heap2>, v1: LrcPtr<Dice_ui::Heap3>, unitVar: ()) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v7: bool = true;
            leptos::prelude::RwSignal::update(
                &v4.l0.clone(),
                |x: &mut /*;
                 let v8: */
                 bool /* = getZero();
                      let v13: bool =
                          */| {
                    *x = Func1::new({
                        let v1 = v1.clone();
                        move |v: bool| Dice_ui::closure36(v1.clone(), v)
                    })(x.clone())
                },
            ); //;
            let v16: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v19: bool = true;
            leptos::prelude::RwSignal::update(
                &v16.l1.clone(),
                |x: &mut /*;
                 let v20: */
                 bool /* = getZero();
                      let v25: bool =
                          */| {
                    *x = Func1::new({
                        let v1 = v1.clone();
                        move |v_1: bool| Dice_ui::closure37(v1.clone(), v_1)
                    })(x.clone())
                },
            ); //;
            let v28: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v31: bool = true;
            leptos::prelude::RwSignal::update(
                &v28.l2.clone(),
                |x: &mut /*;
                 let v32: */
                 std::string::String /* = getZero();
                                     let v37: bool =
                                         */| {
                    *x = Func1::new({
                        let v1 = v1.clone();
                        move |v_2: std::string::String| Dice_ui::closure38(v1.clone(), v_2)
                    })(x.clone())
                },
            ); //;
            let v40: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v43: bool = true;
            leptos::prelude::RwSignal::update(
                &v40.l3.clone(),
                |x: &mut /*;
                 let v44: */
                 LrcPtr<Dice_ui::Heap0> /* = getZero();
                                        let v49: bool =
                                            */| {
                    *x = Func1::new({
                        let v1 = v1.clone();
                        move |v_3: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure39(v1.clone(), v_3)
                    })(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure25(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Resource<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Dice_ui::US3,
            >,
            unitVar: (),
        ) {
            let v4: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (4) / effect core_state_heap / ##1")
            );
            let v6: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method36(Dice_ui::method35());
            let v7 = Dice_ui::method37();
            let v8 = Dice_ui::method38();
            let v9: Dice_ui::US10 = match &v6 {
                Err(v6_1_0) => v8(v6_1_0.clone()),
                Ok(v6_0_0) => v7(v6_0_0.clone()),
            };
            let v32: Dice_ui::US11 = match &v9 {
                Dice_ui::US10::US10_0(v9_0_0) => Dice_ui::US11::US11_0(defaultValue(
                    Dice_ui::US12::US12_1,
                    map(Dice_ui::method39(), v9_0_0.clone()),
                )),
                Dice_ui::US10::US10_1(v9_1_0) => Dice_ui::US11::US11_1(v9_1_0.clone()),
            };
            if let Dice_ui::US11::US11_0(v32_0_0) = &v32 {
                let v33: Dice_ui::US12 = v32_0_0.clone();
                if let Dice_ui::US12::US12_0(v33_0_0) = &v33 {
                    let v34: web_sys::Storage = v33_0_0.clone();
                    let v36: Option<Dice_ui::US3> = leptos::prelude::RwSignal::get(&v1);
                    let v50: Dice_ui::US9 =
                        defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method40(), v36));
                    let v57: string =
                        append((append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                       sprintf!("{:?}", v50.clone()))),
                               string(""));
                    let v59: bool = true;
                    leptos::logging::log!("{}", v57);
                    let v438: Dice_ui::US3 = if let Dice_ui::US9::US9_0(v50_0_0) = &v50 {
                        let v60: Dice_ui::US3 = v50_0_0.clone();
                        if let Dice_ui::US3::US3_0(v60_0_0) = &v60 {
                            Dice_ui::US3::US3_0(v60_0_0.clone())
                        } else {
                            let v63: web_sys::Storage = Dice_ui::method41(v34.clone());
                            let v64: string = Dice_ui::method42();
                            let v69: &str = &*v64;
                            let v90: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v63, v69);
                            let v91 = Dice_ui::method43();
                            let v92 = Dice_ui::method44();
                            let v93: Dice_ui::US13 = match &v90 {
                                Err(v90_1_0) => v92(v90_1_0.clone()),
                                Ok(v90_0_0) => v91(v90_0_0.clone()),
                            };
                            let v119: Dice_ui::US14 = match &v93 {
                                Dice_ui::US13::US13_0(v93_0_0) => {
                                    let v95: Option<std::string::String> =
                                        Dice_ui::method45(v93_0_0.clone());
                                    let v97: Option<std::string::String> =
                                        serde_json::from_value(v95.into()).unwrap();
                                    Dice_ui::US14::US14_0(defaultValue(
                                        Dice_ui::US15::US15_1,
                                        map(Dice_ui::method46(), v97),
                                    ))
                                }
                                Dice_ui::US13::US13_1(v93_1_0) => {
                                    Dice_ui::US14::US14_1(v93_1_0.clone())
                                }
                            };
                            let v125: Dice_ui::US16 = match &v119 {
                                Dice_ui::US14::US14_0(v119_0_0) => {
                                    Dice_ui::US16::US16_0(v119_0_0.clone())
                                }
                                _ => Dice_ui::US16::US16_1,
                            };
                            let v132: Dice_ui::US15 = if let Dice_ui::US16::US16_0(v125_0_0) = &v125
                            {
                                let v126: Dice_ui::US15 = v125_0_0.clone();
                                if let Dice_ui::US15::US15_0(v126_0_0) = &v126 {
                                    Dice_ui::US15::US15_0(v126_0_0.clone())
                                } else {
                                    Dice_ui::US15::US15_1
                                }
                            } else {
                                Dice_ui::US15::US15_1
                            };
                            let v139: Option<std::string::String> = match &v132 {
                                Dice_ui::US15::US15_0(v132_0_0) => Some(
                                    match &v132 {
                                        Dice_ui::US15::US15_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<std::string::String>,
                            };
                            let v141: Option<Dice_ui::US3> = map(Dice_ui::method47(), v139);
                            let v239: Dice_ui::US9 =
                                defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method40(), v141));
                            if let Dice_ui::US9::US9_0(v239_0_0) = &v239 {
                                let v243: Dice_ui::US3 = v239_0_0.clone();
                                if let Dice_ui::US3::US3_0(v243_0_0) = &v243 {
                                    Dice_ui::US3::US3_0(v243_0_0.clone())
                                } else {
                                    Dice_ui::US3::US3_1
                                }
                            } else {
                                Dice_ui::US3::US3_1
                            }
                        }
                    } else {
                        let v251: web_sys::Storage = Dice_ui::method41(v34);
                        let v252: string = Dice_ui::method42();
                        let v257: &str = &*v252;
                        let v278: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                            web_sys::Storage::get_item(&v251, v257);
                        let v279 = Dice_ui::method43();
                        let v280 = Dice_ui::method44();
                        let v281: Dice_ui::US13 = match &v278 {
                            Err(v278_1_0) => v280(v278_1_0.clone()),
                            Ok(v278_0_0) => v279(v278_0_0.clone()),
                        };
                        let v307: Dice_ui::US14 = match &v281 {
                            Dice_ui::US13::US13_0(v281_0_0) => {
                                let v283: Option<std::string::String> =
                                    Dice_ui::method45(v281_0_0.clone());
                                let v285: Option<std::string::String> =
                                    serde_json::from_value(v283.into()).unwrap();
                                Dice_ui::US14::US14_0(defaultValue(
                                    Dice_ui::US15::US15_1,
                                    map(Dice_ui::method46(), v285),
                                ))
                            }
                            Dice_ui::US13::US13_1(v281_1_0) => {
                                Dice_ui::US14::US14_1(v281_1_0.clone())
                            }
                        };
                        let v313: Dice_ui::US16 = match &v307 {
                            Dice_ui::US14::US14_0(v307_0_0) => {
                                Dice_ui::US16::US16_0(v307_0_0.clone())
                            }
                            _ => Dice_ui::US16::US16_1,
                        };
                        let v320: Dice_ui::US15 = if let Dice_ui::US16::US16_0(v313_0_0) = &v313 {
                            let v314: Dice_ui::US15 = v313_0_0.clone();
                            if let Dice_ui::US15::US15_0(v314_0_0) = &v314 {
                                Dice_ui::US15::US15_0(v314_0_0.clone())
                            } else {
                                Dice_ui::US15::US15_1
                            }
                        } else {
                            Dice_ui::US15::US15_1
                        };
                        let v327: Option<std::string::String> = match &v320 {
                            Dice_ui::US15::US15_0(v320_0_0) => Some(
                                match &v320 {
                                    Dice_ui::US15::US15_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => None::<std::string::String>,
                        };
                        let v329: Option<Dice_ui::US3> = map(Dice_ui::method47(), v327);
                        let v427: Dice_ui::US9 =
                            defaultValue(Dice_ui::US9::US9_1, map(Dice_ui::method40(), v329));
                        if let Dice_ui::US9::US9_0(v427_0_0) = &v427 {
                            let v431: Dice_ui::US3 = v427_0_0.clone();
                            if let Dice_ui::US3::US3_0(v431_0_0) = &v431 {
                                Dice_ui::US3::US3_0(v431_0_0.clone())
                            } else {
                                Dice_ui::US3::US3_1
                            }
                        } else {
                            Dice_ui::US3::US3_1
                        }
                    };
                    let v442: string =
                        append((append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                       sprintf!("{:?}", v438.clone()))),
                               string(""));
                    let v444: bool = true;
                    leptos::logging::log!("{}", v442);
                    if let Dice_ui::US3::US3_0(v438_0_0) = &v438 {
                        let v448: bool = true;
                        leptos::batch(move || {
                            Func0::new({
                                let v0_1 = v0_1.clone();
                                let v438 = v438.clone();
                                move || {
                                    Dice_ui::closure35(
                                        v0_1.clone(),
                                        match &v438 {
                                            Dice_ui::US3::US3_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                        (),
                                    )
                                }
                            })()
                        });
                        ()
                    }
                }
            }
        }
        pub fn closure40(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading create_memo")
            );
            leptos::prelude::RwSignal::get_untracked(&v0_1.l1.clone())
        }
        pub fn method50() -> string {
            string("core-state-heap")
        }
        pub fn method51(v0_1: Result<(), rexie::Error>) -> Result<(), rexie::Error> {
            v0_1
        }
        pub fn method52() {
            ();
        }
        pub fn closure41(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: string = sprintf!("{:?}", v1.clone());
            let v6: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::RwSignal::get(&v0_1);
            let v20: Dice_ui::US4 = defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v6));
            let v25: bool = true;
            let __future_init = Box::pin(async move {
                //;
                match &v20 {
                    Dice_ui::US4::US4_0(v20_0_0) => {
                        let v27: string =
                        append((append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                       (v2.clone()))), string(""));
                        let v29: bool = true;
                        leptos::logging::log!("{}", v27);
                        let v34: string = append(
                            (append(
                                string("state_core.set_data () / data_len: "),
                                (toString(length(sprintf!("{:?}", v1.clone())) as i64)),
                            )),
                            string(""),
                        );
                        let v36: bool = true;
                        leptos::logging::log!("{}", v34);
                        let v38: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v40: bool = true;
                            let mut data = Vec::new();
                            let v42: bool = true;
                            borsh::BorshSerialize::serialize(&v1.clone(), &mut data).unwrap();
                            let v44: Vec<u8> = data;
                            let v46: wasm_bindgen::JsValue =
                                serde_wasm_bindgen::to_value(&v44).unwrap();
                            let v47: string = Dice_ui::method50();
                            let v52: &str = &*v47;
                            let v73: rexie::Transaction = match &v20 {
                                Dice_ui::US4::US4_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                            let v75: rexie::Store = v73.store("store")?;
                            let v77: bool = true;
                            v75.put(&v46, Some(&v52.into())).await?;
                            let v79: bool = true;
                            v73.done().await?;
                            let v81: Result<(), rexie::Error> =
                                Dice_ui::method51(Ok::<(), rexie::Error>(()));
                            let v84: string = string("}");
                            let v90: bool = true;
                            let v85 = v81;
                            let v100: string = append(
                                (append(
                                    (append((append(string("true; v85 "), (v84))), string("); "))),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v101: bool = true;
                            v85
                        }); // rust.fix_closure';
                        let v103 = __future_init;
                        let v105: std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                        > = v103;
                        let v107: Result<(), rexie::Error> = v105.await;
                        v107.unwrap();
                        ()
                    }
                    _ => {
                        let v114: bool = true;
                        leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                        ()
                    }
                }
                Dice_ui::method52();
                {
                    let v118: string = string("}}");
                    let v120: string = string("{");
                    let v126: bool = true;
                    let v121 = ();
                    let v136: string = append(
                        (append(
                            (append((append(string("true; v121 "), (v118))), string("); "))),
                            (v120),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v137: bool = true;
                    v121
                }
            });
            {
                // rust.fix_closure';
                let v139 = __future_init;
                v139
            }
        }
        pub fn method53(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure43(unitVar: (), v0_1: leptos::prelude::RwSignal<bool>) -> Dice_ui::US17 {
            Dice_ui::US17::US17_0(v0_1)
        }
        pub fn method54() -> Func1<leptos::prelude::RwSignal<bool>, Dice_ui::US17> {
            Func1::new(move |v: leptos::prelude::RwSignal<bool>| Dice_ui::closure43((), v))
        }
        pub fn closure44(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method55(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method56() -> string {
            string("core-state-heap")
        }
        pub fn method57(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure42(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>,
            >,
            v2: leptos::prelude::WriteSignal<bool>,
            v3: leptos::prelude::ReadSignal<bool>,
            v4: leptos::prelude::Action<LrcPtr<Dice_ui::Heap3>, ()>,
            unitVar: (),
        ) {
            let v6: bool = leptos::prelude::ReadSignal::get(&v3);
            let v7: string =
                append((append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                               (ofBoolean(v6)))), string(""));
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v12: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v15: bool = leptos::prelude::RwSignal::get(&v12.l0.clone());
            let v18: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v21: bool = leptos::prelude::RwSignal::get(&v18.l1.clone());
            let v24: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v27: std::string::String = leptos::prelude::RwSignal::get(&v24.l2.clone());
            let v30: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v34: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                l0: v15,
                l1: v21,
                l2: v27,
                l3: leptos::prelude::RwSignal::get(&v30.l3.clone()),
            });
            let v38: string =
                append((append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                               sprintf!("{:?}", v34.clone()))), string(""));
            let v40: bool = true;
            leptos::logging::log!("{}", v38);
            let v42: std::collections::HashMap<
                std::string::String,
                leptos::prelude::RwSignal<bool>,
            > = v1();
            let v48: &str = &*string("dark_mode_key");
            let v92: std::string::String = Dice_ui::method53(String::from(v48));
            let v94: Option<leptos::prelude::RwSignal<bool>> =
                std::collections::HashMap::get(&v42, &v92)
                    .map(|x| x)
                    .cloned();
            let v108: Dice_ui::US17 =
                defaultValue(Dice_ui::US17::US17_1, map(Dice_ui::method54(), v94));
            let v118: Dice_ui::US18 = match &v108 {
                Dice_ui::US17::US17_0(v108_0_0) => {
                    Dice_ui::US18::US18_0(leptos::prelude::RwSignal::get(
                        &match &v108 {
                            Dice_ui::US17::US17_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US18::US18_1,
            };
            let v121: bool = match &v118 {
                Dice_ui::US18::US18_0(v118_0_0) => match &v118 {
                    Dice_ui::US18::US18_0(x) => x.clone(),
                    _ => unreachable!(),
                },
                _ => false,
            };
            let v122: string =
                append((append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                               (ofBoolean(v121)))), string(""));
            let v124: bool = true;
            leptos::logging::log!("{}", v122);
            if (v121) == false {
                if (v6) == false {
                    let v128: bool = true;
                    leptos::prelude::WriteSignal::update(
                        &v2,
                        |x: &mut /*;
                         let v129: */
                         bool /* = getZero();
                              let v134: bool =
                                  */| {
                            *x = Func1::new(move |v: bool| Dice_ui::closure44((), v))(x.clone())
                        },
                    ); //;
                    ()
                } else {
                    let v137: bool = true;
                    leptos::logging::log!(
                        "{}",
                        string(
                            "state_core.use_core_database (18) / effect new_core_state_heap / ##4"
                        )
                    );
                    let v139: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                        Dice_ui::method36(Dice_ui::method35());
                    let v140 = Dice_ui::method37();
                    let v141 = Dice_ui::method38();
                    let v142: Dice_ui::US10 = match &v139 {
                        Err(v139_1_0) => v141(v139_1_0.clone()),
                        Ok(v139_0_0) => v140(v139_0_0.clone()),
                    };
                    let v165: Dice_ui::US11 = match &v142 {
                        Dice_ui::US10::US10_0(v142_0_0) => Dice_ui::US11::US11_0(defaultValue(
                            Dice_ui::US12::US12_1,
                            map(Dice_ui::method39(), v142_0_0.clone()),
                        )),
                        Dice_ui::US10::US10_1(v142_1_0) => Dice_ui::US11::US11_1(v142_1_0.clone()),
                    };
                    if let Dice_ui::US11::US11_0(v165_0_0) = &v165 {
                        let v166: Dice_ui::US12 = v165_0_0.clone();
                        if let Dice_ui::US12::US12_0(v166_0_0) = &v166 {
                            let v169: bool = true;
                            leptos::prelude::Action::dispatch(&v4, v34.clone().clone());
                            let v170: web_sys::Storage = Dice_ui::method55(v166_0_0.clone());
                            let v171: string = Dice_ui::method56();
                            let v176: &str = &*v171;
                            let v196: LrcPtr<Dice_ui::Heap3> = Dice_ui::method57(v34);
                            let v198: std::string::String = serde_json::json!(v196).to_string();
                            let v200: &str = v198.as_str();
                            web_sys::Storage::set(&v170, v176, v200).unwrap();
                            ()
                        }
                    }
                };
            }
        }
        pub fn closure45(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            leptos::prelude::RwSignal::get(&v3.l0.clone())
        }
        pub fn method58(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure45(v0_1.clone(), ())
            })
        }
        pub fn closure46(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = v2();
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = v8();
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                (v6),
                (if (v12.clone()) == string("") {
                    string("")
                } else {
                    concat(new_array(&[string("?"), v12]))
                }),
            )
        }
        pub fn method59(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure47(
            v0_1: leptos_router::location::Location,
            v1: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)>,
            v2: leptos::prelude::Memo<string>,
            v3: LrcPtr<Dice_ui::Heap2>,
            v4: leptos::prelude::WriteSignal<bool>,
            v5: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) {
            let v7: bool = leptos::prelude::ReadSignal::get(&v5);
            let v9: leptos::prelude::Memo<std::string::String> = v0_1.hash;
            let v11: std::string::String = v9();
            let v14: string = sprintf!("{}{}", v2(), v11.clone());
            let v15: string = append(
                (append(
                    (append(
                        (append(
                            string("content.render () / effect 1 / new_url_hash: "),
                            (v14.clone()),
                        )),
                        string(" / loaded: "),
                    )),
                    (ofBoolean(v7)),
                )),
                string(""),
            );
            let v17: bool = true;
            leptos::logging::log!("{}", v15);
            if (v7) == false {
                let v19: std::string::String = Dice_ui::method59(v11);
                if v19 == "" {
                    let v24: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::RwSignal::get_untracked(&v3.l0.clone());
                    let v27: std::string::String = leptos::prelude::RwSignal::get(&v24.l2.clone());
                    let v29: string = fable_library_rust::String_::fromString(v27);
                    let v30: string = append(
                        (append(
                            string("content.render () / effect 1 / url_hash: "),
                            (v29.clone()),
                        )),
                        string(""),
                    );
                    let v32: bool = true;
                    leptos::logging::log!("{}", v30);
                    if contains(v29.clone(), string("#")) {
                        let v41: &str = &*v29;
                        v1(v41, Default::default());
                        ()
                    }
                }
                {
                    let v63: bool = true;
                    leptos::prelude::WriteSignal::set(&v4, true);
                    ()
                }
            } else {
                let v66: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::RwSignal::get_untracked(&v3.l0.clone());
                let v72: &str = &*v14;
                let v96: std::string::String = String::from(v72);
                let v117: bool = true;
                leptos::prelude::RwSignal::set(&v66.l2.clone(), v96);
                ()
            }
        }
        pub fn method60(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure49(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US21 {
            Dice_ui::US21::US21_0(v0_1)
        }
        pub fn method61() -> Func1<leptos_router::location::Url, Dice_ui::US21> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure49((), v))
        }
        pub fn closure50(unitVar: (), v0_1: std::string::String) -> Dice_ui::US21 {
            Dice_ui::US21::US21_1(v0_1)
        }
        pub fn method62() -> Func1<std::string::String, Dice_ui::US21> {
            Func1::new(move |v: std::string::String| Dice_ui::closure50((), v))
        }
        pub fn closure48(
            v0_1: leptos_router::location::Location,
            v1: leptos::prelude::WriteSignal<Dice_ui::US19>,
            unitVar: (),
        ) {
            let v3: leptos::prelude::Memo<std::string::String> = v0_1.hash;
            let v6: std::string::String = Dice_ui::method60(v3());
            let v8: Option<&str> = v6.strip_prefix('#');
            let v10: string = string("r#\"\"#");
            let v11: &str = r#""#;
            let v13: &str = v8.unwrap_or(v11);
            let v15: Result<leptos_router::location::Url, std::string::String> =
                leptos_router::location::Url::try_from(v13);
            let v16 = Dice_ui::method61();
            let v17 = Dice_ui::method62();
            let v18: Dice_ui::US21 = match &v15 {
                Err(v15_1_0) => v17(v15_1_0.clone()),
                Ok(v15_0_0) => v16(v15_0_0.clone()),
            };
            let v25: std::string::String = format!("{:#?}", v18.clone());
            let v49: string = append(
                (append(
                    string("content.render () / effect 2 / hash_url: "),
                    (fable_library_rust::String_::fromString(v25)),
                )),
                string(""),
            );
            let v51: bool = true;
            leptos::logging::log!("{}", v49);
            match &v18 {
                Dice_ui::US21::US21_0(v18_0_0) => {
                    let v52: leptos_router::location::Url = v18_0_0.clone();
                    let v54: std::string::String = v52.clone().pathname;
                    let v66: Dice_ui::US22 = if startsWith3(
                        fable_library_rust::String_::fromString(v54),
                        string("/dice"),
                        false,
                    ) {
                        Dice_ui::US22::US22_0(Dice_ui::US19::US19_1(Dice_ui::US20::US20_0))
                    } else {
                        Dice_ui::US22::US22_1
                    };
                    let v83: Dice_ui::US22 = match &v66 {
                        Dice_ui::US22::US22_0(v66_0_0) => Dice_ui::US22::US22_0(
                            match &v66 {
                                Dice_ui::US22::US22_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => {
                            let v70: std::string::String = v52.clone().pathname;
                            if startsWith3(
                                fable_library_rust::String_::fromString(v70),
                                string("/lists"),
                                false,
                            ) {
                                Dice_ui::US22::US22_0(Dice_ui::US19::US19_2)
                            } else {
                                Dice_ui::US22::US22_1
                            }
                        }
                    };
                    let v100: Dice_ui::US22 = match &v83 {
                        Dice_ui::US22::US22_0(v83_0_0) => Dice_ui::US22::US22_0(
                            match &v83 {
                                Dice_ui::US22::US22_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => {
                            let v87: std::string::String = v52.clone().pathname;
                            if startsWith3(
                                fable_library_rust::String_::fromString(v87),
                                string("/transactions"),
                                false,
                            ) {
                                Dice_ui::US22::US22_0(Dice_ui::US19::US19_3)
                            } else {
                                Dice_ui::US22::US22_1
                            }
                        }
                    };
                    let v117: Dice_ui::US22 = match &v100 {
                        Dice_ui::US22::US22_0(v100_0_0) => Dice_ui::US22::US22_0(
                            match &v100 {
                                Dice_ui::US22::US22_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => {
                            let v104: std::string::String = v52.clone().pathname;
                            if startsWith3(
                                fable_library_rust::String_::fromString(v104),
                                string("/settings"),
                                false,
                            ) {
                                Dice_ui::US22::US22_0(Dice_ui::US19::US19_4)
                            } else {
                                Dice_ui::US22::US22_1
                            }
                        }
                    };
                    let v122: Dice_ui::US19 = match &v117 {
                        Dice_ui::US22::US22_0(v117_0_0) => match &v117 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                        _ => Dice_ui::US19::US19_1(Dice_ui::US20::US20_0),
                    };
                    let v129: std::string::String = format!("{:#?}", v122.clone());
                    let v153: string = append(
                        (append(
                            string("content.render () / effect 2 / new_tab: "),
                            (fable_library_rust::String_::fromString(v129)),
                        )),
                        string(""),
                    );
                    let v155: bool = true;
                    leptos::logging::log!("{}", v153);
                    let v157: bool = true;
                    leptos::prelude::WriteSignal::set(&v1.clone(), v122);
                    ()
                }
                Dice_ui::US21::US21_1(v18_1_0) => {
                    let v159: string = append(
                        (append(
                            string("content.render () / effect 2 / hash_url error: "),
                            (toString(v18_1_0.clone())),
                        )),
                        string(""),
                    );
                    let v161: bool = true;
                    leptos::logging::log!("{}", v159);
                    ()
                }
            }
        }
        pub fn closure52(
            unitVar: (),
            v0_: bool,
            v0__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v0_1: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v0_, v0__1));
            (v0_1.0.clone(), v0_1.1.clone())
        }
        pub fn closure53(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method63() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure53((), arg10_0040)
            })
        }
        pub fn method64(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure54(unitVar: (), _arg: (bool, std::string::String)) -> std::string::String {
            _arg.1.clone()
        }
        pub fn closure55(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn closure51(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::RwSignal::get_untracked(&v3.l3.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure52((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v11 = Dice_ui::method63();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method64(v10);
            let v14: Vec<(bool, std::string::String)> = v12
                .into_iter()
                .filter(|x| v11(x.clone().clone()))
                .collect::<Vec<_>>();
            let v17: Vec<std::string::String> = v14
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure54((), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v20: Vec<string> = v17
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure55((), v))(x.clone())
                })
                .collect::<Vec<_>>();
            let v26: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string("use_transactions.render (2) / accounts create_memo / result: "),
                        sprintf!("{:?}", v20.clone()),
                    )),
                    string(""),
                ),
            );
            let v28: bool = true;
            leptos::logging::log!("{}", v26);
            v20
        }
        pub fn closure57(unitVar: (), v0_1: string) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                append(
                    (append(string("https://api3.nearblocks.io/v1/account/"), (v0_1))),
                    string(""),
                ),
                Dice_ui::US24::US24_0,
                string(""),
                false,
                true,
            )
        }
        pub fn closure56(
            v0_1: leptos::prelude::Memo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Vec<string> = v0_1();
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v2
                .into_iter()
                .map(|x| Func1::new(move |v: string| Dice_ui::closure57((), v))(x.clone()))
                .collect::<Vec<_>>();
            let v7: Array<(string, Dice_ui::US24, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v5.clone());
            let v13: string =
                Dice_ui::method10(200_i64,
                                  append((append(string("use_transactions.render (3) / accounts_metadata create_memo / result: "),
                                                 sprintf!("{:?}",
                                                          v7.clone()))),
                                         string("")));
            let v15: bool = true;
            leptos::logging::log!("{}", v13);
            v7
        }
        pub fn method65(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure60(v0_1: string, v1: i32) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                append(
                    (append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        string("https://api3.nearblocks.io/v1/account/"),
                                        (v0_1),
                                    )),
                                    string("/txns?&order=desc&page="),
                                )),
                                (toString((v1) + 1_i32)),
                            )),
                            string("&per_page="),
                        )),
                        (toString(25_i32)),
                    )),
                    string(""),
                ),
                Dice_ui::US24::US24_0,
                string(""),
                false,
                true,
            )
        }
        pub fn closure59(
            v0_1: LrcPtr<Dice_ui::Heap0>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US24, string, bool, bool)>) {
            let v2: i32 = v0_1.l3;
            let v3: Array<i32> = new_init(&0_i32, v2);
            let v4: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method65(v2, v4.clone()) {
                let v6: i32 = v4.l0.get().clone();
                v3.get_mut()[v6 as usize] = v6;
                {
                    let v7: i32 = (v6) + 1_i32;
                    v4.l0.set(v7);
                    ()
                }
            }
            {
                let v9: Vec<i32> = v3.clone().to_vec();
                (
                    v1.clone(),
                    v9.into_iter()
                        .map(|x| {
                            Func1::new({
                                let v1 = v1.clone();
                                move |v: i32| Dice_ui::closure60(v1.clone(), v)
                            })(x.clone())
                        })
                        .collect::<Vec<_>>(),
                )
            }
        }
        pub fn closure58(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::RwSignal::get_untracked(&v4.l3.clone());
            let v9: Vec<string> = v1();
            let v12: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v9
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v7 = v7.clone();
                        move |v: string| Dice_ui::closure59(v7.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v18: string =
                Dice_ui::method10(200_i64,
                                  append((append(string("use_transactions.render (4) / accounts_requests create_memo / result: "),
                                                 sprintf!("{:?}",
                                                          v12.clone()))),
                                         string("")));
            let v20: bool = true;
            leptos::logging::log!("{}", v18);
            v12
        }
        pub fn closure62(
            unitVar: (),
            _arg: (string, Vec<(string, Dice_ui::US24, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            _arg.1.clone()
        }
        pub fn method66(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method67(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn method68(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn closure61(
            v0_1: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v0_1();
            let v5: Vec<Vec<(string, Dice_ui::US24, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        )| Dice_ui::closure62((), arg10_0040),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US24, string, bool, bool)>().to_vec();
            let v10: Array<Vec<(string, Dice_ui::US24, string, bool, bool)>> =
                fable_library_rust::NativeArray_::array_from(v5.clone());
            let v11: i32 = get_Count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method66(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<(string, Dice_ui::US24, string, bool, bool)> = v12.l1.get().clone();
                let v17: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                    Dice_ui::method67(v10[v14].clone());
                let v18: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method68(v15);
                let v20: bool = true;
                let mut v18 = v18;
                let v22: bool = true;
                v18.extend(v17);
                let v24: Vec<(string, Dice_ui::US24, string, bool, bool)> = v18;
                let v25: i32 = (v14) + 1_i32;
                v12.l0.set(v25);
                v12.l1.set(v24);
                ()
            }
            {
                let v26: Vec<(string, Dice_ui::US24, string, bool, bool)> = v12.l1.get().clone();
                let v32: string =
                    Dice_ui::method10(200_i64,
                                      append((append(string("use_transactions.render (5) / txns_requests create_memo / result: "),
                                                     sprintf!("{:?}",
                                                              v26.clone()))),
                                             string("")));
                let v34: bool = true;
                leptos::logging::log!("{}", v32);
                v26
            }
        }
        pub fn closure65(
            v0_1: string,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> string {
            v0_1
        }
        pub fn closure64(
            unitVar: (),
            _arg: (string, Vec<(string, Dice_ui::US24, string, bool, bool)>),
        ) -> Vec<string> {
            _arg.1
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let _arg = _arg.clone();
                        move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                            Dice_ui::closure65(_arg.0.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn method69(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method70(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method71(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn closure63(
            v0_1: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v0_1();
            let v5: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        )| Dice_ui::closure64((), arg10_0040),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v8: Vec<string> = new_empty::<string>().to_vec();
            let v10: Array<Vec<string>> = fable_library_rust::NativeArray_::array_from(v5.clone());
            let v11: i32 = get_Count(v10.clone());
            let v12: LrcPtr<Dice_ui::Mut2> = LrcPtr::new(Dice_ui::Mut2 {
                l0: MutCell::new(0_i32),
                l1: MutCell::new(v8),
            });
            while Dice_ui::method69(v11, v12.clone()) {
                let v14: i32 = v12.l0.get().clone();
                let v15: Vec<string> = v12.l1.get().clone();
                let v17: Vec<string> = Dice_ui::method70(v10[v14].clone());
                let v18: Vec<string> = Dice_ui::method71(v15);
                let v20: bool = true;
                let mut v18 = v18;
                let v22: bool = true;
                v18.extend(v17);
                let v24: Vec<string> = v18;
                let v25: i32 = (v14) + 1_i32;
                v12.l0.set(v25);
                v12.l1.set(v24);
                ()
            }
            {
                let v26: Vec<string> = v12.l1.get().clone();
                let v28: Array<string> = fable_library_rust::NativeArray_::array_from(v26.clone());
                let v34: string =
                    Dice_ui::method10(200_i64,
                                      append((append(string("use_transactions.render (6) / urls_accounts create_memo / result: "),
                                                     sprintf!("{:?}",
                                                              v28.clone()))),
                                             string("")));
                let v36: bool = true;
                leptos::logging::log!("{}", v34);
                v28
            }
        }
        pub fn closure68(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            (v0_1.clone().action, v0_1.method)
        }
        pub fn method72(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure69(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1.clone())
        }
        pub fn method73() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure69((), v))
        }
        pub fn closure67(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().receipt_id;
            let v4: std::string::String = v0_1.clone().predecessor_account_id;
            let v6: std::string::String = v0_1.clone().receiver_account_id;
            let v8: std::string::String = v0_1.clone().transaction_hash;
            let v10: std::string::String = v0_1.clone().included_in_block_hash;
            let v12: std::string::String = v0_1.clone().block_timestamp;
            let v14: crate::model::near::nearblocks::Block = v0_1.clone().block;
            let v16: u32 = v14.block_height;
            let v18: Vec<crate::model::near::nearblocks::Action> = v0_1.clone().actions;
            let v21: Vec<(std::string::String, Option<std::string::String>)> = v18
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Action| {
                        Dice_ui::closure68((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v24: Array<(std::string::String, Option<std::string::String>)> =
                Dice_ui::method72(fable_library_rust::NativeArray_::array_from(v21.clone()));
            let v26: crate::model::near::nearblocks::ActionsAgg = v0_1.clone().actions_agg;
            let v28: f64 = v26.deposit;
            let v30: crate::model::near::nearblocks::Outcomes = v0_1.clone().outcomes;
            let v32: bool = v30.status;
            let v34: crate::model::near::nearblocks::OutcomesAgg = v0_1.clone().outcomes_agg;
            let v36: f64 = v34.transaction_fee;
            let v38: Option<Vec<std::string::String>> = v0_1.logs;
            (
                v2,
                v4,
                v6,
                v8,
                v10,
                v12,
                v16,
                v24,
                v28,
                v32,
                v36,
                defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method73(), v38),
                ),
            )
        }
        pub fn method74(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure66(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::nearblocks::Txn| {
                        Dice_ui::closure67((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method74(fable_library_rust::NativeArray_::array_from(v5.clone()))
        }
        pub fn closure70(
            v0_1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::RwSignal::get(&v0_1);
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn closure71(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> (
            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) {
            let v3: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::RwSignal::get(&v1);
            let v5: bool = true;
            let _optionm_map_ = v3.map(|x| {
                //;
                let v7: std::sync::Arc<rexie::Rexie> = x;
                let v10: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v7);
                let v12: bool = true;
                v10
            });
            (_optionm_map_, v0_1())
        }
        pub fn method77(v0_1: string) -> string {
            v0_1
        }
        pub fn method78(
            v0_1: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
        ) -> Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> {
            v0_1
        }
        pub fn closure72(
            v0_1: std::sync::Arc<rexie::Rexie>,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let v6: string = append(
                (append(
                    (append((append(string("url["), (_arg.0.clone()))), string("]("))),
                    sprintf!("{:?}", _arg.2.clone()),
                )),
                string(")"),
            );
            let v7: string = append(
                (append(string("state_core.get_data () / id: "), (v6.clone()))),
                string(""),
            );
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v11: bool = true;
            let __future_init = Box::pin(async {
                //;
                let v13: Array<string> = new_array(&[string("store")]);
                let v15: Vec<string> = v13.to_vec();
                let v18: Vec<std::string::String> = v15
                    .into_iter()
                    .map(|x| Func1::new(move |v: string| Dice_ui::closure12((), v))(x.clone()))
                    .collect::<Vec<_>>();
                let v19: std::sync::Arc<rexie::Rexie> = Dice_ui::method15(v0_1);
                let v21: Result<rexie::Transaction, rexie::Error> =
                    v19.transaction(&v18, rexie::TransactionMode::ReadOnly);
                let v22 = Dice_ui::method16();
                let v27: Result<rexie::Transaction, std::string::String> = v21.map_err(|x| v22(x));
                let v38: rexie::Transaction = v27?;
                let v39: string = Dice_ui::method17();
                let v44: &str = &*v39;
                let v65: Result<rexie::Store, rexie::Error> = v38.store(v44);
                let v66 = Dice_ui::method18();
                let v71: Result<rexie::Store, std::string::String> = v65.map_err(|x| v66(x));
                let v82: rexie::Store = v71?;
                let v83: string = Dice_ui::method77(v6);
                let v88: &str = &*v83;
                let v109: wasm_bindgen::JsValue = wasm_bindgen::JsValue::from_str(v88);
                let v111: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<wasm_bindgen::JsValue>, rexie::Error>,
                        >,
                    >,
                > = Box::pin(rexie::Store::get(&v82, v109));
                let v113: Result<Option<wasm_bindgen::JsValue>, rexie::Error> = v111.await;
                let v114 = Dice_ui::method20();
                let v119: Result<Option<wasm_bindgen::JsValue>, std::string::String> =
                    v113.map_err(|x| v114(x));
                let v130: Option<wasm_bindgen::JsValue> = v119?;
                let v144: Dice_ui::US6 =
                    defaultValue(Dice_ui::US6::US6_1, map(Dice_ui::method21(), v130));
                let v244: Dice_ui::US26 = match &v144 {
                    Dice_ui::US6::US6_0(v144_0_0) => {
                        let v149: wasm_bindgen::JsValue = Dice_ui::method22(
                            match &v144 {
                                Dice_ui::US6::US6_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v151: Result<Option<serde_json::Value>, serde_wasm_bindgen::Error> =
                            serde_wasm_bindgen::from_value(v149);
                        let v152 = Dice_ui::method23();
                        let v157: Result<Option<serde_json::Value>, std::string::String> =
                            v151.map_err(|x| v152(x));
                        let v168: Option<serde_json::Value> = v157?;
                        let v182: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method24(), v168));
                        match &v182 {
                            Dice_ui::US7::US7_0(v182_0_0) => {
                                let v187: serde_json::Value = Dice_ui::method25(
                                    match &v182 {
                                        Dice_ui::US7::US7_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                );
                                let v189: Result<Vec<u8>, serde_json::Error> =
                                    serde_json::from_value(v187);
                                let v190 = Dice_ui::method26();
                                let v195: Result<Vec<u8>, std::string::String> =
                                    v189.map_err(|x| v190(x));
                                let v206: Vec<u8> = v195?;
                                let v208: Array<u8> =
                                    fable_library_rust::NativeArray_::array_from(v206.clone());
                                let v210: string = append(
                                    (append(
                                        string("state_core.get_data () / data_len: "),
                                        (toString(get_Count(v208.clone()))),
                                    )),
                                    string(""),
                                );
                                let v212: bool = true;
                                leptos::logging::log!("{}", v210);
                                let v214: Vec<u8> = v208.to_vec();
                                let v216: &[u8] = v214.as_slice();
                                let v218: bool = true;
                                let mut v216 = v216;
                                let v220: Result<LrcPtr<Dice_ui::Heap4>, borsh::io::Error> =
                                    borsh::BorshDeserialize::deserialize(&mut v216);
                                let v221 = Dice_ui::method27();
                                let v226: Result<LrcPtr<Dice_ui::Heap4>, std::string::String> =
                                    v220.map_err(|x| v221(x));
                                Dice_ui::US26::US26_0(v226?)
                            }
                            _ => Dice_ui::US26::US26_1,
                        }
                    }
                    _ => Dice_ui::US26::US26_1,
                };
                let v253: Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String> =
                    Dice_ui::method78(Ok::<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>(
                        match &v244 {
                            Dice_ui::US26::US26_0(v244_0_0) => Some(
                                match &v244 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                        },
                    ));
                let v256: string = string("}");
                let v262: bool = true;
                let v257 = v253;
                let v272: string = append(
                    (append(
                        (append((append(string("true; v257 "), (v256))), string("); "))),
                        string(""),
                    )),
                    string(" // rust.fix_closure\'"),
                );
                let v273: bool = true;
                v257
            }); // rust.fix_closure';
            let v275 = __future_init;
            v275
        }
        pub fn method79(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn method80(
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> {
            v0_1
        }
        pub fn method81(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                >,
            >,
        > {
            v0_1
        }
        pub fn method76(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
        ) -> leptos::prelude::Resource<
            (
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Vec<(string, Dice_ui::US24, string, bool, bool)>,
            ),
            Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        > {
            let v2: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure71(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                        ) = x;
                        let v6: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                            patternInput.1.clone();
                        let v5: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            patternInput.0.clone();
                        let v8: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v9: string = sprintf!("{:?}", v5.clone());
                            let v17: string =
                    append((append((append((append(string("state_core.use_requests (3) / state_data_resource create_local_resource / request : "),
                                                   (Dice_ui::method10(400_i64,
                                                                      sprintf!("{:?}",
                                                                               v6.clone()))))),
                                           string(" / database: "))), (v9))),
                           string(""));
                            let v19: bool = true;
                            leptos::logging::log!("{}", v17);
                            let v21: bool = true;
                            let _optionm_map_ = v5.map(|x| {
                                //;
                                let v23: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                                let v25: std::sync::Arc<rexie::Rexie> = v23.0;
                                let v27: bool = true;
                                v25
                            });
                            let v29: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                            let v43: Dice_ui::US4 =
                                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v29));
                            let v109: Dice_ui::US25 = if let Dice_ui::US4::US4_0(v43_0_0) = &v43 {
                                let v51: Vec<
                                    std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    >,
                                > = Dice_ui::method79(
                                    v6.into_iter()
                                        .map(|x| {
                                            Func1::new({
                                                let v43 = v43.clone();
                                                move |arg10_0040_1: (
                                                    string,
                                                    Dice_ui::US24,
                                                    string,
                                                    bool,
                                                    bool,
                                                )| {
                                                    Dice_ui::closure72(
                                                        match &v43 {
                                                            Dice_ui::US4::US4_0(x) => x.clone(),
                                                            _ => unreachable!(),
                                                        }
                                                        .clone(),
                                                        arg10_0040_1,
                                                    )
                                                }
                                            })(x.clone())
                                        })
                                        .collect::<Vec<_>>(),
                                );
                                let v53: futures::future::TryJoinAll<
                                    std::pin::Pin<
                                        Box<
                                            dyn std::future::Future<
                                                Output = Result<
                                                    Option<LrcPtr<Dice_ui::Heap4>>,
                                                    std::string::String,
                                                >,
                                            >,
                                        >,
                                    >,
                                > = futures::future::try_join_all(v51);
                                let v55: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = v53.await;
                                Dice_ui::US25::US25_0(v55?)
                            } else {
                                let v64: &str = &*string("database=None");
                                Dice_ui::US25::US25_1(String::from(v64))
                            };
                            let v115: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = match &v109 {
                                Dice_ui::US25::US25_0(v109_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v109_0_0.clone(),
                                    )
                                }
                                Dice_ui::US25::US25_1(v109_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v109_1_0.clone(),
                                    )
                                }
                            };
                            let v121: string =
                    Dice_ui::method10(200_i64,
                                      append((append(string("state_core.use_requests (4) / state_data_resource create_local_resource / result: "),
                                                     sprintf!("{:?}",
                                                              v115.clone()))),
                                             string("")));
                            let v123: bool = true;
                            leptos::logging::log!("{}", v121);
                            let v124: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = Dice_ui::method80(v115);
                            let v127: string = string("}");
                            let v133: bool = true;
                            let v128 = v124;
                            let v143: string = append(
                                (append(
                                    (append(
                                        (append(string("true; v128 "), (v127))),
                                        string("); "),
                                    )),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v144: bool = true;
                            v128
                        }); // rust.fix_closure';
                        let v146 = __future_init;
                        let v149: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method81(v146);
                        let v151: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            v149.await;
                        let v153: string = string("}}");
                        let v155: string = string("{");
                        let v161: bool = true;
                        let v156 = v151;
                        let v171: string = append(
                            (append(
                                (append((append(string("true; v156 "), (v153))), string("); "))),
                                (v155),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v172: bool = true;
                        v156
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn closure73(
            v0_1: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method36(Dice_ui::method35());
            let v6 = Dice_ui::method37();
            let v7 = Dice_ui::method38();
            let v8: Dice_ui::US10 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v31: Dice_ui::US11 = match &v8 {
                Dice_ui::US10::US10_0(v8_0_0) => Dice_ui::US11::US11_0(defaultValue(
                    Dice_ui::US12::US12_1,
                    map(Dice_ui::method39(), v8_0_0.clone()),
                )),
                Dice_ui::US10::US10_1(v8_1_0) => Dice_ui::US11::US11_1(v8_1_0.clone()),
            };
            let v39: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US11::US11_0(v31_0_0) = &v31 {
                    if let Dice_ui::US12::US12_0(v31_0_0) = &v31_0_0 {
                        leptos::prelude::RwSignal::get(&v0_1)
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v45: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v39.clone()),
                    )),
                    string(""),
                ),
            );
            let v47: bool = true;
            leptos::logging::log!("{}", v45);
            v39
        }
        pub fn closure74(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            unitVar: (),
        ) -> (
            Vec<(string, Dice_ui::US24, string, bool, bool)>,
            Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
        ) {
            (v0_1(), v1())
        }
        pub fn closure75(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US27 {
            Dice_ui::US27::US27_0(v0_1)
        }
        pub fn method83(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US27>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure75((), v)
                },
            )
        }
        pub fn closure76(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method84() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US25> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure76((), v))
        }
        pub fn closure77(unitVar: (), v0_1: std::string::String) -> Dice_ui::US25 {
            Dice_ui::US25::US25_1(v0_1)
        }
        pub fn method85() -> Func1<std::string::String, Dice_ui::US25> {
            Func1::new(move |v: std::string::String| Dice_ui::closure77((), v))
        }
        pub fn closure78(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method86() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US26> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure78((), v))
        }
        pub fn closure81(unitVar: (), v0_1: Dice_ui::US26) -> Dice_ui::US33 {
            Dice_ui::US33::US33_0(v0_1)
        }
        pub fn method88() -> Func1<Dice_ui::US26, Dice_ui::US33> {
            Func1::new(move |v: Dice_ui::US26| Dice_ui::closure81((), v))
        }
        pub fn method89(v0_1: Dice_ui::US24) -> Dice_ui::US24 {
            v0_1
        }
        pub fn method90(v0_1: string) -> string {
            v0_1
        }
        pub fn method91(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method92(v0_1: string) -> string {
            v0_1
        }
        pub fn method93(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method94(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method95(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure82(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method96() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure82((), v))
        }
        pub fn method97(
            v0_1: Result<Option<string>, std::string::String>,
        ) -> Result<Option<string>, std::string::String> {
            v0_1
        }
        pub fn closure80(
            v0_1: Dice_ui::US28,
            v1: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US24 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v54: Dice_ui::US30 = match &v0_1 {
                    Dice_ui::US28::US28_0(v0_1_0_0) => {
                        let v9: Dice_ui::US29 = match &v0_1 {
                            Dice_ui::US28::US28_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        Dice_ui::US30::US30_0(match &v9 {
                            Dice_ui::US29::US29_0(v9_0_0) => {
                                let v13: Option<Dice_ui::US26> = tryItem(
                                    v1,
                                    fable_library_rust::NativeArray_::array_from(
                                        v9_0_0.clone().clone(),
                                    ),
                                );
                                let v27: Dice_ui::US33 = defaultValue(
                                    Dice_ui::US33::US33_1,
                                    map(Dice_ui::method88(), v13),
                                );
                                let v37: Dice_ui::US26 =
                                    if let Dice_ui::US33::US33_0(v27_0_0) = &v27 {
                                        let v31: Dice_ui::US26 = v27_0_0.clone();
                                        if let Dice_ui::US26::US26_0(v31_0_0) = &v31 {
                                            Dice_ui::US26::US26_0(v31_0_0.clone())
                                        } else {
                                            Dice_ui::US26::US26_1
                                        }
                                    } else {
                                        Dice_ui::US26::US26_1
                                    };
                                Dice_ui::US31::US31_0(match &v37 {
                                    Dice_ui::US26::US26_0(v37_0_0) => Dice_ui::US32::US32_0(
                                        fable_library_rust::String_::fromString(
                                            (match &v37 {
                                                Dice_ui::US26::US26_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            })
                                            .l0
                                            .clone(),
                                        ),
                                    ),
                                    _ => Dice_ui::US32::US32_1,
                                })
                            }
                            Dice_ui::US29::US29_1(v9_1_0) => Dice_ui::US31::US31_1(v9_1_0.clone()),
                        })
                    }
                    _ => Dice_ui::US30::US30_1,
                };
                let v59: string =
                    Dice_ui::method10(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                let v64: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v0_1.clone()));
                let v69: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v54.clone()));
                let v94: bool = if v6 {
                    true
                } else {
                    if let Dice_ui::US28::US28_0(v0_1_0_0) = &v0_1 {
                        let v70: Dice_ui::US29 = v0_1_0_0.clone();
                        if let Dice_ui::US29::US29_0(v70_0_0) = &v70 {
                            if (get_Count(fable_library_rust::NativeArray_::array_from(
                                v70_0_0.clone().clone(),
                            ))) == 0_i32
                            {
                                false
                            } else {
                                if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                                    let v76: Dice_ui::US31 = v54_0_0.clone();
                                    if let Dice_ui::US31::US31_0(v76_0_0) = &v76 {
                                        if let Dice_ui::US32::US32_1 = &v76_0_0 {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                                let v82: Dice_ui::US31 = v54_0_0.clone();
                                if let Dice_ui::US31::US31_0(v82_0_0) = &v82 {
                                    if let Dice_ui::US32::US32_1 = &v82_0_0 {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    } else {
                        if let Dice_ui::US30::US30_0(v54_0_0) = &v54 {
                            let v88: Dice_ui::US31 = v54_0_0.clone();
                            if let Dice_ui::US31::US31_0(v88_0_0) = &v88 {
                                if let Dice_ui::US32::US32_1 = &v88_0_0 {
                                    true
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                };
                let v95: string =
                append((append((append((append((append((append((append((append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                               (v64))),
                                                                       string(" / state_data\': "))),
                                                               (v69))),
                                                       string(" / request: "))),
                                               (v59))),
                                       string(" / should_fetch: "))),
                               (ofBoolean(v94)))), string(""));
                let v97: bool = true;
                leptos::logging::log!("{}", v95);
                let v415: Dice_ui::US34 = if (v94) == false {
                    Dice_ui::US34::US34_0(None::<string>)
                } else {
                    let v101: Dice_ui::US24 = Dice_ui::method89(v3);
                    let v207: reqwest_wasm::RequestBuilder = match &v101 {
                        Dice_ui::US24::US24_1 => {
                            let v154: string = Dice_ui::method92(v2.clone());
                            let v159: &str = &*v154;
                            let v203: std::string::String = Dice_ui::method93(String::from(v159));
                            reqwest_wasm::Client::builder()
                                .build()
                                .map_err(|err| err.to_string())?
                                .post(v203)
                        }
                        _ => {
                            let v102: string = Dice_ui::method90(v2.clone());
                            let v107: &str = &*v102;
                            let v151: std::string::String = Dice_ui::method91(String::from(v107));
                            reqwest_wasm::Client::builder()
                                .build()
                                .map_err(|err| err.to_string())?
                                .get(v151)
                        }
                    };
                    let v212: &str = &*_arg.2.clone();
                    let v236: std::string::String = String::from(v212);
                    let v257: reqwest_wasm::RequestBuilder =
                        reqwest_wasm::RequestBuilder::body(v207, v236);
                    let v366: reqwest_wasm::RequestBuilder = Dice_ui::method95(if (v5) == false {
                        v257
                    } else {
                        let v262: std::string::String =
                            reqwest_wasm::header::CONTENT_TYPE.to_string();
                        let v264: string = fable_library_rust::String_::fromString(v262);
                        let v265: reqwest_wasm::RequestBuilder = Dice_ui::method94(v257);
                        let v270: &str = &*v264;
                        let v294: std::string::String = String::from(v270);
                        let v319: &str = &*string("application/json");
                        let v343: std::string::String = String::from(v319);
                        reqwest_wasm::RequestBuilder::header(v265, v294, v343)
                    });
                    let v368: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::RequestBuilder::send(v366));
                    let v370: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v368.await;
                    let v371 = Dice_ui::method96();
                    let v376: Result<reqwest_wasm::Response, std::string::String> =
                        v370.map_err(|x| v371(x));
                    let v387: reqwest_wasm::Response = v376?;
                    let v389: std::pin::Pin<
                        Box<
                            dyn std::future::Future<
                                Output = Result<std::string::String, reqwest_wasm::Error>,
                            >,
                        >,
                    > = Box::pin(reqwest_wasm::Response::text(v387));
                    let v391: Result<std::string::String, reqwest_wasm::Error> = v389.await;
                    let v392 = Dice_ui::method96();
                    let v397: Result<std::string::String, std::string::String> =
                        v391.map_err(|x| v392(x));
                    let v408: std::string::String = v397?;
                    Dice_ui::US34::US34_0(Some(fable_library_rust::String_::fromString(v408)))
                };
                let v422: Result<Option<string>, std::string::String> =
                    Dice_ui::method97(match &v415 {
                        Dice_ui::US34::US34_0(v415_0_0) => {
                            Ok::<Option<string>, std::string::String>(v415_0_0.clone())
                        }
                        Dice_ui::US34::US34_1(v415_1_0) => {
                            Err::<Option<string>, std::string::String>(v415_1_0.clone())
                        }
                    });
                let v425: string = string("}");
                let v431: bool = true;
                let v426 = v422;
                let v441: string = append(
                    (append(
                        (append((append(string("true; v426 "), (v425))), string("); "))),
                        string(""),
                    )),
                    string(" // rust.fix_closure\'"),
                );
                let v442: bool = true;
                v426
            }); // rust.fix_closure';
            let v444 = __future_init;
            v444
        }
        pub fn closure79(
            v0_1: Dice_ui::US28,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure80(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method87(
            v0_1: Dice_ui::US28,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure79(v0_1.clone(), v)
            })
        }
        pub fn method98(
            v0_1: Vec<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            v0_1
        }
        pub fn method99(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method100(
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Result<Vec<Option<string>>, std::string::String> {
            v0_1
        }
        pub fn method101(
            v0_1: std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Vec<Option<string>>, std::string::String>,
                    >,
                >,
            >,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<Option<string>>, std::string::String>>>,
        > {
            v0_1
        }
        pub fn method82(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
        ) -> leptos::prelude::Resource<
            (
                Vec<(string, Dice_ui::US24, string, bool, bool)>,
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            ),
            Result<Vec<Option<string>>, std::string::String>,
        > {
            let v2: string =
                string("let __create_local_resource = leptos::prelude::create_local_resource(move || $0(), |x| async move { //");
            let __create_local_resource = leptos::prelude::create_local_resource(
                move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v1 = v1.clone();
                        move || Dice_ui::closure74(v0_1.clone(), v1.clone(), ())
                    })()
                },
                |x| async move {
                    //;
                    {
                        let patternInput: (
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                            Option<
                                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
                            >,
                        ) = x;
                        let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                            patternInput.0.clone();
                        let v12: string =
                    append((append(string("state_core.use_requests (7) / json create_local_resource / requests: "),
                                   (Dice_ui::method10(400_i64,
                                                      sprintf!("{:?}",
                                                               v5.clone()))))),
                           string(""));
                        let v14: bool = true;
                        leptos::logging::log!("{}", v12);
                        let v16: bool = true;
                        let __future_init = Box::pin(async move {
                            //;
                            let v30: Dice_ui::US27 = defaultValue(
                                Dice_ui::US27::US27_1,
                                map(Dice_ui::method83(), patternInput.1.clone()),
                            );
                            let v72: Dice_ui::US28 = match &v30 {
                                Dice_ui::US27::US27_0(v30_0_0) => {
                                    let v34: Result<
                                        Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                        std::string::String,
                                    > = match &v30 {
                                        Dice_ui::US27::US27_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone();
                                    let v35 = Dice_ui::method84();
                                    let v36 = Dice_ui::method85();
                                    let v37: Dice_ui::US25 = match &v34 {
                                        Err(v34_1_0) => v36(v34_1_0.clone()),
                                        Ok(v34_0_0) => v35(v34_0_0.clone()),
                                    };
                                    Dice_ui::US28::US28_0(match &v37 {
                                        Dice_ui::US25::US25_0(v37_0_0) => {
                                            let v40: bool = true;
                                            let _vec_map: Vec<_> = v37_0_0
                                                .clone()
                                                .into_iter()
                                                .map(|x| {
                                                    //;
                                                    let v42: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                    let v56: Dice_ui::US26 = defaultValue(
                                                        Dice_ui::US26::US26_1,
                                                        map(Dice_ui::method86(), v42),
                                                    );
                                                    let v61: bool = true;
                                                    v56
                                                })
                                                .collect::<Vec<_>>();
                                            Dice_ui::US29::US29_0(_vec_map)
                                        }
                                        Dice_ui::US25::US25_1(v37_1_0) => {
                                            Dice_ui::US29::US29_1(v37_1_0.clone())
                                        }
                                    })
                                }
                                _ => Dice_ui::US28::US28_1,
                            };
                            let v78: string = append(
                                (append(
                                    string(
                                        "state_core.use_requests (8) / result_memo / state_data: ",
                                    ),
                                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v72.clone()))),
                                )),
                                string(""),
                            );
                            let v80: bool = true;
                            leptos::logging::log!("{}", v78);
                            let v81 = Dice_ui::method87(v72);
                            let v82: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                                Dice_ui::method98(v5);
                            let v85: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method99(
                                v82.iter()
                                    .enumerate()
                                    .map(|(i, x)| v81(i.try_into().unwrap())(x.clone()))
                                    .collect::<Vec<_>>(),
                            );
                            let v87: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<Option<string>, std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v85);
                            let v89: Result<Vec<Option<string>>, std::string::String> = v87.await;
                            let v93: Result<Vec<Option<string>>, std::string::String> =
                                Dice_ui::method100(Ok::<Vec<Option<string>>, std::string::String>(
                                    v89?,
                                ));
                            let v96: string = string("}");
                            let v102: bool = true;
                            let v97 = v93;
                            let v112: string = append(
                                (append(
                                    (append((append(string("true; v97 "), (v96))), string("); "))),
                                    string(""),
                                )),
                                string(" // rust.fix_closure\'"),
                            );
                            let v113: bool = true;
                            v97
                        }); // rust.fix_closure';
                        let v115 = __future_init;
                        let v118: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Vec<Option<string>>, std::string::String>,
                                >,
                            >,
                        > = Dice_ui::method101(v115);
                        let v120: Result<Vec<Option<string>>, std::string::String> = v118.await;
                        let v122: string = string("}}");
                        let v124: string = string("{");
                        let v130: bool = true;
                        let v125 = v120;
                        let v140: string = append(
                            (append(
                                (append((append(string("true; v125 "), (v122))), string("); "))),
                                (v124),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v141: bool = true;
                        v125
                    }
                },
            );
            {
                // rust.fix_closure';
                __create_local_resource
            }
        }
        pub fn method102(v0_1: string) -> string {
            v0_1
        }
        pub fn closure85(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method103() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure85((), v))
        }
        pub fn method104(v0_1: Result<(), std::string::String>) -> Result<(), std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: LrcPtr<Dice_ui::Heap4>,
            v1: std::sync::Arc<rexie::Rexie>,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v9: string =
                append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                               (v2.clone()))), string(""));
                let v11: bool = true;
                leptos::logging::log!("{}", v9);
                let v12: string = append(
                    (append(
                        (append((append(string("url["), (v2))), string("]("))),
                        sprintf!("{:?}", _arg.2.clone()),
                    )),
                    string(")"),
                );
                let v17: string = append(
                    (append(
                        string("state_core.set_data () / data_len: "),
                        (toString(length(sprintf!("{:?}", v0_1.clone())) as i64)),
                    )),
                    string(""),
                );
                let v19: bool = true;
                leptos::logging::log!("{}", v17);
                let v21: bool = true;
                let __future_init = Box::pin(async move {
                    //;
                    let v23: bool = true;
                    let mut data = Vec::new();
                    let v25: bool = true;
                    borsh::BorshSerialize::serialize(&v0_1, &mut data).unwrap();
                    let v27: Vec<u8> = data;
                    let v29: wasm_bindgen::JsValue = serde_wasm_bindgen::to_value(&v27).unwrap();
                    let v30: string = Dice_ui::method102(v12);
                    let v35: &str = &*v30;
                    let v56: rexie::Transaction =
                        v1.transaction(&["store"], rexie::TransactionMode::ReadWrite)?;
                    let v58: rexie::Store = v56.store("store")?;
                    let v60: bool = true;
                    v58.put(&v29, Some(&v35.into())).await?;
                    let v62: bool = true;
                    v56.done().await?;
                    let v64: Result<(), rexie::Error> =
                        Dice_ui::method51(Ok::<(), rexie::Error>(()));
                    let v67: string = string("}");
                    let v73: bool = true;
                    let v68 = v64;
                    let v83: string = append(
                        (append(
                            (append((append(string("true; v68 "), (v67))), string("); "))),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v84: bool = true;
                    v68
                }); // rust.fix_closure';
                let v86 = __future_init;
                let v88: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                > = v86;
                let v90: Result<(), rexie::Error> = v88.await;
                let v91 = Dice_ui::method103();
                let v96: Result<(), std::string::String> = v90.map_err(|x| v91(x));
                let v107: bool = true;
                v96?;
                let v109: Result<(), std::string::String> =
                    Dice_ui::method104(Ok::<(), std::string::String>(()));
                let v110: string = string("}");
                let v116: bool = true;
                let v111 = v109;
                let v126: string = append(
                    (append(
                        (append((append(string("true; v111 "), (v110))), string("); "))),
                        string(""),
                    )),
                    string(" // rust.fix_closure\'"),
                );
                let v127: bool = true;
                v111
            }); // rust.fix_closure';
            let v129 = __future_init;
            v129
        }
        pub fn method105(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method106(
            v0_1: Result<Vec<()>, std::string::String>,
        ) -> Result<Vec<()>, std::string::String> {
            v0_1
        }
        pub fn closure83(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>>,
            v2: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v7: string = append(
                (append(
                    string("state_core.use_requests (10) / set_state_data_action / value_len: "),
                    (toString(length(sprintf!("{:?}", v2.clone())) as i64)),
                )),
                string(""),
            );
            let v9: bool = true;
            leptos::logging::log!("{}", v7);
            let v11: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v13: Vec<(string, Dice_ui::US24, string, bool, bool)> =
                    leptos::prelude::RwSignal::get_untracked(&v0_1);
                let v15: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                    leptos::prelude::RwSignal::get_untracked(&v1);
                let v17: bool = true;
                let _optionm_map_ = v15.map(|x| {
                    //;
                    let v19: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                    let v21: std::sync::Arc<rexie::Rexie> = v19.0;
                    let v23: bool = true;
                    v21
                });
                let v25: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                let v39: Dice_ui::US4 =
                    defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v25));
                let v62: Dice_ui::US35 = if let Dice_ui::US4::US4_0(v39_0_0) = &v39 {
                    let v47: Vec<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = Dice_ui::method105(
                        v13.into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v2 = v2.clone();
                                    let v39 = v39.clone();
                                    move |arg10_0040: (
                                        string,
                                        Dice_ui::US24,
                                        string,
                                        bool,
                                        bool,
                                    )| {
                                        Dice_ui::closure84(
                                            v2.clone(),
                                            match &v39 {
                                                Dice_ui::US4::US4_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                            arg10_0040,
                                        )
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>(),
                    );
                    let v49: futures::future::TryJoinAll<
                        std::pin::Pin<
                            Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                        >,
                    > = futures::future::try_join_all(v47);
                    let v51: Result<Vec<()>, std::string::String> = v49.await;
                    Dice_ui::US35::US35_0(v51?)
                } else {
                    let v57: bool = true;
                    leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                    Dice_ui::US35::US35_0(new_empty::<()>().to_vec())
                };
                let v69: Result<Vec<()>, std::string::String> = Dice_ui::method106(match &v62 {
                    Dice_ui::US35::US35_0(v62_0_0) => {
                        Ok::<Vec<()>, std::string::String>(v62_0_0.clone())
                    }
                    Dice_ui::US35::US35_1(v62_1_0) => {
                        Err::<Vec<()>, std::string::String>(v62_1_0.clone())
                    }
                });
                let v72: string = string("}");
                let v78: bool = true;
                let v73 = v69;
                let v88: string = append(
                    (append(
                        (append((append(string("true; v73 "), (v72))), string("); "))),
                        string(""),
                    )),
                    string(" // rust.fix_closure\'"),
                );
                let v89: bool = true;
                v73
            }); // rust.fix_closure';
            let v91 = __future_init;
            v91
        }
        pub fn closure87(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US38 {
            Dice_ui::US38::US38_0(v0_1)
        }
        pub fn method107() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US38>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure87((), v)
            })
        }
        pub fn closure88(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US40 {
            Dice_ui::US40::US40_0(v0_1)
        }
        pub fn method108() -> Func1<Vec<Option<string>>, Dice_ui::US40> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure88((), v))
        }
        pub fn closure89(unitVar: (), v0_1: std::string::String) -> Dice_ui::US40 {
            Dice_ui::US40::US40_1(v0_1)
        }
        pub fn method109() -> Func1<std::string::String, Dice_ui::US40> {
            Func1::new(move |v: std::string::String| Dice_ui::closure89((), v))
        }
        pub fn closure90(unitVar: (), v0_1: string) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method110() -> Func1<string, Dice_ui::US32> {
            Func1::new(move |v: string| Dice_ui::closure90((), v))
        }
        pub fn closure93(unitVar: (), v0_1: Dice_ui::US32) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method112() -> Func1<Dice_ui::US32, Dice_ui::US43> {
            Func1::new(move |v: Dice_ui::US32| Dice_ui::closure93((), v))
        }
        pub fn closure94(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method113(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure94((), v))
        }
        pub fn method114(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure92(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v51: Dice_ui::US30 = match &v0_1 {
                Dice_ui::US36::US36_0(v0_1_0_0) => {
                    let v8: Dice_ui::US37 = match &v0_1 {
                        Dice_ui::US36::US36_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US30::US30_0(match &v8 {
                        Dice_ui::US37::US37_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US26> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US33 =
                                defaultValue(Dice_ui::US33::US33_1, map(Dice_ui::method88(), v10));
                            let v34: Dice_ui::US26 = if let Dice_ui::US33::US33_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US26 = v24_0_0.clone();
                                if let Dice_ui::US26::US26_0(v28_0_0) = &v28 {
                                    Dice_ui::US26::US26_0(v28_0_0.clone())
                                } else {
                                    Dice_ui::US26::US26_1
                                }
                            } else {
                                Dice_ui::US26::US26_1
                            };
                            Dice_ui::US31::US31_0(match &v34 {
                                Dice_ui::US26::US26_0(v34_0_0) => {
                                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US26::US26_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US32::US32_1,
                            })
                        }
                        Dice_ui::US37::US37_1(v8_1_0) => Dice_ui::US31::US31_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US30::US30_1,
            };
            let v62: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method10(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v51.clone()))),
                )),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US32 = match &v1 {
                Dice_ui::US42::US42_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US32> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v90: Dice_ui::US43 =
                        defaultValue(Dice_ui::US43::US43_1, map(Dice_ui::method112(), v76));
                    if let Dice_ui::US43::US43_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US32 = v90_0_0.clone();
                        if let Dice_ui::US32::US32_0(v94_0_0) = &v94 {
                            Dice_ui::US32::US32_0(v94_0_0.clone())
                        } else {
                            Dice_ui::US32::US32_1
                        }
                    } else {
                        Dice_ui::US32::US32_1
                    }
                }
                _ => Dice_ui::US32::US32_1,
            };
            if let Dice_ui::US32::US32_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method48(v104_0_0.clone());
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method49();
                let v138: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method113();
                let v149: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method114(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US30::US30_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US31 = v51_0_0.clone();
                    if let Dice_ui::US31::US31_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US32 = v152_0_0.clone();
                        if let Dice_ui::US32::US32_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method48(v153_0_0.clone());
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method49();
                            let v187: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method113();
                            let v198: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method114(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                )),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            )),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v222: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104.clone(), v51.clone())),
                        )),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure91(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure92(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method111(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure91(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure86(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            >,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v0_1();
            let v9: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                v1();
            let v27: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method83(), v13));
            let v71: Dice_ui::US36 = match &v27 {
                Dice_ui::US27::US27_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v32 = Dice_ui::method84();
                    let v33 = Dice_ui::method85();
                    let v34: Dice_ui::US25 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v34 {
                        Dice_ui::US25::US25_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method86(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(
                                v60.clone(),
                            ))
                        }
                        Dice_ui::US25::US25_1(v34_1_0) => Dice_ui::US37::US37_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v77: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v71.clone()))),
                )),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::prelude::RwSignal::get(&v2);
            let v95: Dice_ui::US38 =
                defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method107(), v81));
            let v106: Dice_ui::US39 = match &v95 {
                Dice_ui::US38::US38_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v100 = Dice_ui::method108();
                    let v101 = Dice_ui::method109();
                    Dice_ui::US39::US39_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US39::US39_1,
            };
            let v142: Dice_ui::US41 = match &v106 {
                Dice_ui::US39::US39_0(v106_0_0) => {
                    let v107: Dice_ui::US40 = match &v106 {
                        Dice_ui::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US41::US41_0(match &v107 {
                        Dice_ui::US40::US40_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method110(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US42::US42_0(_vec_map)
                        }
                        Dice_ui::US40::US40_1(v107_1_0) => Dice_ui::US42::US42_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US41::US41_1,
            };
            let v145: Vec<Dice_ui::US32> = new_empty::<Dice_ui::US32>().to_vec();
            let v149: Dice_ui::US42 = match &v142 {
                Dice_ui::US41::US41_0(v142_0_0) => match &v142 {
                    Dice_ui::US41::US41_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US42::US42_0(v145.clone()),
            };
            match &v149 {
                Dice_ui::US42::US42_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US32 = x;
                        if let Dice_ui::US32::US32_0(v154_0_0) = &v154 {
                            let v160: &str = &*v154_0_0.clone();
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v204.clone());
                            ()
                        }
                        {
                            let v208: bool = true;
                            let v210: bool = true;
                        }
                    });
                    {
                        //;
                        ()
                    }
                }
                _ => (),
            }
            {
                let v212 = Dice_ui::method111(v71, v149.clone());
                let v213: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method98(v5);
                let v215: Vec<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = v213
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v212(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v217: Array<
                    Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                > = fable_library_rust::NativeArray_::array_from(v215.clone());
                let v223: string = Dice_ui::method10(
                    200_i64,
                    append(
                        (append(
                            string("state_core.use_requests (18) / result_func func0 / result: "),
                            sprintf!("{:?}", v217.clone()),
                        )),
                        string(""),
                    ),
                );
                let v225: bool = true;
                leptos::logging::log!("{}", v223);
                v217
            }
        }
        pub fn method116(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure97(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method116(v0_1), v1)
        }
        pub fn method115(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure97(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method117(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn closure96(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2 = Dice_ui::method115(v0_1);
            let v3: Result<Option<crate::model::near::nearblocks::Root>, std::string::String> =
                Dice_ui::method117(v1);
            v3.map(|x| v2(x))
        }
        pub fn closure95(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::Signal<bool> = leptos::attr::loading(&v1.clone());
            let v7: bool = leptos::prelude::Signal::get(&v5);
            let v9: leptos::prelude::Signal<bool> = leptos::attr::loading(&v2.clone());
            let v11: bool = leptos::prelude::Signal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::RwSignal::get(&v1);
            let v27: Dice_ui::US4 =
                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::RwSignal::get(&v2);
            let v46: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method83(), v32));
            let v90: Dice_ui::US36 = match &v46 {
                Dice_ui::US27::US27_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v51 = Dice_ui::method84();
                    let v52 = Dice_ui::method85();
                    let v53: Dice_ui::US25 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v53 {
                        Dice_ui::US25::US25_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method86(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(
                                v79.clone(),
                            ))
                        }
                        Dice_ui::US25::US25_1(v53_1_0) => Dice_ui::US37::US37_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v95: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v95))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v100))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v3();
            let v107: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v105.to_vec();
            let v110: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v_1: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure96(v0_1.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v116: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v110.clone()),
                    )),
                    string(""),
                ),
            );
            let v118: bool = true;
            leptos::logging::log!("{}", v116);
            v110
        }
        pub fn method75(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::Memo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v8: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method6();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure70(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::prelude::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>> =
                leptos::prelude::Memo::new(move |_| v11(()));
            let v14: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method76(v0_1.clone(), v8.clone());
            let v17 = {
                let clo_1 = Func0::new({
                    let v14 = v14.clone();
                    move || Dice_ui::closure73(v14.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v19: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v17(()));
            let v20: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            > = Dice_ui::method82(v0_1.clone(), v19.clone());
            let v23 = Box::pin(Func1::new({
                let v0_1 = v0_1.clone();
                let v13 = v13.clone();
                move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure83(v0_1.clone(), v13.clone(), v)
            }));
            let v24: string =
                string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))");
            let v25: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(*std::sync::Arc::new(
                move |value: &std::sync::Arc<Heap4>| v23(value.clone()),
            ));
            let v28 = {
                let clo_2 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v19 = v19.clone();
                    let v20 = v20.clone();
                    let v25 = v25.clone();
                    move || {
                        Dice_ui::closure86(v0_1.clone(), v19.clone(), v20.clone(), v25.clone(), ())
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v30: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v28(()));
            let v33 = {
                let clo_3 = Func0::new({
                    let v1 = v1.clone();
                    let v14 = v14.clone();
                    let v30 = v30.clone();
                    let v8 = v8.clone();
                    move || Dice_ui::closure95(v1.clone(), v8.clone(), v14.clone(), v30.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            leptos::prelude::Memo::new(move |_| v33(()))
        }
        pub fn closure100(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US44 {
            Dice_ui::US44::US44_0(v0_1)
        }
        pub fn method118() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US44,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure100((), v),
            )
        }
        pub fn closure101(unitVar: (), v0_1: std::string::String) -> Dice_ui::US44 {
            Dice_ui::US44::US44_1(v0_1)
        }
        pub fn method119() -> Func1<std::string::String, Dice_ui::US44> {
            Func1::new(move |v: std::string::String| Dice_ui::closure101((), v))
        }
        pub fn closure99(
            unitVar: (),
            v0_1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US44 {
            let v1 = Dice_ui::method118();
            let v2 = Dice_ui::method119();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US46 {
            Dice_ui::US46::US46_0(v0_1)
        }
        pub fn method120() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US46,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure103((), v),
            )
        }
        pub fn closure102(unitVar: (), v0_1: Dice_ui::US44) -> Dice_ui::US45 {
            match &v0_1 {
                Dice_ui::US44::US44_0(v0_1_0_0) => Dice_ui::US45::US45_0(defaultValue(
                    Dice_ui::US46::US46_1,
                    map(Dice_ui::method120(), v0_1_0_0.clone()),
                )),
                Dice_ui::US44::US44_1(v0_1_1_0) => Dice_ui::US45::US45_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure104(unitVar: (), v0_1: Dice_ui::US45) -> bool {
            if let Dice_ui::US45::US45_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US46::US46_1 = &v0_1_0_0 {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method121() -> Func1<Dice_ui::US45, bool> {
            Func1::new(move |v: Dice_ui::US45| Dice_ui::closure104((), v))
        }
        pub fn method122(v0_1: Vec<Dice_ui::US45>) -> Vec<Dice_ui::US45> {
            v0_1
        }
        pub fn closure107(
            unitVar: (),
            v0_: usize,
            v0__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = v0_1.1.clone();
            (
                v0_1.0.clone(),
                b.0.clone(),
                b.1.clone(),
                b.2.clone(),
                b.3.clone(),
                b.4.clone(),
                b.5.clone(),
                b.6.clone(),
                b.7.clone(),
                b.8.clone(),
                b.9.clone(),
                b.10.clone(),
                b.11.clone(),
            )
        }
        pub fn closure108(
            v0_1: i32,
            v1: string,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            (
                v1,
                v0_1 as usize,
                LrcPtr::new(Dice_ui::Heap5 {
                    l0: _arg.1.clone(),
                    l1: _arg.2.clone(),
                    l2: _arg.3.clone(),
                    l3: _arg.4.clone(),
                    l4: _arg.5.clone(),
                    l5: _arg.6.clone(),
                    l6: _arg.7.clone(),
                    l7: _arg.8.clone(),
                    l8: _arg.9.clone(),
                    l9: _arg.10.clone(),
                    l10: _arg.11.clone(),
                    l11: _arg.12.clone(),
                }),
            )
        }
        pub fn closure106(v0_1: Array<string>, v1: i32, v2: Dice_ui::US45) -> Dice_ui::US49 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US45::US45_0(v2_0_0) => {
                    let v4: Dice_ui::US46 = v2_0_0.clone();
                    Dice_ui::US49::US49_0(match &v4 {
                        Dice_ui::US46::US46_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US46::US46_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new(
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure107(
                                                (),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        },
                                    )(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v18: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v16.clone());
                            let v20: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v18.to_vec();
                            Dice_ui::US50::US50_0(
                                v20.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1 = v1.clone();
                                            let v3 = v3.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure108(v1, v3.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US50::US50_1,
                    })
                }
                Dice_ui::US45::US45_1(v2_1_0) => Dice_ui::US49::US49_1(v2_1_0.clone()),
            }
        }
        pub fn closure105(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US45, Dice_ui::US49> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US45| Dice_ui::closure106(v0_1.clone(), v1, v)
            })
        }
        pub fn method123(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US45, Dice_ui::US49>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure105(v0_1.clone(), v)
            })
        }
        pub fn method124(v0_1: Vec<Dice_ui::US45>) -> Vec<Dice_ui::US45> {
            v0_1
        }
        pub fn closure109(unitVar: (), v0_1: Dice_ui::US49) -> Dice_ui::US51 {
            match &v0_1 {
                Dice_ui::US49::US49_0(v0_1_0_0) => {
                    let v1: Dice_ui::US50 = v0_1_0_0.clone();
                    Dice_ui::US51::US51_0(match &v1 {
                        Dice_ui::US50::US50_0(v1_0_0) => Some(
                            match &v1 {
                                Dice_ui::US50::US50_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US49::US49_1(v0_1_1_0) => Dice_ui::US51::US51_1(v0_1_1_0.clone()),
            }
        }
        pub fn closure110(
            unitVar: (),
            v0_1: Dice_ui::US51,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            match &v0_1 {
                Dice_ui::US51::US51_0(v0_1_0_0) => Ok::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_0_0.clone()),
                Dice_ui::US51::US51_1(v0_1_1_0) => Err::<
                    Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v0_1_1_0.clone()),
            }
        }
        pub fn method125(v0_1: i32, v1: LrcPtr<Dice_ui::Mut3>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure111(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US51 {
            Dice_ui::US51::US51_0(v0_1)
        }
        pub fn method126(
        ) -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US51> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure111((), v)
                },
            )
        }
        pub fn closure112(unitVar: (), v0_1: std::string::String) -> Dice_ui::US51 {
            Dice_ui::US51::US51_1(v0_1)
        }
        pub fn method127() -> Func1<std::string::String, Dice_ui::US51> {
            Func1::new(move |v: std::string::String| Dice_ui::closure112((), v))
        }
        pub fn closure113(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method128() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US50> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure113((), v)
            })
        }
        pub fn method129(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method130(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method131(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure114(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method132() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure114((), arg10_0040)
            })
        }
        pub fn method133(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure98(
            v0_1: leptos::prelude::Memo<Array<string>>,
            v1: leptos::prelude::Memo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v1();
            let v6: Vec<Dice_ui::US44> = v3
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure99((), v),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v9: Vec<Dice_ui::US45> = v6
                .into_iter()
                .map(|x| {
                    Func1::new(move |v_1: Dice_ui::US44| Dice_ui::closure102((), v_1))(x.clone())
                })
                .collect::<Vec<_>>();
            let v15: string = append(
                (append(
                    string("transactions.render (8) / txns move / root: "),
                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v9.clone()))),
                )),
                string(""),
            );
            let v17: bool = true;
            leptos::logging::log!("{}", v15);
            let v18 = Dice_ui::method121();
            let v19: Vec<Dice_ui::US45> = Dice_ui::method122(v9.clone());
            let v21: Vec<Dice_ui::US45> = v19
                .into_iter()
                .filter(|x| v18(x.clone().clone()))
                .collect::<Vec<_>>();
            let v28: bool = (get_Count(fable_library_rust::NativeArray_::array_from(v21.clone())))
                == (get_Count(fable_library_rust::NativeArray_::array_from(
                    v9.clone().clone(),
                )));
            let v140: Dice_ui::US47 = if v28 {
                Dice_ui::US47::US47_0(Dice_ui::US48::US48_1)
            } else {
                let v33 = Dice_ui::method123(v0_1());
                let v34: Vec<Dice_ui::US45> = Dice_ui::method124(v9);
                let v36: Vec<Dice_ui::US49> = v34
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v33(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v39: Vec<Dice_ui::US51> = v36
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v_2: Dice_ui::US49| Dice_ui::closure109((), v_2))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v42: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v39
                    .into_iter()
                    .map(|x| {
                        Func1::new(move |v_3: Dice_ui::US51| Dice_ui::closure110((), v_3))(
                            x.clone(),
                        )
                    })
                    .collect::<Vec<_>>();
                let v45: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v47: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v42.clone());
                let v48: i32 = get_Count(v47.clone());
                let v50: LrcPtr<Dice_ui::Mut3> = LrcPtr::new(Dice_ui::Mut3 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(Dice_ui::US52::US52_0(v45)),
                });
                while Dice_ui::method125(v48, v50.clone()) {
                    let v52: i32 = v50.l0.get().clone();
                    let v53: Dice_ui::US52 = v50.l1.get().clone();
                    let v54: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v47[v52].clone();
                    let v55 = Dice_ui::method126();
                    let v56 = Dice_ui::method127();
                    let v57: Dice_ui::US51 = match &v54 {
                        Err(v54_1_0) => v56(v54_1_0.clone()),
                        Ok(v54_0_0) => v55(v54_0_0.clone()),
                    };
                    let v80: Dice_ui::US49 = match &v57 {
                        Dice_ui::US51::US51_0(v57_0_0) => Dice_ui::US49::US49_0(defaultValue(
                            Dice_ui::US50::US50_1,
                            map(Dice_ui::method128(), v57_0_0.clone()),
                        )),
                        Dice_ui::US51::US51_1(v57_1_0) => Dice_ui::US49::US49_1(v57_1_0.clone()),
                    };
                    let v101: Dice_ui::US52 = if let Dice_ui::US52::US52_0(v53_0_0) = &v53 {
                        match &v80 {
                            Dice_ui::US49::US49_0(v80_0_0) => {
                                let v82: Dice_ui::US50 = v80_0_0.clone();
                                if let Dice_ui::US50::US50_0(v82_0_0) = &v82 {
                                    let v84: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method129(v82_0_0.clone());
                                    let v85: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        Dice_ui::method130(v53_0_0.clone());
                                    let v87: bool = true;
                                    let mut v85 = v85;
                                    let v89: bool = true;
                                    v85.extend(v84);
                                    Dice_ui::US52::US52_0(v85)
                                } else {
                                    v53.clone()
                                }
                            }
                            Dice_ui::US49::US49_1(v80_1_0) => {
                                Dice_ui::US52::US52_1(v80_1_0.clone())
                            }
                        }
                    } else {
                        if let Dice_ui::US49::US49_1(v80_1_0) = &v80 {
                            Dice_ui::US52::US52_1(v80_1_0.clone())
                        } else {
                            v53.clone()
                        }
                    };
                    let v102: i32 = (v52) + 1_i32;
                    v50.l0.set(v102);
                    v50.l1.set(v101);
                    ()
                }
                {
                    let v103: Dice_ui::US52 = v50.l1.get().clone();
                    let v117: Dice_ui::US52 = match &v103 {
                        Dice_ui::US52::US52_0(v103_0_0) => {
                            let v105: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method131(v103_0_0.clone());
                            let v106 = Dice_ui::method132();
                            let v108: bool = true;
                            let mut v105 = v105;
                            let v110: bool = true;
                            v105.sort_by_key(|x| v106(x.clone()));
                            Dice_ui::US52::US52_0(v105)
                        }
                        Dice_ui::US52::US52_1(v103_1_0) => Dice_ui::US52::US52_1(v103_1_0.clone()),
                    };
                    let v132: Dice_ui::US53 = match &v117 {
                        Dice_ui::US52::US52_0(v117_0_0) => {
                            let v119: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method133(v117_0_0.clone());
                            let v121: bool = true;
                            let mut v119 = v119;
                            let v123: bool = true;
                            v119.reverse();
                            let v125: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v119;
                            Dice_ui::US53::US53_0(fable_library_rust::NativeArray_::array_from(
                                v125.clone(),
                            ))
                        }
                        Dice_ui::US52::US52_1(v117_1_0) => Dice_ui::US53::US53_1(v117_1_0.clone()),
                    };
                    match &v132 {
                        Dice_ui::US53::US53_0(v132_0_0) => {
                            Dice_ui::US47::US47_0(Dice_ui::US48::US48_0(v132_0_0.clone()))
                        }
                        Dice_ui::US53::US53_1(v132_1_0) => Dice_ui::US47::US47_1(v132_1_0.clone()),
                    }
                }
            };
            let v153: Dice_ui::US54 = match &v140 {
                Dice_ui::US47::US47_0(v140_0_0) => {
                    let v141: Dice_ui::US48 = v140_0_0.clone();
                    Dice_ui::US54::US54_0(match &v141 {
                        Dice_ui::US48::US48_0(v141_0_0) => Some(
                            match &v141 {
                                Dice_ui::US48::US48_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US47::US47_1(v140_1_0) => Dice_ui::US54::US54_1(v140_1_0.clone()),
            };
            let v159: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v153 {
                Dice_ui::US54::US54_0(v153_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v153_0_0.clone()),
                Dice_ui::US54::US54_1(v153_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v153_1_0.clone()),
            };
            let v165: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        (append(
                            (append(
                                string("use_transactions.render (9) / txns create_memo / result: "),
                                sprintf!("{:?}", v159.clone()),
                            )),
                            string(" / loading: "),
                        )),
                        (ofBoolean(v28)),
                    )),
                    string(""),
                ),
            );
            let v167: bool = true;
            leptos::logging::log!("{}", v165);
            v159
        }
        pub fn closure116(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US54 {
            Dice_ui::US54::US54_0(v0_1)
        }
        pub fn method134(
        ) -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US54> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure116((), v)
                },
            )
        }
        pub fn closure117(unitVar: (), v0_1: std::string::String) -> Dice_ui::US54 {
            Dice_ui::US54::US54_1(v0_1)
        }
        pub fn method135() -> Func1<std::string::String, Dice_ui::US54> {
            Func1::new(move |v: std::string::String| Dice_ui::closure117((), v))
        }
        pub fn closure118(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US48 {
            Dice_ui::US48::US48_0(v0_1)
        }
        pub fn method136() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US48> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure118((), v)
            })
        }
        pub fn closure120(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method137() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure120((), v))
        }
        pub fn method138() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure55((), v))
        }
        pub fn method139(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure121(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US24, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US24::US24_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method140() -> Func1<string, (string, Dice_ui::US24, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure121((), v))
        }
        pub fn method141(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn closure119(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US24, string, bool, bool), std::string::String> {
            let v8: &str = &*string("2.0");
            let v32: std::string::String = String::from(v8);
            let v57: &str = &*string("dontcare");
            let v81: std::string::String = String::from(v57);
            let v106: &str = &*string("EXPERIMENTAL_tx_status");
            let v130: std::string::String = String::from(v106);
            let v156: &str = &*string("bowen");
            let v200: Array<std::string::String> =
                new_array(&[(_arg.2.clone()).l3.clone(), String::from(v156)]);
            let v202: Vec<std::string::String> = v200.to_vec();
            let v204: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                jsonrpc: v32,
                id: v81,
                method: v130,
                params: v202,
            };
            let v206: Result<std::string::String, serde_json::Error> = serde_json::to_string(&v204);
            let v207 = Dice_ui::method137();
            let v212: Result<std::string::String, std::string::String> = v206.map_err(|x| v207(x));
            let v222 = Dice_ui::method138();
            let v223: Result<std::string::String, std::string::String> = Dice_ui::method139(v212);
            let v225: Result<string, std::string::String> = v223.map(|x| v222(x));
            let v226 = Dice_ui::method140();
            let v227: Result<string, std::string::String> = Dice_ui::method141(v225);
            v227.map(|x| v226(x))
        }
        pub fn closure115(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US24, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v3 = Dice_ui::method134();
            let v4 = Dice_ui::method135();
            let v5: Dice_ui::US54 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US47 = match &v5 {
                Dice_ui::US54::US54_0(v5_0_0) => Dice_ui::US47::US47_0(defaultValue(
                    Dice_ui::US48::US48_1,
                    map(Dice_ui::method136(), v5_0_0.clone()),
                )),
                Dice_ui::US54::US54_1(v5_1_0) => Dice_ui::US47::US47_1(v5_1_0.clone()),
            };
            let v50: Dice_ui::US55 = match &v28 {
                Dice_ui::US47::US47_0(v28_0_0) => {
                    let v29: Dice_ui::US48 = v28_0_0.clone();
                    if let Dice_ui::US48::US48_0(v29_0_0) = &v29 {
                        let v32: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v29_0_0.clone().to_vec();
                        let v35: Vec<
                            Result<
                                (string, Dice_ui::US24, string, bool, bool),
                                std::string::String,
                            >,
                        > = v32
                            .into_iter()
                            .map(|x| {
                                Func1::new(
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure119((), arg10_0040)
                                    },
                                )(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v37: Result<
                            Vec<(string, Dice_ui::US24, string, bool, bool)>,
                            std::string::String,
                        > = v35.into_iter().collect();
                        let v39: Vec<(string, Dice_ui::US24, string, bool, bool)> = v37?;
                        Dice_ui::US55::US55_0(Dice_ui::US56::US56_0(
                            fable_library_rust::NativeArray_::array_from(v39.clone()),
                        ))
                    } else {
                        Dice_ui::US55::US55_0(Dice_ui::US56::US56_1)
                    }
                }
                Dice_ui::US47::US47_1(v28_1_0) => Dice_ui::US55::US55_1(v28_1_0.clone()),
            };
            let v63: Dice_ui::US57 = match &v50 {
                Dice_ui::US55::US55_0(v50_0_0) => {
                    let v51: Dice_ui::US56 = v50_0_0.clone();
                    Dice_ui::US57::US57_0(match &v51 {
                        Dice_ui::US56::US56_0(v51_0_0) => Some(
                            match &v51 {
                                Dice_ui::US56::US56_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    })
                }
                Dice_ui::US55::US55_1(v50_1_0) => Dice_ui::US57::US57_1(v50_1_0.clone()),
            };
            let v69: Result<
                Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                std::string::String,
            > = match &v63 {
                Dice_ui::US57::US57_0(v63_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >(v63_0_0.clone()),
                Dice_ui::US57::US57_1(v63_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >(v63_1_0.clone()),
            };
            let v75: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (10) / rpc_requests create_memo / result: ",
                        ),
                        sprintf!("{:?}", v69.clone()),
                    )),
                    string(""),
                ),
            );
            let v77: bool = true;
            leptos::logging::log!("{}", v75);
            v69
        }
        pub fn closure123(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
        ) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method142(
        ) -> Func1<Option<Array<(string, Dice_ui::US24, string, bool, bool)>>, Dice_ui::US57>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US24, string, bool, bool)>>| {
                    Dice_ui::closure123((), v)
                },
            )
        }
        pub fn closure124(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method143() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure124((), v))
        }
        pub fn closure125(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US24, string, bool, bool)>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method144(
        ) -> Func1<Array<(string, Dice_ui::US24, string, bool, bool)>, Dice_ui::US56> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US24, string, bool, bool)>| {
                    Dice_ui::closure125((), v)
                },
            )
        }
        pub fn closure122(
            v0_1: leptos::prelude::Memo<
                Result<
                    Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US24, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                std::string::String,
            > = v0_1();
            let v3 = Dice_ui::method142();
            let v4 = Dice_ui::method143();
            let v5: Dice_ui::US57 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US55 = match &v5 {
                Dice_ui::US57::US57_0(v5_0_0) => Dice_ui::US55::US55_0(defaultValue(
                    Dice_ui::US56::US56_1,
                    map(Dice_ui::method144(), v5_0_0.clone()),
                )),
                Dice_ui::US57::US57_1(v5_1_0) => Dice_ui::US55::US55_1(v5_1_0.clone()),
            };
            let v34: Array<(string, Dice_ui::US24, string, bool, bool)> =
                if let Dice_ui::US55::US55_0(v28_0_0) = &v28 {
                    let v29: Dice_ui::US56 = v28_0_0.clone();
                    if let Dice_ui::US56::US56_0(v29_0_0) = &v29 {
                        v29_0_0.clone()
                    } else {
                        new_empty::<(string, Dice_ui::US24, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US24, string, bool, bool)>()
                };
            let v36: Vec<(string, Dice_ui::US24, string, bool, bool)> = v34.to_vec();
            let v42: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' create_memo / result: ",
                        ),
                        sprintf!("{:?}", v36.clone()),
                    )),
                    string(""),
                ),
            );
            let v44: bool = true;
            leptos::logging::log!("{}", v42);
            v36
        }
        pub fn closure130(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn closure129(
            unitVar: (),
            v0_1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            v0_1.into_iter()
                .map(|(k, v)| {
                    (
                        k,
                        Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                            Dice_ui::closure130((), v)
                        })(v),
                    )
                })
                .collect()
        }
        pub fn closure128(
            unitVar: (),
            v0_1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().predecessor_id;
            let v4: crate::model::near::rpc::ReceiptDetail = v0_1.clone().receipt;
            let v6: crate::model::near::rpc::ActionDetail = v4.action;
            let v8: Vec<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
            > = v6.clone().actions;
            let v11: Vec<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = v8
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |v: std::collections::HashMap<
                            std::string::String,
                            crate::model::near::rpc::TransferDetail,
                        >| Dice_ui::closure129((), v),
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v13: Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = fable_library_rust::NativeArray_::array_from(v11.clone());
            let v15: std::string::String = v6.clone().gas_price;
            let v17: Vec<std::string::String> = v6.clone().input_data_ids;
            let v19: Array<std::string::String> =
                fable_library_rust::NativeArray_::array_from(v17.clone());
            let v21: Vec<std::string::String> = v6.clone().output_data_receivers;
            (
                v2,
                v13,
                v15,
                v19,
                fable_library_rust::NativeArray_::array_from(v21.clone()),
                v6.clone().signer_id,
                v6.signer_public_key,
                v0_1.clone().receipt_id,
                v0_1.receiver_id,
            )
        }
        pub fn closure132(
            unitVar: (),
            v0_1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            (v0_1.clone().cost, v0_1.clone().cost_category, v0_1.gas_used)
        }
        pub fn closure134(
            unitVar: (),
            v0_1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            (v0_1.clone().direction, v0_1.hash)
        }
        pub fn closure133(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Proof| Dice_ui::closure134((), v))(
                        x.clone(),
                    )
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v3.clone())
        }
        pub fn method146() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure133((), v))
        }
        pub fn closure131(
            unitVar: (),
            v0_1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: std::string::String = v0_1.clone().block_hash;
            let v4: std::string::String = v0_1.clone().id;
            let v6: crate::model::near::rpc::OutcomeDetail = v0_1.clone().outcome;
            let v8: std::string::String = v6.clone().executor_id;
            let v10: u64 = v6.clone().gas_burnt;
            let v12: Vec<std::string::String> = v6.clone().logs;
            let v14: Array<std::string::String> =
                fable_library_rust::NativeArray_::array_from(v12.clone());
            let v16: crate::model::near::rpc::Metadata = v6.clone().metadata;
            let v18: Vec<crate::model::near::rpc::GasProfile> = v16.clone().gas_profile;
            let v21: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v18
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::GasProfile| {
                        Dice_ui::closure132((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v23: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v21.clone());
            let v25: u8 = v16.version;
            let v27: Vec<std::string::String> = v6.clone().receipt_ids;
            let v29: Array<std::string::String> =
                fable_library_rust::NativeArray_::array_from(v27.clone());
            let v31: std::collections::HashMap<std::string::String, std::string::String> =
                v6.clone().status;
            let v33: Option<std::string::String> = v6.tokens_burnt;
            let v35: Option<Vec<crate::model::near::rpc::Proof>> = v0_1.proof;
            (
                v2,
                v4,
                v8,
                v10,
                v14,
                v23,
                v25,
                v29,
                v31,
                v33,
                defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method146(), v35),
                ),
            )
        }
        pub fn closure127(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: crate::model::near::rpc::Receipt| {
                        Dice_ui::closure128((), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v7: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v5.clone());
            let v9: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v12: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v9
                .into_iter()
                .map(|x| {
                    Func1::new(move |v_1: crate::model::near::rpc::ReceiptsOutcome| {
                        Dice_ui::closure131((), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (
                v7,
                fable_library_rust::NativeArray_::array_from(v12.clone()),
            )
        }
        pub fn method145() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure127((), v)
            })
        }
        pub fn closure136(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method148() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure136((), v))
        }
        pub fn closure135(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method148(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method147() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure135((), v))
        }
        pub fn closure126(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v6: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method145(), v4);
            let v31: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v6, map(Dice_ui::method147(), v31), v0_1.id)
        }
        pub fn closure140(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method151(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure140((), v))
        }
        pub fn method152(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure139(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
            _arg: (string, Dice_ui::US24, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v51: Dice_ui::US30 = match &v0_1 {
                Dice_ui::US36::US36_0(v0_1_0_0) => {
                    let v8: Dice_ui::US37 = match &v0_1 {
                        Dice_ui::US36::US36_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US30::US30_0(match &v8 {
                        Dice_ui::US37::US37_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US26> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US33 =
                                defaultValue(Dice_ui::US33::US33_1, map(Dice_ui::method88(), v10));
                            let v34: Dice_ui::US26 = if let Dice_ui::US33::US33_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US26 = v24_0_0.clone();
                                if let Dice_ui::US26::US26_0(v28_0_0) = &v28 {
                                    Dice_ui::US26::US26_0(v28_0_0.clone())
                                } else {
                                    Dice_ui::US26::US26_1
                                }
                            } else {
                                Dice_ui::US26::US26_1
                            };
                            Dice_ui::US31::US31_0(match &v34 {
                                Dice_ui::US26::US26_0(v34_0_0) => {
                                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US26::US26_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US32::US32_1,
                            })
                        }
                        Dice_ui::US37::US37_1(v8_1_0) => Dice_ui::US31::US31_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US30::US30_1,
            };
            let v62: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method10(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v51.clone()))),
                )),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US32 = match &v1 {
                Dice_ui::US42::US42_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US32> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v90: Dice_ui::US43 =
                        defaultValue(Dice_ui::US43::US43_1, map(Dice_ui::method112(), v76));
                    if let Dice_ui::US43::US43_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US32 = v90_0_0.clone();
                        if let Dice_ui::US32::US32_0(v94_0_0) = &v94 {
                            Dice_ui::US32::US32_0(v94_0_0.clone())
                        } else {
                            Dice_ui::US32::US32_1
                        }
                    } else {
                        Dice_ui::US32::US32_1
                    }
                }
                _ => Dice_ui::US32::US32_1,
            };
            if let Dice_ui::US32::US32_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method48(v104_0_0.clone());
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method49();
                let v138: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method151();
                let v149: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method152(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US30::US30_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US31 = v51_0_0.clone();
                    if let Dice_ui::US31::US31_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US32 = v152_0_0.clone();
                        if let Dice_ui::US32::US32_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method48(v153_0_0.clone());
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method49();
                            let v187: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method151();
                            let v198: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method152(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                )),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            )),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v222: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104.clone(), v51.clone())),
                        )),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure138(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US24, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US24, string, bool, bool)| {
                    Dice_ui::closure139(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method150(
            v0_1: Dice_ui::US36,
            v1: Dice_ui::US42,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US24, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure138(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure137(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            >,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US24, string, bool, bool)> = v0_1();
            let v9: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                v1();
            let v27: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method83(), v13));
            let v71: Dice_ui::US36 = match &v27 {
                Dice_ui::US27::US27_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v32 = Dice_ui::method84();
                    let v33 = Dice_ui::method85();
                    let v34: Dice_ui::US25 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v34 {
                        Dice_ui::US25::US25_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method86(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(
                                v60.clone(),
                            ))
                        }
                        Dice_ui::US25::US25_1(v34_1_0) => Dice_ui::US37::US37_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v77: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method10(400_i64, sprintf!("{:?}", v71.clone()))),
                )),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                leptos::prelude::RwSignal::get(&v2);
            let v95: Dice_ui::US38 =
                defaultValue(Dice_ui::US38::US38_1, map(Dice_ui::method107(), v81));
            let v106: Dice_ui::US39 = match &v95 {
                Dice_ui::US38::US38_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v100 = Dice_ui::method108();
                    let v101 = Dice_ui::method109();
                    Dice_ui::US39::US39_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US39::US39_1,
            };
            let v142: Dice_ui::US41 = match &v106 {
                Dice_ui::US39::US39_0(v106_0_0) => {
                    let v107: Dice_ui::US40 = match &v106 {
                        Dice_ui::US39::US39_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US41::US41_0(match &v107 {
                        Dice_ui::US40::US40_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method110(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US42::US42_0(_vec_map)
                        }
                        Dice_ui::US40::US40_1(v107_1_0) => Dice_ui::US42::US42_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US41::US41_1,
            };
            let v145: Vec<Dice_ui::US32> = new_empty::<Dice_ui::US32>().to_vec();
            let v149: Dice_ui::US42 = match &v142 {
                Dice_ui::US41::US41_0(v142_0_0) => match &v142 {
                    Dice_ui::US41::US41_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US42::US42_0(v145.clone()),
            };
            match &v149 {
                Dice_ui::US42::US42_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US32 = x;
                        if let Dice_ui::US32::US32_0(v154_0_0) = &v154 {
                            let v160: &str = &*v154_0_0.clone();
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v204.clone());
                            ()
                        }
                        {
                            let v208: bool = true;
                            let v210: bool = true;
                        }
                    });
                    {
                        //;
                        ()
                    }
                }
                _ => (),
            }
            {
                let v212 = Dice_ui::method150(v71, v149.clone());
                let v213: Vec<(string, Dice_ui::US24, string, bool, bool)> = Dice_ui::method98(v5);
                let v215: Vec<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = v213
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v212(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v217: Array<
                    Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                > = fable_library_rust::NativeArray_::array_from(v215.clone());
                let v223: string = Dice_ui::method10(
                    200_i64,
                    append(
                        (append(
                            string("state_core.use_requests (18) / result_func func0 / result: "),
                            sprintf!("{:?}", v217.clone()),
                        )),
                        string(""),
                    ),
                );
                let v225: bool = true;
                leptos::logging::log!("{}", v223);
                v217
            }
        }
        pub fn method154(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure143(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method154(v0_1), v1)
        }
        pub fn method153(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure143(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method155(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn closure142(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2 = Dice_ui::method153(v0_1);
            let v3: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> =
                Dice_ui::method155(v1);
            v3.map(|x| v2(x))
        }
        pub fn closure141(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::Signal<bool> = leptos::attr::loading(&v1.clone());
            let v7: bool = leptos::prelude::Signal::get(&v5);
            let v9: leptos::prelude::Signal<bool> = leptos::attr::loading(&v2.clone());
            let v11: bool = leptos::prelude::Signal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> = leptos::prelude::RwSignal::get(&v1);
            let v27: Dice_ui::US4 =
                defaultValue(Dice_ui::US4::US4_1, map(Dice_ui::method14(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::RwSignal::get(&v2);
            let v46: Dice_ui::US27 =
                defaultValue(Dice_ui::US27::US27_1, map(Dice_ui::method83(), v32));
            let v90: Dice_ui::US36 = match &v46 {
                Dice_ui::US27::US27_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US27::US27_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v51 = Dice_ui::method84();
                    let v52 = Dice_ui::method85();
                    let v53: Dice_ui::US25 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US36::US36_0(match &v53 {
                        Dice_ui::US25::US25_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US26 = defaultValue(
                                        Dice_ui::US26::US26_1,
                                        map(Dice_ui::method86(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US26> = _vec_map;
                            Dice_ui::US37::US37_0(fable_library_rust::NativeArray_::array_from(
                                v79.clone(),
                            ))
                        }
                        Dice_ui::US25::US25_1(v53_1_0) => Dice_ui::US37::US37_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US36::US36_1,
            };
            let v95: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method10(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v95))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v100))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v3();
            let v107: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v105.to_vec();
            let v110: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v0_1 = v0_1.clone();
                        move |v_1: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure142(v0_1.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v116: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v110.clone()),
                    )),
                    string(""),
                ),
            );
            let v118: bool = true;
            leptos::logging::log!("{}", v116);
            v110
        }
        pub fn method149(
            v0_1: leptos::prelude::Memo<Vec<(string, Dice_ui::US24, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::Memo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v8: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method6();
            let v11 = {
                let clo = Func0::new({
                    let v8 = v8.clone();
                    move || Dice_ui::closure70(v8.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v13: leptos::prelude::Memo<Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>> =
                leptos::prelude::Memo::new(move |_| v11(()));
            let v14: leptos::prelude::Resource<
                (
                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                ),
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = Dice_ui::method76(v0_1.clone(), v8.clone());
            let v17 = {
                let clo_1 = Func0::new({
                    let v14 = v14.clone();
                    move || Dice_ui::closure73(v14.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v19: leptos::prelude::Memo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v17(()));
            let v20: leptos::prelude::Resource<
                (
                    Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
                ),
                Result<Vec<Option<string>>, std::string::String>,
            > = Dice_ui::method82(v0_1.clone(), v19.clone());
            let v23 = Box::pin(Func1::new({
                let v0_1 = v0_1.clone();
                let v13 = v13.clone();
                move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure83(v0_1.clone(), v13.clone(), v)
            }));
            let v24: string =
                string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap4>| $0(value.clone())))");
            let v25: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(*std::sync::Arc::new(
                move |value: &std::sync::Arc<Heap4>| v23(value.clone()),
            ));
            let v28 = {
                let clo_2 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v19 = v19.clone();
                    let v20 = v20.clone();
                    let v25 = v25.clone();
                    move || {
                        Dice_ui::closure137(v0_1.clone(), v19.clone(), v20.clone(), v25.clone(), ())
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v30: leptos::prelude::Memo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::Memo::new(move |_| v28(()));
            let v33 = {
                let clo_3 = Func0::new({
                    let v1 = v1.clone();
                    let v14 = v14.clone();
                    let v30 = v30.clone();
                    let v8 = v8.clone();
                    move || {
                        Dice_ui::closure141(v1.clone(), v8.clone(), v14.clone(), v30.clone(), ())
                    }
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            leptos::prelude::Memo::new(move |_| v33(()))
        }
        pub fn method156() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure145(unitVar: (), v0_1: Dice_ui::US15) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(v0_1)
        }
        pub fn method157() -> Func1<Dice_ui::US15, Dice_ui::US59> {
            Func1::new(move |v: Dice_ui::US15| Dice_ui::closure145((), v))
        }
        pub fn closure146(unitVar: (), v0_1: std::string::String) -> Dice_ui::US59 {
            Dice_ui::US59::US59_1(v0_1)
        }
        pub fn method158() -> Func1<std::string::String, Dice_ui::US59> {
            Func1::new(move |v: std::string::String| Dice_ui::closure146((), v))
        }
        pub fn closure147(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US61 {
            Dice_ui::US61::US61_0(v0_1)
        }
        pub fn method159() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US61> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure147((), v))
        }
        pub fn closure148(unitVar: (), v0_1: std::string::String) -> Dice_ui::US61 {
            Dice_ui::US61::US61_1(v0_1)
        }
        pub fn method160() -> Func1<std::string::String, Dice_ui::US61> {
            Func1::new(move |v: std::string::String| Dice_ui::closure148((), v))
        }
        pub fn method161(
            v0_1: Result<Dice_ui::US58, std::string::String>,
        ) -> Result<Dice_ui::US58, std::string::String> {
            v0_1
        }
        pub fn closure144(
            unitVar: (),
            v0_1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US58, std::string::String>>>,
        > {
            let v4: string = append(
                (append(
                    string("dice_view.render (2) / set_max_action / value: "),
                    sprintf!("{:?}", v0_1),
                )),
                string(""),
            );
            let v6: bool = true;
            leptos::logging::log!("{}", v4);
            let v8: bool = true;
            let __future_init = Box::pin(async move {
                //;
                let v14: &str = &*string("2.0");
                let v38: std::string::String = String::from(v14);
                let v63: &str = &*string("dontcare");
                let v87: std::string::String = String::from(v63);
                let v112: &str = &*string("EXPERIMENTAL_tx_status");
                let v136: std::string::String = String::from(v112);
                let v161: &str = &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                let v185: std::string::String = String::from(v161);
                let v210: &str = &*string("bowen");
                let v254: Array<std::string::String> = new_array(&[v185, String::from(v210)]);
                let v256: Vec<std::string::String> = v254.to_vec();
                let v258: crate::model::near::rpc::RpcInput = crate::model::near::rpc::RpcInput {
                    jsonrpc: v38,
                    id: v87,
                    method: v136,
                    params: v256,
                };
                let v259: string = Dice_ui::method156();
                let v264: &str = &*v259;
                let v308: std::string::String = Dice_ui::method93(String::from(v264));
                let v310: reqwest_wasm::RequestBuilder = reqwest_wasm::Client::builder()
                    .build()
                    .map_err(|err| err.to_string())?
                    .post(v308);
                let v313: reqwest_wasm::RequestBuilder =
                    Dice_ui::method95(reqwest_wasm::RequestBuilder::json(v310, &v258));
                let v315: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                        >,
                    >,
                > = Box::pin(reqwest_wasm::RequestBuilder::send(v313));
                let v317: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v315.await;
                let v318 = Dice_ui::method96();
                let v323: Result<reqwest_wasm::Response, std::string::String> =
                    v317.map_err(|x| v318(x));
                let v334: reqwest_wasm::Response = v323?;
                let v336: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<std::string::String, reqwest_wasm::Error>,
                        >,
                    >,
                > = Box::pin(reqwest_wasm::Response::text(v334));
                let v338: Result<std::string::String, reqwest_wasm::Error> = v336.await;
                let v339 = Dice_ui::method96();
                let v344: Result<std::string::String, std::string::String> =
                    v338.map_err(|x| v339(x));
                let v357: Result<Dice_ui::US15, std::string::String> =
                    Ok::<Dice_ui::US15, std::string::String>(Dice_ui::US15::US15_0(v344?));
                let v363: string =
                Dice_ui::method10(200_i64,
                                  append((append(string("dice_view.render (x) / roll_action create_action / result1 / result: "),
                                                 sprintf!("{:?}",
                                                          v357.clone()))),
                                         string("")));
                let v365: bool = true;
                leptos::logging::log!("{}", v363);
                let v366 = Dice_ui::method157();
                let v367 = Dice_ui::method158();
                let v368: Dice_ui::US59 = match &v357 {
                    Err(v357_1_0) => v367(v357_1_0.clone()),
                    Ok(v357_0_0) => v366(v357_0_0.clone()),
                };
                let v512: Dice_ui::US60 = if let Dice_ui::US59::US59_0(v368_0_0) = &v368 {
                    let v369: Dice_ui::US15 = v368_0_0.clone();
                    if let Dice_ui::US15::US15_0(v369_0_0) = &v369 {
                        let v373: string = Dice_ui::method48(
                            fable_library_rust::String_::fromString(v369_0_0.clone()),
                        );
                        let v378: &str = &*v373;
                        let v399: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                            serde_json::from_str(&v378);
                        let v400 = Dice_ui::method49();
                        let v412: Result<
                            crate::model::near::rpc::RpcResponse,
                            std::string::String,
                        > = v399.map_err(|x| v400(x));
                        let v415 = Dice_ui::method159();
                        let v416 = Dice_ui::method160();
                        let v417: Dice_ui::US61 = match &v412 {
                            Err(v412_1_0) => v416(v412_1_0.clone()),
                            Ok(v412_0_0) => v415(v412_0_0.clone()),
                        };
                        let v496: Dice_ui::US62 = match &v417 {
                            Dice_ui::US61::US61_0(v417_0_0) => {
                                let v418: crate::model::near::rpc::RpcResponse = v417_0_0.clone();
                                let v420: std::string::String = v418.clone().jsonrpc;
                                let v422: Option<crate::model::near::rpc::TransactionStatus> =
                                    v418.clone().result;
                                let v424: Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )> = map(Dice_ui::method145(), v422);
                                let v449: Option<crate::model::near::rpc::RpcError> =
                                    v418.clone().error;
                                Dice_ui::US62::US62_0(
                                    v420,
                                    v424,
                                    map(Dice_ui::method147(), v449),
                                    v418.id,
                                )
                            }
                            Dice_ui::US61::US61_1(v417_1_0) => {
                                Dice_ui::US62::US62_1(v417_1_0.clone())
                            }
                        };
                        match &v496 {
                            Dice_ui::US62::US62_0(v496_0_0, v496_0_1, v496_0_2, v496_0_3) => {
                                Dice_ui::US60::US60_0(Dice_ui::US58::US58_0(
                                    v496_0_0.clone(),
                                    v496_0_1.clone(),
                                    v496_0_2.clone(),
                                    v496_0_3.clone(),
                                ))
                            }
                            Dice_ui::US62::US62_1(v496_1_0) => {
                                Dice_ui::US60::US60_1(v496_1_0.clone())
                            }
                        }
                    } else {
                        Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                    }
                } else {
                    Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                };
                let v518: Result<Dice_ui::US58, std::string::String> = match &v512 {
                    Dice_ui::US60::US60_0(v512_0_0) => {
                        Ok::<Dice_ui::US58, std::string::String>(v512_0_0.clone())
                    }
                    Dice_ui::US60::US60_1(v512_1_0) => {
                        Err::<Dice_ui::US58, std::string::String>(v512_1_0.clone())
                    }
                };
                let v524: string =
                Dice_ui::method10(200_i64,
                                  append((append(string("dice_view.render (x) / roll_action create_action / result2 / result: "),
                                                 sprintf!("{:?}",
                                                          v518.clone()))),
                                         string("")));
                let v526: bool = true;
                leptos::logging::log!("{}", v524);
                let v527: Result<Dice_ui::US58, std::string::String> = Dice_ui::method161(v518);
                let v530: string = string("}");
                let v536: bool = true;
                let v531 = v527;
                let v546: string = append(
                    (append(
                        (append((append(string("true; v531 "), (v530))), string("); "))),
                        string(""),
                    )),
                    string(" // rust.fix_closure\'"),
                );
                let v547: bool = true;
                v531
            }); // rust.fix_closure';
            let v549 = __future_init;
            v549
        }
        pub fn closure151(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method163() -> Func1<Dice_ui::US58, Dice_ui::US60> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure151((), v))
        }
        pub fn closure152(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method164() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure152((), v))
        }
        pub fn closure150(
            unitVar: (),
            v0_1: Result<Dice_ui::US58, std::string::String>,
        ) -> Dice_ui::US60 {
            let v1 = Dice_ui::method163();
            let v2 = Dice_ui::method164();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method162() -> Func1<Result<Dice_ui::US58, std::string::String>, Dice_ui::US60> {
            Func1::new(move |v: Result<Dice_ui::US58, std::string::String>| {
                Dice_ui::closure150((), v)
            })
        }
        pub fn closure153(unitVar: (), v0_1: Dice_ui::US60) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method165() -> Func1<Dice_ui::US60, Dice_ui::US63> {
            Func1::new(move |v: Dice_ui::US60| Dice_ui::closure153((), v))
        }
        pub fn closure149(
            v0_1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::RwSignal<Option<Result<Dice_ui::US58, std::string::String>>> =
                leptos::prelude::Action::value(&v0_1);
            let v4: Option<Result<Dice_ui::US58, std::string::String>> =
                leptos::prelude::RwSignal::get(&v2);
            let v6: Option<Dice_ui::US60> = map(Dice_ui::method162(), v4);
            let v32: Dice_ui::US63 =
                defaultValue(Dice_ui::US63::US63_1, map(Dice_ui::method165(), v6));
            let v53: Dice_ui::US60 = if let Dice_ui::US63::US63_0(v32_0_0) = &v32 {
                let v36: Dice_ui::US60 = v32_0_0.clone();
                match &v36 {
                    Dice_ui::US60::US60_0(v36_0_0) => {
                        let v39: Dice_ui::US58 = v36_0_0.clone();
                        if let Dice_ui::US58::US58_0(v39_0_0, v39_0_1, v39_0_2, v39_0_3) = &v39 {
                            Dice_ui::US60::US60_0(Dice_ui::US58::US58_0(
                                v39_0_0.clone(),
                                v39_0_1.clone(),
                                v39_0_2.clone(),
                                v39_0_3.clone(),
                            ))
                        } else {
                            Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
                        }
                    }
                    Dice_ui::US60::US60_1(v36_1_0) => Dice_ui::US60::US60_1(v36_1_0.clone()),
                }
            } else {
                Dice_ui::US60::US60_0(Dice_ui::US58::US58_1)
            };
            let v69: Dice_ui::US64 = match &v53 {
                Dice_ui::US60::US60_0(v53_0_0) => {
                    let v54: Dice_ui::US58 = v53_0_0.clone();
                    Dice_ui::US64::US64_0(match &v54 {
                        Dice_ui::US58::US58_0(v54_0_0, v54_0_1, v54_0_2, v54_0_3) => Some((
                            match &v54 {
                                Dice_ui::US58::US58_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US58::US58_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US58::US58_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US58::US58_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US60::US60_1(v53_1_0) => Dice_ui::US64::US64_1(v53_1_0.clone()),
            };
            let v75: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v69 {
                Dice_ui::US64::US64_0(v69_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_0_0.clone()),
                Dice_ui::US64::US64_1(v69_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_1_0.clone()),
            };
            let v81: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / roll create_memo / result: "),
                        sprintf!("{:?}", v75.clone()),
                    )),
                    string(""),
                ),
            );
            let v83: bool = true;
            leptos::logging::log!("{}", v81);
            v75
        }
        pub fn closure155(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(v0_1)
        }
        pub fn method166() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US64,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure155((), v),
            )
        }
        pub fn closure156(unitVar: (), v0_1: std::string::String) -> Dice_ui::US64 {
            Dice_ui::US64::US64_1(v0_1)
        }
        pub fn method167() -> Func1<std::string::String, Dice_ui::US64> {
            Func1::new(move |v: std::string::String| Dice_ui::closure156((), v))
        }
        pub fn closure157(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method168() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US58,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure157((), arg10_0040),
            )
        }
        pub fn closure158(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method169() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US65,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure158((), arg10_0040),
            )
        }
        pub fn closure154(
            v0_1: leptos::prelude::Memo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = v0_1();
            let v3 = Dice_ui::method166();
            let v4 = Dice_ui::method167();
            let v5: Dice_ui::US64 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v31: Dice_ui::US60 = match &v5 {
                Dice_ui::US64::US64_0(v5_0_0) => Dice_ui::US60::US60_0(defaultValue(
                    Dice_ui::US58::US58_1,
                    map(Dice_ui::method168(), v5_0_0.clone()),
                )),
                Dice_ui::US64::US64_1(v5_1_0) => Dice_ui::US60::US60_1(v5_1_0.clone()),
            };
            let v72: Dice_ui::US32 = if let Dice_ui::US60::US60_0(v31_0_0) = &v31 {
                let v32: Dice_ui::US58 = v31_0_0.clone();
                if let Dice_ui::US58::US58_0(v32_0_0, v32_0_1, v32_0_2, v32_0_3) = &v32 {
                    let v55: Dice_ui::US65 = defaultValue(
                        Dice_ui::US65::US65_1,
                        map(Dice_ui::method169(), v32_0_2.clone()),
                    );
                    if let Dice_ui::US65::US65_0(
                        v55_0_0,
                        v55_0_1,
                        v55_0_2,
                        v55_0_3,
                        v55_0_4,
                        v55_0_5,
                    ) = &v55
                    {
                        Dice_ui::US32::US32_0(append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append((toString(v55_0_0.clone())), string(": "))),
                                                (toString(v55_0_4.clone())),
                                            )),
                                            string(" - "),
                                        )),
                                        (toString(v55_0_5.clone())),
                                    )),
                                    string(" ("),
                                )),
                                (toString(v55_0_1.clone())),
                            )),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US32::US32_1
                    }
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            let v79: Option<string> = match &v72 {
                Dice_ui::US32::US32_0(v72_0_0) => Some(
                    match &v72 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => None::<string>,
            };
            let v85: string = Dice_ui::method10(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / error_message create_memo / result: "),
                        sprintf!("{:?}", v79.clone()),
                    )),
                    string(""),
                ),
            );
            let v87: bool = true;
            leptos::logging::log!("{}", v85);
            v79
        }
        pub fn closure159(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US32 {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::prelude::RwSignal::get(&v3.l3.clone());
            let v21: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method46(), v6.l1.clone()),
            );
            match &v21 {
                Dice_ui::US15::US15_0(v21_0_0) => {
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                        match &v21 {
                            Dice_ui::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US32::US32_1,
            }
        }
        pub fn closure162(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure161(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure162(v0_1, v)
            })
        }
        pub fn method170() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure161((), v))
        }
        pub fn method171(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure160(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::prelude::RwSignal::get(&v3.l3.clone());
            let v10: Vec<(bool, std::string::String)> = v6
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new(move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                        Dice_ui::closure52((), tupledArg.0.clone(), tupledArg.1.clone())
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v11 = Dice_ui::method63();
            let v12: Vec<(bool, std::string::String)> = Dice_ui::method64(v10);
            let v14: Vec<(bool, std::string::String)> = v12
                .into_iter()
                .filter(|x| v11(x.clone().clone()))
                .collect::<Vec<_>>();
            let v17: Vec<std::string::String> = v14
                .into_iter()
                .map(|x| {
                    Func1::new(move |arg10_0040_1: (bool, std::string::String)| {
                        Dice_ui::closure54((), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v18 = Dice_ui::method170();
            let v19: Vec<std::string::String> = Dice_ui::method171(v17);
            v19.iter()
                .enumerate()
                .map(|(i, x)| v18(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure164(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<std::string::String>,
            leptos::prelude::WriteSignal<std::string::String>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure165(
            unitVar: (),
            _arg: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::prelude::ReadSignal<std::string::String>) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn closure163(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = v0_1();
            let v5: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<std::string::String>,
                                leptos::prelude::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure164((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            v5.into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        )| Dice_ui::closure165((), arg10_0040_1),
                    )(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn method172() -> Vec<leptos::prelude::AnyView> {
            let v1: string = string("vec![]");
            vec![]
        }
        pub fn closure166(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure167(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn method174(v0_1: leptos::prelude::AnyView) -> leptos::prelude::AnyView {
            v0_1
        }
        pub fn method173(v0_1: leptos::prelude::AnyView) -> Vec<leptos::prelude::AnyView> {
            let v1: leptos::prelude::AnyView = Dice_ui::method174(v0_1);
            let v6: string = string("vec![v1]");
            vec![v1]
        }
        pub fn closure168(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure169(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure170(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method175() -> Func0<string> {
            Func0::new(move || Dice_ui::closure170((), ()))
        }
        pub fn closure171(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method176(
            v0_1: leptos::prelude::AnyView,
            v1: leptos::prelude::AnyView,
        ) -> Vec<leptos::prelude::AnyView> {
            let v2: leptos::prelude::AnyView = Dice_ui::method174(v1);
            let v6: string = string("v2");
            let v7: leptos::prelude::AnyView = Dice_ui::method174(v0_1);
            let v12: string = append(
                (append(string("vec!["), (append(string("v7, "), (v6))))),
                string("]"),
            );
            vec![v7, v2]
        }
        pub fn closure173(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure174(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure175(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure176(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure178(
            unitVar: (),
            v0_1: leptos::prelude::Memo<Dice_ui::US32>,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method178() -> Func1<leptos::prelude::Memo<Dice_ui::US32>, Dice_ui::US66> {
            Func1::new(move |v: leptos::prelude::Memo<Dice_ui::US32>| Dice_ui::closure178((), v))
        }
        pub fn closure177(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v16: Dice_ui::US66 =
                defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method178(), v1));
            let v26: Dice_ui::US43 = match &v16 {
                Dice_ui::US66::US66_0(v16_0_0) => Dice_ui::US43::US43_0(match &v16 {
                    Dice_ui::US66::US66_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone()()),
                _ => Dice_ui::US43::US43_1,
            };
            let v33: Dice_ui::US32 = if let Dice_ui::US43::US43_0(v26_0_0) = &v26 {
                let v27: Dice_ui::US32 = v26_0_0.clone();
                if let Dice_ui::US32::US32_0(v27_0_0) = &v27 {
                    Dice_ui::US32::US32_0(v27_0_0.clone())
                } else {
                    Dice_ui::US32::US32_1
                }
            } else {
                Dice_ui::US32::US32_1
            };
            match &v33 {
                Dice_ui::US32::US32_0(v33_0_0) => match &v33 {
                    Dice_ui::US32::US32_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string("Select..."),
            }
        }
        pub fn method177(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure177(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure180(
            unitVar: (),
            v0_1: leptos::prelude::Memo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US67 {
            Dice_ui::US67::US67_0(v0_1)
        }
        pub fn method179() -> Func1<
            leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US67,
        > {
            Func1::new(
                move |v: leptos::prelude::Memo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure180((), v),
            )
        }
        pub fn method180(
            v0_1: leptos::prelude::Memo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>
        {
            v0_1
        }
        pub fn closure181(
            unitVar: (),
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            _arg.0.clone()
        }
        pub fn method181() -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            Func1::new(
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure181((), arg10_0040)
                },
            )
        }
        pub fn method183(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure183(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            v3: i32,
            v4: std::string::String,
            unitVar: (),
        ) {
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v9: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v2.l0.clone());
            let v12: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::RwSignal::get_untracked(&v9.l3.clone());
            let v20: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v2.l0.clone());
            let v26: &str = &*v6;
            let v73: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v12.l0.clone(),
                l1: Some(String::from(v26)),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v75: bool = true;
            leptos::prelude::RwSignal::set(&v20.l3.clone(), v73);
            ()
        }
        pub fn closure184(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure182(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::Fragment {
            let v6: std::string::String = leptos::prelude::ReadSignal::get(&_arg.1.clone());
            let v7: std::string::String = Dice_ui::method183(v6.clone());
            let v8 = Func0::new({
                let _arg = _arg.clone();
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v6 = v6.clone();
                move || {
                    Dice_ui::closure183(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        _arg.0.clone(),
                        v6.clone(),
                        (),
                    )
                }
            });
            {
                let v10: string =
                    string("class=\"flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v16: string = append(
                    (append(
                        string(" aria-label=v7"),
                        (append(
                            (append(
                                string(" on:click=move |_| v8()"),
                                (append(
                                    (append((append(string(" "), (v10))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v18: string = fable_library_rust::String_::fromString(v6.clone());
                let v32: Dice_ui::US66 =
                    defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method178(), v1.clone()));
                let v42: Dice_ui::US43 = match &v32 {
                    Dice_ui::US66::US66_0(v32_0_0) => Dice_ui::US43::US43_0(match &v32 {
                        Dice_ui::US66::US66_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()(
                    )),
                    _ => Dice_ui::US43::US43_1,
                };
                let v49: Dice_ui::US32 = if let Dice_ui::US43::US43_0(v42_0_0) = &v42 {
                    let v43: Dice_ui::US32 = v42_0_0.clone();
                    if let Dice_ui::US32::US32_0(v43_0_0) = &v43 {
                        Dice_ui::US32::US32_0(v43_0_0.clone())
                    } else {
                        Dice_ui::US32::US32_1
                    }
                } else {
                    Dice_ui::US32::US32_1
                };
                let v126: leptos::prelude::AnyView = if let Dice_ui::US32::US32_0(v49_0_0) = &v49 {
                    if (v18.clone()) == (v49_0_0.clone()) {
                        let v54 = {
                            let clo = Func0::new(move || Dice_ui::closure184((), ()));
                            Func1::new({
                                let clo = clo.clone();
                                move |arg: ()| clo()
                            })
                        };
                        let v66: string =
                                string(" class=move || \" \".to_owned() + &v54(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v76: string =
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"");
                        let v77: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v79: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v77);
                        let v81: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v79);
                        let v84: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v76))),
                                            string(">move || { v81 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v86: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v81 }</circle> };
                        let v88: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v86);
                        let v94: string =
                                string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v95: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v97: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v95);
                        let v99: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v97);
                        let v102: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v94))),
                                            string(">move || { v99 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v104: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v99 }</path> };
                        let v107: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v88, leptos::prelude::IntoAny::into_any(v104));
                        let v109: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v107);
                        let v111: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v109);
                        let v114: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v66))),
                                            string(">move || { v111 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v116: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v54(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v111 }</svg> };
                        leptos::prelude::IntoAny::into_any(v116)
                    } else {
                        let v119: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        leptos::prelude::IntoAny::into_any(v119)
                    }
                } else {
                    let v123: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    leptos::prelude::IntoAny::into_any(v123)
                };
                let v131: &str = &*v18;
                let v155: std::string::String = String::from(v131);
                let v177: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                    v126,
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v155)),
                );
                let v179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v177);
                let v181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v179);
                let v184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<button "), (v16))),
                                    string(">move || { v181 }</"),
                                )),
                                string("button"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Button, _, _>,
                > = leptos::prelude::view! { <button  aria-label=v7 on:click=move |_| v8() class="flex flex-1 gap-[10px] [align-items:center] [justify-content:center] inline-block rounded border border-gray-400 hover:bg-gray-100 px-[22px] py-1 text-sm text-gray-900 bg-gray-200 hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500">move || { v181 }</button> };
                let v189: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v186));
                leptos::prelude::Fragment::new(v189)
            }
        }
        pub fn method182(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), leptos::prelude::Fragment>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure182(v0_1.clone(), v1.clone(), v2.clone(), arg10_0040)
                }
            })
        }
        pub fn closure179(
            v0_1: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            >,
            v1: Option<leptos::prelude::Memo<Dice_ui::US32>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v5: string = append(
                (append((append(string(" "), (v3))), string(""))),
                string(""),
            );
            let v19: Dice_ui::US67 = defaultValue(
                Dice_ui::US67::US67_1,
                map(Dice_ui::method179(), v0_1.clone()),
            );
            let v29: Dice_ui::US68 = match &v19 {
                Dice_ui::US67::US67_0(v19_0_0) => Dice_ui::US68::US68_0(match &v19 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone()()),
                _ => Dice_ui::US68::US68_1,
            };
            let v32: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v35: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v29 {
                Dice_ui::US68::US68_0(v29_0_0) => match &v29 {
                    Dice_ui::US68::US68_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => v32.clone(),
            };
            let v221: leptos::prelude::Fragment = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v35.clone()),
            ) as u64)
                == 0_u64
            {
                let v41: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v43: string = string(" class=\"[height:17px]\"");
                let v57: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v63: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v64: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                let v66: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v64);
                let v68: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v66);
                let v71: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v63))),
                                    string(">move || { v68 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v73: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v68 }</path> };
                let v76: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v73));
                let v78: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v76);
                let v80: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v78);
                let v83: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v57))),
                                    string(">move || { v80 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v85: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v80 }</svg> };
                let v88: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v85));
                let v90: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v88);
                let v92: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v90);
                let v95: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v43))),
                                    string(">move || { v92 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v97: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v92 }</span> };
                let v99: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v97);
                let v101: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v107: &str = &*string("No data");
                let v131: std::string::String = String::from(v107);
                let v153: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v131)),
                );
                let v155: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v153);
                let v157: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v155);
                let v160: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v101))),
                                    string(">move || { v157 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v162: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v157 }</pre> };
                let v165: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method176(v99, leptos::prelude::IntoAny::into_any(v162));
                let v167: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v165);
                let v169: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v167);
                let v172: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v41))),
                                    string(">move || { v169 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v174: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v169 }</div> };
                let v177: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v174));
                leptos::prelude::Fragment::new(v177)
            } else {
                let v193: Dice_ui::US67 = defaultValue(
                    Dice_ui::US67::US67_1,
                    map(Dice_ui::method179(), v0_1.clone()),
                );
                match &v193 {
                    Dice_ui::US67::US67_0(v193_0_0) => {
                        let v198: leptos::prelude::Memo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = Dice_ui::method180(
                            match &v193 {
                                Dice_ui::US67::US67_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v199 = Dice_ui::method181();
                        let v200 = Dice_ui::method182(v0_1.clone(), v1.clone(), v2.clone());
                        let v211: string =
                                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v200(x) let:x key=move |x| v199(x.to_owned()) each=v198 /> })");
                        let v213: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                            leptos::prelude::IntoAny::into_any(
                                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v200(x) let:x key=move |x| v199(x.to_owned()) each=v198 /> },
                            ),
                        );
                        leptos::prelude::Fragment::new(v213)
                    }
                    _ => {
                        let v216: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        leptos::prelude::Fragment::new(v216)
                    }
                }
            };
            let v223: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v221);
            let v226: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5))),
                                string(">move || { v223 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v228: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v223 }</div> };
            let v231: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v228));
            leptos::prelude::Fragment::new(v231)
        }
        pub fn method184(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure185(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure186(
            v0_1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::Memo<bool> = leptos::prelude::Action::pending(&v0_1);
            v2()
        }
        pub fn method185(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure187(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            unitVar: (),
        ) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v9: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                l0: (leptos::prelude::RwSignal::get_untracked(&v4.l3.clone())).l2,
            });
            let v11: bool = true;
            leptos::prelude::Action::dispatch(&v1, v9.clone());
            ()
        }
        pub fn closure188(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn method186(
            v0_1: leptos::prelude::AnyView,
            v1: leptos::prelude::AnyView,
            v2: leptos::prelude::AnyView,
        ) -> Vec<leptos::prelude::AnyView> {
            let v3: leptos::prelude::AnyView = Dice_ui::method174(v2);
            let v7: string = string("v3");
            let v8: leptos::prelude::AnyView = Dice_ui::method174(v1);
            let v12: string = append(string("v8, "), (v7));
            let v13: leptos::prelude::AnyView = Dice_ui::method174(v0_1);
            let v17: string = append(
                (append(string("vec!["), (append(string("v13, "), (v12))))),
                string("]"),
            );
            vec![v13, v8, v3]
        }
        pub fn closure172(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US58, std::string::String>,
            >,
            v2: leptos::prelude::Memo<Option<string>>,
            v3: leptos::prelude::Memo<Dice_ui::US32>,
            v4: leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v9: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v15: &str = &*string("Account");
            let v39: std::string::String = String::from(v15);
            let v60: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v39));
            let v63: Option<
                leptos::prelude::Memo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            > = Some(v4);
            let v66: Option<leptos::prelude::Memo<Dice_ui::US32>> = Some(v3);
            let v69: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
            let v71: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v69);
            let v73: string = string(" class=\"flex flex-col [position:relative]\"");
            let v76 = {
                let clo = Func0::new(move || Dice_ui::closure173((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v79 = {
                let clo_1 = Func0::new(move || Dice_ui::closure174((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v81: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v82: Vec<leptos::prelude::AnyView> = Dice_ui::method173(v71);
            let v84: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v82);
            let v86: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v84);
            let v89: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v81))),
                                string(">move || { v86 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v91: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v86 }</div> };
            let v93: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v91);
            let v94: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v76(())");
            let v97: string = append(
                (append(
                    string(" open=move || v79(())"),
                    (append(
                        (append((append(string(" "), (v94))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v100 = {
                let clo_2 = Func0::new(move || Dice_ui::closure175((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v103 = {
                let clo_3 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v63 = v63.clone();
                    let v66 = v66.clone();
                    move || Dice_ui::closure176(v63.clone(), v66.clone(), v0_1.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v104: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v103(()) + \" \" + &v100(())");
            let v105: string = append(
                (append((append(string(" "), (v104))), string(""))),
                string(""),
            );
            let v107: string = string(" class=\"flex items-center gap-2\"");
            let v110: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v111: string = (Dice_ui::method177(v63.clone(), v66.clone(), v0_1.clone()))();
            let v116: &str = &*v111;
            let v140: std::string::String = String::from(v116);
            let v162: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v140)),
            );
            let v164: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v162);
            let v166: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v164);
            let v169: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v110))),
                                string(">move || { v166 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v171: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v166 }</span> };
            let v174: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v171));
            let v176: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v174);
            let v178: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v176);
            let v180: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v107))),
                                string(">move || { v178 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v182: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v178 }</div> };
            let v184: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v182);
            let v186: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v189 = {
                let clo_4 = Func0::new(move || Dice_ui::closure171((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v197: string =
                string(" class=move || \" \".to_owned() + &v189(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v199: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v203: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v199))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v204: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
            let v206: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v204);
            let v208: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v206);
            let v211: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v203))),
                                string(">move || { v208 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v213: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v208 }</path> };
            let v216: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v213));
            let v218: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v216);
            let v220: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v218);
            let v223: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v197))),
                                string(">move || { v220 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v225: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v189(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v220 }</svg> };
            let v228: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v225));
            let v230: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v228);
            let v232: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v230);
            let v234: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v186))),
                                string(">move || { v232 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v236: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v232 }</span> };
            let v239: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v184, leptos::prelude::IntoAny::into_any(v236));
            let v241: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v239);
            let v243: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v241);
            let v246: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<summary "), (v105))),
                                string(">move || { v243 }</"),
                            )),
                            string("summary"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v248: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v103(()) + " " + &v100(())>move || { v243 }</summary> };
            let v250: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v248);
            let v252: string = string(" class=\"flex flex-1 flex-col\"");
            let v256: Func0<leptos::prelude::Fragment> =
                Dice_ui::method184(Func0::new(move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v63 = v63.clone();
                        let v66 = v66.clone();
                        move || Dice_ui::closure179(v63.clone(), v66.clone(), v0_1.clone(), ())
                    })()
                }));
            let v258: leptos::prelude::Fragment = (move || v256())();
            let v260: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v258);
            let v262: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v252))),
                                string(">move || { v260 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v264: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v260 }</div> };
            let v267: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v250, leptos::prelude::IntoAny::into_any(v264));
            let v269: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v267);
            let v271: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v269);
            let v274: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<details "), (v97))),
                                string(">move || { v271 }</"),
                            )),
                            string("details"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v276: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Details, _, _>,
            > = leptos::prelude::view! { <details  open=move || v79(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v76(())>move || { v271 }</details> };
            let v279: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v93, leptos::prelude::IntoAny::into_any(v276));
            let v281: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v279);
            let v283: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v281);
            let v285: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v73))),
                                string(">move || { v283 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v287: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v283 }</div> };
            let v290: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v60, leptos::prelude::IntoAny::into_any(v287));
            let v292: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v290);
            let v294: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v292);
            let v296: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v9))),
                                string(">move || { v294 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v298: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v294 }</div> };
            let v300: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v298);
            let v302: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v308: &str = &*string("Max");
            let v332: std::string::String = String::from(v308);
            let v353: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v332));
            let v355: bool = true;
            let getter = Func0::from(move || {
                //;
                let v358: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
                let v361: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::RwSignal::get_untracked(&v358.l3.clone());
                let v364: bool = true;
                v361.l2 /*;
                        let v366: bool = */
            }); //;
            let v368: Func0<i32> = getter;
            let v370: bool = true;
            let setter = Func1::from(move |value| {
                //;
                let v372: std::string::String = value;
                let v375: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
                let v378: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::RwSignal::get_untracked(&v375.l3.clone());
                let v386: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
                let v389: string = toString(v372);
                let v401: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: v378.l0.clone(),
                    l1: v378.l1.clone(),
                    l2: if string("") == (v389.clone()) {
                        1_i32
                    } else {
                        toInt32(v389)
                    },
                    l3: v378.l3,
                    l4: v378.l4.clone(),
                });
                let v403: bool = true;
                leptos::prelude::RwSignal::set(&v386.l3.clone(), v401);
                let v405: bool = true;
                undefined /*;
                          let v407: bool = */
            }); //;
            let v409: Func1<std::string::String, ()> = setter;
            let v412 = {
                let clo_5 = Func0::new(move || Dice_ui::closure185((), ()));
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v421: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v409(leptos::prelude::event_target_value(&event)) prop:value=move || v368() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v412(()) /> }");
            let v423: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v409(leptos::prelude::event_target_value(&event)) prop:value=move || v368() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v412(()) /> };
            let v426: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v353, leptos::prelude::IntoAny::into_any(v423));
            let v428: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v426);
            let v430: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v428);
            let v432: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v302))),
                                string(">move || { v430 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v434: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v430 }</div> };
            let v436: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v434);
            let v438: string = string(" class=\"flex\"");
            let v441: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure186(v1.clone(), ())
                })()
            });
            let v442: Func0<bool> = Dice_ui::method185(v441.clone());
            let v443 = Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move || Dice_ui::closure187(v0_1.clone(), v1.clone(), ())
            });
            {
                let v445: string =
                    string("class=\"flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500\"");
                let v450: string = append(
                    (append(
                        string(" on:click=move |_| v443()"),
                        (append(
                            (append(
                                string(" prop:disabled=move || v442()"),
                                (append(
                                    (append((append(string(" "), (v445))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v456: &str = &*string("Roll");
                let v480: std::string::String = String::from(v456);
                let v818: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v480)),
                    if v441() {
                        let v506 = {
                            let clo_6 = Func0::new(move || Dice_ui::closure188((), ()));
                            Func1::new({
                                let clo_6 = clo_6.clone();
                                move |arg_6: ()| clo_6()
                            })
                        };
                        let v524: string =
                                               string(" class=move || \" \".to_owned() + &v506(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                        let v536: string =
                                               string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                        let v548: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                        let v549: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v551: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v549);
                        let v553: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v551);
                        let v556: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v548))),
                                            string(">move || { v553 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v558: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v553 }</animate> };
                        let v560: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v558);
                        let v572: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                        let v573: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v575: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v573);
                        let v577: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v575);
                        let v579: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v572))),
                                            string(">move || { v577 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v581: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v577 }</animate> };
                        let v583: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v581);
                        let v595: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                        let v596: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v598: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v596);
                        let v600: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v598);
                        let v602: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v595))),
                                            string(">move || { v600 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v604: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v600 }</animate> };
                        let v607: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                            v560,
                            v583,
                            leptos::prelude::IntoAny::into_any(v604),
                        );
                        let v609: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v607);
                        let v611: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v609);
                        let v614: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v536))),
                                            string(">move || { v611 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v616: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v611 }</rect> };
                        let v628: string =
                                               string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                        let v640: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                        let v641: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v643: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v641);
                        let v645: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v643);
                        let v647: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v640))),
                                            string(">move || { v645 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v649: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v645 }</animate> };
                        let v651: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v649);
                        let v663: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                        let v664: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v666: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v664);
                        let v668: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v666);
                        let v670: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v663))),
                                            string(">move || { v668 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v672: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v668 }</animate> };
                        let v674: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v672);
                        let v686: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                        let v687: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v689: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v687);
                        let v691: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v689);
                        let v693: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v686))),
                                            string(">move || { v691 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v695: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v691 }</animate> };
                        let v698: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                            v651,
                            v674,
                            leptos::prelude::IntoAny::into_any(v695),
                        );
                        let v700: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v698);
                        let v702: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v700);
                        let v704: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v628))),
                                            string(">move || { v702 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v706: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v702 }</rect> };
                        let v718: string =
                                               string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                        let v730: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                        let v731: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v733: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v731);
                        let v735: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v733);
                        let v737: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v730))),
                                            string(">move || { v735 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v739: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v735 }</animate> };
                        let v741: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v739);
                        let v753: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                        let v754: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v756: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v754);
                        let v758: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v756);
                        let v760: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v753))),
                                            string(">move || { v758 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v762: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v758 }</animate> };
                        let v764: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v762);
                        let v776: string =
                                               string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                        let v777: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v779: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v777);
                        let v781: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v779);
                        let v783: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<animate "), (v776))),
                                            string(">move || { v781 }</"),
                                        )),
                                        string("animate"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v785: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                        > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v781 }</animate> };
                        let v788: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                            v741,
                            v764,
                            leptos::prelude::IntoAny::into_any(v785),
                        );
                        let v790: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v788);
                        let v792: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v790);
                        let v794: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v718))),
                                            string(">move || { v792 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v796: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v792 }</rect> };
                        let v798: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v796);
                        let v800: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v706);
                        let v803: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                            leptos::prelude::IntoAny::into_any(v616),
                            v800,
                            v798,
                        );
                        let v805: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v803);
                        let v807: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v805);
                        let v809: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v524))),
                                            string(">move || { v807 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v811: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v506(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v807 }</svg> };
                        leptos::prelude::IntoAny::into_any(v811)
                    } else {
                        let v814: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        leptos::prelude::IntoAny::into_any(v814)
                    },
                );
                let v820: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v818);
                let v822: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v820);
                let v825: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<button "), (v450))),
                                    string(">move || { v822 }</"),
                                )),
                                string("button"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v827: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Button, _, _>,
                > = leptos::prelude::view! { <button  on:click=move |_| v443() prop:disabled=move || v442() class="flex gap-[10px] [align-items:center] inline-block rounded border border-gray-400 hover:bg-gray-400 px-4 py-1 text-sm font-medium text-gray-900 bg-transparent hover:text-gray-600 focus:outline-none focus:ring active:text-gray-500">move || { v822 }</button> };
                let v829: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v827);
                let v831: Option<string> = v2();
                let v845: Dice_ui::US32 =
                    defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method110(), v831));
                let v986: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                    v829,
                    if let Dice_ui::US32::US32_0(v845_0_0) = &v845 {
                        let v851: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v853: string = string(" class=\"[height:17px]\"");
                        let v867: string =
                                               string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v873: string =
                                               string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v874: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v876: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v874);
                        let v878: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v876);
                        let v880: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v873))),
                                            string(">move || { v878 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v882: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v878 }</path> };
                        let v885: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v882));
                        let v887: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v885);
                        let v889: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v887);
                        let v891: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v867))),
                                            string(">move || { v889 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v893: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v889 }</svg> };
                        let v896: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v893));
                        let v898: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v896);
                        let v900: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v898);
                        let v902: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v853))),
                                            string(">move || { v900 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v904: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v900 }</span> };
                        let v906: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v904);
                        let v908: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v913: &str = &*v845_0_0.clone();
                        let v937: std::string::String = String::from(v913);
                        let v959: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v937),
                            ));
                        let v961: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v959);
                        let v963: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v961);
                        let v966: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v908))),
                                            string(">move || { v963 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v968: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v963 }</pre> };
                        let v971: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v906, leptos::prelude::IntoAny::into_any(v968));
                        let v973: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v971);
                        let v975: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v973);
                        let v977: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v851))),
                                            string(">move || { v975 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v979: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v975 }</div> };
                        leptos::prelude::IntoAny::into_any(v979)
                    } else {
                        let v982: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        leptos::prelude::IntoAny::into_any(v982)
                    },
                );
                let v988: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v986);
                let v990: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v988);
                let v992: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v438))),
                                    string(">move || { v990 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v994: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex">move || { v990 }</div> };
                let v997: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method186(v300, v436, leptos::prelude::IntoAny::into_any(v994));
                let v999: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v997);
                let v1001: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v999);
                let v1003: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v7))),
                                    string(">move || { v1001 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1005: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v1001 }</div> };
                let v1008: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1005));
                leptos::prelude::Fragment::new(v1008)
            }
        }
        pub fn closure189(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure190(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method187() -> Func0<string> {
            Func0::new(move || Dice_ui::closure191((), ()))
        }
        pub fn closure194(
            unitVar: (),
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US32) {
            let v3: string = fable_library_rust::String_::fromString(_arg.0.clone());
            let v17: Dice_ui::US15 = defaultValue(
                Dice_ui::US15::US15_1,
                map(Dice_ui::method46(), _arg.1.clone()),
            );
            (
                v3,
                match &v17 {
                    Dice_ui::US15::US15_0(v17_0_0) => {
                        Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(
                            match &v17 {
                                Dice_ui::US15::US15_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US32::US32_1,
                },
            )
        }
        pub fn closure195(unitVar: (), _arg: (string, Dice_ui::US32)) -> bool {
            let v1: Dice_ui::US32 = _arg.1.clone();
            if string("FUNCTION_CALL") == (_arg.0.clone()) {
                if let Dice_ui::US32::US32_0(v1_0_0) = &v1 {
                    string("generate_random_number") == (v1_0_0.clone())
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method189() -> Func1<(string, Dice_ui::US32), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US32)| {
                Dice_ui::closure195((), arg10_0040)
            })
        }
        pub fn method190(v0_1: Vec<(string, Dice_ui::US32)>) -> Vec<(string, Dice_ui::US32)> {
            v0_1
        }
        pub fn closure193(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: Vec<(string, Dice_ui::US32)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure194((), arg10_0040)
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            let v9 = Dice_ui::method189();
            let v10: Vec<(string, Dice_ui::US32)> = Dice_ui::method190(v8);
            let v12: Vec<(string, Dice_ui::US32)> = v10
                .into_iter()
                .filter(|x| v9(x.clone().clone()))
                .collect::<Vec<_>>();
            if (get_Count(fable_library_rust::NativeArray_::array_from(v12.clone()))) > 0_i32 {
                (_arg.0.clone()) == (fable_library_rust::String_::fromString(v2.l2.clone()))
            } else {
                false
            }
        }
        pub fn method188() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure193((), arg10_0040)
            })
        }
        pub fn method191(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method192(
            v0_1: leptos::prelude::AnyView,
            v1: leptos::prelude::AnyView,
            v2: leptos::prelude::AnyView,
            v3: leptos::prelude::AnyView,
            v4: leptos::prelude::AnyView,
            v5: leptos::prelude::AnyView,
        ) -> Vec<leptos::prelude::AnyView> {
            let v6: leptos::prelude::AnyView = Dice_ui::method174(v5);
            let v10: string = string("v6");
            let v11: leptos::prelude::AnyView = Dice_ui::method174(v4);
            let v15: string = append(string("v11, "), (v10));
            let v16: leptos::prelude::AnyView = Dice_ui::method174(v3);
            let v19: string = append(string("v16, "), (v15));
            let v20: leptos::prelude::AnyView = Dice_ui::method174(v2);
            let v23: string = append(string("v20, "), (v19));
            let v24: leptos::prelude::AnyView = Dice_ui::method174(v1);
            let v27: string = append(string("v24, "), (v23));
            let v28: leptos::prelude::AnyView = Dice_ui::method174(v0_1);
            let v32: string = append(
                (append(string("vec!["), (append(string("v28, "), (v27))))),
                string("]"),
            );
            vec![v28, v24, v20, v16, v11, v6]
        }
        pub fn method193(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure196(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US69 {
            Dice_ui::US69::US69_0(v0_1)
        }
        pub fn method194() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US69> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure196((), v))
        }
        pub fn method195(v0_1: i32, v1: LrcPtr<Dice_ui::Mut4>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure197(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure192(
            v0_1: leptos::prelude::Memo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v2();
            let v1869: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                if (get_Count(fable_library_rust::NativeArray_::array_from(v4.clone())) as u64)
                    == 0_u64
                {
                    let v11: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v13: string = string(" class=\"[height:17px]\"");
                    let v27: string =
                                           string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v33: string =
                                           string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v34: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v36: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v34);
                    let v38: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v36);
                    let v41: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v33))),
                                        string(">move || { v38 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v43: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v38 }</path> };
                    let v46: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v43));
                    let v48: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v46);
                    let v50: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v48);
                    let v53: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v27))),
                                        string(">move || { v50 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v55: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v50 }</svg> };
                    let v58: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v55));
                    let v60: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v58);
                    let v62: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v60);
                    let v65: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v13))),
                                        string(">move || { v62 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v67: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[height:17px]">move || { v62 }</span> };
                    let v69: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v67);
                    let v71: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                    let v77: &str = &*string("No account selected");
                    let v101: std::string::String = String::from(v77);
                    let v123: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v101),
                        ));
                    let v125: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v123);
                    let v127: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v125);
                    let v130: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<pre "), (v71))),
                                        string(">move || { v127 }</"),
                                    )),
                                    string("pre"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v132: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                    > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v127 }</pre> };
                    let v135: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v69, leptos::prelude::IntoAny::into_any(v132));
                    let v137: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v135);
                    let v139: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v137);
                    let v142: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v11))),
                                        string(">move || { v139 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v144: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v139 }</div> };
                    leptos::prelude::IntoAny::into_any(v144)
                } else {
                    let v148: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v149 = Dice_ui::method134();
                    let v150 = Dice_ui::method135();
                    let v151: Dice_ui::US54 = match &v148 {
                        Err(v148_1_0) => v150(v148_1_0.clone()),
                        Ok(v148_0_0) => v149(v148_0_0.clone()),
                    };
                    let v174: Dice_ui::US47 = match &v151 {
                        Dice_ui::US54::US54_0(v151_0_0) => Dice_ui::US47::US47_0(defaultValue(
                            Dice_ui::US48::US48_1,
                            map(Dice_ui::method136(), v151_0_0.clone()),
                        )),
                        Dice_ui::US54::US54_1(v151_1_0) => Dice_ui::US47::US47_1(v151_1_0.clone()),
                    };
                    match &v174 {
                        Dice_ui::US47::US47_0(v174_0_0) => {
                            let v175: Dice_ui::US48 = v174_0_0.clone();
                            if let Dice_ui::US48::US48_0(v175_0_0) = &v175 {
                                let v178: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v175_0_0.clone().to_vec();
                                let v179 = Dice_ui::method188();
                                let v180: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    Dice_ui::method191(v178);
                                let v182: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v180
                                    .into_iter()
                                    .filter(|x| v179(x.clone().clone()))
                                    .collect::<Vec<_>>();
                                let v185: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v191: &str = &*string("Block Timestamp");
                                let v215: std::string::String = String::from(v191);
                                let v237: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v215),
                                    ));
                                let v239: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v237);
                                let v241: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v239);
                                let v244: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v185))),
                                                    string(">move || { v241 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v246: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v241 }</th> };
                                let v248: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v246);
                                let v250: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v256: &str = &*string("Predecessor");
                                let v280: std::string::String = String::from(v256);
                                let v302: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v280),
                                    ));
                                let v304: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v302);
                                let v306: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v304);
                                let v308: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v250))),
                                                    string(">move || { v306 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v310: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v306 }</th> };
                                let v312: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v310);
                                let v314: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v320: &str = &*string("Receiver");
                                let v344: std::string::String = String::from(v320);
                                let v366: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v344),
                                    ));
                                let v368: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v366);
                                let v370: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v368);
                                let v372: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v314))),
                                                    string(">move || { v370 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v374: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v370 }</th> };
                                let v376: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v374);
                                let v378: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v384: &str = &*string("Fee");
                                let v408: std::string::String = String::from(v384);
                                let v430: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v408),
                                    ));
                                let v432: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v430);
                                let v434: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v432);
                                let v436: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v378))),
                                                    string(">move || { v434 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v438: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v434 }</th> };
                                let v440: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v438);
                                let v442: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v448: &str = &*string("Result");
                                let v472: std::string::String = String::from(v448);
                                let v494: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v472),
                                    ));
                                let v496: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v494);
                                let v498: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v496);
                                let v500: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v442))),
                                                    string(">move || { v498 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v502: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v498 }</th> };
                                let v504: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v502);
                                let v506: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v512: &str = &*string("Status");
                                let v536: std::string::String = String::from(v512);
                                let v558: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v536),
                                    ));
                                let v560: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v558);
                                let v562: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v560);
                                let v564: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v506))),
                                                    string(">move || { v562 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v566: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v562 }</th> };
                                let v569: Vec<leptos::prelude::AnyView> = Dice_ui::method192(
                                    v248,
                                    v312,
                                    v376,
                                    v440,
                                    v504,
                                    leptos::prelude::IntoAny::into_any(v566),
                                );
                                let v571: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v569);
                                let v573: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v571);
                                let v576: string =
                                    string("leptos::prelude::view! { <tr >move || { v573 }</tr> }");
                                let v578: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v573 }</tr> };
                                let v581: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v578));
                                let v583: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v581);
                                let v585: Vec<
                                    Result<
                                        Option<(
                                            std::string::String,
                                            Option<(
                                                Array<(
                                                    std::string::String,
                                                    Array<
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            (
                                                                std::string::String,
                                                                Option<std::string::String>,
                                                                Option<f64>,
                                                                Option<std::string::String>,
                                                            ),
                                                        >,
                                                    >,
                                                    std::string::String,
                                                    Array<std::string::String>,
                                                    Array<std::string::String>,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                    u64,
                                                    Array<std::string::String>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    u8,
                                                    Array<std::string::String>,
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        std::string::String,
                                                    >,
                                                    Option<std::string::String>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                )>,
                                            )>,
                                            Option<(
                                                std::string::String,
                                                std::string::String,
                                                Option<(
                                                    Option<std::string::String>,
                                                    Option<std::string::String>,
                                                )>,
                                                i32,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Option<std::string::String>,
                                        )>,
                                        std::string::String,
                                    >,
                                > = v0_1.clone()();
                                let v587: bool = true;
                                let _vec_map : Vec<_> = v182.into_iter().map(|x| { //;
                                                   let patternInput:
                                                           (string, usize,
                                                            LrcPtr<Dice_ui::Heap5>) =
                                                       x;
                                                   let v591:
                                                           LrcPtr<Dice_ui::Heap5> =
                                                       patternInput.2.clone();
                                                   let v593:
                                                           Array<Result<Option<(std::string::String,
                                                                                Option<(Array<(std::string::String,
                                                                                               Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                                     Option<std::string::String>,
                                                                                                                                                     Option<f64>,
                                                                                                                                                     Option<std::string::String>)>>,
                                                                                               std::string::String,
                                                                                               Array<std::string::String>,
                                                                                               Array<std::string::String>,
                                                                                               std::string::String,
                                                                                               std::string::String,
                                                                                               std::string::String,
                                                                                               std::string::String)>,
                                                                                        Array<(std::string::String,
                                                                                               std::string::String,
                                                                                               std::string::String,
                                                                                               u64,
                                                                                               Array<std::string::String>,
                                                                                               Array<(std::string::String,
                                                                                                      std::string::String,
                                                                                                      std::string::String)>,
                                                                                               u8,
                                                                                               Array<std::string::String>,
                                                                                               std::collections::HashMap<std::string::String, std::string::String>,
                                                                                               Option<std::string::String>,
                                                                                               Array<(std::string::String,
                                                                                                      std::string::String)>)>)>,
                                                                                Option<(std::string::String,
                                                                                        std::string::String,
                                                                                        Option<(Option<std::string::String>,
                                                                                                Option<std::string::String>)>,
                                                                                        i32,
                                                                                        std::string::String,
                                                                                        std::string::String)>,
                                                                                Option<std::string::String>)>,
                                                                        std::string::String>> =
                                                       fable_library_rust::NativeArray_::array_from(v585.clone());
                                                   let v594: i32 =
                                                       patternInput.1.clone()
                                                           as i32;
                                                   let v601:
                                                           Result<Option<(std::string::String,
                                                                          Option<(Array<(std::string::String,
                                                                                         Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                               Option<std::string::String>,
                                                                                                                                               Option<f64>,
                                                                                                                                               Option<std::string::String>)>>,
                                                                                         std::string::String,
                                                                                         Array<std::string::String>,
                                                                                         Array<std::string::String>,
                                                                                         std::string::String,
                                                                                         std::string::String,
                                                                                         std::string::String,
                                                                                         std::string::String)>,
                                                                                  Array<(std::string::String,
                                                                                         std::string::String,
                                                                                         std::string::String,
                                                                                         u64,
                                                                                         Array<std::string::String>,
                                                                                         Array<(std::string::String,
                                                                                                std::string::String,
                                                                                                std::string::String)>,
                                                                                         u8,
                                                                                         Array<std::string::String>,
                                                                                         std::collections::HashMap<std::string::String, std::string::String>,
                                                                                         Option<std::string::String>,
                                                                                         Array<(std::string::String,
                                                                                                std::string::String)>)>)>,
                                                                          Option<(std::string::String,
                                                                                  std::string::String,
                                                                                  Option<(Option<std::string::String>,
                                                                                          Option<std::string::String>)>,
                                                                                  i32,
                                                                                  std::string::String,
                                                                                  std::string::String)>,
                                                                          Option<std::string::String>)>,
                                                                  std::string::String> =
                                                       v593[v594].clone();
                                                   let v605: string =
                                                       string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                                   let v607: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                   let v616: i64 =
                                                       (Dice_ui::method193(toInt64(fable_library_rust::String_::fromString(v591.l5.clone()))))
                                                           / 1000_i64;
                                                   let v618:
                                                           Option<chrono::DateTime<chrono::Utc>> =
                                                       chrono::DateTime::from_timestamp_micros(v616);
                                                   let v632: Dice_ui::US69 =
                                                       defaultValue(Dice_ui::US69::US69_1,
                                                                    map(Dice_ui::method194(),
                                                                        v618));
                                                   let v651: Dice_ui::US32 =
                                                       match &v632 {
                                                           Dice_ui::US69::US69_0(v632_0_0)
                                                           => {
                                                               let v638:
                                                                       chrono::NaiveDateTime =
                                                                   match &v632
                                                                       {
                                                                       Dice_ui::US69::US69_0(x)
                                                                       =>
                                                                       x.clone(),
                                                                       _ =>
                                                                       unreachable!(),
                                                                   }.clone().naive_utc();
                                                               let v640:
                                                                       chrono::DateTime<chrono::Local> =
                                                                   chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v638);
                                                               let v642:
                                                                       string =
                                                                   string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                               let v643:
                                                                       &str =
                                                                   r#"%Y-%m-%d %H:%M:%S"#;
                                                               let v645:
                                                                       std::string::String =
                                                                   v640.format(v643).to_string();
                                                               Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v645))
                                                           }
                                                           _ =>
                                                           Dice_ui::US32::US32_1,
                                                       };
                                                   let v657: Dice_ui::US70 =
                                                       match &v651 {
                                                           Dice_ui::US32::US32_0(v651_0_0)
                                                           =>
                                                           Dice_ui::US70::US70_0(match &v651
                                                                                     {
                                                                                     Dice_ui::US32::US32_0(x)
                                                                                     =>
                                                                                     x.clone(),
                                                                                     _
                                                                                     =>
                                                                                     unreachable!(),
                                                                                 }.clone()),
                                                           _ =>
                                                           Dice_ui::US70::US70_1(string("resultm.from_option / Option does not have a value.")),
                                                       };
                                                   let v662: string =
                                                       match &v657 {
                                                           Dice_ui::US70::US70_0(v657_0_0)
                                                           =>
                                                           v657_0_0.clone(),
                                                           Dice_ui::US70::US70_1(v657_1_0)
                                                           =>
                                                           append((append(string("sm\'.to_string result / Error: "),
                                                                          (v657_1_0.clone()))),
                                                                  string("")),
                                                       };
                                                   let v667: &str = &*v662;
                                                   let v691:
                                                           std::string::String =
                                                       String::from(v667);
                                                   let v713:
                                                           Vec<leptos::prelude::AnyView> =
                                                       Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v691)));
                                                   let v715:
                                                           leptos::prelude::Fragment =
                                                       leptos::prelude::Fragment::new(v713);
                                                   let v717:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::AnyView::from(v715);
                                                   let v720: string =
                                                       append((append(string("leptos::prelude::view! { "),
                                                                      (append((append((append((append(string("<td "),
                                                                                                      (v607))),
                                                                                              string(">move || { v717 }</"))),
                                                                                      string("td"))),
                                                                              string(">"))))),
                                                              string(" }"));
                                                   let v722:
                                                           leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                       leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v717 }</td> };
                                                   let v724:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::IntoAny::into_any(v722);
                                                   let v726: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                   let v729: string =
                                                       fable_library_rust::String_::fromString(v591.l1.clone());
                                                   let v734: &str = &*v729;
                                                   let v758:
                                                           std::string::String =
                                                       String::from(v734);
                                                   let v780:
                                                           Vec<leptos::prelude::AnyView> =
                                                       Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v758)));
                                                   let v782:
                                                           leptos::prelude::Fragment =
                                                       leptos::prelude::Fragment::new(v780);
                                                   let v784:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::AnyView::from(v782);
                                                   let v786: string =
                                                       append((append(string("leptos::prelude::view! { "),
                                                                      (append((append((append((append(string("<td "),
                                                                                                      (v726))),
                                                                                              string(">move || { v784 }</"))),
                                                                                      string("td"))),
                                                                              string(">"))))),
                                                              string(" }"));
                                                   let v788:
                                                           leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                       leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v784 }</td> };
                                                   let v790:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::IntoAny::into_any(v788);
                                                   let v792: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                   let v795: string =
                                                       fable_library_rust::String_::fromString(v591.l2.clone());
                                                   let v800: &str = &*v795;
                                                   let v824:
                                                           std::string::String =
                                                       String::from(v800);
                                                   let v846:
                                                           Vec<leptos::prelude::AnyView> =
                                                       Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v824)));
                                                   let v848:
                                                           leptos::prelude::Fragment =
                                                       leptos::prelude::Fragment::new(v846);
                                                   let v850:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::AnyView::from(v848);
                                                   let v852: string =
                                                       append((append(string("leptos::prelude::view! { "),
                                                                      (append((append((append((append(string("<td "),
                                                                                                      (v792))),
                                                                                              string(">move || { v850 }</"))),
                                                                                      string("td"))),
                                                                              string(">"))))),
                                                              string(" }"));
                                                   let v854:
                                                           leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                       leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v850 }</td> };
                                                   let v856:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::IntoAny::into_any(v854);
                                                   let v858: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                   let v861: string =
                                                       toString(v591.l10);
                                                   let v868: &str = &*v861;
                                                   let v892:
                                                           std::string::String =
                                                       String::from(v868);
                                                   let v914:
                                                           Vec<leptos::prelude::AnyView> =
                                                       Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v892)));
                                                   let v916:
                                                           leptos::prelude::Fragment =
                                                       leptos::prelude::Fragment::new(v914);
                                                   let v918:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::AnyView::from(v916);
                                                   let v920: string =
                                                       append((append(string("leptos::prelude::view! { "),
                                                                      (append((append((append((append(string("<td "),
                                                                                                      (v858))),
                                                                                              string(">move || { v918 }</"))),
                                                                                      string("td"))),
                                                                              string(">"))))),
                                                              string(" }"));
                                                   let v922:
                                                           leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                       leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v918 }</td> };
                                                   let v924:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::IntoAny::into_any(v922);
                                                   let v926: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                   let v1066:
                                                           leptos::prelude::Fragment =
                                                       if (get_Count(v591.l11.clone())
                                                               as u64) ==
                                                              0_u64 {
                                                           let v934: &str =
                                                               &*string("");
                                                           let v958:
                                                                   std::string::String =
                                                               String::from(v934);
                                                           let v980:
                                                                   Vec<leptos::prelude::AnyView> =
                                                               Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v958)));
                                                           leptos::prelude::Fragment::new(v980)
                                                       } else {
                                                           let v983:
                                                                   Array<std::string::String> =
                                                               v591.l11.clone();
                                                           let v984: i32 =
                                                               get_Count(v983.clone());
                                                           let v986:
                                                                   LrcPtr<Dice_ui::Mut4> =
                                                               LrcPtr::new(Dice_ui::Mut4{l0:
                                                                                             MutCell::new(0_i32),
                                                                                         l1:
                                                                                             MutCell::new(Dice_ui::US32::US32_1),});
                                                           while Dice_ui::method195(v984,
                                                                                    v986.clone())
                                                                 {
                                                               let v988: i32 =
                                                                   v986.l0.get().clone();
                                                               let v991: i32 =
                                                                   ((v988.wrapping_neg())
                                                                        +
                                                                        (v984))
                                                                       -
                                                                       1_i32;
                                                               let v992:
                                                                       Dice_ui::US32 =
                                                                   v986.l1.get().clone();
                                                               let v993:
                                                                       std::string::String =
                                                                   v983[v991].clone();
                                                               let v997:
                                                                       Array<string> =
                                                                   split(fable_library_rust::String_::fromString(v993),
                                                                         string(" / result: "),
                                                                         -1_i32,
                                                                         0_i32);
                                                               let v1006:
                                                                       Dice_ui::US32 =
                                                                   if let Dice_ui::US32::US32_1
                                                                          =
                                                                          &v992
                                                                      {
                                                                       if (get_Count(v997.clone())
                                                                               as
                                                                               u64)
                                                                              ==
                                                                              2_u64
                                                                          {
                                                                           let v1002:
                                                                                   string =
                                                                               v997[0_i32].clone();
                                                                           Dice_ui::US32::US32_0(v997[1_i32].clone())
                                                                       } else {
                                                                           v992
                                                                       }
                                                                   } else {
                                                                       v992.clone()
                                                                   };
                                                               let v1007:
                                                                       i32 =
                                                                   (v988) +
                                                                       1_i32;
                                                               v986.l0.set(v1007);
                                                               v986.l1.set(v1006);
                                                               ()
                                                           }
                                                           {
                                                               let v1008:
                                                                       Dice_ui::US32 =
                                                                   v986.l1.get().clone();
                                                               let v1012:
                                                                       string =
                                                                   match &v1008
                                                                       {
                                                                       Dice_ui::US32::US32_0(v1008_0_0)
                                                                       =>
                                                                       match &v1008
                                                                           {
                                                                           Dice_ui::US32::US32_0(x)
                                                                           =>
                                                                           x.clone(),
                                                                           _
                                                                           =>
                                                                           unreachable!(),
                                                                       }.clone(),
                                                                       _ =>
                                                                       string("?"),
                                                                   };
                                                               let v1017:
                                                                       &str =
                                                                   &*v1012;
                                                               let v1041:
                                                                       std::string::String =
                                                                   String::from(v1017);
                                                               let v1063:
                                                                       Vec<leptos::prelude::AnyView> =
                                                                   Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1041)));
                                                               leptos::prelude::Fragment::new(v1063)
                                                           }
                                                       };
                                                   let v1068:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::AnyView::from(v1066);
                                                   let v1070: string =
                                                       append((append(string("leptos::prelude::view! { "),
                                                                      (append((append((append((append(string("<td "),
                                                                                                      (v926))),
                                                                                              string(">move || { v1068 }</"))),
                                                                                      string("td"))),
                                                                              string(">"))))),
                                                              string(" }"));
                                                   let v1072:
                                                           leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                       leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1068 }</td> };
                                                   let v1074:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::IntoAny::into_any(v1072);
                                                   let v1076: string =
                                                       string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                   let v1080: string =
                                                       if v591.l9 {
                                                           string("Ok")
                                                       } else {
                                                           string("Outcome Error")
                                                       };
                                                   let v1081 =
                                                       Dice_ui::method166();
                                                   let v1082 =
                                                       Dice_ui::method167();
                                                   let v1083: Dice_ui::US64 =
                                                       match &v601 {
                                                           Err(v601_1_0) =>
                                                           v1082(v601_1_0.clone()),
                                                           Ok(v601_0_0) =>
                                                           v1081(v601_0_0.clone()),
                                                       };
                                                   let v1109: Dice_ui::US60 =
                                                       match &v1083 {
                                                           Dice_ui::US64::US64_0(v1083_0_0)
                                                           =>
                                                           Dice_ui::US60::US60_0(defaultValue(Dice_ui::US58::US58_1,
                                                                                              map(Dice_ui::method168(),
                                                                                                  v1083_0_0.clone()))),
                                                           Dice_ui::US64::US64_1(v1083_1_0)
                                                           =>
                                                           Dice_ui::US60::US60_1(v1083_1_0.clone()),
                                                       };
                                                   let v1205: Dice_ui::US70 =
                                                       match &v1109 {
                                                           Dice_ui::US60::US60_0(v1109_0_0)
                                                           => {
                                                               let v1110:
                                                                       Dice_ui::US58 =
                                                                   v1109_0_0.clone();
                                                               if let Dice_ui::US58::US58_0(v1110_0_0,
                                                                                            v1110_0_1,
                                                                                            v1110_0_2,
                                                                                            v1110_0_3)
                                                                      = &v1110
                                                                  {
                                                                   let v1113:
                                                                           Option<(std::string::String,
                                                                                   std::string::String,
                                                                                   Option<(Option<std::string::String>,
                                                                                           Option<std::string::String>)>,
                                                                                   i32,
                                                                                   std::string::String,
                                                                                   std::string::String)> =
                                                                       v1110_0_2.clone();
                                                                   let v1133:
                                                                           Dice_ui::US65 =
                                                                       defaultValue(Dice_ui::US65::US65_1,
                                                                                    map(Dice_ui::method169(),
                                                                                        v1113.clone()));
                                                                   match &v1133
                                                                       {
                                                                       Dice_ui::US65::US65_0(v1133_0_0,
                                                                                             v1133_0_1,
                                                                                             v1133_0_2,
                                                                                             v1133_0_3,
                                                                                             v1133_0_4,
                                                                                             v1133_0_5)
                                                                       => {
                                                                           let v1161:
                                                                                   Dice_ui::US65 =
                                                                               defaultValue(Dice_ui::US65::US65_1,
                                                                                            map(Dice_ui::method169(),
                                                                                                v1113.clone()));
                                                                           let v1174:
                                                                                   Dice_ui::US32 =
                                                                               if let Dice_ui::US65::US65_0(v1161_0_0,
                                                                                                            v1161_0_1,
                                                                                                            v1161_0_2,
                                                                                                            v1161_0_3,
                                                                                                            v1161_0_4,
                                                                                                            v1161_0_5)
                                                                                      =
                                                                                      &v1161
                                                                                  {
                                                                                   Dice_ui::US32::US32_0(append((append((append((append((append((append((append((toString(v1161_0_0.clone())),
                                                                                                                                                                string(": "))),
                                                                                                                                                        (toString(v1161_0_4.clone())))),
                                                                                                                                                string(" - "))),
                                                                                                                                        (toString(v1161_0_5.clone())))),
                                                                                                                                string(" ("))),
                                                                                                                        (toString(v1161_0_1.clone())))),
                                                                                                                string(")")))
                                                                               } else {
                                                                                   Dice_ui::US32::US32_1
                                                                               };
                                                                           Dice_ui::US70::US70_1(match &v1174
                                                                                                     {
                                                                                                     Dice_ui::US32::US32_0(v1174_0_0)
                                                                                                     =>
                                                                                                     match &v1174
                                                                                                         {
                                                                                                         Dice_ui::US32::US32_0(x)
                                                                                                         =>
                                                                                                         x.clone(),
                                                                                                         _
                                                                                                         =>
                                                                                                         unreachable!(),
                                                                                                     }.clone(),
                                                                                                     _
                                                                                                     =>
                                                                                                     Dice_ui::method10(400_i64,
                                                                                                                       sprintf!("{:?}",
                                                                                                                                ())),
                                                                                                 })
                                                                       }
                                                                       _ =>
                                                                       Dice_ui::US70::US70_0(Dice_ui::method10(400_i64,
                                                                                                               sprintf!("{:?}",
                                                                                                                        (v1110_0_0.clone(),
                                                                                                                         v1110_0_1.clone(),
                                                                                                                         v1113.clone(),
                                                                                                                         v1110_0_3.clone())))),
                                                                   }
                                                               } else {
                                                                   Dice_ui::US70::US70_1(concat(new_array(&[string("RPC Response: "),
                                                                                                            Dice_ui::method10(400_i64,
                                                                                                                              sprintf!("{:?}",
                                                                                                                                       v1109.clone()))])))
                                                               }
                                                           }
                                                           Dice_ui::US60::US60_1(v1109_1_0)
                                                           =>
                                                           Dice_ui::US70::US70_1(fable_library_rust::String_::fromString(v1109_1_0.clone())),
                                                       };
                                                   let v1217: string =
                                                       concat(new_array(&[v1080,
                                                                          string(" / "),
                                                                          match &v1205
                                                                              {
                                                                              Dice_ui::US70::US70_0(v1205_0_0)
                                                                              =>
                                                                              concat(new_array(&[string("RPC Response: "),
                                                                                                 Dice_ui::method10(400_i64,
                                                                                                                   sprintf!("{:?}",
                                                                                                                            v1205_0_0.clone()))])),
                                                                              Dice_ui::US70::US70_1(v1205_1_0)
                                                                              =>
                                                                              concat(new_array(&[string("Error: "),
                                                                                                 v1205_1_0.clone()])),
                                                                          }]));
                                                   let v1222: &str = &*v1217;
                                                   let v1246:
                                                           std::string::String =
                                                       String::from(v1222);
                                                   let v1268:
                                                           Vec<leptos::prelude::AnyView> =
                                                       Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1246)));
                                                   let v1270:
                                                           leptos::prelude::Fragment =
                                                       leptos::prelude::Fragment::new(v1268);
                                                   let v1272:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::AnyView::from(v1270);
                                                   let v1274: string =
                                                       append((append(string("leptos::prelude::view! { "),
                                                                      (append((append((append((append(string("<td "),
                                                                                                      (v1076))),
                                                                                              string(">move || { v1272 }</"))),
                                                                                      string("td"))),
                                                                              string(">"))))),
                                                              string(" }"));
                                                   let v1276:
                                                           leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                       leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1272 }</td> };
                                                   let v1279:
                                                           Vec<leptos::prelude::AnyView> =
                                                       Dice_ui::method192(v724,
                                                                          v790,
                                                                          v856,
                                                                          v924,
                                                                          v1074,
                                                                          leptos::prelude::IntoAny::into_any(v1276));
                                                   let v1281:
                                                           leptos::prelude::Fragment =
                                                       leptos::prelude::Fragment::new(v1279);
                                                   let v1283:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::AnyView::from(v1281);
                                                   let v1285: string =
                                                       append((append(string("leptos::prelude::view! { "),
                                                                      (append((append((append((append(string("<tr "),
                                                                                                      (v605))),
                                                                                              string(">move || { v1283 }</"))),
                                                                                      string("tr"))),
                                                                              string(">"))))),
                                                              string(" }"));
                                                   let v1287:
                                                           leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                                       leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v1283 }</tr> };
                                                   let v1289:
                                                           leptos::prelude::AnyView =
                                                       leptos::prelude::IntoAny::into_any(v1287);
                                                   let v1291: bool =
                                                       true; v1289 }).collect::<Vec<_>>();
                                let v1293: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v1296: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1293));
                                let v1298: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1296);
                                let v1300: string =
                                                       string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v1302: string =
                                    string(" class=\"ltr:text-left rtl:text-right\"");
                                let v1304: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v583);
                                let v1307: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<thead "), (v1302))),
                                                    string(">move || { v1304 }</"),
                                                )),
                                                string("thead"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1309: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v1304 }</thead> };
                                let v1311: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1309);
                                let v1313: string = string(
                                    " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                );
                                let v1315: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1298);
                                let v1318: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<tbody "), (v1313))),
                                                    string(">move || { v1315 }</"),
                                                )),
                                                string("tbody"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1320: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v1315 }</tbody> };
                                let v1323: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1311,
                                    leptos::prelude::IntoAny::into_any(v1320),
                                );
                                let v1325: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1323);
                                let v1327: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1325);
                                let v1330: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<table "), (v1300))),
                                                    string(">move || { v1327 }</"),
                                                )),
                                                string("table"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1332: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v1327 }</table> };
                                leptos::prelude::IntoAny::into_any(v1332)
                            } else {
                                let v1337: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v1339: string =
                                    string(" class=\"flex flex-1 [gap:4px] items-center\"");
                                let v1342 = {
                                    let clo = Func0::new(move || Dice_ui::closure197((), ()));
                                    Func1::new({
                                        let clo = clo.clone();
                                        move |arg: ()| clo()
                                    })
                                };
                                let v1360: string =
                                                       string(" class=move || \" \".to_owned() + &v1342(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                                let v1372: string =
                                                       string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                                let v1384: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v1385: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1387: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1385);
                                let v1389: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1387);
                                let v1392: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1384))),
                                                    string(">move || { v1389 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1394: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1389 }</animate> };
                                let v1396: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1394);
                                let v1408: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                                let v1409: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1411: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1409);
                                let v1413: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1411);
                                let v1415: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1408))),
                                                    string(">move || { v1413 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1417: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1413 }</animate> };
                                let v1419: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1417);
                                let v1431: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                                let v1432: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1434: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1432);
                                let v1436: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1434);
                                let v1438: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1431))),
                                                    string(">move || { v1436 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1440: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1436 }</animate> };
                                let v1443: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    v1396,
                                    v1419,
                                    leptos::prelude::IntoAny::into_any(v1440),
                                );
                                let v1445: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1443);
                                let v1447: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1445);
                                let v1450: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<rect "), (v1372))),
                                                    string(">move || { v1447 }</"),
                                                )),
                                                string("rect"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1452: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v1447 }</rect> };
                                let v1464: string =
                                                       string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                                let v1476: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v1477: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1479: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1477);
                                let v1481: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1479);
                                let v1483: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1476))),
                                                    string(">move || { v1481 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1485: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1481 }</animate> };
                                let v1487: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1485);
                                let v1499: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v1500: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1502: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1500);
                                let v1504: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1502);
                                let v1506: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1499))),
                                                    string(">move || { v1504 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1508: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1504 }</animate> };
                                let v1510: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1508);
                                let v1522: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                                let v1523: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1525: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1523);
                                let v1527: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1525);
                                let v1529: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1522))),
                                                    string(">move || { v1527 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1531: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1527 }</animate> };
                                let v1534: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    v1487,
                                    v1510,
                                    leptos::prelude::IntoAny::into_any(v1531),
                                );
                                let v1536: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1534);
                                let v1538: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1536);
                                let v1540: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<rect "), (v1464))),
                                                    string(">move || { v1538 }</"),
                                                )),
                                                string("rect"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1542: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1538 }</rect> };
                                let v1554: string =
                                                       string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                                let v1566: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v1567: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1569: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1567);
                                let v1571: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1569);
                                let v1573: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1566))),
                                                    string(">move || { v1571 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1575: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1571 }</animate> };
                                let v1577: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1575);
                                let v1589: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                                let v1590: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1592: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1590);
                                let v1594: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1592);
                                let v1596: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1589))),
                                                    string(">move || { v1594 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1598: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1594 }</animate> };
                                let v1600: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1598);
                                let v1612: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                                let v1613: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1615: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1613);
                                let v1617: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1615);
                                let v1619: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v1612))),
                                                    string(">move || { v1617 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1621: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1617 }</animate> };
                                let v1624: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    v1577,
                                    v1600,
                                    leptos::prelude::IntoAny::into_any(v1621),
                                );
                                let v1626: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1624);
                                let v1628: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1626);
                                let v1630: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<rect "), (v1554))),
                                                    string(">move || { v1628 }</"),
                                                )),
                                                string("rect"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1632: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1628 }</rect> };
                                let v1634: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1632);
                                let v1636: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1542);
                                let v1639: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    leptos::prelude::IntoAny::into_any(v1452),
                                    v1636,
                                    v1634,
                                );
                                let v1641: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1639);
                                let v1643: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1641);
                                let v1646: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<svg "), (v1360))),
                                                    string(">move || { v1643 }</"),
                                                )),
                                                string("svg"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1648: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1342(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1643 }</svg> };
                                let v1650: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1648);
                                let v1656: &str = &*string("Loading...");
                                let v1680: std::string::String = String::from(v1656);
                                let v1702: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1650,
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v1680),
                                    ),
                                );
                                let v1704: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1702);
                                let v1706: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1704);
                                let v1709: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1339))),
                                                    string(">move || { v1706 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1711: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v1706 }</div> };
                                let v1714: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1711));
                                let v1716: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1714);
                                let v1718: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1716);
                                let v1720: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1337))),
                                                    string(">move || { v1718 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1722: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v1718 }</div> };
                                leptos::prelude::IntoAny::into_any(v1722)
                            }
                        }
                        Dice_ui::US47::US47_1(v174_1_0) => {
                            let v1728: string =
                                fable_library_rust::String_::fromString(v174_1_0.clone());
                            let v1731: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v1733: string = string(" class=\"[height:17px]\"");
                            let v1747: string =
                                                   string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v1753: string =
                                                   string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                            let v1754: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                            let v1756: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1754);
                            let v1758: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1756);
                            let v1761: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v1753))),
                                                string(">move || { v1758 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1763: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1758 }</path> };
                            let v1766: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1763));
                            let v1768: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1766);
                            let v1770: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1768);
                            let v1773: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v1747))),
                                                string(">move || { v1770 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1775: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1770 }</svg> };
                            let v1778: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1775));
                            let v1780: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1778);
                            let v1782: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1780);
                            let v1785: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v1733))),
                                                string(">move || { v1782 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1787: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1782 }</span> };
                            let v1789: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1787);
                            let v1791: string =
                                string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                            let v1796: &str = &*v1728;
                            let v1820: std::string::String = String::from(v1796);
                            let v1842: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v1820),
                                ));
                            let v1844: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1842);
                            let v1846: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1844);
                            let v1849: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<pre "), (v1791))),
                                                string(">move || { v1846 }</"),
                                            )),
                                            string("pre"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1851: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                            > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v1846 }</pre> };
                            let v1854: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                v1789,
                                leptos::prelude::IntoAny::into_any(v1851),
                            );
                            let v1856: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1854);
                            let v1858: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1856);
                            let v1861: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1731))),
                                                string(">move || { v1858 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1863: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v1858 }</div> };
                            leptos::prelude::IntoAny::into_any(v1863)
                        }
                    }
                },
            );
            leptos::prelude::Fragment::new(v1869)
        }
        pub fn closure200(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure199(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure200(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method196() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure199((), v))
        }
        pub fn method197(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure198(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap0> = leptos::prelude::RwSignal::get(&v3.l3.clone());
            let v8 = Dice_ui::method196();
            let v9: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method197(v6.l0.clone());
            v9.iter()
                .enumerate()
                .map(|(i, x)| v8(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn closure202(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v0_1: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v0_, v0__1));
            let b: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = v0_1.1.clone();
            (v0_1.0.clone(), b.0.clone(), b.1.clone())
        }
        pub fn closure203(
            v0_1: i32,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            (v0_1, _arg.0.clone(), _arg.1.clone())
        }
        pub fn closure201(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::ReadSignal::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v8: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new(
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure202((), tupledArg.0.clone(), tupledArg.1.clone())
                        },
                    )(x.clone())
                })
                .collect::<Vec<_>>();
            v8.into_iter()
                .map(|x| {
                    Func1::new({
                        let v3 = v3.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure203(v3, arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure204(
            v0_1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v0_1();
            get_Count(fable_library_rust::NativeArray_::array_from(v2.clone()))
        }
        pub fn method198(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method199(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure208(
            unitVar: (),
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            leptos::prelude::ReadSignal::get(&((LrcPtr::new((v0_, v0__1))).1.clone()).0.clone())
        }
        pub fn closure207(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v0_1();
            let v11: i32 = get_Count(fable_library_rust::NativeArray_::array_from(
                v8.clone().clone(),
            ));
            let v17: &str = &*string("");
            let v41: std::string::String = String::from(v17);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v41)));
            let v65: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v66: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method198(v65.0.clone(), v65.1.clone());
            let v67: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method199(v8);
            let v69: bool = true;
            let mut v67 = v67;
            let v71: bool = true;
            v67.push(v66);
            let v73: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v67;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v73
                    .into_iter()
                    .map(|x| {
                        Func1::new(
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure208((), tupledArg.0.clone(), tupledArg.1.clone())
                            },
                        )(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure209(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + (v0_1)
        }
        pub fn closure206(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v5: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v8: bool = true;
            leptos::prelude::RwSignal::update(
                &v5.l3.clone(),
                |x: &mut /*;
                 let v9: */
                 LrcPtr<Dice_ui::Heap0> /* = getZero();
                                        let v14: bool =
                                            */| {
                    *x = Func1::new({
                        let v1 = v1.clone();
                        move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure207(v1.clone(), v)
                    })(x.clone())
                },
            ); //;
            let v16: bool = true;
            leptos::prelude::WriteSignal::update(
                &v2,
                |x: &mut /*;
                 let v17: */
                 i32 /* = getZero();
                     let v22: bool =
                         */| {
                    *x = Func1::new(move |v_1: i32| Dice_ui::closure209((), v_1))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure205(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) {
            let v5: bool = true;
            leptos::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    move || Dice_ui::closure206(v0_1.clone(), v1.clone(), v2.clone(), ())
                })()
            });
            ()
        }
        pub fn closure210(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure211(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v5)
        }
        pub fn closure212(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure213(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure214(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method200(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure214((), ()))
        }
        pub fn method201(
            v0_1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
        ) -> leptos::prelude::Memo<
            Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )>,
        > {
            v0_1
        }
        pub fn closure216(
            unitVar: (),
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (i32, i32) {
            (_arg.0.clone(), _arg.1.clone())
        }
        pub fn method202() -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (i32, i32),
        > {
            Func1::new(
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure216((), arg10_0040),
            )
        }
        pub fn method204(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn closure218(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append((append(string("account-"), (toString(v0_1)))), string(""));
            let v6: &str = &*v1;
            String::from(v6)
        }
        pub fn method206(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure221(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method206((v1) == (v0_1)) {
                v2.clone()
            } else {
                LrcPtr::new(((v2.0.clone()) == false, v2.1.clone()))
            }
        }
        pub fn closure220(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure221(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method205(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure220(v0_1, v)
            })
        }
        pub fn closure219(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v8: LrcPtr<Dice_ui::Heap0> =
                leptos::prelude::RwSignal::get_untracked(&v5.l3.clone());
            let v16: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v18 = Dice_ui::method205(v1);
            let v19: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method197(v8.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v19
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v18(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v8.l1.clone(),
                l2: v8.l2,
                l3: v8.l3,
                l4: v8.l4.clone(),
            });
            let v24: bool = true;
            leptos::prelude::RwSignal::set(&v16.l3.clone(), v22);
            ()
        }
        pub fn closure222(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::ReadSignal::get(&v0_1)).0.clone()
        }
        pub fn method207(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure222(v0_1.clone(), ())
            })
        }
        pub fn method208(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure218(v0_1, ())
            })
        }
        pub fn method210(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure224(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method210((v2) == (v0_1)) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure223(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure224(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method209(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure223(v0_1, v1.clone(), v)
            })
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method211(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure230(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn method213() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure230((), v))
        }
        pub fn closure229(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v11: bool = ((LrcPtr::new((v1_, v1__1))).0.clone()) == (v0_1);
            (Dice_ui::method213())(v11)
        }
        pub fn method212(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure229(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure228(
            v0_1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method211(v0_1());
            let v11 = Dice_ui::method212(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new(
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure208((), tupledArg.0.clone(), tupledArg.1.clone())
                            },
                        )(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure227(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v6: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v9: bool = true;
            leptos::prelude::RwSignal::update(
                &v6.l3.clone(),
                |x: &mut /*;
                 let v10: */
                 LrcPtr<Dice_ui::Heap0> /* = getZero();
                                        let v15: bool =
                                            */| {
                    *x = Func1::new({
                        let v1 = v1.clone();
                        let v3 = v3.clone();
                        move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure228(v1.clone(), v3, v)
                    })(x.clone())
                },
            ); //;
            let v17: bool = true;
            leptos::prelude::WriteSignal::update(
                &v2,
                |x: &mut /*;
                 let v18: */
                 i32 /* = getZero();
                     let v23: bool =
                         */| {
                    *x = Func1::new(move |v_1: i32| Dice_ui::closure209((), v_1))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure226(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v2: leptos::prelude::WriteSignal<i32>,
            v3: i32,
            unitVar: (),
        ) {
            let v6: bool = true;
            leptos::batch(move || {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1 = v1.clone();
                    let v2 = v2.clone();
                    let v3 = v3.clone();
                    move || Dice_ui::closure227(v0_1.clone(), v1.clone(), v2.clone(), v3, ())
                })()
            });
            ()
        }
        pub fn closure231(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v5)
        }
        pub fn closure217(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<i32>,
            v2: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::prelude::WriteSignal<i32>,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::Fragment {
            let v6: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                _arg.2.clone();
            let v9: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
            let v10: i32 = Dice_ui::method204(_arg.1.clone());
            let v11 = Func0::new({
                let v10 = v10.clone();
                move || Dice_ui::closure218(v10, ())
            });
            {
                let v16: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v11()");
                let v17 = Func1::new({
                    let v0_1 = v0_1.clone();
                    let v10 = v10.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure219(v0_1.clone(), v10, v)
                });
                {
                    let v19 = Dice_ui::method207(v6.clone());
                    let v20 = Dice_ui::method208(v10);
                    let v21: string =
                        string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                    let v33: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    string("<input "),
                                    (append(
                                        (append(
                                            string(" prop:checked=move || v19()"),
                                            (append(
                                                (append(
                                                    string(" on:change=move |event| v17(event)"),
                                                    (append(
                                                        (append(
                                                            string(" id=move || v20()"),
                                                            (append(
                                                                (append(
                                                                    string(" type=\"checkbox\""),
                                                                    (append(
                                                                        (append(
                                                                            (append(
                                                                                string(" "),
                                                                                (v21),
                                                                            )),
                                                                            string(""),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(" />"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v35: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Input, _, _>,
                    > = leptos::prelude::view! { <input  prop:checked=move || v19() on:change=move |event| v17(event) id=move || v20() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                    let v37: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v35);
                    let v38: string =
                        string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                    let v39: string = append(
                        (append((append(string(" "), (v38))), string(""))),
                        string(""),
                    );
                    let v49: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                    let v51: string =
                        string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                    let v55: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v51))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v56: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v58: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v56);
                    let v60: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v58);
                    let v63: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v55))),
                                        string(">move || { v60 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v65: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v60 }</path> };
                    let v68: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v65));
                    let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
                    let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
                    let v75: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v49))),
                                        string(">move || { v72 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v77: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v72 }</svg> };
                    let v87: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                    let v89: string =
                        string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                    let v93: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v89))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v94: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v96: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v94);
                    let v98: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v96);
                    let v100: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v93))),
                                        string(">move || { v98 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v102: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v98 }</path> };
                    let v105: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v102));
                    let v107: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v105);
                    let v109: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v107);
                    let v111: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v87))),
                                        string(">move || { v109 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v113: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v109 }</svg> };
                    let v115: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v113);
                    let v118: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(leptos::prelude::IntoAny::into_any(v77), v115);
                    let v120: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v118);
                    let v122: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v120);
                    let v125: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v39))),
                                        string(">move || { v122 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v127: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v122 }</span> };
                    let v129: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v127);
                    let v130: string =
                        string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                    let v131: string = append(
                        (append((append(string(" "), (v130))), string(""))),
                        string(""),
                    );
                    let v132: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v134: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v132);
                    let v136: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v134);
                    let v138: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v131))),
                                        string(">move || { v136 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v140: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v136 }</span> };
                    let v143: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method186(v37, v129, leptos::prelude::IntoAny::into_any(v140));
                    let v145: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v143);
                    let v147: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v145);
                    let v150: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<label "), (v16))),
                                        string(">move || { v147 }</"),
                                    )),
                                    string("label"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v152: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Label, _, _>,
                    > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v11()>move || { v147 }</label> };
                    let v154: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v152);
                    let v156: bool = true;
                    let getter = Func0::from(move || {
                        //;
                        let v158: LrcPtr<(bool, std::string::String)> =
                            leptos::prelude::ReadSignal::get(&v6);
                        let v166: bool = true;
                        v158.1.clone() /*;
                                       let v168: bool = */
                    }); //;
                    let v170: Func0<std::string::String> = getter;
                    let v172: bool = true;
                    let setter = Func1::from(move |value| {
                        //;
                        let v174: std::string::String = value;
                        let v177: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
                        let v180: LrcPtr<Dice_ui::Heap0> =
                            leptos::prelude::RwSignal::get_untracked(&v177.l3.clone());
                        let v188: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
                        let v190 = Dice_ui::method209(v10, v174);
                        let v191: Vec<LrcPtr<(bool, std::string::String)>> =
                            Dice_ui::method197(v180.l0.clone());
                        let v194: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                            l0: v191
                                .iter()
                                .enumerate()
                                .map(|(i, x)| v190(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                            l1: v180.l1.clone(),
                            l2: v180.l2,
                            l3: v180.l3,
                            l4: v180.l4.clone(),
                        });
                        let v196: bool = true;
                        leptos::prelude::RwSignal::set(&v188.l3.clone(), v194);
                        let v198: bool = true;
                        undefined /*;
                                  let v200: bool = */
                    }); //;
                    let v202: Func1<std::string::String, ()> = setter;
                    let v205 = {
                        let clo = Func0::new(move || Dice_ui::closure225((), ()));
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    let v213: string =
                        string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v202(leptos::prelude::event_target_value(&event)) prop:value=move || v170() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v205(()) /> }");
                    let v215: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Input, _, _>,
                    > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v202(leptos::prelude::event_target_value(&event)) prop:value=move || v170() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v205(()) /> };
                    let v291: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                        v154,
                        leptos::prelude::IntoAny::into_any(v215),
                        if (v1()) == 1_i32 {
                            let v221: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                            leptos::prelude::IntoAny::into_any(v221)
                        } else {
                            let v224 = Func0::new({
                                let v0_1 = v0_1.clone();
                                let v10 = v10.clone();
                                let v2 = v2.clone();
                                let v3 = v3.clone();
                                move || {
                                    Dice_ui::closure226(
                                        v0_1.clone(),
                                        v2.clone(),
                                        v3.clone(),
                                        v10,
                                        (),
                                    )
                                }
                            });
                            {
                                let v228 = {
                                    let clo_1 = Func0::new(move || Dice_ui::closure231((), ()));
                                    Func1::new({
                                        let clo_1 = clo_1.clone();
                                        move |arg_1: ()| clo_1()
                                    })
                                };
                                let v240: string =
                                                       string(" class=move || \" \".to_owned() + &v228(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                                let v246: string =
                                                       string(" d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                                let v247: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v249: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v247);
                                let v251: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v249);
                                let v253: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<path "), (v246))),
                                                    string(">move || { v251 }</"),
                                                )),
                                                string("path"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v255: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                > = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v251 }</path> };
                                let v258: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v255));
                                let v260: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v258);
                                let v262: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v260);
                                let v264: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<svg "), (v240))),
                                                    string(">move || { v262 }</"),
                                                )),
                                                string("svg"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v266: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v228(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v262 }</svg> };
                                let v271 = {
                                    let clo_2 = Func0::new(move || Dice_ui::closure232((), ()));
                                    Func1::new({
                                        let clo_2 = clo_2.clone();
                                        move |arg_2: ()| clo_2()
                                    })
                                };
                                let v272: string =
                                                       string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v271(())");
                                let v275: string = append(
                                    (append(
                                        string(" aria-label=\"Delete\""),
                                        (append(
                                            (append(
                                                string(" on:click=move |_| v224()"),
                                                (append(
                                                    (append(
                                                        (append(string(" "), (v272))),
                                                        string(""),
                                                    )),
                                                    string(""),
                                                )),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                );
                                let v278: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v266));
                                let v280: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v278);
                                let v282: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v280);
                                let v285: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<button "), (v275))),
                                                    string(">move || { v282 }</"),
                                                )),
                                                string("button"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v287: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Button, _, _>,
                                > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v224() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v271(())>move || { v282 }</button> };
                                leptos::prelude::IntoAny::into_any(v287)
                            }
                        },
                    );
                    let v293: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v291);
                    let v295: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v293);
                    let v298: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v9))),
                                        string(">move || { v295 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v300: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v295 }</div> };
                    let v303: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v300));
                    leptos::prelude::Fragment::new(v303)
                }
            }
        }
        pub fn method203(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<i32>,
            v2: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v3: leptos::prelude::WriteSignal<i32>,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::prelude::Fragment,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| {
                    Dice_ui::closure217(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        arg10_0040,
                    )
                }
            })
        }
        pub fn closure215(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::Memo<i32>,
            v3: leptos::prelude::Memo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v8: leptos::prelude::Memo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = Dice_ui::method201(v1);
            let v9 = Dice_ui::method202();
            let v10 = Dice_ui::method203(v0_1, v2, v3, v4);
            let v21: string =
                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v10(x) let:x key=move |x| v9(x.to_owned()) each=v8 /> })");
            let v23: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(
                    leptos::prelude::view! { <leptos::prelude::For  children=move |x| v10(x) let:x key=move |x| v9(x.to_owned()) each=v8 /> },
                ),
            );
            let v25: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v23);
            let v27: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v25);
            let v30: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v27 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v32: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v27 }</div> };
            let v35: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v32));
            leptos::prelude::Fragment::new(v35)
        }
        pub fn closure233(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method214() -> Func0<string> {
            Func0::new(move || Dice_ui::closure235((), ()))
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Dark Mode");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method215() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure239(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("dark-mode");
            String::from(v5)
        }
        pub fn closure241(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure240(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v7: bool = true;
            leptos::prelude::RwSignal::update(
                &v4.l0.clone(),
                |x: &mut /*;
                 let v8: */
                 bool /* = getZero();
                      let v13: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure241((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure242(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            leptos::prelude::RwSignal::get(&v3.l0.clone())
        }
        pub fn method217(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure242(v0_1.clone(), ())
            })
        }
        pub fn method218() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure239((), ()))
        }
        pub fn closure238(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure239((), ()));
            {
                let v7: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v8 = Func1::new({
                    let v0_1 = v0_1.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure240(v0_1.clone(), v)
                });
                {
                    let v10 = Dice_ui::method217(v0_1.clone());
                    let v11 = Dice_ui::method218();
                    let v12: string =
                        string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                    let v24: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    string("<input "),
                                    (append(
                                        (append(
                                            string(" prop:checked=move || v10()"),
                                            (append(
                                                (append(
                                                    string(" on:change=move |event| v8(event)"),
                                                    (append(
                                                        (append(
                                                            string(" id=move || v11()"),
                                                            (append(
                                                                (append(
                                                                    string(" type=\"checkbox\""),
                                                                    (append(
                                                                        (append(
                                                                            (append(
                                                                                string(" "),
                                                                                (v12),
                                                                            )),
                                                                            string(""),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(" />"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v26: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Input, _, _>,
                    > = leptos::prelude::view! { <input  prop:checked=move || v10() on:change=move |event| v8(event) id=move || v11() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                    let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
                    let v29: string =
                        string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                    let v30: string = append(
                        (append((append(string(" "), (v29))), string(""))),
                        string(""),
                    );
                    let v40: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                    let v42: string =
                        string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                    let v46: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v42))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v47: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v49: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v47);
                    let v51: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v49);
                    let v54: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v46))),
                                        string(">move || { v51 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v56: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v51 }</path> };
                    let v59: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v56));
                    let v61: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v59);
                    let v63: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v61);
                    let v66: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v40))),
                                        string(">move || { v63 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v68: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v63 }</svg> };
                    let v78: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                    let v80: string =
                        string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                    let v84: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v80))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v85: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v87: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v85);
                    let v89: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v87);
                    let v91: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v84))),
                                        string(">move || { v89 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v93: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v89 }</path> };
                    let v96: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v93));
                    let v98: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v96);
                    let v100: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v98);
                    let v102: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v78))),
                                        string(">move || { v100 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v104: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v100 }</svg> };
                    let v106: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v104);
                    let v109: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(leptos::prelude::IntoAny::into_any(v68), v106);
                    let v111: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v109);
                    let v113: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v111);
                    let v116: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v30))),
                                        string(">move || { v113 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v118: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v113 }</span> };
                    let v120: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v118);
                    let v121: string =
                        string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                    let v122: string = append(
                        (append((append(string(" "), (v121))), string(""))),
                        string(""),
                    );
                    let v123: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v125: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v123);
                    let v127: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v125);
                    let v129: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v122))),
                                        string(">move || { v127 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v131: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v127 }</span> };
                    let v134: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method186(v28, v120, leptos::prelude::IntoAny::into_any(v131));
                    let v136: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v134);
                    let v138: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v136);
                    let v141: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<label "), (v7))),
                                        string(">move || { v138 }</"),
                                    )),
                                    string("label"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v143: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Label, _, _>,
                    > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v1()>move || { v138 }</label> };
                    let v146: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v143));
                    leptos::prelude::Fragment::new(v146)
                }
            }
        }
        pub fn method216(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Debug");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method219() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn closure249(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("debug");
            String::from(v5)
        }
        pub fn closure250(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v7: bool = true;
            leptos::prelude::RwSignal::update(
                &v4.l1.clone(),
                |x: &mut /*;
                 let v8: */
                 bool /* = getZero();
                      let v13: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure241((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure251(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            leptos::prelude::RwSignal::get(&v3.l1.clone())
        }
        pub fn method221(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure251(v0_1.clone(), ())
            })
        }
        pub fn method222() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure249((), ()))
        }
        pub fn closure248(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure249((), ()));
            {
                let v7: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v8 = Func1::new({
                    let v0_1 = v0_1.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure250(v0_1.clone(), v)
                });
                {
                    let v10 = Dice_ui::method221(v0_1.clone());
                    let v11 = Dice_ui::method222();
                    let v12: string =
                        string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                    let v24: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    string("<input "),
                                    (append(
                                        (append(
                                            string(" prop:checked=move || v10()"),
                                            (append(
                                                (append(
                                                    string(" on:change=move |event| v8(event)"),
                                                    (append(
                                                        (append(
                                                            string(" id=move || v11()"),
                                                            (append(
                                                                (append(
                                                                    string(" type=\"checkbox\""),
                                                                    (append(
                                                                        (append(
                                                                            (append(
                                                                                string(" "),
                                                                                (v12),
                                                                            )),
                                                                            string(""),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(" />"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v26: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Input, _, _>,
                    > = leptos::prelude::view! { <input  prop:checked=move || v10() on:change=move |event| v8(event) id=move || v11() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                    let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
                    let v29: string =
                        string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                    let v30: string = append(
                        (append((append(string(" "), (v29))), string(""))),
                        string(""),
                    );
                    let v40: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                    let v42: string =
                        string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                    let v46: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v42))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v47: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v49: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v47);
                    let v51: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v49);
                    let v54: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v46))),
                                        string(">move || { v51 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v56: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v51 }</path> };
                    let v59: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v56));
                    let v61: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v59);
                    let v63: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v61);
                    let v66: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v40))),
                                        string(">move || { v63 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v68: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v63 }</svg> };
                    let v78: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                    let v80: string =
                        string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                    let v84: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v80))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v85: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v87: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v85);
                    let v89: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v87);
                    let v91: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v84))),
                                        string(">move || { v89 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v93: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v89 }</path> };
                    let v96: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v93));
                    let v98: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v96);
                    let v100: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v98);
                    let v102: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v78))),
                                        string(">move || { v100 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v104: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v100 }</svg> };
                    let v106: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v104);
                    let v109: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(leptos::prelude::IntoAny::into_any(v68), v106);
                    let v111: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v109);
                    let v113: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v111);
                    let v116: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v30))),
                                        string(">move || { v113 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v118: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v113 }</span> };
                    let v120: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v118);
                    let v121: string =
                        string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                    let v122: string = append(
                        (append((append(string(" "), (v121))), string(""))),
                        string(""),
                    );
                    let v123: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v125: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v123);
                    let v127: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v125);
                    let v129: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v122))),
                                        string(">move || { v127 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v131: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v127 }</span> };
                    let v134: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method186(v28, v120, leptos::prelude::IntoAny::into_any(v131));
                    let v136: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v134);
                    let v138: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v136);
                    let v141: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<label "), (v7))),
                                        string(">move || { v138 }</"),
                                    )),
                                    string("label"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v143: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Label, _, _>,
                    > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v1()>move || { v138 }</label> };
                    let v146: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v143));
                    leptos::prelude::Fragment::new(v146)
                }
            }
        }
        pub fn method220(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure248(v0_1.clone(), ())
            })
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure236(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method215();
            let v5 = Dice_ui::method216(v0_1.clone());
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure243((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v10() -> string {
                Dice_ui::closure244((), ())
            }
            let v11 = {
                let clo_1 = Func0::from(v10);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v13() -> string {
                Dice_ui::closure245((), ())
            }
            let v14 = {
                let clo_2 = Func0::from(v13);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            fn v18() -> string {
                Dice_ui::closure246((), ())
            }
            let v19 = {
                let clo_3 = Func0::from(v18);
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v44: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v31, leptos::prelude::IntoAny::into_any(v41));
            let v46: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v44);
            let v48: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v46);
            let v51: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v48 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v53: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v48 }</dl> };
            let v54 = Dice_ui::method219();
            let v55 = Dice_ui::method220(v0_1);
            let v58 = {
                let clo_4 = Func0::new(move || Dice_ui::closure252((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v60 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v62 = {
                let clo_6 = Func0::from(v13);
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v63: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v62(()) + \" \" + &v60(()) + \" \" + &v58(())");
            let v64: string = append(
                (append((append(string(" "), (v63))), string(""))),
                string(""),
            );
            let v66 = {
                let clo_7 = Func0::from(v18);
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v68: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v69: leptos::prelude::Fragment = v54();
            let v71: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v69);
            let v73: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v68))),
                                string(">move || { v71 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v75: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v71 }</dt> };
            let v77: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v75);
            let v79: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v66(())");
            let v80: leptos::prelude::Fragment = v55();
            let v82: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v80);
            let v84: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v79))),
                                string(">move || { v82 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v86: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v66(())>move || { v82 }</dd> };
            let v89: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v77, leptos::prelude::IntoAny::into_any(v86));
            let v91: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v89);
            let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
            let v95: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v64))),
                                string(">move || { v93 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v97: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v62(()) + " " + &v60(()) + " " + &v58(())>move || { v93 }</dl> };
            let v99: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v97);
            let v102: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(leptos::prelude::IntoAny::into_any(v53), v99);
            let v104: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v102);
            let v106: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v104);
            let v109: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v106 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v111: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v106 }</div> };
            let v114: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v111));
            leptos::prelude::Fragment::new(v114)
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure254(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method223() -> Func0<string> {
            Func0::new(move || Dice_ui::closure255((), ()))
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Global State");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method224() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure257((), ()))
        }
        pub fn method226(v0_1: LrcPtr<Dice_ui::Heap2>) -> LrcPtr<Dice_ui::Heap2> {
            v0_1
        }
        pub fn closure260(unitVar: (), v0_1: std::string::String) -> Dice_ui::US71 {
            Dice_ui::US71::US71_0(v0_1)
        }
        pub fn method227() -> Func1<std::string::String, Dice_ui::US71> {
            Func1::new(move |v: std::string::String| Dice_ui::closure260((), v))
        }
        pub fn closure261(unitVar: (), v0_1: std::string::String) -> Dice_ui::US71 {
            Dice_ui::US71::US71_1(v0_1)
        }
        pub fn method228() -> Func1<std::string::String, Dice_ui::US71> {
            Func1::new(move |v: std::string::String| Dice_ui::closure261((), v))
        }
        pub fn closure259(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v4: LrcPtr<Dice_ui::Heap2> = Dice_ui::method226(v0_1);
            let v6: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v4).map_err(|x| x.to_string());
            let v7 = Dice_ui::method227();
            let v8 = Dice_ui::method228();
            let v9: Dice_ui::US71 = match &v6 {
                Err(v6_1_0) => v8(v6_1_0.clone()),
                Ok(v6_0_0) => v7(v6_0_0.clone()),
            };
            match &v9 {
                Dice_ui::US71::US71_0(v9_0_0) => {
                    fable_library_rust::String_::fromString(v9_0_0.clone())
                }
                Dice_ui::US71::US71_1(v9_1_0) => append(
                    (append(string("Error: "), (toString(v9_1_0.clone())))),
                    string(""),
                ),
            }
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure258(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9 = {
                let clo = Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure259(v6.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11: leptos::prelude::Memo<string> = leptos::prelude::Memo::new(move |_| v9(()));
            let v13: string = v11();
            let v16 = {
                let clo_1 = Func0::new(move || Dice_ui::closure262((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v17: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v16(())");
            let v19: string = append(
                (append((append(string(" "), (v17))), string(""))),
                string(""),
            );
            let v24: &str = &*v13;
            let v48: std::string::String = String::from(v24);
            let v70: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v48)),
            );
            let v72: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v70);
            let v74: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v72);
            let v77: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v19))),
                                string(">move || { v74 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v79: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v16(())>move || { v74 }</pre> };
            let v82: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v79));
            leptos::prelude::Fragment::new(v82)
        }
        pub fn method225() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure258((), ()))
        }
        pub fn closure263(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure256(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method224();
            let v1 = Dice_ui::method225();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure263((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure244((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure245((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v13: string = append(
                (append((append(string(" "), (v11))), string(""))),
                string(""),
            );
            let v16 = {
                let clo_3 = Func0::new(move || Dice_ui::closure246((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v18: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v19: leptos::prelude::Fragment = v0_1();
            let v21: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v19);
            let v24: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v18))),
                                string(">move || { v21 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v21 }</dt> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())");
            let v31: leptos::prelude::Fragment = v1();
            let v33: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v31);
            let v36: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v30))),
                                string(">move || { v33 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v38: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v16(())>move || { v33 }</dd> };
            let v41: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v28, leptos::prelude::IntoAny::into_any(v38));
            let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
            let v45: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v43);
            let v48: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v13))),
                                string(">move || { v45 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v50: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v45 }</dl> };
            let v53: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v50));
            leptos::prelude::Fragment::new(v53)
        }
        pub fn closure264(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v2: bool = true;
            leptos::prelude::WriteSignal::update(
                &v0_1,
                |x: &mut /*;
                 let v3: */
                 bool /* = getZero();
                      let v8: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure241((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure265(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method229(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure266(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str =
                Dice_ui::method229(if leptos::prelude::ReadSignal::get(&v0_1) {
                    let v4: string = string("r#\"\"#");
                    r#""#
                } else {
                    let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                    r#"bg-gray-300 hover:bg-gray-200"#
                });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure268(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure269(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method230(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure269((), ()))
        }
        pub fn closure271(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Settings");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn closure272(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Table View");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method231() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure272((), ()))
        }
        pub fn closure274(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("table-view");
            String::from(v5)
        }
        pub fn closure276(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure275(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            let v7: bool = true;
            leptos::prelude::RwSignal::update(
                &v4.l3.clone(),
                |x: &mut /*;
                 let v8: */
                 LrcPtr<Dice_ui::Heap0> /* = getZero();
                                        let v13: bool =
                                            */| {
                    *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure276((), v))(
                        x.clone(),
                    )
                },
            ); //;
            ()
        }
        pub fn closure277(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: LrcPtr<Dice_ui::Heap1> =
                leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::RwSignal::get(&v3.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method233(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure277(v0_1.clone(), ())
            })
        }
        pub fn method234() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure274((), ()))
        }
        pub fn closure273(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v1 = Func0::new(move || Dice_ui::closure274((), ()));
            {
                let v7: string =
                    string(" class=\"block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]\" for=move || v1()");
                let v8 = Func1::new({
                    let v0_1 = v0_1.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure275(v0_1.clone(), v)
                });
                {
                    let v10 = Dice_ui::method233(v0_1.clone());
                    let v11 = Dice_ui::method234();
                    let v12: string =
                        string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                    let v24: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    string("<input "),
                                    (append(
                                        (append(
                                            string(" prop:checked=move || v10()"),
                                            (append(
                                                (append(
                                                    string(" on:change=move |event| v8(event)"),
                                                    (append(
                                                        (append(
                                                            string(" id=move || v11()"),
                                                            (append(
                                                                (append(
                                                                    string(" type=\"checkbox\""),
                                                                    (append(
                                                                        (append(
                                                                            (append(
                                                                                string(" "),
                                                                                (v12),
                                                                            )),
                                                                            string(""),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(" />"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v26: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Input, _, _>,
                    > = leptos::prelude::view! { <input  prop:checked=move || v10() on:change=move |event| v8(event) id=move || v11() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                    let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
                    let v29: string =
                        string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                    let v30: string = append(
                        (append((append(string(" "), (v29))), string(""))),
                        string(""),
                    );
                    let v40: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                    let v42: string =
                        string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                    let v46: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v42))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v47: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v49: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v47);
                    let v51: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v49);
                    let v54: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v46))),
                                        string(">move || { v51 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v56: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v51 }</path> };
                    let v59: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v56));
                    let v61: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v59);
                    let v63: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v61);
                    let v66: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v40))),
                                        string(">move || { v63 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v68: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v63 }</svg> };
                    let v78: string =
                        string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                    let v80: string =
                        string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                    let v84: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v80))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v85: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v87: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v85);
                    let v89: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v87);
                    let v91: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v84))),
                                        string(">move || { v89 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v93: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v89 }</path> };
                    let v96: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v93));
                    let v98: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v96);
                    let v100: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v98);
                    let v102: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v78))),
                                        string(">move || { v100 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v104: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v100 }</svg> };
                    let v106: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v104);
                    let v109: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(leptos::prelude::IntoAny::into_any(v68), v106);
                    let v111: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v109);
                    let v113: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v111);
                    let v116: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v30))),
                                        string(">move || { v113 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v118: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v113 }</span> };
                    let v120: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v118);
                    let v121: string =
                        string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                    let v122: string = append(
                        (append((append(string(" "), (v121))), string(""))),
                        string(""),
                    );
                    let v123: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v125: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v123);
                    let v127: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v125);
                    let v129: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v122))),
                                        string(">move || { v127 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v131: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v127 }</span> };
                    let v134: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method186(v28, v120, leptos::prelude::IntoAny::into_any(v131));
                    let v136: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v134);
                    let v138: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v136);
                    let v141: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<label "), (v7))),
                                        string(">move || { v138 }</"),
                                    )),
                                    string("label"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v143: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Label, _, _>,
                    > = leptos::prelude::view! { <label  class="block relative h-8 w-14 cursor-pointer [-webkit-tap-highlight-color:_transparent]" for=move || v1()>move || { v138 }</label> };
                    let v146: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v143));
                    leptos::prelude::Fragment::new(v146)
                }
            }
        }
        pub fn method232(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure273(v0_1.clone(), ())
            })
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure279(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                (append(string("Transaction "), (toString((v0_1) + 1_i64)))),
                string(""),
            );
            let v6: &str = &*v1;
            let v30: std::string::String = String::from(v6);
            let v52: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v30)),
            );
            leptos::prelude::Fragment::new(v52)
        }
        pub fn closure280(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Account");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method235() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure280((), ()))
        }
        pub fn closure281(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method236(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure281(v0_1.clone(), ())
            })
        }
        pub fn closure282(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure283(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Timestamp");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method237() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure284((), ()))
        }
        pub fn closure285(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v19: i64 =
                (Dice_ui::method193(toInt64(fable_library_rust::String_::fromString(v5))))
                    / 1000_i64;
            let v21: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v19);
            let v35: Dice_ui::US69 =
                defaultValue(Dice_ui::US69::US69_1, map(Dice_ui::method194(), v21));
            let v54: Dice_ui::US32 = match &v35 {
                Dice_ui::US69::US69_0(v35_0_0) => {
                    let v41: chrono::NaiveDateTime = match &v35 {
                        Dice_ui::US69::US69_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v43: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v41);
                    let v45: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v46: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v48: std::string::String = v43.format(v46).to_string();
                    Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v48))
                }
                _ => Dice_ui::US32::US32_1,
            };
            let v60: Dice_ui::US70 = match &v54 {
                Dice_ui::US32::US32_0(v54_0_0) => Dice_ui::US70::US70_0(
                    match &v54 {
                        Dice_ui::US32::US32_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => Dice_ui::US70::US70_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v65: string = match &v60 {
                Dice_ui::US70::US70_0(v60_0_0) => v60_0_0.clone(),
                Dice_ui::US70::US70_1(v60_1_0) => append(
                    (append(string("sm\'.to_string result / Error: "), (v60_1_0.clone()))),
                    string(""),
                ),
            };
            let v70: &str = &*v65;
            let v94: std::string::String = String::from(v70);
            let v116: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v94)),
            );
            leptos::prelude::Fragment::new(v116)
        }
        pub fn method238(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure285(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure286(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure287(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure288(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Predecessor");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method239() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure288((), ()))
        }
        pub fn closure289(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            leptos::prelude::Fragment::new(v64)
        }
        pub fn method240(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure289(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure290(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure291(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receiver");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method241() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure292((), ()))
        }
        pub fn closure293(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            leptos::prelude::Fragment::new(v64)
        }
        pub fn method242(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure293(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure294(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Actions");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method243() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure296((), ()))
        }
        pub fn closure298(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == (v2.clone()) {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == (v2.clone()) {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == (v2.clone()) {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v16: &str = &*v11;
            let v40: std::string::String = String::from(v16);
            let v62: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v40)),
            );
            leptos::prelude::Fragment::new(v62)
        }
        pub fn method245(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure298(v0_1.clone(), ())
            })
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Method");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method247() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure300((), ()))
        }
        pub fn closure301(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: Dice_ui::US15 =
                defaultValue(Dice_ui::US15::US15_1, map(Dice_ui::method46(), v0_1));
            match &v14 {
                Dice_ui::US15::US15_0(v14_0_0) => {
                    let v20: string = fable_library_rust::String_::fromString(
                        match &v14 {
                            Dice_ui::US15::US15_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v25: &str = &*v20;
                    let v49: std::string::String = String::from(v25);
                    let v71: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v49),
                        ));
                    leptos::prelude::Fragment::new(v71)
                }
                _ => {
                    let v79: &str = &*string("None");
                    let v103: std::string::String = String::from(v79);
                    let v125: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v103),
                        ));
                    leptos::prelude::Fragment::new(v125)
                }
            }
        }
        pub fn method248(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure301(v0_1.clone(), ())
            })
        }
        pub fn closure302(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure303(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure304(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure299(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method247();
            let v5 = Dice_ui::method248(v0_1);
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure302((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11 = {
                let clo_1 = Func0::new(move || Dice_ui::closure303((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14 = {
                let clo_2 = Func0::new(move || Dice_ui::closure245((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v19 = {
                let clo_3 = Func0::new(move || Dice_ui::closure304((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v44: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v31, leptos::prelude::IntoAny::into_any(v41));
            let v46: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v44);
            let v48: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v46);
            let v51: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v48 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v53: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v48 }</dl> };
            let v56: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v53));
            let v58: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v56);
            let v60: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v58);
            let v63: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v60 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v65: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v60 }</div> };
            let v68: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v65));
            leptos::prelude::Fragment::new(v68)
        }
        pub fn method246(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure299(v0_1.clone(), ())
            })
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure307(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure297(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v15: bool = true;
            let _vec_map : Vec<_> = v13.into_iter().map(|x| { //;
            let patternInput:
                    (std::string::String, Option<std::string::String>) = x;
            let v19 = Dice_ui::method245(patternInput.0.clone());
            let v20 = Dice_ui::method246(patternInput.1.clone());
            let v23 =
                {
                    let clo = Func0::new(move || Dice_ui::closure305((), ()));
                    Func1::new({
                                   let clo = clo.clone();
                                   move |arg: ()| clo()
                               })
                };
            let v26 =
                {
                    let clo_1 =
                        Func0::new(move || Dice_ui::closure306((), ()));
                    Func1::new({
                                   let clo_1 = clo_1.clone();
                                   move |arg_1: ()| clo_1()
                               })
                };
            let v29 =
                {
                    let clo_2 =
                        Func0::new(move || Dice_ui::closure307((), ()));
                    Func1::new({
                                   let clo_2 = clo_2.clone();
                                   move |arg_2: ()| clo_2()
                               })
                };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())");
            let v32: string =
                append((append((append(string(" "), (v30))), string(""))),
                       string(""));
            let v35 =
                {
                    let clo_3 =
                        Func0::new(move || Dice_ui::closure308((), ()));
                    Func1::new({
                                   let clo_3 = clo_3.clone();
                                   move |arg_3: ()| clo_3()
                               })
                };
            let v37: string =
                string(" class=\"[font-size:12px] text-gray-400\"");
            let v38: leptos::prelude::Fragment = v19();
            let v40: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v38);
            let v43: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dt "),
                                                               (v37))),
                                                       string(">move || { v40 }</"))),
                                               string("dt"))),
                                       string(">"))))), string(" }"));
            let v45:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v40 }</dt> };
            let v47: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v45);
            let v49: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())");
            let v50: leptos::prelude::Fragment = v20();
            let v52: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v50);
            let v55: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dd "),
                                                               (v49))),
                                                       string(">move || { v52 }</"))),
                                               string("dd"))),
                                       string(">"))))), string(" }"));
            let v57:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v35(())>move || { v52 }</dd> };
            let v60: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v47,
                                   leptos::prelude::IntoAny::into_any(v57));
            let v62: leptos::prelude::Fragment =
                leptos::prelude::Fragment::new(v60);
            let v64: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v62);
            let v67: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dl "),
                                                               (v32))),
                                                       string(">move || { v64 }</"))),
                                               string("dl"))),
                                       string(">"))))), string(" }"));
            let v69:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v26(()) + " " + &v23(())>move || { v64 }</dl> };
            let v71: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v69);
            let v73: bool = true; v71 }).collect::<Vec<_>>();
            let v75: Vec<leptos::prelude::AnyView> = _vec_map;
            let v78: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v75));
            leptos::prelude::Fragment::new(v78)
        }
        pub fn method244(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure297(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure309(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure310(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure311(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Deposit");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method249() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure312((), ()))
        }
        pub fn closure313(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v8);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            leptos::prelude::Fragment::new(v66)
        }
        pub fn method250(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure313(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure315(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure316(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Outcome Status");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method251() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure316((), ()))
        }
        pub fn closure317(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = ofBoolean(v9);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            leptos::prelude::Fragment::new(v66)
        }
        pub fn method252(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure317(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure318(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure319(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Fee");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method253() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure320((), ()))
        }
        pub fn closure321(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v10);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            leptos::prelude::Fragment::new(v66)
        }
        pub fn method254(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure321(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure323(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure324(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Height");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method255() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure324((), ()))
        }
        pub fn closure325(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v6);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v66: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44)),
            );
            leptos::prelude::Fragment::new(v66)
        }
        pub fn method256(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure325(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure327(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure328(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Hash");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method257() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure328((), ()))
        }
        pub fn closure329(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            leptos::prelude::Fragment::new(v64)
        }
        pub fn method258(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure329(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure330(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure331(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure332(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Hash");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method259() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure332((), ()))
        }
        pub fn closure333(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            leptos::prelude::Fragment::new(v64)
        }
        pub fn method260(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure333(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receipt ID");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method261() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure336((), ()))
        }
        pub fn closure337(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v64: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42)),
            );
            leptos::prelude::Fragment::new(v64)
        }
        pub fn method262(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure337(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure339(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure340(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Logs");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method263() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure340((), ()))
        }
        pub fn method265() -> string {
            string("\n")
        }
        pub fn closure342(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure341(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new(move |v: std::string::String| Dice_ui::closure55((), v))(x.clone())
                })
                .collect::<Vec<_>>();
            let v19: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v16.clone()));
            let v31: string = replace(
                join(Dice_ui::method265(), toArray(v19)),
                string("\\n"),
                string("\n"),
            );
            let v34 = {
                let clo = Func0::new(move || Dice_ui::closure342((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v35: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v34(())");
            let v37: string = append(
                (append((append(string(" "), (v35))), string(""))),
                string(""),
            );
            let v42: &str = &*v31;
            let v66: std::string::String = String::from(v42);
            let v88: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v66)),
            );
            let v90: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v88);
            let v92: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v90);
            let v95: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v37))),
                                string(">move || { v92 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v97: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v34(())>move || { v92 }</pre> };
            let v100: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v97));
            leptos::prelude::Fragment::new(v100)
        }
        pub fn method264(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure341(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure344(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method266(
            v0_1: leptos::prelude::AnyView,
            v1: leptos::prelude::AnyView,
            v2: leptos::prelude::AnyView,
            v3: leptos::prelude::AnyView,
            v4: leptos::prelude::AnyView,
            v5: leptos::prelude::AnyView,
            v6: leptos::prelude::AnyView,
            v7: leptos::prelude::AnyView,
            v8: leptos::prelude::AnyView,
            v9: leptos::prelude::AnyView,
            v10: leptos::prelude::AnyView,
            v11: leptos::prelude::AnyView,
            v12: leptos::prelude::AnyView,
        ) -> Vec<leptos::prelude::AnyView> {
            let v13: leptos::prelude::AnyView = Dice_ui::method174(v12);
            let v17: string = string("v13");
            let v18: leptos::prelude::AnyView = Dice_ui::method174(v11);
            let v22: string = append(string("v18, "), (v17));
            let v23: leptos::prelude::AnyView = Dice_ui::method174(v10);
            let v26: string = append(string("v23, "), (v22));
            let v27: leptos::prelude::AnyView = Dice_ui::method174(v9);
            let v30: string = append(string("v27, "), (v26));
            let v31: leptos::prelude::AnyView = Dice_ui::method174(v8);
            let v34: string = append(string("v31, "), (v30));
            let v35: leptos::prelude::AnyView = Dice_ui::method174(v7);
            let v38: string = append(string("v35, "), (v34));
            let v39: leptos::prelude::AnyView = Dice_ui::method174(v6);
            let v42: string = append(string("v39, "), (v38));
            let v43: leptos::prelude::AnyView = Dice_ui::method174(v5);
            let v46: string = append(string("v43, "), (v42));
            let v47: leptos::prelude::AnyView = Dice_ui::method174(v4);
            let v50: string = append(string("v47, "), (v46));
            let v51: leptos::prelude::AnyView = Dice_ui::method174(v3);
            let v54: string = append(string("v51, "), (v50));
            let v55: leptos::prelude::AnyView = Dice_ui::method174(v2);
            let v58: string = append(string("v55, "), (v54));
            let v59: leptos::prelude::AnyView = Dice_ui::method174(v1);
            let v62: string = append(string("v59, "), (v58));
            let v63: leptos::prelude::AnyView = Dice_ui::method174(v0_1);
            let v67: string = append(
                (append(string("vec!["), (append(string("v63, "), (v62))))),
                string("]"),
            );
            vec![
                v63, v59, v55, v51, v47, v43, v39, v35, v31, v27, v23, v18, v13,
            ]
        }
        pub fn closure345(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method268(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method268: loop {
                break '_method268 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if (length(fable_library_rust::String_::fromString(v4))) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method268;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method267(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method267: loop {
                break '_method267 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    if Dice_ui::method268(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method267;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure270(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::Memo<
                Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v119: leptos::prelude::AnyView = if leptos::prelude::ReadSignal::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v10: string = string(" class=\"flex items-center pb-[6px]\"");
                let v12: string = string(" class=\"pr-[15px] [font-size:13px]\"");
                let v16: Func0<leptos::prelude::Fragment> =
                    Dice_ui::method184(Func0::new(move || {
                        Func0::new(move || Dice_ui::closure271((), ()))()
                    }));
                let v18: leptos::prelude::Fragment = (move || v16())();
                let v20: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v18);
                let v23: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v12))),
                                    string(">move || { v20 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v25: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v20 }</span> };
                let v27: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v25);
                let v29: string = string(" class=\"h-px flex-1 bg-gray-300\"");
                let v30: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                let v32: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v30);
                let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
                let v36: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v29))),
                                    string(">move || { v34 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v38: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v34 }</span> };
                let v41: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method176(v27, leptos::prelude::IntoAny::into_any(v38));
                let v43: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v41);
                let v45: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v43);
                let v47: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v10))),
                                    string(">move || { v45 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v49: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v45 }</span> };
                let v51: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v49);
                let v52 = Dice_ui::method231();
                let v53 = Dice_ui::method232(v0_1.clone());
                let v56 = {
                    let clo = Func0::new(move || Dice_ui::closure278((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v59 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure244((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v62 = {
                    let clo_2 = Func0::new(move || Dice_ui::closure245((), ()));
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v63: string =
                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v62(()) + \" \" + &v59(()) + \" \" + &v56(())");
                let v64: string = append(
                    (append((append(string(" "), (v63))), string(""))),
                    string(""),
                );
                let v67 = {
                    let clo_3 = Func0::new(move || Dice_ui::closure246((), ()));
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v69: string = string(" class=\"[font-size:12px] text-gray-400\"");
                let v70: leptos::prelude::Fragment = v52();
                let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
                let v75: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dt "), (v69))),
                                    string(">move || { v72 }</"),
                                )),
                                string("dt"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v72 }</dt> };
                let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
                let v81: string =
                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v67(())");
                let v82: leptos::prelude::Fragment = v53();
                let v84: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v82);
                let v87: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dd "), (v81))),
                                    string(">move || { v84 }</"),
                                )),
                                string("dd"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v89: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v67(())>move || { v84 }</dd> };
                let v92: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method176(v79, leptos::prelude::IntoAny::into_any(v89));
                let v94: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v92);
                let v96: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v94);
                let v99: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dl "), (v64))),
                                    string(">move || { v96 }</"),
                                )),
                                string("dl"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v101: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v62(()) + " " + &v59(()) + " " + &v56(())>move || { v96 }</dl> };
                let v104: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method176(v51, leptos::prelude::IntoAny::into_any(v101));
                let v106: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v104);
                let v108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v106);
                let v111: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v8))),
                                    string(">move || { v108 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v113: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v108 }</div> };
                leptos::prelude::IntoAny::into_any(v113)
            } else {
                let v116: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                leptos::prelude::IntoAny::into_any(v116)
            };
            let v121: Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)> = v2();
            let v3535: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                v119,
                if (get_Count(fable_library_rust::NativeArray_::array_from(v121.clone())) as u64)
                    == 0_u64
                {
                    let v128: string =
                        string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                    let v130: string = string(" class=\"[height:17px]\"");
                    let v144: string =
                                           string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v150: string =
                                           string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v151: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v153: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v151);
                    let v155: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v153);
                    let v158: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v150))),
                                        string(">move || { v155 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v160: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v155 }</path> };
                    let v163: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v160));
                    let v165: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v163);
                    let v167: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v165);
                    let v170: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v144))),
                                        string(">move || { v167 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v172: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v167 }</svg> };
                    let v175: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v172));
                    let v177: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v175);
                    let v179: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v177);
                    let v182: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v130))),
                                        string(">move || { v179 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v184: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[height:17px]">move || { v179 }</span> };
                    let v186: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v184);
                    let v188: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                    let v194: &str = &*string("No account selected");
                    let v218: std::string::String = String::from(v194);
                    let v240: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v218),
                        ));
                    let v242: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v240);
                    let v244: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v242);
                    let v247: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<pre "), (v188))),
                                        string(">move || { v244 }</"),
                                    )),
                                    string("pre"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v249: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                    > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v244 }</pre> };
                    let v252: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v186, leptos::prelude::IntoAny::into_any(v249));
                    let v254: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v252);
                    let v256: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v254);
                    let v259: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v128))),
                                        string(">move || { v256 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v261: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v256 }</div> };
                    leptos::prelude::IntoAny::into_any(v261)
                } else {
                    let v265: Result<
                        Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v1();
                    let v266 = Dice_ui::method134();
                    let v267 = Dice_ui::method135();
                    let v268: Dice_ui::US54 = match &v265 {
                        Err(v265_1_0) => v267(v265_1_0.clone()),
                        Ok(v265_0_0) => v266(v265_0_0.clone()),
                    };
                    let v291: Dice_ui::US47 = match &v268 {
                        Dice_ui::US54::US54_0(v268_0_0) => Dice_ui::US47::US47_0(defaultValue(
                            Dice_ui::US48::US48_1,
                            map(Dice_ui::method136(), v268_0_0.clone()),
                        )),
                        Dice_ui::US54::US54_1(v268_1_0) => Dice_ui::US47::US47_1(v268_1_0.clone()),
                    };
                    match &v291 {
                        Dice_ui::US47::US47_0(v291_0_0) => {
                            let v292: Dice_ui::US48 = v291_0_0.clone();
                            if let Dice_ui::US48::US48_0(v292_0_0) = &v292 {
                                let v293: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v292_0_0.clone();
                                let v296: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::RwSignal::get_untracked(&v0_1.l0.clone());
                                if if let Dice_ui::US1::US1_0 =
                                    &(leptos::prelude::RwSignal::get(&v296.l3.clone())).l4
                                {
                                    true
                                } else {
                                    false
                                } {
                                    let v302: string =
                                                           string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                    let v304: string = append(
                                        (append((append(string(" "), (v302))), string(""))),
                                        string(""),
                                    );
                                    let v306: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        v293.clone().to_vec();
                                    let v308: bool = true;
                                    let _vec_map : Vec<_> = v306.into_iter().map(|x| { //;
                                                       let patternInput:
                                                               (string, usize,
                                                                LrcPtr<Dice_ui::Heap5>) =
                                                           x;
                                                       let v312:
                                                               LrcPtr<Dice_ui::Heap5> =
                                                           patternInput.2.clone();
                                                       let v313:
                                                               std::string::String =
                                                           v312.l0.clone();
                                                       let v314:
                                                               std::string::String =
                                                           v312.l1.clone();
                                                       let v315:
                                                               std::string::String =
                                                           v312.l2.clone();
                                                       let v316:
                                                               std::string::String =
                                                           v312.l3.clone();
                                                       let v317:
                                                               std::string::String =
                                                           v312.l4.clone();
                                                       let v318:
                                                               std::string::String =
                                                           v312.l5.clone();
                                                       let v319: u32 =
                                                           v312.l6;
                                                       let v320:
                                                               Array<(std::string::String,
                                                                      Option<std::string::String>)> =
                                                           v312.l7.clone();
                                                       let v321: f64 =
                                                           v312.l8;
                                                       let v322: bool =
                                                           v312.l9;
                                                       let v323: f64 =
                                                           v312.l10;
                                                       let v324:
                                                               Array<std::string::String> =
                                                           v312.l11.clone();
                                                       let v326: i64 =
                                                           patternInput.1.clone()
                                                               as i64;
                                                       let v331: bool =
                                                           true; leptos::logging::log!("{}", string("transaction.render (1)"));
                                                       let v333:
                                                               Option<LrcPtr<Dice_ui::Heap2>> =
                                                           leptos::context::use_context::<std::sync::Arc<Heap2>>();
                                                       let v335:
                                                               LrcPtr<Dice_ui::Heap2> =
                                                           v333.unwrap();
                                                       let v337: string =
                                                           string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                                                       let v339: string =
                                                           string(" class=\"flex items-center pb-[6px]\"");
                                                       let v341: string =
                                                           string(" class=\"pr-[15px] [font-size:13px]\"");
                                                       let v345:
                                                               Func0<leptos::prelude::Fragment> =
                                                           Dice_ui::method184(Func0::new(move || Func0::new({
                                                                                                                let v326
                                                                                                                    =
                                                                                                                    v326.clone();
                                                                                                                move
                                                                                                                    ||
                                                                                                                    Dice_ui::closure279(v326,
                                                                                                                                        ())
                                                                                                            })()));
                                                       let v347:
                                                               leptos::prelude::Fragment =
                                                           (move || v345())();
                                                       let v349:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v347);
                                                       let v352: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<span "),
                                                                                                          (v341))),
                                                                                                  string(">move || { v349 }</"))),
                                                                                          string("span"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v354:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                                           leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v349 }</span> };
                                                       let v356:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v354);
                                                       let v358: string =
                                                           string(" class=\"h-px flex-1 bg-gray-300\"");
                                                       let v359:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method172();
                                                       let v361:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v359);
                                                       let v363:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v361);
                                                       let v365: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<span "),
                                                                                                          (v358))),
                                                                                                  string(">move || { v363 }</"))),
                                                                                          string("span"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v367:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                                           leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v363 }</span> };
                                                       let v370:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v356,
                                                                              leptos::prelude::IntoAny::into_any(v367));
                                                       let v372:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v370);
                                                       let v374:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v372);
                                                       let v376: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<span "),
                                                                                                          (v339))),
                                                                                                  string(">move || { v374 }</"))),
                                                                                          string("span"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v378:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                                           leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v374 }</span> };
                                                       let v380:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v378);
                                                       let v382: string =
                                                           string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
                                                       let v383 =
                                                           Dice_ui::method235();
                                                       let v384 =
                                                           Dice_ui::method236(patternInput.0.clone());
                                                       let v387 =
                                                           {
                                                               let clo_4 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure282((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_4
                                                                                  =
                                                                                  clo_4.clone();
                                                                              move
                                                                                  |arg_4:
                                                                                       ()|
                                                                                  clo_4()
                                                                          })
                                                           };
                                                       let v390 =
                                                           {
                                                               let clo_5 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure283((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_5
                                                                                  =
                                                                                  clo_5.clone();
                                                                              move
                                                                                  |arg_5:
                                                                                       ()|
                                                                                  clo_5()
                                                                          })
                                                           };
                                                       fn v392() -> string {
                                                           Dice_ui::closure245((),
                                                                               ())
                                                       }
                                                       let v393 =
                                                           {
                                                               let clo_6 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_6
                                                                                  =
                                                                                  clo_6.clone();
                                                                              move
                                                                                  |arg_6:
                                                                                       ()|
                                                                                  clo_6()
                                                                          })
                                                           };
                                                       let v394: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v393(()) + \" \" + &v390(()) + \" \" + &v387(())");
                                                       let v395: string =
                                                           append((append((append(string(" "),
                                                                                  (v394))),
                                                                          string(""))),
                                                                  string(""));
                                                       fn v397() -> string {
                                                           Dice_ui::closure246((),
                                                                               ())
                                                       }
                                                       let v398 =
                                                           {
                                                               let clo_7 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_7
                                                                                  =
                                                                                  clo_7.clone();
                                                                              move
                                                                                  |arg_7:
                                                                                       ()|
                                                                                  clo_7()
                                                                          })
                                                           };
                                                       let v400: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v401:
                                                               leptos::prelude::Fragment =
                                                           v383();
                                                       let v403:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v401);
                                                       let v406: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v400))),
                                                                                                  string(">move || { v403 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v408:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v403 }</dt> };
                                                       let v410:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v408);
                                                       let v412: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v398(())");
                                                       let v413:
                                                               leptos::prelude::Fragment =
                                                           v384();
                                                       let v415:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v413);
                                                       let v418: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v412))),
                                                                                                  string(">move || { v415 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v420:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v398(())>move || { v415 }</dd> };
                                                       let v423:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v410,
                                                                              leptos::prelude::IntoAny::into_any(v420));
                                                       let v425:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v423);
                                                       let v427:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v425);
                                                       let v430: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v395))),
                                                                                                  string(">move || { v427 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v432:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v393(()) + " " + &v390(()) + " " + &v387(())>move || { v427 }</dl> };
                                                       let v434:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v432);
                                                       let v435 =
                                                           Dice_ui::method237();
                                                       let v436 =
                                                           Dice_ui::method238(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v439 =
                                                           {
                                                               let clo_8 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure286((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_8
                                                                                  =
                                                                                  clo_8.clone();
                                                                              move
                                                                                  |arg_8:
                                                                                       ()|
                                                                                  clo_8()
                                                                          })
                                                           };
                                                       let v442 =
                                                           {
                                                               let clo_9 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure287((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_9
                                                                                  =
                                                                                  clo_9.clone();
                                                                              move
                                                                                  |arg_9:
                                                                                       ()|
                                                                                  clo_9()
                                                                          })
                                                           };
                                                       let v444 =
                                                           {
                                                               let clo_10 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_10
                                                                                  =
                                                                                  clo_10.clone();
                                                                              move
                                                                                  |arg_10:
                                                                                       ()|
                                                                                  clo_10()
                                                                          })
                                                           };
                                                       let v445: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v444(()) + \" \" + &v442(()) + \" \" + &v439(())");
                                                       let v446: string =
                                                           append((append((append(string(" "),
                                                                                  (v445))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v448 =
                                                           {
                                                               let clo_11 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_11
                                                                                  =
                                                                                  clo_11.clone();
                                                                              move
                                                                                  |arg_11:
                                                                                       ()|
                                                                                  clo_11()
                                                                          })
                                                           };
                                                       let v450: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v451:
                                                               leptos::prelude::Fragment =
                                                           v435();
                                                       let v453:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v451);
                                                       let v455: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v450))),
                                                                                                  string(">move || { v453 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v457:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v453 }</dt> };
                                                       let v459:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v457);
                                                       let v461: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v448(())");
                                                       let v462:
                                                               leptos::prelude::Fragment =
                                                           v436();
                                                       let v464:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v462);
                                                       let v466: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v461))),
                                                                                                  string(">move || { v464 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v468:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v448(())>move || { v464 }</dd> };
                                                       let v471:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v459,
                                                                              leptos::prelude::IntoAny::into_any(v468));
                                                       let v473:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v471);
                                                       let v475:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v473);
                                                       let v477: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v446))),
                                                                                                  string(">move || { v475 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v479:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v444(()) + " " + &v442(()) + " " + &v439(())>move || { v475 }</dl> };
                                                       let v481:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v479);
                                                       let v482 =
                                                           Dice_ui::method239();
                                                       let v483 =
                                                           Dice_ui::method240(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v486 =
                                                           {
                                                               let clo_12 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure290((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_12
                                                                                  =
                                                                                  clo_12.clone();
                                                                              move
                                                                                  |arg_12:
                                                                                       ()|
                                                                                  clo_12()
                                                                          })
                                                           };
                                                       let v489 =
                                                           {
                                                               let clo_13 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure291((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_13
                                                                                  =
                                                                                  clo_13.clone();
                                                                              move
                                                                                  |arg_13:
                                                                                       ()|
                                                                                  clo_13()
                                                                          })
                                                           };
                                                       let v491 =
                                                           {
                                                               let clo_14 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_14
                                                                                  =
                                                                                  clo_14.clone();
                                                                              move
                                                                                  |arg_14:
                                                                                       ()|
                                                                                  clo_14()
                                                                          })
                                                           };
                                                       let v492: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v491(()) + \" \" + &v489(()) + \" \" + &v486(())");
                                                       let v493: string =
                                                           append((append((append(string(" "),
                                                                                  (v492))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v495 =
                                                           {
                                                               let clo_15 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_15
                                                                                  =
                                                                                  clo_15.clone();
                                                                              move
                                                                                  |arg_15:
                                                                                       ()|
                                                                                  clo_15()
                                                                          })
                                                           };
                                                       let v497: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v498:
                                                               leptos::prelude::Fragment =
                                                           v482();
                                                       let v500:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v498);
                                                       let v502: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v497))),
                                                                                                  string(">move || { v500 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v504:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v500 }</dt> };
                                                       let v506:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v504);
                                                       let v508: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v495(())");
                                                       let v509:
                                                               leptos::prelude::Fragment =
                                                           v483();
                                                       let v511:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v509);
                                                       let v513: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v508))),
                                                                                                  string(">move || { v511 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v515:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v495(())>move || { v511 }</dd> };
                                                       let v518:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v506,
                                                                              leptos::prelude::IntoAny::into_any(v515));
                                                       let v520:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v518);
                                                       let v522:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v520);
                                                       let v524: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v493))),
                                                                                                  string(">move || { v522 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v526:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v491(()) + " " + &v489(()) + " " + &v486(())>move || { v522 }</dl> };
                                                       let v528:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v526);
                                                       let v529 =
                                                           Dice_ui::method241();
                                                       let v530 =
                                                           Dice_ui::method242(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v533 =
                                                           {
                                                               let clo_16 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure294((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_16
                                                                                  =
                                                                                  clo_16.clone();
                                                                              move
                                                                                  |arg_16:
                                                                                       ()|
                                                                                  clo_16()
                                                                          })
                                                           };
                                                       let v536 =
                                                           {
                                                               let clo_17 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure295((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_17
                                                                                  =
                                                                                  clo_17.clone();
                                                                              move
                                                                                  |arg_17:
                                                                                       ()|
                                                                                  clo_17()
                                                                          })
                                                           };
                                                       let v538 =
                                                           {
                                                               let clo_18 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_18
                                                                                  =
                                                                                  clo_18.clone();
                                                                              move
                                                                                  |arg_18:
                                                                                       ()|
                                                                                  clo_18()
                                                                          })
                                                           };
                                                       let v539: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v538(()) + \" \" + &v536(()) + \" \" + &v533(())");
                                                       let v540: string =
                                                           append((append((append(string(" "),
                                                                                  (v539))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v542 =
                                                           {
                                                               let clo_19 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_19
                                                                                  =
                                                                                  clo_19.clone();
                                                                              move
                                                                                  |arg_19:
                                                                                       ()|
                                                                                  clo_19()
                                                                          })
                                                           };
                                                       let v544: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v545:
                                                               leptos::prelude::Fragment =
                                                           v529();
                                                       let v547:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v545);
                                                       let v549: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v544))),
                                                                                                  string(">move || { v547 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v551:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v547 }</dt> };
                                                       let v553:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v551);
                                                       let v555: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v542(())");
                                                       let v556:
                                                               leptos::prelude::Fragment =
                                                           v530();
                                                       let v558:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v556);
                                                       let v560: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v555))),
                                                                                                  string(">move || { v558 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v562:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v542(())>move || { v558 }</dd> };
                                                       let v565:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v553,
                                                                              leptos::prelude::IntoAny::into_any(v562));
                                                       let v567:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v565);
                                                       let v569:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v567);
                                                       let v571: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v540))),
                                                                                                  string(">move || { v569 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v573:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v538(()) + " " + &v536(()) + " " + &v533(())>move || { v569 }</dl> };
                                                       let v575:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v573);
                                                       let v576 =
                                                           Dice_ui::method243();
                                                       let v577 =
                                                           Dice_ui::method244(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v580 =
                                                           {
                                                               let clo_20 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure309((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_20
                                                                                  =
                                                                                  clo_20.clone();
                                                                              move
                                                                                  |arg_20:
                                                                                       ()|
                                                                                  clo_20()
                                                                          })
                                                           };
                                                       let v583 =
                                                           {
                                                               let clo_21 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure310((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_21
                                                                                  =
                                                                                  clo_21.clone();
                                                                              move
                                                                                  |arg_21:
                                                                                       ()|
                                                                                  clo_21()
                                                                          })
                                                           };
                                                       let v585 =
                                                           {
                                                               let clo_22 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_22
                                                                                  =
                                                                                  clo_22.clone();
                                                                              move
                                                                                  |arg_22:
                                                                                       ()|
                                                                                  clo_22()
                                                                          })
                                                           };
                                                       let v586: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v585(()) + \" \" + &v583(()) + \" \" + &v580(())");
                                                       let v587: string =
                                                           append((append((append(string(" "),
                                                                                  (v586))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v590 =
                                                           {
                                                               let clo_23 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure311((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_23
                                                                                  =
                                                                                  clo_23.clone();
                                                                              move
                                                                                  |arg_23:
                                                                                       ()|
                                                                                  clo_23()
                                                                          })
                                                           };
                                                       let v592: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v593:
                                                               leptos::prelude::Fragment =
                                                           v576();
                                                       let v595:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v593);
                                                       let v597: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v592))),
                                                                                                  string(">move || { v595 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v599:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v595 }</dt> };
                                                       let v601:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v599);
                                                       let v603: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v590(())");
                                                       let v604:
                                                               leptos::prelude::Fragment =
                                                           v577();
                                                       let v606:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v604);
                                                       let v608: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v603))),
                                                                                                  string(">move || { v606 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v610:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v590(())>move || { v606 }</dd> };
                                                       let v613:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v601,
                                                                              leptos::prelude::IntoAny::into_any(v610));
                                                       let v615:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v613);
                                                       let v617:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v615);
                                                       let v619: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v587))),
                                                                                                  string(">move || { v617 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v621:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v585(()) + " " + &v583(()) + " " + &v580(())>move || { v617 }</dl> };
                                                       let v623:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v621);
                                                       let v624 =
                                                           Dice_ui::method249();
                                                       let v625 =
                                                           Dice_ui::method250(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v628 =
                                                           {
                                                               let clo_24 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure314((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_24
                                                                                  =
                                                                                  clo_24.clone();
                                                                              move
                                                                                  |arg_24:
                                                                                       ()|
                                                                                  clo_24()
                                                                          })
                                                           };
                                                       let v631 =
                                                           {
                                                               let clo_25 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure315((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_25
                                                                                  =
                                                                                  clo_25.clone();
                                                                              move
                                                                                  |arg_25:
                                                                                       ()|
                                                                                  clo_25()
                                                                          })
                                                           };
                                                       let v633 =
                                                           {
                                                               let clo_26 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_26
                                                                                  =
                                                                                  clo_26.clone();
                                                                              move
                                                                                  |arg_26:
                                                                                       ()|
                                                                                  clo_26()
                                                                          })
                                                           };
                                                       let v634: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v633(()) + \" \" + &v631(()) + \" \" + &v628(())");
                                                       let v635: string =
                                                           append((append((append(string(" "),
                                                                                  (v634))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v637 =
                                                           {
                                                               let clo_27 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_27
                                                                                  =
                                                                                  clo_27.clone();
                                                                              move
                                                                                  |arg_27:
                                                                                       ()|
                                                                                  clo_27()
                                                                          })
                                                           };
                                                       let v639: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v640:
                                                               leptos::prelude::Fragment =
                                                           v624();
                                                       let v642:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v640);
                                                       let v644: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v639))),
                                                                                                  string(">move || { v642 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v646:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v642 }</dt> };
                                                       let v648:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v646);
                                                       let v650: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v637(())");
                                                       let v651:
                                                               leptos::prelude::Fragment =
                                                           v625();
                                                       let v653:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v651);
                                                       let v655: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v650))),
                                                                                                  string(">move || { v653 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v657:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v637(())>move || { v653 }</dd> };
                                                       let v660:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v648,
                                                                              leptos::prelude::IntoAny::into_any(v657));
                                                       let v662:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v660);
                                                       let v664:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v662);
                                                       let v666: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v635))),
                                                                                                  string(">move || { v664 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v668:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v633(()) + " " + &v631(()) + " " + &v628(())>move || { v664 }</dl> };
                                                       let v670:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v668);
                                                       let v671 =
                                                           Dice_ui::method251();
                                                       let v672 =
                                                           Dice_ui::method252(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v675 =
                                                           {
                                                               let clo_28 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure318((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_28
                                                                                  =
                                                                                  clo_28.clone();
                                                                              move
                                                                                  |arg_28:
                                                                                       ()|
                                                                                  clo_28()
                                                                          })
                                                           };
                                                       let v678 =
                                                           {
                                                               let clo_29 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure319((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_29
                                                                                  =
                                                                                  clo_29.clone();
                                                                              move
                                                                                  |arg_29:
                                                                                       ()|
                                                                                  clo_29()
                                                                          })
                                                           };
                                                       let v680 =
                                                           {
                                                               let clo_30 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_30
                                                                                  =
                                                                                  clo_30.clone();
                                                                              move
                                                                                  |arg_30:
                                                                                       ()|
                                                                                  clo_30()
                                                                          })
                                                           };
                                                       let v681: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v680(()) + \" \" + &v678(()) + \" \" + &v675(())");
                                                       let v682: string =
                                                           append((append((append(string(" "),
                                                                                  (v681))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v684 =
                                                           {
                                                               let clo_31 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_31
                                                                                  =
                                                                                  clo_31.clone();
                                                                              move
                                                                                  |arg_31:
                                                                                       ()|
                                                                                  clo_31()
                                                                          })
                                                           };
                                                       let v686: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v687:
                                                               leptos::prelude::Fragment =
                                                           v671();
                                                       let v689:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v687);
                                                       let v691: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v686))),
                                                                                                  string(">move || { v689 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v693:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v689 }</dt> };
                                                       let v695:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v693);
                                                       let v697: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v684(())");
                                                       let v698:
                                                               leptos::prelude::Fragment =
                                                           v672();
                                                       let v700:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v698);
                                                       let v702: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v697))),
                                                                                                  string(">move || { v700 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v704:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v684(())>move || { v700 }</dd> };
                                                       let v707:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v695,
                                                                              leptos::prelude::IntoAny::into_any(v704));
                                                       let v709:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v707);
                                                       let v711:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v709);
                                                       let v713: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v682))),
                                                                                                  string(">move || { v711 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v715:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v680(()) + " " + &v678(()) + " " + &v675(())>move || { v711 }</dl> };
                                                       let v717:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v715);
                                                       let v718 =
                                                           Dice_ui::method253();
                                                       let v719 =
                                                           Dice_ui::method254(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v722 =
                                                           {
                                                               let clo_32 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure322((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_32
                                                                                  =
                                                                                  clo_32.clone();
                                                                              move
                                                                                  |arg_32:
                                                                                       ()|
                                                                                  clo_32()
                                                                          })
                                                           };
                                                       let v725 =
                                                           {
                                                               let clo_33 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure323((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_33
                                                                                  =
                                                                                  clo_33.clone();
                                                                              move
                                                                                  |arg_33:
                                                                                       ()|
                                                                                  clo_33()
                                                                          })
                                                           };
                                                       let v727 =
                                                           {
                                                               let clo_34 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_34
                                                                                  =
                                                                                  clo_34.clone();
                                                                              move
                                                                                  |arg_34:
                                                                                       ()|
                                                                                  clo_34()
                                                                          })
                                                           };
                                                       let v728: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v727(()) + \" \" + &v725(()) + \" \" + &v722(())");
                                                       let v729: string =
                                                           append((append((append(string(" "),
                                                                                  (v728))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v731 =
                                                           {
                                                               let clo_35 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_35
                                                                                  =
                                                                                  clo_35.clone();
                                                                              move
                                                                                  |arg_35:
                                                                                       ()|
                                                                                  clo_35()
                                                                          })
                                                           };
                                                       let v733: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v734:
                                                               leptos::prelude::Fragment =
                                                           v718();
                                                       let v736:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v734);
                                                       let v738: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v733))),
                                                                                                  string(">move || { v736 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v740:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v736 }</dt> };
                                                       let v742:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v740);
                                                       let v744: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v731(())");
                                                       let v745:
                                                               leptos::prelude::Fragment =
                                                           v719();
                                                       let v747:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v745);
                                                       let v749: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v744))),
                                                                                                  string(">move || { v747 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v751:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v731(())>move || { v747 }</dd> };
                                                       let v754:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v742,
                                                                              leptos::prelude::IntoAny::into_any(v751));
                                                       let v756:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v754);
                                                       let v758:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v756);
                                                       let v760: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v729))),
                                                                                                  string(">move || { v758 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v762:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v727(()) + " " + &v725(()) + " " + &v722(())>move || { v758 }</dl> };
                                                       let v764:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v762);
                                                       let v765 =
                                                           Dice_ui::method255();
                                                       let v766 =
                                                           Dice_ui::method256(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v769 =
                                                           {
                                                               let clo_36 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure326((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_36
                                                                                  =
                                                                                  clo_36.clone();
                                                                              move
                                                                                  |arg_36:
                                                                                       ()|
                                                                                  clo_36()
                                                                          })
                                                           };
                                                       let v772 =
                                                           {
                                                               let clo_37 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure327((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_37
                                                                                  =
                                                                                  clo_37.clone();
                                                                              move
                                                                                  |arg_37:
                                                                                       ()|
                                                                                  clo_37()
                                                                          })
                                                           };
                                                       let v774 =
                                                           {
                                                               let clo_38 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_38
                                                                                  =
                                                                                  clo_38.clone();
                                                                              move
                                                                                  |arg_38:
                                                                                       ()|
                                                                                  clo_38()
                                                                          })
                                                           };
                                                       let v775: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v774(()) + \" \" + &v772(()) + \" \" + &v769(())");
                                                       let v776: string =
                                                           append((append((append(string(" "),
                                                                                  (v775))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v778 =
                                                           {
                                                               let clo_39 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_39
                                                                                  =
                                                                                  clo_39.clone();
                                                                              move
                                                                                  |arg_39:
                                                                                       ()|
                                                                                  clo_39()
                                                                          })
                                                           };
                                                       let v780: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v781:
                                                               leptos::prelude::Fragment =
                                                           v765();
                                                       let v783:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v781);
                                                       let v785: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v780))),
                                                                                                  string(">move || { v783 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v787:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v783 }</dt> };
                                                       let v789:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v787);
                                                       let v791: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v778(())");
                                                       let v792:
                                                               leptos::prelude::Fragment =
                                                           v766();
                                                       let v794:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v792);
                                                       let v796: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v791))),
                                                                                                  string(">move || { v794 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v798:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v778(())>move || { v794 }</dd> };
                                                       let v801:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v789,
                                                                              leptos::prelude::IntoAny::into_any(v798));
                                                       let v803:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v801);
                                                       let v805:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v803);
                                                       let v807: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v776))),
                                                                                                  string(">move || { v805 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v809:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v774(()) + " " + &v772(()) + " " + &v769(())>move || { v805 }</dl> };
                                                       let v811:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v809);
                                                       let v812 =
                                                           Dice_ui::method257();
                                                       let v813 =
                                                           Dice_ui::method258(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v816 =
                                                           {
                                                               let clo_40 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure330((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_40
                                                                                  =
                                                                                  clo_40.clone();
                                                                              move
                                                                                  |arg_40:
                                                                                       ()|
                                                                                  clo_40()
                                                                          })
                                                           };
                                                       let v819 =
                                                           {
                                                               let clo_41 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure331((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_41
                                                                                  =
                                                                                  clo_41.clone();
                                                                              move
                                                                                  |arg_41:
                                                                                       ()|
                                                                                  clo_41()
                                                                          })
                                                           };
                                                       let v821 =
                                                           {
                                                               let clo_42 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_42
                                                                                  =
                                                                                  clo_42.clone();
                                                                              move
                                                                                  |arg_42:
                                                                                       ()|
                                                                                  clo_42()
                                                                          })
                                                           };
                                                       let v822: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v821(()) + \" \" + &v819(()) + \" \" + &v816(())");
                                                       let v823: string =
                                                           append((append((append(string(" "),
                                                                                  (v822))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v825 =
                                                           {
                                                               let clo_43 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_43
                                                                                  =
                                                                                  clo_43.clone();
                                                                              move
                                                                                  |arg_43:
                                                                                       ()|
                                                                                  clo_43()
                                                                          })
                                                           };
                                                       let v827: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v828:
                                                               leptos::prelude::Fragment =
                                                           v812();
                                                       let v830:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v828);
                                                       let v832: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v827))),
                                                                                                  string(">move || { v830 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v834:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v830 }</dt> };
                                                       let v836:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v834);
                                                       let v838: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v825(())");
                                                       let v839:
                                                               leptos::prelude::Fragment =
                                                           v813();
                                                       let v841:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v839);
                                                       let v843: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v838))),
                                                                                                  string(">move || { v841 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v845:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v825(())>move || { v841 }</dd> };
                                                       let v848:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v836,
                                                                              leptos::prelude::IntoAny::into_any(v845));
                                                       let v850:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v848);
                                                       let v852:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v850);
                                                       let v854: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v823))),
                                                                                                  string(">move || { v852 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v856:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v821(()) + " " + &v819(()) + " " + &v816(())>move || { v852 }</dl> };
                                                       let v858:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v856);
                                                       let v859 =
                                                           Dice_ui::method259();
                                                       let v860 =
                                                           Dice_ui::method260(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v863 =
                                                           {
                                                               let clo_44 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure334((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_44
                                                                                  =
                                                                                  clo_44.clone();
                                                                              move
                                                                                  |arg_44:
                                                                                       ()|
                                                                                  clo_44()
                                                                          })
                                                           };
                                                       let v866 =
                                                           {
                                                               let clo_45 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure335((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_45
                                                                                  =
                                                                                  clo_45.clone();
                                                                              move
                                                                                  |arg_45:
                                                                                       ()|
                                                                                  clo_45()
                                                                          })
                                                           };
                                                       let v868 =
                                                           {
                                                               let clo_46 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_46
                                                                                  =
                                                                                  clo_46.clone();
                                                                              move
                                                                                  |arg_46:
                                                                                       ()|
                                                                                  clo_46()
                                                                          })
                                                           };
                                                       let v869: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v868(()) + \" \" + &v866(()) + \" \" + &v863(())");
                                                       let v870: string =
                                                           append((append((append(string(" "),
                                                                                  (v869))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v872 =
                                                           {
                                                               let clo_47 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_47
                                                                                  =
                                                                                  clo_47.clone();
                                                                              move
                                                                                  |arg_47:
                                                                                       ()|
                                                                                  clo_47()
                                                                          })
                                                           };
                                                       let v874: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v875:
                                                               leptos::prelude::Fragment =
                                                           v859();
                                                       let v877:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v875);
                                                       let v879: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v874))),
                                                                                                  string(">move || { v877 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v881:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v877 }</dt> };
                                                       let v883:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v881);
                                                       let v885: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v872(())");
                                                       let v886:
                                                               leptos::prelude::Fragment =
                                                           v860();
                                                       let v888:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v886);
                                                       let v890: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v885))),
                                                                                                  string(">move || { v888 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v892:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v872(())>move || { v888 }</dd> };
                                                       let v895:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v883,
                                                                              leptos::prelude::IntoAny::into_any(v892));
                                                       let v897:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v895);
                                                       let v899:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v897);
                                                       let v901: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v870))),
                                                                                                  string(">move || { v899 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v903:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v868(()) + " " + &v866(()) + " " + &v863(())>move || { v899 }</dl> };
                                                       let v905:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v903);
                                                       let v906 =
                                                           Dice_ui::method261();
                                                       let v907 =
                                                           Dice_ui::method262(v313.clone(),
                                                                              v314.clone(),
                                                                              v315.clone(),
                                                                              v316.clone(),
                                                                              v317.clone(),
                                                                              v318.clone(),
                                                                              v319,
                                                                              v320.clone(),
                                                                              v321,
                                                                              v322,
                                                                              v323,
                                                                              v324.clone());
                                                       let v910 =
                                                           {
                                                               let clo_48 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure338((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_48
                                                                                  =
                                                                                  clo_48.clone();
                                                                              move
                                                                                  |arg_48:
                                                                                       ()|
                                                                                  clo_48()
                                                                          })
                                                           };
                                                       let v913 =
                                                           {
                                                               let clo_49 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure339((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_49
                                                                                  =
                                                                                  clo_49.clone();
                                                                              move
                                                                                  |arg_49:
                                                                                       ()|
                                                                                  clo_49()
                                                                          })
                                                           };
                                                       let v915 =
                                                           {
                                                               let clo_50 =
                                                                   Func0::from(v392);
                                                               Func1::new({
                                                                              let clo_50
                                                                                  =
                                                                                  clo_50.clone();
                                                                              move
                                                                                  |arg_50:
                                                                                       ()|
                                                                                  clo_50()
                                                                          })
                                                           };
                                                       let v916: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v915(()) + \" \" + &v913(()) + \" \" + &v910(())");
                                                       let v917: string =
                                                           append((append((append(string(" "),
                                                                                  (v916))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v919 =
                                                           {
                                                               let clo_51 =
                                                                   Func0::from(v397);
                                                               Func1::new({
                                                                              let clo_51
                                                                                  =
                                                                                  clo_51.clone();
                                                                              move
                                                                                  |arg_51:
                                                                                       ()|
                                                                                  clo_51()
                                                                          })
                                                           };
                                                       let v921: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v922:
                                                               leptos::prelude::Fragment =
                                                           v906();
                                                       let v924:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v922);
                                                       let v926: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v921))),
                                                                                                  string(">move || { v924 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v928:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v924 }</dt> };
                                                       let v930:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v928);
                                                       let v932: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v919(())");
                                                       let v933:
                                                               leptos::prelude::Fragment =
                                                           v907();
                                                       let v935:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v933);
                                                       let v937: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v932))),
                                                                                                  string(">move || { v935 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v939:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v919(())>move || { v935 }</dd> };
                                                       let v942:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v930,
                                                                              leptos::prelude::IntoAny::into_any(v939));
                                                       let v944:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v942);
                                                       let v946:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v944);
                                                       let v948: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v917))),
                                                                                                  string(">move || { v946 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v950:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v915(()) + " " + &v913(()) + " " + &v910(())>move || { v946 }</dl> };
                                                       let v1006:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method266(v434,
                                                                              v481,
                                                                              v528,
                                                                              v575,
                                                                              v623,
                                                                              v670,
                                                                              v717,
                                                                              v764,
                                                                              v811,
                                                                              v858,
                                                                              v905,
                                                                              leptos::prelude::IntoAny::into_any(v950),
                                                                              if (get_Count(v324.clone())
                                                                                      as
                                                                                      u64)
                                                                                     ==
                                                                                     0_u64
                                                                                 {
                                                                                  let v955:
                                                                                          Vec<leptos::prelude::AnyView> =
                                                                                      Dice_ui::method172();
                                                                                  leptos::prelude::IntoAny::into_any(v955)
                                                                              } else {
                                                                                  let v958 =
                                                                                      Dice_ui::method263();
                                                                                  let v959 =
                                                                                      Dice_ui::method264(v313,
                                                                                                         v314,
                                                                                                         v315,
                                                                                                         v316,
                                                                                                         v317,
                                                                                                         v318,
                                                                                                         v319,
                                                                                                         v320,
                                                                                                         v321,
                                                                                                         v322,
                                                                                                         v323,
                                                                                                         v324);
                                                                                  let v962 =
                                                                                      {
                                                                                          let clo_52 =
                                                                                              Func0::new(move
                                                                                                             ||
                                                                                                             Dice_ui::closure343((),
                                                                                                                                 ()));
                                                                                          Func1::new({
                                                                                                         let clo_52
                                                                                                             =
                                                                                                             clo_52.clone();
                                                                                                         move
                                                                                                             |arg_52:
                                                                                                                  ()|
                                                                                                             clo_52()
                                                                                                     })
                                                                                      };
                                                                                  let v965 =
                                                                                      {
                                                                                          let clo_53 =
                                                                                              Func0::new(move
                                                                                                             ||
                                                                                                             Dice_ui::closure344((),
                                                                                                                                 ()));
                                                                                          Func1::new({
                                                                                                         let clo_53
                                                                                                             =
                                                                                                             clo_53.clone();
                                                                                                         move
                                                                                                             |arg_53:
                                                                                                                  ()|
                                                                                                             clo_53()
                                                                                                     })
                                                                                      };
                                                                                  let v967 =
                                                                                      {
                                                                                          let clo_54 =
                                                                                              Func0::from(v392);
                                                                                          Func1::new({
                                                                                                         let clo_54
                                                                                                             =
                                                                                                             clo_54.clone();
                                                                                                         move
                                                                                                             |arg_54:
                                                                                                                  ()|
                                                                                                             clo_54()
                                                                                                     })
                                                                                      };
                                                                                  let v968:
                                                                                          string =
                                                                                      string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v967(()) + \" \" + &v965(()) + \" \" + &v962(())");
                                                                                  let v969:
                                                                                          string =
                                                                                      append((append((append(string(" "),
                                                                                                             (v968))),
                                                                                                     string(""))),
                                                                                             string(""));
                                                                                  let v971 =
                                                                                      {
                                                                                          let clo_55 =
                                                                                              Func0::from(v397);
                                                                                          Func1::new({
                                                                                                         let clo_55
                                                                                                             =
                                                                                                             clo_55.clone();
                                                                                                         move
                                                                                                             |arg_55:
                                                                                                                  ()|
                                                                                                             clo_55()
                                                                                                     })
                                                                                      };
                                                                                  let v973:
                                                                                          string =
                                                                                      string(" class=\"[font-size:12px] text-gray-400\"");
                                                                                  let v974:
                                                                                          leptos::prelude::Fragment =
                                                                                      v958();
                                                                                  let v976:
                                                                                          leptos::prelude::AnyView =
                                                                                      leptos::prelude::AnyView::from(v974);
                                                                                  let v978:
                                                                                          string =
                                                                                      append((append(string("leptos::prelude::view! { "),
                                                                                                     (append((append((append((append(string("<dt "),
                                                                                                                                     (v973))),
                                                                                                                             string(">move || { v976 }</"))),
                                                                                                                     string("dt"))),
                                                                                                             string(">"))))),
                                                                                             string(" }"));
                                                                                  let v980:
                                                                                          leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                                                      leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v976 }</dt> };
                                                                                  let v982:
                                                                                          leptos::prelude::AnyView =
                                                                                      leptos::prelude::IntoAny::into_any(v980);
                                                                                  let v984:
                                                                                          string =
                                                                                      string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v971(())");
                                                                                  let v985:
                                                                                          leptos::prelude::Fragment =
                                                                                      v959();
                                                                                  let v987:
                                                                                          leptos::prelude::AnyView =
                                                                                      leptos::prelude::AnyView::from(v985);
                                                                                  let v989:
                                                                                          string =
                                                                                      append((append(string("leptos::prelude::view! { "),
                                                                                                     (append((append((append((append(string("<dd "),
                                                                                                                                     (v984))),
                                                                                                                             string(">move || { v987 }</"))),
                                                                                                                     string("dd"))),
                                                                                                             string(">"))))),
                                                                                             string(" }"));
                                                                                  let v991:
                                                                                          leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                                                      leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v971(())>move || { v987 }</dd> };
                                                                                  let v994:
                                                                                          Vec<leptos::prelude::AnyView> =
                                                                                      Dice_ui::method176(v982,
                                                                                                         leptos::prelude::IntoAny::into_any(v991));
                                                                                  let v996:
                                                                                          leptos::prelude::Fragment =
                                                                                      leptos::prelude::Fragment::new(v994);
                                                                                  let v998:
                                                                                          leptos::prelude::AnyView =
                                                                                      leptos::prelude::AnyView::from(v996);
                                                                                  let v1000:
                                                                                          string =
                                                                                      append((append(string("leptos::prelude::view! { "),
                                                                                                     (append((append((append((append(string("<dl "),
                                                                                                                                     (v969))),
                                                                                                                             string(">move || { v998 }</"))),
                                                                                                                     string("dl"))),
                                                                                                             string(">"))))),
                                                                                             string(" }"));
                                                                                  let v1002:
                                                                                          leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                                                      leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v967(()) + " " + &v965(()) + " " + &v962(())>move || { v998 }</dl> };
                                                                                  leptos::prelude::IntoAny::into_any(v1002)
                                                                              });
                                                       let v1008:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1006);
                                                       let v1010:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1008);
                                                       let v1013: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<div "),
                                                                                                          (v382))),
                                                                                                  string(">move || { v1010 }</"))),
                                                                                          string("div"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1015:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                                           leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v1010 }</div> };
                                                       let v1018:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v380,
                                                                              leptos::prelude::IntoAny::into_any(v1015));
                                                       let v1020:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1018);
                                                       let v1022:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1020);
                                                       let v1024: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<div "),
                                                                                                          (v337))),
                                                                                                  string(">move || { v1022 }</"))),
                                                                                          string("div"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1026:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                                           leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v1022 }</div> };
                                                       let v1028:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1026);
                                                       let v1030: bool =
                                                           true; v1028 }).collect::<Vec<_>>();
                                    let v1032: Vec<leptos::prelude::AnyView> = _vec_map;
                                    let v1035: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                                        leptos::prelude::IntoAny::into_any(v1032),
                                    );
                                    let v1037: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1035);
                                    let v1039: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1037);
                                    let v1041: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<div "), (v304))),
                                                        string(">move || { v1039 }</"),
                                                    )),
                                                    string("div"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v1043: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                    > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v1039 }</div> };
                                    leptos::prelude::IntoAny::into_any(v1043)
                                } else {
                                    let v1047: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                        v293.clone().to_vec();
                                    let v1049: bool = true;
                                    let _vec_map : Vec<_> = v1047.into_iter().map(|x| { //;
                                                       let patternInput_1:
                                                               (string, usize,
                                                                LrcPtr<Dice_ui::Heap5>) =
                                                           x;
                                                       let v1053:
                                                               LrcPtr<Dice_ui::Heap5> =
                                                           patternInput_1.2.clone();
                                                       let v1056: bool =
                                                           true; leptos::logging::log!("{}", string("transaction.tr_render (1)"));
                                                       let v1059: string =
                                                           string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                                       let v1061: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1066: &str =
                                                           &*patternInput_1.0.clone();
                                                       let v1090:
                                                               std::string::String =
                                                           String::from(v1066);
                                                       let v1112:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1090)));
                                                       let v1114:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1112);
                                                       let v1116:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1114);
                                                       let v1119: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1061))),
                                                                                                  string(">move || { v1116 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1121:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1116 }</td> };
                                                       let v1123:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1121);
                                                       let v1125: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1134: i64 =
                                                           (Dice_ui::method193(toInt64(fable_library_rust::String_::fromString(v1053.l5.clone()))))
                                                               / 1000_i64;
                                                       let v1136:
                                                               Option<chrono::DateTime<chrono::Utc>> =
                                                           chrono::DateTime::from_timestamp_micros(v1134);
                                                       let v1150:
                                                               Dice_ui::US69 =
                                                           defaultValue(Dice_ui::US69::US69_1,
                                                                        map(Dice_ui::method194(),
                                                                            v1136));
                                                       let v1169:
                                                               Dice_ui::US32 =
                                                           match &v1150 {
                                                               Dice_ui::US69::US69_0(v1150_0_0)
                                                               => {
                                                                   let v1156:
                                                                           chrono::NaiveDateTime =
                                                                       match &v1150
                                                                           {
                                                                           Dice_ui::US69::US69_0(x)
                                                                           =>
                                                                           x.clone(),
                                                                           _
                                                                           =>
                                                                           unreachable!(),
                                                                       }.clone().naive_utc();
                                                                   let v1158:
                                                                           chrono::DateTime<chrono::Local> =
                                                                       chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v1156);
                                                                   let v1160:
                                                                           string =
                                                                       string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                                   let v1161:
                                                                           &str =
                                                                       r#"%Y-%m-%d %H:%M:%S"#;
                                                                   let v1163:
                                                                           std::string::String =
                                                                       v1158.format(v1161).to_string();
                                                                   Dice_ui::US32::US32_0(fable_library_rust::String_::fromString(v1163))
                                                               }
                                                               _ =>
                                                               Dice_ui::US32::US32_1,
                                                           };
                                                       let v1175:
                                                               Dice_ui::US70 =
                                                           match &v1169 {
                                                               Dice_ui::US32::US32_0(v1169_0_0)
                                                               =>
                                                               Dice_ui::US70::US70_0(match &v1169
                                                                                         {
                                                                                         Dice_ui::US32::US32_0(x)
                                                                                         =>
                                                                                         x.clone(),
                                                                                         _
                                                                                         =>
                                                                                         unreachable!(),
                                                                                     }.clone()),
                                                               _ =>
                                                               Dice_ui::US70::US70_1(string("resultm.from_option / Option does not have a value.")),
                                                           };
                                                       let v1180: string =
                                                           match &v1175 {
                                                               Dice_ui::US70::US70_0(v1175_0_0)
                                                               =>
                                                               v1175_0_0.clone(),
                                                               Dice_ui::US70::US70_1(v1175_1_0)
                                                               =>
                                                               append((append(string("sm\'.to_string result / Error: "),
                                                                              (v1175_1_0.clone()))),
                                                                      string("")),
                                                           };
                                                       let v1185: &str =
                                                           &*v1180;
                                                       let v1209:
                                                               std::string::String =
                                                           String::from(v1185);
                                                       let v1231:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1209)));
                                                       let v1233:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1231);
                                                       let v1235:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1233);
                                                       let v1237: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1125))),
                                                                                                  string(">move || { v1235 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1239:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1235 }</td> };
                                                       let v1241:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1239);
                                                       let v1243: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1246: string =
                                                           fable_library_rust::String_::fromString(v1053.l1.clone());
                                                       let v1251: &str =
                                                           &*v1246;
                                                       let v1275:
                                                               std::string::String =
                                                           String::from(v1251);
                                                       let v1297:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1275)));
                                                       let v1299:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1297);
                                                       let v1301:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1299);
                                                       let v1303: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1243))),
                                                                                                  string(">move || { v1301 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1305:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1301 }</td> };
                                                       let v1307:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1305);
                                                       let v1309: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1312: string =
                                                           fable_library_rust::String_::fromString(v1053.l2.clone());
                                                       let v1317: &str =
                                                           &*v1312;
                                                       let v1341:
                                                               std::string::String =
                                                           String::from(v1317);
                                                       let v1363:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1341)));
                                                       let v1365:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1363);
                                                       let v1367:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1365);
                                                       let v1369: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1309))),
                                                                                                  string(">move || { v1367 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1371:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1367 }</td> };
                                                       let v1373:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1371);
                                                       let v1375: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1378:
                                                               Vec<(std::string::String,
                                                                    Option<std::string::String>)> =
                                                           v1053.l7.clone().to_vec();
                                                       let v1380: bool =
                                                           true; let _vec_map : Vec<_> = v1378.into_iter().map(|x| { //;
                                                       let patternInput_2:
                                                               (std::string::String,
                                                                Option<std::string::String>) =
                                                           x;
                                                       let v1384 =
                                                           Dice_ui::method245(patternInput_2.0.clone());
                                                       let v1385 =
                                                           Dice_ui::method246(patternInput_2.1.clone());
                                                       let v1388 =
                                                           {
                                                               let clo_56 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure305((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_56
                                                                                  =
                                                                                  clo_56.clone();
                                                                              move
                                                                                  |arg_56:
                                                                                       ()|
                                                                                  clo_56()
                                                                          })
                                                           };
                                                       let v1391 =
                                                           {
                                                               let clo_57 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure306((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_57
                                                                                  =
                                                                                  clo_57.clone();
                                                                              move
                                                                                  |arg_57:
                                                                                       ()|
                                                                                  clo_57()
                                                                          })
                                                           };
                                                       let v1394 =
                                                           {
                                                               let clo_58 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure307((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_58
                                                                                  =
                                                                                  clo_58.clone();
                                                                              move
                                                                                  |arg_58:
                                                                                       ()|
                                                                                  clo_58()
                                                                          })
                                                           };
                                                       let v1395: string =
                                                           string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1394(()) + \" \" + &v1391(()) + \" \" + &v1388(())");
                                                       let v1396: string =
                                                           append((append((append(string(" "),
                                                                                  (v1395))),
                                                                          string(""))),
                                                                  string(""));
                                                       let v1399 =
                                                           {
                                                               let clo_59 =
                                                                   Func0::new(move
                                                                                  ||
                                                                                  Dice_ui::closure308((),
                                                                                                      ()));
                                                               Func1::new({
                                                                              let clo_59
                                                                                  =
                                                                                  clo_59.clone();
                                                                              move
                                                                                  |arg_59:
                                                                                       ()|
                                                                                  clo_59()
                                                                          })
                                                           };
                                                       let v1401: string =
                                                           string(" class=\"[font-size:12px] text-gray-400\"");
                                                       let v1402:
                                                               leptos::prelude::Fragment =
                                                           v1384();
                                                       let v1404:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1402);
                                                       let v1407: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dt "),
                                                                                                          (v1401))),
                                                                                                  string(">move || { v1404 }</"))),
                                                                                          string("dt"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1409:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                           leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1404 }</dt> };
                                                       let v1411:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1409);
                                                       let v1413: string =
                                                           string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1399(())");
                                                       let v1414:
                                                               leptos::prelude::Fragment =
                                                           v1385();
                                                       let v1416:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1414);
                                                       let v1419: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dd "),
                                                                                                          (v1413))),
                                                                                                  string(">move || { v1416 }</"))),
                                                                                          string("dd"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1421:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                           leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1399(())>move || { v1416 }</dd> };
                                                       let v1424:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method176(v1411,
                                                                              leptos::prelude::IntoAny::into_any(v1421));
                                                       let v1426:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1424);
                                                       let v1428:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1426);
                                                       let v1431: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<dl "),
                                                                                                          (v1396))),
                                                                                                  string(">move || { v1428 }</"))),
                                                                                          string("dl"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1433:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                           leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1394(()) + " " + &v1391(()) + " " + &v1388(())>move || { v1428 }</dl> };
                                                       let v1435:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1433);
                                                       let v1437: bool =
                                                           true; v1435 }).collect::<Vec<_>>();
                                                       let v1439:
                                                               Vec<leptos::prelude::AnyView> =
                                                           _vec_map;
                                                       let v1442:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1439));
                                                       let v1444:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1442);
                                                       let v1446:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1444);
                                                       let v1448: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1375))),
                                                                                                  string(">move || { v1446 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1450:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1446 }</td> };
                                                       let v1452:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1450);
                                                       let v1454: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1457: string =
                                                           toString(v1053.l8);
                                                       let v1464: &str =
                                                           &*v1457;
                                                       let v1488:
                                                               std::string::String =
                                                           String::from(v1464);
                                                       let v1510:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1488)));
                                                       let v1512:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1510);
                                                       let v1514:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1512);
                                                       let v1516: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1454))),
                                                                                                  string(">move || { v1514 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1518:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1514 }</td> };
                                                       let v1520:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1518);
                                                       let v1522: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1525: string =
                                                           toString(v1053.l10);
                                                       let v1532: &str =
                                                           &*v1525;
                                                       let v1556:
                                                               std::string::String =
                                                           String::from(v1532);
                                                       let v1578:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1556)));
                                                       let v1580:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1578);
                                                       let v1582:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1580);
                                                       let v1584: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1522))),
                                                                                                  string(">move || { v1582 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1586:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1582 }</td> };
                                                       let v1588:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1586);
                                                       let v1590: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1593: string =
                                                           toString(v1053.l6);
                                                       let v1600: &str =
                                                           &*v1593;
                                                       let v1624:
                                                               std::string::String =
                                                           String::from(v1600);
                                                       let v1646:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1624)));
                                                       let v1648:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1646);
                                                       let v1650:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1648);
                                                       let v1652: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1590))),
                                                                                                  string(">move || { v1650 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1654:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1650 }</td> };
                                                       let v1656:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1654);
                                                       let v1658: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
                                                       let v1806:
                                                               leptos::prelude::Fragment =
                                                           if (get_Count(v1053.l11.clone())
                                                                   as u64) ==
                                                                  0_u64 {
                                                               let v1666:
                                                                       &str =
                                                                   &*string("");
                                                               let v1690:
                                                                       std::string::String =
                                                                   String::from(v1666);
                                                               let v1712:
                                                                       Vec<leptos::prelude::AnyView> =
                                                                   Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1690)));
                                                               leptos::prelude::Fragment::new(v1712)
                                                           } else {
                                                               let v1717:
                                                                       Vec<std::string::String> =
                                                                   v1053.l11.clone().to_vec();
                                                               let v1720:
                                                                       Vec<string> =
                                                                   v1717.into_iter().map(|x| Func1::new(move
                                                                                                            |v:
                                                                                                                 std::string::String|
                                                                                                            Dice_ui::closure55((),
                                                                                                                               v))(x.clone())).collect::<Vec<_>>();
                                                               let v1723:
                                                                       LrcPtr<dyn IEnumerable_1<string>> =
                                                                   ofArray(fable_library_rust::NativeArray_::array_from(v1720.clone()));
                                                               let v1735:
                                                                       string =
                                                                   replace(join(Dice_ui::method265(),
                                                                                toArray(v1723)),
                                                                           string("\\n"),
                                                                           string("\n"));
                                                               let v1738 =
                                                                   {
                                                                       let clo_60 =
                                                                           Func0::new(move
                                                                                          ||
                                                                                          Dice_ui::closure345((),
                                                                                                              ()));
                                                                       Func1::new({
                                                                                      let clo_60
                                                                                          =
                                                                                          clo_60.clone();
                                                                                      move
                                                                                          |arg_60:
                                                                                               ()|
                                                                                          clo_60()
                                                                                  })
                                                                   };
                                                               let v1739:
                                                                       string =
                                                                   string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v1738(())");
                                                               let v1740:
                                                                       string =
                                                                   append((append((append(string(" "),
                                                                                          (v1739))),
                                                                                  string(""))),
                                                                          string(""));
                                                               let v1745:
                                                                       &str =
                                                                   &*v1735;
                                                               let v1769:
                                                                       std::string::String =
                                                                   String::from(v1745);
                                                               let v1791:
                                                                       Vec<leptos::prelude::AnyView> =
                                                                   Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1769)));
                                                               let v1793:
                                                                       leptos::prelude::Fragment =
                                                                   leptos::prelude::Fragment::new(v1791);
                                                               let v1795:
                                                                       leptos::prelude::AnyView =
                                                                   leptos::prelude::AnyView::from(v1793);
                                                               let v1798:
                                                                       string =
                                                                   append((append(string("leptos::prelude::view! { "),
                                                                                  (append((append((append((append(string("<pre "),
                                                                                                                  (v1740))),
                                                                                                          string(">move || { v1795 }</"))),
                                                                                                  string("pre"))),
                                                                                          string(">"))))),
                                                                          string(" }"));
                                                               let v1800:
                                                                       leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> =
                                                                   leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v1738(())>move || { v1795 }</pre> };
                                                               let v1803:
                                                                       Vec<leptos::prelude::AnyView> =
                                                                   Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1800));
                                                               leptos::prelude::Fragment::new(v1803)
                                                           };
                                                       let v1808:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1806);
                                                       let v1810: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1658))),
                                                                                                  string(">move || { v1808 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1812:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v1808 }</td> };
                                                       let v1814:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1812);
                                                       let v1816: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1819: string =
                                                           ofBoolean(v1053.l9);
                                                       let v1826: &str =
                                                           &*v1819;
                                                       let v1850:
                                                               std::string::String =
                                                           String::from(v1826);
                                                       let v1872:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1850)));
                                                       let v1874:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1872);
                                                       let v1876:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1874);
                                                       let v1878: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1816))),
                                                                                                  string(">move || { v1876 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1880:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1876 }</td> };
                                                       let v1882:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1880);
                                                       let v1884: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1887: string =
                                                           fable_library_rust::String_::fromString(v1053.l3.clone());
                                                       let v1892: &str =
                                                           &*v1887;
                                                       let v1916:
                                                               std::string::String =
                                                           String::from(v1892);
                                                       let v1938:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1916)));
                                                       let v1940:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v1938);
                                                       let v1942:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v1940);
                                                       let v1944: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1884))),
                                                                                                  string(">move || { v1942 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v1946:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1942 }</td> };
                                                       let v1948:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v1946);
                                                       let v1950: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v1953: string =
                                                           fable_library_rust::String_::fromString(v1053.l4.clone());
                                                       let v1958: &str =
                                                           &*v1953;
                                                       let v1982:
                                                               std::string::String =
                                                           String::from(v1958);
                                                       let v2004:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1982)));
                                                       let v2006:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v2004);
                                                       let v2008:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v2006);
                                                       let v2010: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v1950))),
                                                                                                  string(">move || { v2008 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v2012:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2008 }</td> };
                                                       let v2014:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::IntoAny::into_any(v2012);
                                                       let v2016: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                                       let v2019: string =
                                                           fable_library_rust::String_::fromString(v1053.l0.clone());
                                                       let v2024: &str =
                                                           &*v2019;
                                                       let v2048:
                                                               std::string::String =
                                                           String::from(v2024);
                                                       let v2070:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method173(leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2048)));
                                                       let v2072:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v2070);
                                                       let v2074:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v2072);
                                                       let v2076: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<td "),
                                                                                                          (v2016))),
                                                                                                  string(">move || { v2074 }</"))),
                                                                                          string("td"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v2078:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                                           leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2074 }</td> };
                                                       let v2081:
                                                               Vec<leptos::prelude::AnyView> =
                                                           Dice_ui::method266(v1123,
                                                                              v1241,
                                                                              v1307,
                                                                              v1373,
                                                                              v1452,
                                                                              v1520,
                                                                              v1588,
                                                                              v1656,
                                                                              v1814,
                                                                              v1882,
                                                                              v1948,
                                                                              v2014,
                                                                              leptos::prelude::IntoAny::into_any(v2078));
                                                       let v2083:
                                                               leptos::prelude::Fragment =
                                                           leptos::prelude::Fragment::new(v2081);
                                                       let v2085:
                                                               leptos::prelude::AnyView =
                                                           leptos::prelude::AnyView::from(v2083);
                                                       let v2088: string =
                                                           append((append(string("leptos::prelude::view! { "),
                                                                          (append((append((append((append(string("<tr "),
                                                                                                          (v1059))),
                                                                                                  string(">move || { v2085 }</"))),
                                                                                          string("tr"))),
                                                                                  string(">"))))),
                                                                  string(" }"));
                                                       let v2090:
                                                               leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                                           leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v2085 }</tr> };
                                                       let v2092: bool =
                                                           true; v2090 }).collect::<Vec<_>>();
                                    let v2094: Vec<
                                        leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        >,
                                    > = _vec_map;
                                    let v2096: bool = true;
                                    let _vec_map: Vec<_> = v2094
                                        .into_iter()
                                        .map(|x| {
                                            //;
                                            let v2098: leptos::prelude::View<
                                                leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                            > = x;
                                            let v2100: leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v2098);
                                            let v2102: bool = true;
                                            v2100
                                        })
                                        .collect::<Vec<_>>();
                                    let v2104: Vec<leptos::prelude::AnyView> = _vec_map;
                                    let v2107: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                                        leptos::prelude::IntoAny::into_any(v2104),
                                    );
                                    let v2109: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2107);
                                    let v2112: bool = true;
                                    leptos::logging::log!(
                                        "{}",
                                        string("transaction.tr_head_render (1)")
                                    );
                                    let v2114: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2120: &str = &*string("Account");
                                    let v2144: std::string::String = String::from(v2120);
                                    let v2166: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2144),
                                        ));
                                    let v2168: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2166);
                                    let v2170: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2168);
                                    let v2173: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2114))),
                                                        string(">move || { v2170 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2175: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2170 }</th> };
                                    let v2177: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2175);
                                    let v2179: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2185: &str = &*string("Block Timestamp");
                                    let v2209: std::string::String = String::from(v2185);
                                    let v2231: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2209),
                                        ));
                                    let v2233: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2231);
                                    let v2235: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2233);
                                    let v2237: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2179))),
                                                        string(">move || { v2235 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2239: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2235 }</th> };
                                    let v2241: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2239);
                                    let v2243: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2249: &str = &*string("Predecessor");
                                    let v2273: std::string::String = String::from(v2249);
                                    let v2295: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2273),
                                        ));
                                    let v2297: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2295);
                                    let v2299: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2297);
                                    let v2301: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2243))),
                                                        string(">move || { v2299 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2303: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2299 }</th> };
                                    let v2305: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2303);
                                    let v2307: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2313: &str = &*string("Receiver");
                                    let v2337: std::string::String = String::from(v2313);
                                    let v2359: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2337),
                                        ));
                                    let v2361: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2359);
                                    let v2363: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2361);
                                    let v2365: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2307))),
                                                        string(">move || { v2363 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2367: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2363 }</th> };
                                    let v2369: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2367);
                                    let v2371: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2377: &str = &*string("Action");
                                    let v2401: std::string::String = String::from(v2377);
                                    let v2423: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2401),
                                        ));
                                    let v2425: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2423);
                                    let v2427: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2425);
                                    let v2429: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2371))),
                                                        string(">move || { v2427 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2431: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2427 }</th> };
                                    let v2433: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2431);
                                    let v2435: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2441: &str = &*string("Deposit");
                                    let v2465: std::string::String = String::from(v2441);
                                    let v2487: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2465),
                                        ));
                                    let v2489: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2487);
                                    let v2491: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2489);
                                    let v2493: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2435))),
                                                        string(">move || { v2491 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2495: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2491 }</th> };
                                    let v2497: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2495);
                                    let v2499: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2505: &str = &*string("Fee");
                                    let v2529: std::string::String = String::from(v2505);
                                    let v2551: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2529),
                                        ));
                                    let v2553: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2551);
                                    let v2555: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2553);
                                    let v2557: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2499))),
                                                        string(">move || { v2555 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2559: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2555 }</th> };
                                    let v2561: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2559);
                                    let v2563: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2569: &str = &*string("Block Height");
                                    let v2593: std::string::String = String::from(v2569);
                                    let v2615: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2593),
                                        ));
                                    let v2617: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2615);
                                    let v2619: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2617);
                                    let v2621: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2563))),
                                                        string(">move || { v2619 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2623: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2619 }</th> };
                                    let v2625: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2623);
                                    let v2627: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2632: string =
                                        if false == (Dice_ui::method267(v293, 0_i32)) {
                                            string("")
                                        } else {
                                            string("Logs")
                                        };
                                    let v2637: &str = &*v2632;
                                    let v2661: std::string::String = String::from(v2637);
                                    let v2683: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2661),
                                        ));
                                    let v2685: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2683);
                                    let v2687: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2685);
                                    let v2689: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2627))),
                                                        string(">move || { v2687 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2691: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2687 }</th> };
                                    let v2693: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2691);
                                    let v2695: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2701: &str = &*string("Outcome Status");
                                    let v2725: std::string::String = String::from(v2701);
                                    let v2747: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2725),
                                        ));
                                    let v2749: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2747);
                                    let v2751: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2749);
                                    let v2753: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2695))),
                                                        string(">move || { v2751 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2755: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2751 }</th> };
                                    let v2757: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2755);
                                    let v2759: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2765: &str = &*string("Hash");
                                    let v2789: std::string::String = String::from(v2765);
                                    let v2811: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2789),
                                        ));
                                    let v2813: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2811);
                                    let v2815: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2813);
                                    let v2817: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2759))),
                                                        string(">move || { v2815 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2819: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2815 }</th> };
                                    let v2821: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2819);
                                    let v2823: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2829: &str = &*string("Block Hash");
                                    let v2853: std::string::String = String::from(v2829);
                                    let v2875: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2853),
                                        ));
                                    let v2877: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2875);
                                    let v2879: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2877);
                                    let v2881: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2823))),
                                                        string(">move || { v2879 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2883: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2879 }</th> };
                                    let v2885: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2883);
                                    let v2887: string =
                                                           string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                    let v2893: &str = &*string("Receipt ID");
                                    let v2917: std::string::String = String::from(v2893);
                                    let v2939: Vec<leptos::prelude::AnyView> =
                                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                            leptos::prelude::IntoView::into_view(v2917),
                                        ));
                                    let v2941: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2939);
                                    let v2943: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2941);
                                    let v2945: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<th "), (v2887))),
                                                        string(">move || { v2943 }</"),
                                                    )),
                                                    string("th"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2947: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                    > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2943 }</th> };
                                    let v2950: Vec<leptos::prelude::AnyView> = Dice_ui::method266(
                                        v2177,
                                        v2241,
                                        v2305,
                                        v2369,
                                        v2433,
                                        v2497,
                                        v2561,
                                        v2625,
                                        v2693,
                                        v2757,
                                        v2821,
                                        v2885,
                                        leptos::prelude::IntoAny::into_any(v2947),
                                    );
                                    let v2952: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2950);
                                    let v2954: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2952);
                                    let v2956: string = string(
                                        "leptos::prelude::view! { <tr >move || { v2954 }</tr> }",
                                    );
                                    let v2958: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    > = leptos::prelude::view! { <tr >move || { v2954 }</tr> };
                                    let v2961: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                                        leptos::prelude::IntoAny::into_any(v2958),
                                    );
                                    let v2963: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2961);
                                    let v2965: string =
                                                           string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                    let v2967: string =
                                        string(" class=\"ltr:text-left rtl:text-right\"");
                                    let v2969: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2963);
                                    let v2972: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<thead "), (v2967))),
                                                        string(">move || { v2969 }</"),
                                                    )),
                                                    string("thead"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2974: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                    > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v2969 }</thead> };
                                    let v2976: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2974);
                                    let v2978: string = string(
                                        " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                    );
                                    let v2980: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2109);
                                    let v2983: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<tbody "), (v2978))),
                                                        string(">move || { v2980 }</"),
                                                    )),
                                                    string("tbody"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2985: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                    > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v2980 }</tbody> };
                                    let v2988: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                        v2976,
                                        leptos::prelude::IntoAny::into_any(v2985),
                                    );
                                    let v2990: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2988);
                                    let v2992: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2990);
                                    let v2995: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<table "), (v2965))),
                                                        string(">move || { v2992 }</"),
                                                    )),
                                                    string("table"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v2997: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                    > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v2992 }</table> };
                                    leptos::prelude::IntoAny::into_any(v2997)
                                }
                            } else {
                                let v3003: string =
                                    string(" class=\"grid place-content-center py-[10vh]\"");
                                let v3005: string =
                                    string(" class=\"flex flex-1 [gap:4px] items-center\"");
                                let v3008 = {
                                    let clo_61 = Func0::new(move || Dice_ui::closure197((), ()));
                                    Func1::new({
                                        let clo_61 = clo_61.clone();
                                        move |arg_61: ()| clo_61()
                                    })
                                };
                                let v3026: string =
                                                       string(" class=move || \" \".to_owned() + &v3008(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                                let v3038: string =
                                                       string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                                let v3050: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v3051: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3053: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3051);
                                let v3055: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3053);
                                let v3058: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3050))),
                                                    string(">move || { v3055 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3060: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3055 }</animate> };
                                let v3062: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3060);
                                let v3074: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                                let v3075: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3077: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3075);
                                let v3079: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3077);
                                let v3081: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3074))),
                                                    string(">move || { v3079 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3083: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v3079 }</animate> };
                                let v3085: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3083);
                                let v3097: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                                let v3098: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3100: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3098);
                                let v3102: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3100);
                                let v3104: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3097))),
                                                    string(">move || { v3102 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3106: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3102 }</animate> };
                                let v3109: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    v3062,
                                    v3085,
                                    leptos::prelude::IntoAny::into_any(v3106),
                                );
                                let v3111: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3109);
                                let v3113: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3111);
                                let v3116: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<rect "), (v3038))),
                                                    string(">move || { v3113 }</"),
                                                )),
                                                string("rect"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3118: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v3113 }</rect> };
                                let v3130: string =
                                                       string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                                let v3142: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v3143: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3145: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3143);
                                let v3147: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3145);
                                let v3149: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3142))),
                                                    string(">move || { v3147 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3151: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3147 }</animate> };
                                let v3153: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3151);
                                let v3165: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v3166: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3168: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3166);
                                let v3170: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3168);
                                let v3172: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3165))),
                                                    string(">move || { v3170 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3174: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v3170 }</animate> };
                                let v3176: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3174);
                                let v3188: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                                let v3189: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3191: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3189);
                                let v3193: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3191);
                                let v3195: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3188))),
                                                    string(">move || { v3193 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3197: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3193 }</animate> };
                                let v3200: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    v3153,
                                    v3176,
                                    leptos::prelude::IntoAny::into_any(v3197),
                                );
                                let v3202: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3200);
                                let v3204: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3202);
                                let v3206: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<rect "), (v3130))),
                                                    string(">move || { v3204 }</"),
                                                )),
                                                string("rect"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3208: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v3204 }</rect> };
                                let v3220: string =
                                                       string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                                let v3232: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                                let v3233: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3235: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3233);
                                let v3237: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3235);
                                let v3239: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3232))),
                                                    string(">move || { v3237 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3241: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3237 }</animate> };
                                let v3243: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3241);
                                let v3255: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                                let v3256: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3258: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3256);
                                let v3260: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3258);
                                let v3262: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3255))),
                                                    string(">move || { v3260 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3264: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v3260 }</animate> };
                                let v3266: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3264);
                                let v3278: string =
                                                       string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                                let v3279: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v3281: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3279);
                                let v3283: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3281);
                                let v3285: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<animate "), (v3278))),
                                                    string(">move || { v3283 }</"),
                                                )),
                                                string("animate"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3287: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3283 }</animate> };
                                let v3290: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    v3243,
                                    v3266,
                                    leptos::prelude::IntoAny::into_any(v3287),
                                );
                                let v3292: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3290);
                                let v3294: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3292);
                                let v3296: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<rect "), (v3220))),
                                                    string(">move || { v3294 }</"),
                                                )),
                                                string("rect"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3298: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v3294 }</rect> };
                                let v3300: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3298);
                                let v3302: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3208);
                                let v3305: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                                    leptos::prelude::IntoAny::into_any(v3118),
                                    v3302,
                                    v3300,
                                );
                                let v3307: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3305);
                                let v3309: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3307);
                                let v3312: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<svg "), (v3026))),
                                                    string(">move || { v3309 }</"),
                                                )),
                                                string("svg"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3314: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3008(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v3309 }</svg> };
                                let v3316: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3314);
                                let v3322: &str = &*string("Loading...");
                                let v3346: std::string::String = String::from(v3322);
                                let v3368: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v3316,
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3346),
                                    ),
                                );
                                let v3370: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3368);
                                let v3372: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3370);
                                let v3375: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v3005))),
                                                    string(">move || { v3372 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3377: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v3372 }</div> };
                                let v3380: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3377));
                                let v3382: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3380);
                                let v3384: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3382);
                                let v3386: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v3003))),
                                                    string(">move || { v3384 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3388: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v3384 }</div> };
                                leptos::prelude::IntoAny::into_any(v3388)
                            }
                        }
                        Dice_ui::US47::US47_1(v291_1_0) => {
                            let v3394: string =
                                fable_library_rust::String_::fromString(v291_1_0.clone());
                            let v3397: string = string(
                                " class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"",
                            );
                            let v3399: string = string(" class=\"[height:17px]\"");
                            let v3413: string =
                                                   string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v3419: string =
                                                   string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                            let v3420: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                            let v3422: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3420);
                            let v3424: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3422);
                            let v3427: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v3419))),
                                                string(">move || { v3424 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3429: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v3424 }</path> };
                            let v3432: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3429));
                            let v3434: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3432);
                            let v3436: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3434);
                            let v3439: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3413))),
                                                string(">move || { v3436 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3441: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3436 }</svg> };
                            let v3444: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3441));
                            let v3446: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3444);
                            let v3448: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3446);
                            let v3451: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v3399))),
                                                string(">move || { v3448 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3453: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[height:17px]">move || { v3448 }</span> };
                            let v3455: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3453);
                            let v3457: string =
                                string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                            let v3462: &str = &*v3394;
                            let v3486: std::string::String = String::from(v3462);
                            let v3508: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v3486),
                                ));
                            let v3510: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3508);
                            let v3512: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3510);
                            let v3515: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<pre "), (v3457))),
                                                string(">move || { v3512 }</"),
                                            )),
                                            string("pre"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3517: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                            > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v3512 }</pre> };
                            let v3520: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                v3455,
                                leptos::prelude::IntoAny::into_any(v3517),
                            );
                            let v3522: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3520);
                            let v3524: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3522);
                            let v3527: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3397))),
                                                string(">move || { v3524 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3529: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v3524 }</div> };
                            leptos::prelude::IntoAny::into_any(v3529)
                        }
                    }
                },
            );
            leptos::prelude::Fragment::new(v3535)
        }
        pub fn closure346(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure347(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method269() -> Func0<string> {
            Func0::new(move || Dice_ui::closure348((), ()))
        }
        pub fn closure350(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Transactions");
            let v29: std::string::String = String::from(v5);
            let v51: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29)),
            );
            leptos::prelude::Fragment::new(v51)
        }
        pub fn method270() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure350((), ()))
        }
        pub fn closure352(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure351(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = v0_1();
            let v9: std::string::String = format!("{:#?}", v2);
            let v11: string = fable_library_rust::String_::fromString(v9);
            let v35 = {
                let clo = Func0::new(move || Dice_ui::closure352((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v36: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35(())");
            let v38: string = append(
                (append((append(string(" "), (v36))), string(""))),
                string(""),
            );
            let v43: &str = &*v11;
            let v67: std::string::String = String::from(v43);
            let v89: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v67)),
            );
            let v91: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v89);
            let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
            let v96: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v38))),
                                string(">move || { v93 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v98: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v35(())>move || { v93 }</pre> };
            let v101: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v98));
            leptos::prelude::Fragment::new(v101)
        }
        pub fn method271(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure351(v0_1.clone(), ())
            })
        }
        pub fn closure349(
            v0_1: leptos::prelude::Memo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method270();
            let v2 = Dice_ui::method271(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure263((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure244((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure245((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(
                (append((append(string(" "), (v12))), string(""))),
                string(""),
            );
            let v17 = {
                let clo_3 = Func0::new(move || Dice_ui::closure246((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v19: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v20: leptos::prelude::Fragment = v1();
            let v22: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v20);
            let v25: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v19))),
                                string(">move || { v22 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v22 }</dt> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())");
            let v32: leptos::prelude::Fragment = v2();
            let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
            let v37: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v31))),
                                string(">move || { v34 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v39: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v17(())>move || { v34 }</dd> };
            let v42: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v29, leptos::prelude::IntoAny::into_any(v39));
            let v44: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v42);
            let v46: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v44);
            let v49: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v14))),
                                string(">move || { v46 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v51: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v46 }</dl> };
            let v54: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v51));
            leptos::prelude::Fragment::new(v54)
        }
        pub fn closure353(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method272(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure353(v0_1.clone(), ())
            })
        }
        pub fn closure354(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method273(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure354(v0_1.clone(), ())
            })
        }
        pub fn closure355(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method274(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure355(v0_1.clone(), ())
            })
        }
        pub fn closure356(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method275(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure356(v0_1.clone(), ())
            })
        }
        pub fn method276(
            v0_1: leptos::prelude::AnyView,
            v1: leptos::prelude::AnyView,
            v2: leptos::prelude::AnyView,
            v3: leptos::prelude::AnyView,
        ) -> Vec<leptos::prelude::AnyView> {
            let v4: leptos::prelude::AnyView = Dice_ui::method174(v3);
            let v8: string = string("v4");
            let v9: leptos::prelude::AnyView = Dice_ui::method174(v2);
            let v13: string = append(string("v9, "), (v8));
            let v14: leptos::prelude::AnyView = Dice_ui::method174(v1);
            let v17: string = append(string("v14, "), (v13));
            let v18: leptos::prelude::AnyView = Dice_ui::method174(v0_1);
            let v22: string = append(
                (append(string("vec!["), (append(string("v18, "), (v17))))),
                string("]"),
            );
            vec![v18, v14, v9, v4]
        }
        pub fn closure357(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure358(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                (append((append((v0_1()), string("#/"))), string("settings"))),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure359(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure360(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure361(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                (append((append((v0_1()), string("#/"))), string("transactions"))),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure362(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure363(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure364(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                (append((append((v0_1()), string("#/"))), string("lists"))),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure365(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure366(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure367(v0_1: leptos::prelude::Memo<string>, unitVar: ()) -> std::string::String {
            let v4: string = append(
                (append((append((v0_1()), string("#/"))), string("dice"))),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure368(v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>, unitVar: ()) -> bool {
            if let Dice_ui::US19::US19_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure369(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US19>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US19::US19_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                (append(string("home.render () / router: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v11: leptos::prelude::Resource<Dice_ui::US2, std::sync::Arc<rexie::Rexie>> =
                Dice_ui::method6();
            let v14: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v15: leptos::prelude::Resource<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                Dice_ui::US3,
            > = Dice_ui::method13(v11.clone());
            let v18 = {
                let clo = Func0::new({
                    let v15 = v15.clone();
                    let v7 = v7.clone();
                    move || Dice_ui::closure25(v7.clone(), v15.clone(), ())
                });
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v20: bool = true;
            leptos::prelude::Effect::new(move |_| v18(()));
            let v23 = {
                let clo_1 = Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure40(v7.clone(), ())
                });
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v25: leptos::prelude::Memo<
                std::collections::HashMap<std::string::String, leptos::prelude::RwSignal<bool>>,
            > = leptos::prelude::Memo::new(move |_| v23(()));
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v31 = Box::pin(Func1::new({
                let v11 = v11.clone();
                move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure41(v11.clone(), v)
            }));
            let v32: string =
                string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap3>| $0(value.clone())))");
            let v33: leptos::prelude::Action<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::Action::new(*std::sync::Arc::new(
                    move |value: &std::sync::Arc<Heap3>| v31(value.clone()),
                ));
            let v36 = {
                let clo_2 = Func0::new({
                    let patternInput = patternInput.clone();
                    let v25 = v25.clone();
                    let v33 = v33.clone();
                    let v7 = v7.clone();
                    move || {
                        Dice_ui::closure42(
                            v7.clone(),
                            v25.clone(),
                            patternInput.1.clone(),
                            patternInput.0.clone(),
                            v33.clone(),
                            (),
                        )
                    }
                });
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v38: bool = true;
            leptos::prelude::Effect::new(move |_| v36(()));
            let v40 = Dice_ui::method58(v7.clone());
            let v45: string = string(" class:dark={move || v40()} class=\"flex flex-1\"");
            let v48: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v50: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v52: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v54: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v57 = {
                let clo_3 = Func0::new({
                    let v54 = v54.clone();
                    move || Dice_ui::closure46(v54.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v59: leptos::prelude::Memo<string> = leptos::prelude::Memo::new(move |_| v57(()));
            let v61: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v63: LrcPtr<Dice_ui::Heap2> = v61.unwrap();
            let patternInput_1: (
                leptos::prelude::ReadSignal<Dice_ui::US19>,
                leptos::prelude::WriteSignal<Dice_ui::US19>,
            ) = leptos::prelude::signal(Dice_ui::US19::US19_0);
            let v66: leptos::prelude::ReadSignal<Dice_ui::US19> = patternInput_1.0.clone();
            let patternInput_2: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v73 = {
                let clo_4 = Func0::new({
                    let patternInput_2 = patternInput_2.clone();
                    let v50 = v50.clone();
                    let v52 = v52.clone();
                    let v59 = v59.clone();
                    let v63 = v63.clone();
                    move || {
                        Dice_ui::closure47(
                            v50.clone(),
                            v52.clone(),
                            v59.clone(),
                            v63.clone(),
                            patternInput_2.1.clone(),
                            patternInput_2.0.clone(),
                            (),
                        )
                    }
                });
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v75: bool = true;
            leptos::prelude::Effect::new(move |_| v73(()));
            let v78 = {
                let clo_5 = Func0::new({
                    let patternInput_1 = patternInput_1.clone();
                    let v50 = v50.clone();
                    move || Dice_ui::closure48(v50.clone(), patternInput_1.1.clone(), ())
                });
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v80: bool = true;
            leptos::prelude::Effect::new(move |_| v78(()));
            let v82: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v83: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v84: string = append(
                (append((append(string(" "), (v83))), string(""))),
                string(""),
            );
            let v86: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v88: Dice_ui::US19 = leptos::prelude::ReadSignal::get(&v66.clone());
            let v2046: Dice_ui::US23 = match &v88 {
                Dice_ui::US19::US19_1(v88_1_0) => {
                    let v92: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v94: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v96: LrcPtr<Dice_ui::Heap2> = v94.unwrap();
                    let v99: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v102 = {
                        let clo_6 = Func0::new({
                            let v96 = v96.clone();
                            move || Dice_ui::closure51(v96.clone(), ())
                        });
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v104: leptos::prelude::Memo<Vec<string>> =
                        leptos::prelude::Memo::new(move |_| v102(()));
                    let v107 = {
                        let clo_7 = Func0::new({
                            let v104 = v104.clone();
                            move || Dice_ui::closure56(v104.clone(), ())
                        });
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v109: leptos::prelude::Memo<
                        Array<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v107(()));
                    let v112 = {
                        let clo_8 = Func0::new({
                            let v104 = v104.clone();
                            let v96 = v96.clone();
                            move || Dice_ui::closure58(v96.clone(), v104.clone(), ())
                        });
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v114: leptos::prelude::Memo<
                        Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
                    > = leptos::prelude::Memo::new(move |_| v112(()));
                    let v117 = {
                        let clo_9 = Func0::new({
                            let v114 = v114.clone();
                            move || Dice_ui::closure61(v114.clone(), ())
                        });
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v119: leptos::prelude::Memo<
                        Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v117(()));
                    let v122 = {
                        let clo_10 = Func0::new({
                            let v114 = v114.clone();
                            move || Dice_ui::closure63(v114.clone(), ())
                        });
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v124: leptos::prelude::Memo<Array<string>> =
                        leptos::prelude::Memo::new(move |_| v122(()));
                    let v126: leptos::prelude::Memo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method75(
                        v119,
                        Func1::new(move |v_1: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure66((), v_1)
                        }),
                    );
                    let v132: string = Dice_ui::method10(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v126.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v134: bool = true;
                    leptos::logging::log!("{}", v132);
                    let v137 = {
                        let clo_11 = Func0::new({
                            let v124 = v124.clone();
                            let v126 = v126.clone();
                            move || Dice_ui::closure98(v124.clone(), v126.clone(), ())
                        });
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v139: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v137(()));
                    let v142 = {
                        let clo_12 = Func0::new({
                            let v139 = v139.clone();
                            move || Dice_ui::closure115(v139.clone(), ())
                        });
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    let v144: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v142(()));
                    let v147 = {
                        let clo_13 = Func0::new({
                            let v144 = v144.clone();
                            move || Dice_ui::closure122(v144.clone(), ())
                        });
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v151: leptos::prelude::Memo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method149(
                        leptos::prelude::Memo::new(move |_| v147(())),
                        Func1::new(move |v_2: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure126((), v_2)
                        }),
                    );
                    let v157: string = Dice_ui::method10(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v151.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v159: bool = true;
                    leptos::logging::log!("{}", v157);
                    let v162 = Box::pin(Func1::new(move |v_3: LrcPtr<Dice_ui::Heap6>| {
                        Dice_ui::closure144((), v_3)
                    }));
                    let v163: string =
                            string("leptos::prelude::Action::new(*std::sync::Arc::new(move |value: &std::sync::Arc<Heap6>| $0(value.clone())))");
                    let v164: leptos::prelude::Action<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US58, std::string::String>,
                    > = leptos::prelude::Action::new(*std::sync::Arc::new(
                        move |value: &std::sync::Arc<Heap6>| v162(value.clone()),
                    ));
                    let v167 = {
                        let clo_14 = Func0::new({
                            let v164 = v164.clone();
                            move || Dice_ui::closure149(v164.clone(), ())
                        });
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v169: leptos::prelude::Memo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v167(()));
                    let v172 = {
                        let clo_15 = Func0::new({
                            let v169 = v169.clone();
                            move || Dice_ui::closure154(v169.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v174: leptos::prelude::Memo<Option<string>> =
                        leptos::prelude::Memo::new(move |_| v172(()));
                    let v177 = {
                        let clo_16 = Func0::new({
                            let v96 = v96.clone();
                            move || Dice_ui::closure159(v96.clone(), ())
                        });
                        Func1::new({
                            let clo_16 = clo_16.clone();
                            move |arg_16: ()| clo_16()
                        })
                    };
                    let v179: leptos::prelude::Memo<Dice_ui::US32> =
                        leptos::prelude::Memo::new(move |_| v177(()));
                    let v182 = {
                        let clo_17 = Func0::new({
                            let v96 = v96.clone();
                            move || Dice_ui::closure160(v96.clone(), ())
                        });
                        Func1::new({
                            let clo_17 = clo_17.clone();
                            move |arg_17: ()| clo_17()
                        })
                    };
                    let v184: leptos::prelude::Memo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v182(()));
                    let v187 = {
                        let clo_18 = Func0::new({
                            let v184 = v184.clone();
                            move || Dice_ui::closure163(v184.clone(), ())
                        });
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v189: leptos::prelude::Memo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::Memo::new(move |_| v187(()));
                    let v190: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v192: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v190);
                    let v194: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v196() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v197 = {
                        let clo_19 = Func0::from(v196);
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    fn v199() -> bool {
                        Dice_ui::closure167((), ())
                    }
                    let v200 = {
                        let clo_20 = Func0::from(v199);
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v202: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v203: Vec<leptos::prelude::AnyView> = Dice_ui::method173(v192);
                    let v205: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v203);
                    let v207: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v205);
                    let v210: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v202))),
                                        string(">move || { v207 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v212: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v207 }</div> };
                    let v214: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v212);
                    let v215: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v197(())");
                    let v218: string = append(
                        (append(
                            string(" open=move || v200(())"),
                            (append(
                                (append((append(string(" "), (v215))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v221 = {
                        let clo_21 = Func0::new(move || Dice_ui::closure168((), ()));
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v224 = {
                        let clo_22 = Func0::new(move || Dice_ui::closure169((), ()));
                        Func1::new({
                            let clo_22 = clo_22.clone();
                            move |arg_22: ()| clo_22()
                        })
                    };
                    let v225: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v224(()) + \" \" + &v221(())");
                    let v226: string = append(
                        (append((append(string(" "), (v225))), string(""))),
                        string(""),
                    );
                    let v228: string = string(" class=\"flex items-center gap-2\"");
                    let v231: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v232: string = (Dice_ui::method175())();
                    let v237: &str = &*v232;
                    let v261: std::string::String = String::from(v237);
                    let v283: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v261),
                        ));
                    let v285: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v283);
                    let v287: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v285);
                    let v290: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v231))),
                                        string(">move || { v287 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v292: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v287 }</span> };
                    let v295: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v292));
                    let v297: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v295);
                    let v299: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v297);
                    let v301: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v228))),
                                        string(">move || { v299 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v303: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v299 }</div> };
                    let v305: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v303);
                    let v307: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v309() -> string {
                        Dice_ui::closure171((), ())
                    }
                    let v310 = {
                        let clo_23 = Func0::from(v309);
                        Func1::new({
                            let clo_23 = clo_23.clone();
                            move |arg_23: ()| clo_23()
                        })
                    };
                    let v318: string =
                            string(" class=move || \" \".to_owned() + &v310(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v320: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v324: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v320))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v325: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v327: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v325);
                    let v329: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v327);
                    let v332: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v324))),
                                        string(">move || { v329 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v334: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v329 }</path> };
                    let v337: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v334));
                    let v339: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v337);
                    let v341: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v339);
                    let v344: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v318))),
                                        string(">move || { v341 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v346: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v310(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v341 }</svg> };
                    let v349: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v346));
                    let v351: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v349);
                    let v353: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v351);
                    let v355: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v307))),
                                        string(">move || { v353 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v357: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v353 }</span> };
                    let v360: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v305, leptos::prelude::IntoAny::into_any(v357));
                    let v362: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v360);
                    let v364: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v362);
                    let v367: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v226))),
                                        string(">move || { v364 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v369: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v224(()) + " " + &v221(())>move || { v364 }</summary> };
                    let v371: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v369);
                    let v373: string = string(" class=\"flex flex-1 flex-col\"");
                    let v377: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method184(Func0::new(move || {
                            Func0::new({
                                let v164 = v164.clone();
                                let v174 = v174.clone();
                                let v179 = v179.clone();
                                let v189 = v189.clone();
                                let v96 = v96.clone();
                                move || {
                                    Dice_ui::closure172(
                                        v96.clone(),
                                        v164.clone(),
                                        v174.clone(),
                                        v179.clone(),
                                        v189.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v379: leptos::prelude::Fragment = (move || v377())();
                    let v381: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v379);
                    let v383: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v373))),
                                        string(">move || { v381 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v385: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v381 }</div> };
                    let v388: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v371, leptos::prelude::IntoAny::into_any(v385));
                    let v390: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v388);
                    let v392: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v390);
                    let v395: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v218))),
                                        string(">move || { v392 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v397: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v200(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v197(())>move || { v392 }</details> };
                    let v400: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v214, leptos::prelude::IntoAny::into_any(v397));
                    let v402: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v400);
                    let v404: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v402);
                    let v406: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v194))),
                                        string(">move || { v404 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v408: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v404 }</div> };
                    let v410: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v408);
                    let v411: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v413: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v411);
                    let v415: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v417 = {
                        let clo_24 = Func0::from(v196);
                        Func1::new({
                            let clo_24 = clo_24.clone();
                            move |arg_24: ()| clo_24()
                        })
                    };
                    let v419 = {
                        let clo_25 = Func0::from(v199);
                        Func1::new({
                            let clo_25 = clo_25.clone();
                            move |arg_25: ()| clo_25()
                        })
                    };
                    let v421: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v422: Vec<leptos::prelude::AnyView> = Dice_ui::method173(v413);
                    let v424: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v422);
                    let v426: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v424);
                    let v428: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v421))),
                                        string(">move || { v426 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v430: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v426 }</div> };
                    let v432: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v430);
                    let v433: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v417(())");
                    let v436: string = append(
                        (append(
                            string(" open=move || v419(())"),
                            (append(
                                (append((append(string(" "), (v433))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v439 = {
                        let clo_26 = Func0::new(move || Dice_ui::closure189((), ()));
                        Func1::new({
                            let clo_26 = clo_26.clone();
                            move |arg_26: ()| clo_26()
                        })
                    };
                    let v442 = {
                        let clo_27 = Func0::new(move || Dice_ui::closure190((), ()));
                        Func1::new({
                            let clo_27 = clo_27.clone();
                            move |arg_27: ()| clo_27()
                        })
                    };
                    let v443: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v442(()) + \" \" + &v439(())");
                    let v444: string = append(
                        (append((append(string(" "), (v443))), string(""))),
                        string(""),
                    );
                    let v446: string = string(" class=\"flex items-center gap-2\"");
                    let v449: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v450: string = (Dice_ui::method187())();
                    let v455: &str = &*v450;
                    let v479: std::string::String = String::from(v455);
                    let v501: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v479),
                        ));
                    let v503: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v501);
                    let v505: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v503);
                    let v507: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v449))),
                                        string(">move || { v505 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v509: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v505 }</span> };
                    let v512: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v509));
                    let v514: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v512);
                    let v516: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v514);
                    let v518: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v446))),
                                        string(">move || { v516 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v520: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v516 }</div> };
                    let v522: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v520);
                    let v524: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v526 = {
                        let clo_28 = Func0::from(v309);
                        Func1::new({
                            let clo_28 = clo_28.clone();
                            move |arg_28: ()| clo_28()
                        })
                    };
                    let v534: string =
                            string(" class=move || \" \".to_owned() + &v526(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v536: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v540: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v536))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v541: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v543: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v541);
                    let v545: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v543);
                    let v547: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v540))),
                                        string(">move || { v545 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v549: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v545 }</path> };
                    let v552: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v549));
                    let v554: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v552);
                    let v556: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v554);
                    let v558: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v534))),
                                        string(">move || { v556 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v560: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v526(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v556 }</svg> };
                    let v563: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v560));
                    let v565: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v563);
                    let v567: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v565);
                    let v569: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v524))),
                                        string(">move || { v567 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v571: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v567 }</span> };
                    let v574: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v522, leptos::prelude::IntoAny::into_any(v571));
                    let v576: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v574);
                    let v578: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v576);
                    let v580: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v444))),
                                        string(">move || { v578 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v582: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v442(()) + " " + &v439(())>move || { v578 }</summary> };
                    let v584: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v582);
                    let v586: string = string(" class=\"flex flex-1 flex-col\"");
                    let v590: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method184(Func0::new(move || {
                            Func0::new({
                                let v114 = v114.clone();
                                let v139 = v139.clone();
                                let v151 = v151.clone();
                                move || {
                                    Dice_ui::closure192(
                                        v151.clone(),
                                        v139.clone(),
                                        v114.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v592: leptos::prelude::Fragment = (move || v590())();
                    let v594: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v592);
                    let v596: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v586))),
                                        string(">move || { v594 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v598: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v594 }</div> };
                    let v601: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v584, leptos::prelude::IntoAny::into_any(v598));
                    let v603: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v601);
                    let v605: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v603);
                    let v607: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v436))),
                                        string(">move || { v605 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v609: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v419(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v417(())>move || { v605 }</details> };
                    let v612: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v432, leptos::prelude::IntoAny::into_any(v609));
                    let v614: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v612);
                    let v616: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v614);
                    let v618: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v415))),
                                        string(">move || { v616 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v620: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v616 }</div> };
                    let v623: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method176(v410, leptos::prelude::IntoAny::into_any(v620));
                    Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v623))
                }
                Dice_ui::US19::US19_2 => {
                    let v629: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v631: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v633: LrcPtr<Dice_ui::Heap2> = v631.unwrap();
                    let v639: &str = &*string("???");
                    let v663: std::string::String = String::from(v639);
                    let v685: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v663),
                        ));
                    Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v685))
                }
                Dice_ui::US19::US19_4 => {
                    let v1294: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v1296: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v1298: LrcPtr<Dice_ui::Heap2> = v1296.unwrap();
                    let v1301 = {
                        let clo_29 = Func0::new({
                            let v1298 = v1298.clone();
                            move || Dice_ui::closure198(v1298.clone(), ())
                        });
                        Func1::new({
                            let clo_29 = clo_29.clone();
                            move |arg_29: ()| clo_29()
                        })
                    };
                    let v1303: leptos::prelude::Memo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v1301(()));
                    let patternInput_3: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v1306: leptos::prelude::WriteSignal<i32> = patternInput_3.1.clone();
                    let v1309 = {
                        let clo_30 = Func0::new({
                            let patternInput_3 = patternInput_3.clone();
                            let v1303 = v1303.clone();
                            move || Dice_ui::closure201(v1303.clone(), patternInput_3.0.clone(), ())
                        });
                        Func1::new({
                            let clo_30 = clo_30.clone();
                            move |arg_30: ()| clo_30()
                        })
                    };
                    let v1311: leptos::prelude::Memo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::Memo::new(move |_| v1309(()));
                    let v1314 = {
                        let clo_31 = Func0::new({
                            let v1311 = v1311.clone();
                            move || Dice_ui::closure204(v1311.clone(), ())
                        });
                        Func1::new({
                            let clo_31 = clo_31.clone();
                            move |arg_31: ()| clo_31()
                        })
                    };
                    let v1316: leptos::prelude::Memo<i32> =
                        leptos::prelude::Memo::new(move |_| v1314(()));
                    let v1317 = Func0::new({
                        let v1298 = v1298.clone();
                        let v1303 = v1303.clone();
                        let v1306 = v1306.clone();
                        move || Dice_ui::closure205(v1298.clone(), v1303.clone(), v1306.clone(), ())
                    });
                    {
                        let v1321 = {
                            let clo_32 = Func0::new(move || Dice_ui::closure210((), ()));
                            Func1::new({
                                let clo_32 = clo_32.clone();
                                move |arg_32: ()| clo_32()
                            })
                        };
                        let v1333: string =
                                string(" class=move || \" \".to_owned() + &v1321(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v1339: string =
                                string(" d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v1340: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v1342: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1340);
                        let v1344: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1342);
                        let v1347: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v1339))),
                                            string(">move || { v1344 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1349: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v1344 }</path> };
                        let v1352: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1349));
                        let v1354: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1352);
                        let v1356: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1354);
                        let v1359: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v1333))),
                                            string(">move || { v1356 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1361: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1321(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1356 }</svg> };
                        let v1366 = {
                            let clo_33 = Func0::new(move || Dice_ui::closure211((), ()));
                            Func1::new({
                                let clo_33 = clo_33.clone();
                                move |arg_33: ()| clo_33()
                            })
                        };
                        let v1367: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v1366(())");
                        let v1370: string = append(
                            (append(
                                string(" aria-label=\"Add\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v1317()"),
                                        (append(
                                            (append((append(string(" "), (v1367))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v1373: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1361));
                        let v1375: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1373);
                        let v1377: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1375);
                        let v1380: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v1370))),
                                            string(">move || { v1377 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1382: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v1317() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v1366(())>move || { v1377 }</button> };
                        let v1384: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1382);
                        let v1385: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v1387: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1385);
                        let v1389: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v1391() -> string {
                            Dice_ui::closure166((), ())
                        }
                        let v1392 = {
                            let clo_34 = Func0::from(v1391);
                            Func1::new({
                                let clo_34 = clo_34.clone();
                                move |arg_34: ()| clo_34()
                            })
                        };
                        fn v1394() -> bool {
                            Dice_ui::closure167((), ())
                        }
                        let v1395 = {
                            let clo_35 = Func0::from(v1394);
                            Func1::new({
                                let clo_35 = clo_35.clone();
                                move |arg_35: ()| clo_35()
                            })
                        };
                        let v1397: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v1398: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(v1384.clone());
                        let v1400: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1398);
                        let v1402: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1400);
                        let v1405: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1397))),
                                            string(">move || { v1402 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1407: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v1402 }</div> };
                        let v1409: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1407);
                        let v1410: string =
                                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1392(())");
                        let v1413: string = append(
                            (append(
                                string(" open=move || v1395(())"),
                                (append(
                                    (append((append(string(" "), (v1410))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v1416 = {
                            let clo_36 = Func0::new(move || Dice_ui::closure212((), ()));
                            Func1::new({
                                let clo_36 = clo_36.clone();
                                move |arg_36: ()| clo_36()
                            })
                        };
                        let v1419 = {
                            let clo_37 = Func0::new({
                                let v1384 = v1384.clone();
                                move || Dice_ui::closure213(v1384.clone(), ())
                            });
                            Func1::new({
                                let clo_37 = clo_37.clone();
                                move |arg_37: ()| clo_37()
                            })
                        };
                        let v1420: string =
                                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1419(()) + \" \" + &v1416(())");
                        let v1421: string = append(
                            (append((append(string(" "), (v1420))), string(""))),
                            string(""),
                        );
                        let v1423: string = string(" class=\"flex items-center gap-2\"");
                        let v1426: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v1427: string = (Dice_ui::method200(v1384.clone()))();
                        let v1432: &str = &*v1427;
                        let v1456: std::string::String = String::from(v1432);
                        let v1478: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v1456),
                            ));
                        let v1480: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1478);
                        let v1482: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1480);
                        let v1485: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v1426))),
                                            string(">move || { v1482 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1487: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v1482 }</span> };
                        let v1490: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1487));
                        let v1492: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1490);
                        let v1494: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1492);
                        let v1496: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1423))),
                                            string(">move || { v1494 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1498: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v1494 }</div> };
                        let v1500: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1498);
                        let v1502: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v1504() -> string {
                            Dice_ui::closure171((), ())
                        }
                        let v1505 = {
                            let clo_38 = Func0::from(v1504);
                            Func1::new({
                                let clo_38 = clo_38.clone();
                                move |arg_38: ()| clo_38()
                            })
                        };
                        let v1513: string =
                                string(" class=move || \" \".to_owned() + &v1505(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v1515: string =
                                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v1519: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v1515))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v1520: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v1522: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1520);
                        let v1524: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1522);
                        let v1526: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v1519))),
                                            string(">move || { v1524 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1528: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v1524 }</path> };
                        let v1531: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1528));
                        let v1533: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1531);
                        let v1535: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1533);
                        let v1537: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v1513))),
                                            string(">move || { v1535 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1539: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1505(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v1535 }</svg> };
                        let v1542: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1539));
                        let v1544: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1542);
                        let v1546: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1544);
                        let v1548: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v1502))),
                                            string(">move || { v1546 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1550: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v1546 }</span> };
                        let v1553: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v1500, leptos::prelude::IntoAny::into_any(v1550));
                        let v1555: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1553);
                        let v1557: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1555);
                        let v1560: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v1421))),
                                            string(">move || { v1557 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1562: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v1419(()) + " " + &v1416(())>move || { v1557 }</summary> };
                        let v1564: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1562);
                        let v1566: string = string(" class=\"flex flex-1 flex-col\"");
                        let v1570: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method184(Func0::new(move || {
                                Func0::new({
                                    let v1298 = v1298.clone();
                                    let v1303 = v1303.clone();
                                    let v1306 = v1306.clone();
                                    let v1311 = v1311.clone();
                                    let v1316 = v1316.clone();
                                    move || {
                                        Dice_ui::closure215(
                                            v1298.clone(),
                                            v1311.clone(),
                                            v1316.clone(),
                                            v1303.clone(),
                                            v1306.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v1572: leptos::prelude::Fragment = (move || v1570())();
                        let v1574: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1572);
                        let v1576: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1566))),
                                            string(">move || { v1574 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1578: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v1574 }</div> };
                        let v1581: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v1564, leptos::prelude::IntoAny::into_any(v1578));
                        let v1583: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1581);
                        let v1585: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1583);
                        let v1588: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v1413))),
                                            string(">move || { v1585 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1590: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v1395(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v1392(())>move || { v1585 }</details> };
                        let v1593: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v1409, leptos::prelude::IntoAny::into_any(v1590));
                        let v1595: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1593);
                        let v1597: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1595);
                        let v1599: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1389))),
                                            string(">move || { v1597 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1601: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v1597 }</div> };
                        let v1603: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1601);
                        let v1604: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v1606: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1604);
                        let v1608: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v1610 = {
                            let clo_39 = Func0::from(v1391);
                            Func1::new({
                                let clo_39 = clo_39.clone();
                                move |arg_39: ()| clo_39()
                            })
                        };
                        let v1612 = {
                            let clo_40 = Func0::from(v1394);
                            Func1::new({
                                let clo_40 = clo_40.clone();
                                move |arg_40: ()| clo_40()
                            })
                        };
                        let v1614: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v1615: Vec<leptos::prelude::AnyView> = Dice_ui::method173(v1606);
                        let v1617: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1615);
                        let v1619: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1617);
                        let v1621: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1614))),
                                            string(">move || { v1619 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1623: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v1619 }</div> };
                        let v1625: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1623);
                        let v1626: string =
                                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1610(())");
                        let v1629: string = append(
                            (append(
                                string(" open=move || v1612(())"),
                                (append(
                                    (append((append(string(" "), (v1626))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v1632 = {
                            let clo_41 = Func0::new(move || Dice_ui::closure233((), ()));
                            Func1::new({
                                let clo_41 = clo_41.clone();
                                move |arg_41: ()| clo_41()
                            })
                        };
                        let v1635 = {
                            let clo_42 = Func0::new(move || Dice_ui::closure234((), ()));
                            Func1::new({
                                let clo_42 = clo_42.clone();
                                move |arg_42: ()| clo_42()
                            })
                        };
                        let v1636: string =
                                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1635(()) + \" \" + &v1632(())");
                        let v1637: string = append(
                            (append((append(string(" "), (v1636))), string(""))),
                            string(""),
                        );
                        let v1639: string = string(" class=\"flex items-center gap-2\"");
                        let v1642: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v1643: string = (Dice_ui::method214())();
                        let v1648: &str = &*v1643;
                        let v1672: std::string::String = String::from(v1648);
                        let v1694: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v1672),
                            ));
                        let v1696: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1694);
                        let v1698: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1696);
                        let v1700: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v1642))),
                                            string(">move || { v1698 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1702: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v1698 }</span> };
                        let v1705: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1702));
                        let v1707: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1705);
                        let v1709: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1707);
                        let v1711: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1639))),
                                            string(">move || { v1709 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1713: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v1709 }</div> };
                        let v1715: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1713);
                        let v1717: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        let v1719 = {
                            let clo_43 = Func0::from(v1504);
                            Func1::new({
                                let clo_43 = clo_43.clone();
                                move |arg_43: ()| clo_43()
                            })
                        };
                        let v1727: string =
                                string(" class=move || \" \".to_owned() + &v1719(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v1729: string =
                                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v1733: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v1729))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v1734: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v1736: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1734);
                        let v1738: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1736);
                        let v1740: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v1733))),
                                            string(">move || { v1738 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1742: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v1738 }</path> };
                        let v1745: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1742));
                        let v1747: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1745);
                        let v1749: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1747);
                        let v1751: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v1727))),
                                            string(">move || { v1749 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1753: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1719(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v1749 }</svg> };
                        let v1756: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1753));
                        let v1758: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1756);
                        let v1760: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1758);
                        let v1762: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v1717))),
                                            string(">move || { v1760 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1764: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v1760 }</span> };
                        let v1767: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v1715, leptos::prelude::IntoAny::into_any(v1764));
                        let v1769: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1767);
                        let v1771: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1769);
                        let v1773: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v1637))),
                                            string(">move || { v1771 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1775: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v1635(()) + " " + &v1632(())>move || { v1771 }</summary> };
                        let v1777: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1775);
                        let v1779: string = string(" class=\"flex flex-1 flex-col\"");
                        let v1783: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method184(Func0::new(move || {
                                Func0::new({
                                    let v1298 = v1298.clone();
                                    move || Dice_ui::closure236(v1298.clone(), ())
                                })()
                            }));
                        let v1785: leptos::prelude::Fragment = (move || v1783())();
                        let v1787: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1785);
                        let v1789: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1779))),
                                            string(">move || { v1787 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1791: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v1787 }</div> };
                        let v1794: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v1777, leptos::prelude::IntoAny::into_any(v1791));
                        let v1796: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1794);
                        let v1798: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1796);
                        let v1800: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v1629))),
                                            string(">move || { v1798 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1802: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v1612(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v1610(())>move || { v1798 }</details> };
                        let v1805: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v1625, leptos::prelude::IntoAny::into_any(v1802));
                        let v1807: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1805);
                        let v1809: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1807);
                        let v1811: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1608))),
                                            string(">move || { v1809 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1813: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v1809 }</div> };
                        let v1815: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1813);
                        let v1818: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::RwSignal::get_untracked(&v1298.l0.clone());
                        let v2038: Vec<leptos::prelude::AnyView> = Dice_ui::method186(
                            v1603,
                            v1815,
                            if leptos::prelude::RwSignal::get(&v1818.l1.clone()) {
                                let v1822: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1824: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1822);
                                let v1826: string =
                                    string(" class=\"flex flex-col [position:relative]\"");
                                let v1828 = {
                                    let clo_44 = Func0::from(v1391);
                                    Func1::new({
                                        let clo_44 = clo_44.clone();
                                        move |arg_44: ()| clo_44()
                                    })
                                };
                                let v1830 = {
                                    let clo_45 = Func0::from(v1394);
                                    Func1::new({
                                        let clo_45 = clo_45.clone();
                                        move |arg_45: ()| clo_45()
                                    })
                                };
                                let v1832: string =
                                    string(" class=\"[position:absolute] [right:0] [top:0]\"");
                                let v1833: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(v1824);
                                let v1835: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1833);
                                let v1837: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1835);
                                let v1839: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1832))),
                                                    string(">move || { v1837 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1841: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v1837 }</div> };
                                let v1843: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1841);
                                let v1844: string =
                                                           string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1828(())");
                                let v1847: string = append(
                                    (append(
                                        string(" open=move || v1830(())"),
                                        (append(
                                            (append((append(string(" "), (v1844))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                );
                                let v1850 = {
                                    let clo_46 = Func0::new(move || Dice_ui::closure253((), ()));
                                    Func1::new({
                                        let clo_46 = clo_46.clone();
                                        move |arg_46: ()| clo_46()
                                    })
                                };
                                let v1853 = {
                                    let clo_47 = Func0::new(move || Dice_ui::closure254((), ()));
                                    Func1::new({
                                        let clo_47 = clo_47.clone();
                                        move |arg_47: ()| clo_47()
                                    })
                                };
                                let v1854: string =
                                                           string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1853(()) + \" \" + &v1850(())");
                                let v1855: string = append(
                                    (append((append(string(" "), (v1854))), string(""))),
                                    string(""),
                                );
                                let v1857: string = string(" class=\"flex items-center gap-2\"");
                                let v1860: string =
                                                           string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
                                let v1861: string = (Dice_ui::method223())();
                                let v1866: &str = &*v1861;
                                let v1890: std::string::String = String::from(v1866);
                                let v1912: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v1890),
                                    ));
                                let v1914: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1912);
                                let v1916: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1914);
                                let v1918: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<span "), (v1860))),
                                                    string(">move || { v1916 }</"),
                                                )),
                                                string("span"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1920: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                                > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v1916 }</span> };
                                let v1923: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1920));
                                let v1925: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1923);
                                let v1927: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1925);
                                let v1929: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1857))),
                                                    string(">move || { v1927 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1931: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v1927 }</div> };
                                let v1933: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1931);
                                let v1935: string =
                                    string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                                let v1937 = {
                                    let clo_48 = Func0::from(v1504);
                                    Func1::new({
                                        let clo_48 = clo_48.clone();
                                        move |arg_48: ()| clo_48()
                                    })
                                };
                                let v1945: string =
                                                           string(" class=move || \" \".to_owned() + &v1937(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                                let v1947: string =
                                                           string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                                let v1951: string = append(
                                    (append(
                                        string(" clip-rule=\"evenodd\""),
                                        (append(
                                            (append(
                                                (append(string(" "), (v1947))),
                                                string(" fill-rule=\"evenodd\""),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                );
                                let v1952: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1954: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1952);
                                let v1956: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1954);
                                let v1958: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<path "), (v1951))),
                                                    string(">move || { v1956 }</"),
                                                )),
                                                string("path"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1960: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v1956 }</path> };
                                let v1963: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1960));
                                let v1965: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1963);
                                let v1967: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1965);
                                let v1969: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<svg "), (v1945))),
                                                    string(">move || { v1967 }</"),
                                                )),
                                                string("svg"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1971: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1937(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v1967 }</svg> };
                                let v1974: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1971));
                                let v1976: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1974);
                                let v1978: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1976);
                                let v1980: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<span "), (v1935))),
                                                    string(">move || { v1978 }</"),
                                                )),
                                                string("span"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1982: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                                > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v1978 }</span> };
                                let v1985: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1933,
                                    leptos::prelude::IntoAny::into_any(v1982),
                                );
                                let v1987: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1985);
                                let v1989: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1987);
                                let v1991: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<summary "), (v1855))),
                                                    string(">move || { v1989 }</"),
                                                )),
                                                string("summary"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1993: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                                > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v1853(()) + " " + &v1850(())>move || { v1989 }</summary> };
                                let v1995: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1993);
                                let v1997: string = string(" class=\"flex flex-1 flex-col\"");
                                let v2001: Func0<leptos::prelude::Fragment> =
                                    Dice_ui::method184(Func0::new(move || {
                                        Func0::new(move || Dice_ui::closure256((), ()))()
                                    }));
                                let v2003: leptos::prelude::Fragment = (move || v2001())();
                                let v2005: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2003);
                                let v2007: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1997))),
                                                    string(">move || { v2005 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2009: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v2005 }</div> };
                                let v2012: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1995,
                                    leptos::prelude::IntoAny::into_any(v2009),
                                );
                                let v2014: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2012);
                                let v2016: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2014);
                                let v2018: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<details "), (v1847))),
                                                    string(">move || { v2016 }</"),
                                                )),
                                                string("details"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2020: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Details, _, _>,
                                > = leptos::prelude::view! { <details  open=move || v1830(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v1828(())>move || { v2016 }</details> };
                                let v2023: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1843,
                                    leptos::prelude::IntoAny::into_any(v2020),
                                );
                                let v2025: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2023);
                                let v2027: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2025);
                                let v2029: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1826))),
                                                    string(">move || { v2027 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2031: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v2027 }</div> };
                                leptos::prelude::IntoAny::into_any(v2031)
                            } else {
                                let v2034: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                leptos::prelude::IntoAny::into_any(v2034)
                            },
                        );
                        Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v2038))
                    }
                }
                Dice_ui::US19::US19_3 => {
                    let v691: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v693: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v695: LrcPtr<Dice_ui::Heap2> = v693.unwrap();
                    let v698: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v701 = {
                        let clo_49 = Func0::new({
                            let v695 = v695.clone();
                            move || Dice_ui::closure51(v695.clone(), ())
                        });
                        Func1::new({
                            let clo_49 = clo_49.clone();
                            move |arg_49: ()| clo_49()
                        })
                    };
                    let v703: leptos::prelude::Memo<Vec<string>> =
                        leptos::prelude::Memo::new(move |_| v701(()));
                    let v706 = {
                        let clo_50 = Func0::new({
                            let v703 = v703.clone();
                            move || Dice_ui::closure56(v703.clone(), ())
                        });
                        Func1::new({
                            let clo_50 = clo_50.clone();
                            move |arg_50: ()| clo_50()
                        })
                    };
                    let v708: leptos::prelude::Memo<
                        Array<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v706(()));
                    let v711 = {
                        let clo_51 = Func0::new({
                            let v695 = v695.clone();
                            let v703 = v703.clone();
                            move || Dice_ui::closure58(v695.clone(), v703.clone(), ())
                        });
                        Func1::new({
                            let clo_51 = clo_51.clone();
                            move |arg_51: ()| clo_51()
                        })
                    };
                    let v713: leptos::prelude::Memo<
                        Vec<(string, Vec<(string, Dice_ui::US24, string, bool, bool)>)>,
                    > = leptos::prelude::Memo::new(move |_| v711(()));
                    let v716 = {
                        let clo_52 = Func0::new({
                            let v713 = v713.clone();
                            move || Dice_ui::closure61(v713.clone(), ())
                        });
                        Func1::new({
                            let clo_52 = clo_52.clone();
                            move |arg_52: ()| clo_52()
                        })
                    };
                    let v718: leptos::prelude::Memo<
                        Vec<(string, Dice_ui::US24, string, bool, bool)>,
                    > = leptos::prelude::Memo::new(move |_| v716(()));
                    let v721 = {
                        let clo_53 = Func0::new({
                            let v713 = v713.clone();
                            move || Dice_ui::closure63(v713.clone(), ())
                        });
                        Func1::new({
                            let clo_53 = clo_53.clone();
                            move |arg_53: ()| clo_53()
                        })
                    };
                    let v723: leptos::prelude::Memo<Array<string>> =
                        leptos::prelude::Memo::new(move |_| v721(()));
                    let v725: leptos::prelude::Memo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method75(
                        v718,
                        Func1::new(move |v_4: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure66((), v_4)
                        }),
                    );
                    let v731: string = Dice_ui::method10(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v725.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v733: bool = true;
                    leptos::logging::log!("{}", v731);
                    let v736 = {
                        let clo_54 = Func0::new({
                            let v723 = v723.clone();
                            let v725 = v725.clone();
                            move || Dice_ui::closure98(v723.clone(), v725.clone(), ())
                        });
                        Func1::new({
                            let clo_54 = clo_54.clone();
                            move |arg_54: ()| clo_54()
                        })
                    };
                    let v738: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v736(()));
                    let v741 = {
                        let clo_55 = Func0::new({
                            let v738 = v738.clone();
                            move || Dice_ui::closure115(v738.clone(), ())
                        });
                        Func1::new({
                            let clo_55 = clo_55.clone();
                            move |arg_55: ()| clo_55()
                        })
                    };
                    let v743: leptos::prelude::Memo<
                        Result<
                            Option<Array<(string, Dice_ui::US24, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::Memo::new(move |_| v741(()));
                    let v746 = {
                        let clo_56 = Func0::new({
                            let v743 = v743.clone();
                            move || Dice_ui::closure122(v743.clone(), ())
                        });
                        Func1::new({
                            let clo_56 = clo_56.clone();
                            move |arg_56: ()| clo_56()
                        })
                    };
                    let v756: string = Dice_ui::method10(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method149(
                                        leptos::prelude::Memo::new(move |_| { v746(()) }),
                                        Func1::new(
                                            move |v_5: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure126((), v_5)
                                            }
                                        )
                                    )
                                ),
                            )),
                            string(""),
                        ),
                    );
                    let v758: bool = true;
                    leptos::logging::log!("{}", v756);
                    let patternInput_4: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v760: leptos::prelude::ReadSignal<bool> = patternInput_4.0.clone();
                    let v762 = Func0::new({
                        let patternInput_4 = patternInput_4.clone();
                        move || Dice_ui::closure264(patternInput_4.1.clone(), ())
                    });
                    {
                        let v766 = {
                            let clo_57 = Func0::new(move || Dice_ui::closure265((), ()));
                            Func1::new({
                                let clo_57 = clo_57.clone();
                                move |arg_57: ()| clo_57()
                            })
                        };
                        let v778: string =
                                string(" class=move || \" \".to_owned() + &v766(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v781: string =
                                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
                        let v784: string = append(
                            (append(
                                (append(string(" "), (v781))),
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                            )),
                            string(""),
                        );
                        let v785: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v787: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v785);
                        let v789: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v787);
                        let v792: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v784))),
                                            string(">move || { v789 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v794: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v789 }</path> };
                        let v796: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v794);
                        let v802: string =
                                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v803: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v805: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v803);
                        let v807: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v805);
                        let v809: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v802))),
                                            string(">move || { v807 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v811: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v807 }</path> };
                        let v814: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v796, leptos::prelude::IntoAny::into_any(v811));
                        let v816: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v814);
                        let v818: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v816);
                        let v821: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v778))),
                                            string(">move || { v818 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v823: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v766(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v818 }</svg> };
                        let v828 = {
                            let clo_58 = Func0::new({
                                let v760 = v760.clone();
                                move || Dice_ui::closure266(v760.clone(), ())
                            });
                            Func1::new({
                                let clo_58 = clo_58.clone();
                                move |arg_58: ()| clo_58()
                            })
                        };
                        let v829: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v828(())");
                        let v832: string = append(
                            (append(
                                string(" aria-label=\"Settings\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v762()"),
                                        (append(
                                            (append((append(string(" "), (v829))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v835: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v823));
                        let v837: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v835);
                        let v839: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v837);
                        let v842: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v832))),
                                            string(">move || { v839 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v844: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v762() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v828(())>move || { v839 }</button> };
                        let v846: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v844);
                        let v847: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v849: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v847);
                        let v851: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v853() -> string {
                            Dice_ui::closure166((), ())
                        }
                        let v854 = {
                            let clo_59 = Func0::from(v853);
                            Func1::new({
                                let clo_59 = clo_59.clone();
                                move |arg_59: ()| clo_59()
                            })
                        };
                        fn v856() -> bool {
                            Dice_ui::closure167((), ())
                        }
                        let v857 = {
                            let clo_60 = Func0::from(v856);
                            Func1::new({
                                let clo_60 = clo_60.clone();
                                move |arg_60: ()| clo_60()
                            })
                        };
                        let v859: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v860: Vec<leptos::prelude::AnyView> = Dice_ui::method173(v846.clone());
                        let v862: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v860);
                        let v864: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v862);
                        let v867: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v859))),
                                            string(">move || { v864 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v869: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v864 }</div> };
                        let v871: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v869);
                        let v872: string =
                                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v854(())");
                        let v875: string = append(
                            (append(
                                string(" open=move || v857(())"),
                                (append(
                                    (append((append(string(" "), (v872))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v878 = {
                            let clo_61 = Func0::new(move || Dice_ui::closure267((), ()));
                            Func1::new({
                                let clo_61 = clo_61.clone();
                                move |arg_61: ()| clo_61()
                            })
                        };
                        let v881 = {
                            let clo_62 = Func0::new({
                                let v846 = v846.clone();
                                move || Dice_ui::closure268(v846.clone(), ())
                            });
                            Func1::new({
                                let clo_62 = clo_62.clone();
                                move |arg_62: ()| clo_62()
                            })
                        };
                        let v882: string =
                                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v881(()) + \" \" + &v878(())");
                        let v883: string = append(
                            (append((append(string(" "), (v882))), string(""))),
                            string(""),
                        );
                        let v885: string = string(" class=\"flex items-center gap-2\"");
                        let v888: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v889: string = (Dice_ui::method230(v846.clone()))();
                        let v894: &str = &*v889;
                        let v918: std::string::String = String::from(v894);
                        let v940: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v918),
                            ));
                        let v942: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v940);
                        let v944: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v942);
                        let v947: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v888))),
                                            string(">move || { v944 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v949: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v944 }</span> };
                        let v952: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v949));
                        let v954: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v952);
                        let v956: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v954);
                        let v958: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v885))),
                                            string(">move || { v956 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v960: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v956 }</div> };
                        let v962: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v960);
                        let v964: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v966() -> string {
                            Dice_ui::closure171((), ())
                        }
                        let v967 = {
                            let clo_63 = Func0::from(v966);
                            Func1::new({
                                let clo_63 = clo_63.clone();
                                move |arg_63: ()| clo_63()
                            })
                        };
                        let v975: string =
                                string(" class=move || \" \".to_owned() + &v967(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v977: string =
                                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v981: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v977))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v982: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v984: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v982);
                        let v986: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v984);
                        let v988: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v981))),
                                            string(">move || { v986 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v990: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v986 }</path> };
                        let v993: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v990));
                        let v995: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v993);
                        let v997: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v995);
                        let v999: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v975))),
                                            string(">move || { v997 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1001: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v967(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v997 }</svg> };
                        let v1004: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1001));
                        let v1006: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1004);
                        let v1008: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1006);
                        let v1010: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v964))),
                                            string(">move || { v1008 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1012: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v1008 }</span> };
                        let v1015: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v962, leptos::prelude::IntoAny::into_any(v1012));
                        let v1017: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1015);
                        let v1019: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1017);
                        let v1022: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v883))),
                                            string(">move || { v1019 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1024: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v881(()) + " " + &v878(())>move || { v1019 }</summary> };
                        let v1026: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1024);
                        let v1028: string = string(" class=\"flex flex-1 flex-col\"");
                        let v1032: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method184(Func0::new(move || {
                                Func0::new({
                                    let v695 = v695.clone();
                                    let v713 = v713.clone();
                                    let v738 = v738.clone();
                                    let v760 = v760.clone();
                                    move || {
                                        Dice_ui::closure270(
                                            v695.clone(),
                                            v738.clone(),
                                            v713.clone(),
                                            v760.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v1034: leptos::prelude::Fragment = (move || v1032())();
                        let v1036: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1034);
                        let v1038: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1028))),
                                            string(">move || { v1036 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1040: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v1036 }</div> };
                        let v1043: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v1026, leptos::prelude::IntoAny::into_any(v1040));
                        let v1045: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1043);
                        let v1047: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1045);
                        let v1050: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v875))),
                                            string(">move || { v1047 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1052: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v857(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v854(())>move || { v1047 }</details> };
                        let v1055: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method176(v871, leptos::prelude::IntoAny::into_any(v1052));
                        let v1057: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1055);
                        let v1059: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1057);
                        let v1061: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v851))),
                                            string(">move || { v1059 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1063: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v1059 }</div> };
                        let v1065: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1063);
                        let v1068: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::RwSignal::get_untracked(&v695.l0.clone());
                        let v1288: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                            v1065,
                            if leptos::prelude::RwSignal::get(&v1068.l1.clone()) {
                                let v1072: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1074: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1072);
                                let v1076: string =
                                    string(" class=\"flex flex-col [position:relative]\"");
                                let v1078 = {
                                    let clo_64 = Func0::from(v853);
                                    Func1::new({
                                        let clo_64 = clo_64.clone();
                                        move |arg_64: ()| clo_64()
                                    })
                                };
                                let v1080 = {
                                    let clo_65 = Func0::from(v856);
                                    Func1::new({
                                        let clo_65 = clo_65.clone();
                                        move |arg_65: ()| clo_65()
                                    })
                                };
                                let v1082: string =
                                    string(" class=\"[position:absolute] [right:0] [top:0]\"");
                                let v1083: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(v1074);
                                let v1085: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1083);
                                let v1087: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1085);
                                let v1089: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1082))),
                                                    string(">move || { v1087 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1091: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v1087 }</div> };
                                let v1093: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1091);
                                let v1094: string =
                                                           string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v1078(())");
                                let v1097: string = append(
                                    (append(
                                        string(" open=move || v1080(())"),
                                        (append(
                                            (append((append(string(" "), (v1094))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                );
                                let v1100 = {
                                    let clo_66 = Func0::new(move || Dice_ui::closure346((), ()));
                                    Func1::new({
                                        let clo_66 = clo_66.clone();
                                        move |arg_66: ()| clo_66()
                                    })
                                };
                                let v1103 = {
                                    let clo_67 = Func0::new(move || Dice_ui::closure347((), ()));
                                    Func1::new({
                                        let clo_67 = clo_67.clone();
                                        move |arg_67: ()| clo_67()
                                    })
                                };
                                let v1104: string =
                                                           string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v1103(()) + \" \" + &v1100(())");
                                let v1105: string = append(
                                    (append((append(string(" "), (v1104))), string(""))),
                                    string(""),
                                );
                                let v1107: string = string(" class=\"flex items-center gap-2\"");
                                let v1110: string =
                                                           string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
                                let v1111: string = (Dice_ui::method269())();
                                let v1116: &str = &*v1111;
                                let v1140: std::string::String = String::from(v1116);
                                let v1162: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v1140),
                                    ));
                                let v1164: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1162);
                                let v1166: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1164);
                                let v1168: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<span "), (v1110))),
                                                    string(">move || { v1166 }</"),
                                                )),
                                                string("span"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1170: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                                > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v1166 }</span> };
                                let v1173: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1170));
                                let v1175: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1173);
                                let v1177: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1175);
                                let v1179: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1107))),
                                                    string(">move || { v1177 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1181: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v1177 }</div> };
                                let v1183: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1181);
                                let v1185: string =
                                    string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                                let v1187 = {
                                    let clo_68 = Func0::from(v966);
                                    Func1::new({
                                        let clo_68 = clo_68.clone();
                                        move |arg_68: ()| clo_68()
                                    })
                                };
                                let v1195: string =
                                                           string(" class=move || \" \".to_owned() + &v1187(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                                let v1197: string =
                                                           string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                                let v1201: string = append(
                                    (append(
                                        string(" clip-rule=\"evenodd\""),
                                        (append(
                                            (append(
                                                (append(string(" "), (v1197))),
                                                string(" fill-rule=\"evenodd\""),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                );
                                let v1202: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                let v1204: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1202);
                                let v1206: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1204);
                                let v1208: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<path "), (v1201))),
                                                    string(">move || { v1206 }</"),
                                                )),
                                                string("path"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1210: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v1206 }</path> };
                                let v1213: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1210));
                                let v1215: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1213);
                                let v1217: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1215);
                                let v1219: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<svg "), (v1195))),
                                                    string(">move || { v1217 }</"),
                                                )),
                                                string("svg"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1221: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1187(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v1217 }</svg> };
                                let v1224: Vec<leptos::prelude::AnyView> =
                                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1221));
                                let v1226: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1224);
                                let v1228: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1226);
                                let v1230: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<span "), (v1185))),
                                                    string(">move || { v1228 }</"),
                                                )),
                                                string("span"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1232: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                                > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v1228 }</span> };
                                let v1235: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1183,
                                    leptos::prelude::IntoAny::into_any(v1232),
                                );
                                let v1237: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1235);
                                let v1239: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1237);
                                let v1241: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<summary "), (v1105))),
                                                    string(">move || { v1239 }</"),
                                                )),
                                                string("summary"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1243: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                                > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v1103(()) + " " + &v1100(())>move || { v1239 }</summary> };
                                let v1245: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1243);
                                let v1247: string = string(" class=\"flex flex-1 flex-col\"");
                                let v1251: Func0<leptos::prelude::Fragment> =
                                    Dice_ui::method184(Func0::new(move || {
                                        Func0::new({
                                            let v738 = v738.clone();
                                            move || Dice_ui::closure349(v738.clone(), ())
                                        })()
                                    }));
                                let v1253: leptos::prelude::Fragment = (move || v1251())();
                                let v1255: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1253);
                                let v1257: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1247))),
                                                    string(">move || { v1255 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1259: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v1255 }</div> };
                                let v1262: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1245,
                                    leptos::prelude::IntoAny::into_any(v1259),
                                );
                                let v1264: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1262);
                                let v1266: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1264);
                                let v1268: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<details "), (v1097))),
                                                    string(">move || { v1266 }</"),
                                                )),
                                                string("details"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1270: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Details, _, _>,
                                > = leptos::prelude::view! { <details  open=move || v1080(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v1078(())>move || { v1266 }</details> };
                                let v1273: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                    v1093,
                                    leptos::prelude::IntoAny::into_any(v1270),
                                );
                                let v1275: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1273);
                                let v1277: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1275);
                                let v1279: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v1076))),
                                                    string(">move || { v1277 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1281: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v1277 }</div> };
                                leptos::prelude::IntoAny::into_any(v1281)
                            } else {
                                let v1284: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                                leptos::prelude::IntoAny::into_any(v1284)
                            },
                        );
                        Dice_ui::US23::US23_0(leptos::prelude::Fragment::new(v1288))
                    }
                }
                _ => Dice_ui::US23::US23_1,
            };
            let v2064: Vec<leptos::prelude::AnyView> = Dice_ui::method173(match &v2046 {
                Dice_ui::US23::US23_0(v2046_0_0) => {
                    let v2049: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v2051: leptos::prelude::AnyView = leptos::prelude::AnyView::from(
                        match &v2046 {
                            Dice_ui::US23::US23_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v2054: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2049))),
                                        string(">move || { v2051 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2056: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v2051 }</div> };
                    leptos::prelude::IntoAny::into_any(v2056)
                }
                _ => {
                    let v2059: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    leptos::prelude::IntoAny::into_any(v2059)
                }
            });
            let v2066: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2064);
            let v2068: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2066);
            let v2071: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<main "), (v86))),
                                string(">move || { v2068 }</"),
                            )),
                            string("main"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2073: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v2068 }</main> };
            let v2075: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2073);
            let v2077: string = string(" class=\"flex\"");
            let v2080: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v2082: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v2085 = {
                let clo_69 = Func0::new({
                    let v2082 = v2082.clone();
                    move || Dice_ui::closure46(v2082.clone(), ())
                });
                Func1::new({
                    let clo_69 = clo_69.clone();
                    move |arg_69: ()| clo_69()
                })
            };
            let v2087: leptos::prelude::Memo<string> =
                leptos::prelude::Memo::new(move |_| v2085(()));
            let v2089: string = string(" class=\"hidden\"");
            let v2093: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v2099: &str = &*string("Tab");
            let v2123: std::string::String = String::from(v2099);
            let v2145: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2123)),
            );
            let v2147: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2145);
            let v2149: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2147);
            let v2152: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v2093))),
                                string(">move || { v2149 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2154: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v2149 }</label> };
            let v2156: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2154);
            let v2160: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v2161 = Dice_ui::method272(v66.clone());
            let v2163: string = string(" selected=v2161()");
            let v2169: &str = &*string("Settings");
            let v2193: std::string::String = String::from(v2169);
            let v2215: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2193)),
            );
            let v2217: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2215);
            let v2219: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2217);
            let v2222: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v2163))),
                                string(">move || { v2219 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2224: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v2161()>move || { v2219 }</option> };
            let v2226: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2224);
            let v2227 = Dice_ui::method273(v66.clone());
            let v2229: string = string(" selected=v2227()");
            let v2235: &str = &*string("Transactions");
            let v2259: std::string::String = String::from(v2235);
            let v2281: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2259)),
            );
            let v2283: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2281);
            let v2285: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2283);
            let v2287: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v2229))),
                                string(">move || { v2285 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2289: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v2227()>move || { v2285 }</option> };
            let v2291: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2289);
            let v2292 = Dice_ui::method274(v66.clone());
            let v2294: string = string(" selected=v2292()");
            let v2300: &str = &*string("Lists");
            let v2324: std::string::String = String::from(v2300);
            let v2346: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2324)),
            );
            let v2348: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2346);
            let v2350: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2348);
            let v2352: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v2294))),
                                string(">move || { v2350 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2354: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v2292()>move || { v2350 }</option> };
            let v2356: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2354);
            let v2357 = Dice_ui::method275(v66.clone());
            let v2359: string = string(" selected=v2357()");
            let v2365: &str = &*string("Dice");
            let v2389: std::string::String = String::from(v2365);
            let v2411: Vec<leptos::prelude::AnyView> = Dice_ui::method173(
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2389)),
            );
            let v2413: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2411);
            let v2415: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2413);
            let v2417: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v2359))),
                                string(">move || { v2415 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2419: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v2357()>move || { v2415 }</option> };
            let v2422: Vec<leptos::prelude::AnyView> = Dice_ui::method276(
                leptos::prelude::IntoAny::into_any(v2419),
                v2356,
                v2291,
                v2226,
            );
            let v2424: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2422);
            let v2426: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2424);
            let v2429: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<select "), (v2160))),
                                string(">move || { v2426 }</"),
                            )),
                            string("select"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2431: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Select, _, _>,
            > = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v2426 }</select> };
            let v2434: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v2156, leptos::prelude::IntoAny::into_any(v2431));
            let v2436: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2434);
            let v2438: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2436);
            let v2441: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v2089))),
                                string(">move || { v2438 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2443: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v2438 }</div> };
            let v2445: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v2447: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v2448: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v2451: string = append(
                (append(
                    string(" aria-label=\"Tabs\""),
                    (append(
                        (append((append(string(" "), (v2448))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            fn v2453() -> string {
                Dice_ui::closure357((), ())
            }
            let v2454 = {
                let clo_70 = Func0::from(v2453);
                Func1::new({
                    let clo_70 = clo_70.clone();
                    move |arg_70: ()| clo_70()
                })
            };
            let v2466: string =
                string(" class=move || \" \".to_owned() + &v2454(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v2469: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v2472: string = append(
                (append(
                    (append(string(" "), (v2469))),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                )),
                string(""),
            );
            let v2473: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
            let v2475: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2473);
            let v2477: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2475);
            let v2480: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v2472))),
                                string(">move || { v2477 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2482: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v2477 }</path> };
            let v2484: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2482);
            let v2490: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v2491: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
            let v2493: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2491);
            let v2495: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2493);
            let v2497: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v2490))),
                                string(">move || { v2495 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2499: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v2495 }</path> };
            let v2502: Vec<leptos::prelude::AnyView> =
                Dice_ui::method176(v2484, leptos::prelude::IntoAny::into_any(v2499));
            let v2504: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2502);
            let v2506: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2504);
            let v2509: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v2466))),
                                string(">move || { v2506 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v2511: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v2454(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v2506 }</svg> };
            let v2514: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v2511));
            let v2516: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2514);
            let v2517 = Func0::new({
                let v2087 = v2087.clone();
                move || Dice_ui::closure358(v2087.clone(), ())
            });
            {
                let v2521 = {
                    let clo_71 = Func0::new({
                        let v66 = v66.clone();
                        move || Dice_ui::closure359(v66.clone(), ())
                    });
                    Func1::new({
                        let clo_71 = clo_71.clone();
                        move |arg_71: ()| clo_71()
                    })
                };
                let v2524 = {
                    let clo_72 = Func0::new({
                        let v66 = v66.clone();
                        move || Dice_ui::closure360(v66.clone(), ())
                    });
                    Func1::new({
                        let clo_72 = clo_72.clone();
                        move |arg_72: ()| clo_72()
                    })
                };
                let v2526: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v2524(())");
                let v2530: string = append(
                    (append(
                        string(" aria-current=move || if v2521(()) { \"page\" } else { \"\" }"),
                        (append(
                            (append(
                                (append(string(" "), (v2526))),
                                string(" href=move || v2517()"),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v2532: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2516);
                let v2537: &str = &*string("Settings");
                let v2561: std::string::String = String::from(v2537);
                let v2583: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                    v2532,
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2561)),
                );
                let v2585: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2583);
                let v2587: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2585);
                let v2590: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<a "), (v2530))),
                                    string(">move || { v2587 }</"),
                                )),
                                string("a"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v2592: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v2521(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v2524(()) href=move || v2517()>move || { v2587 }</a> };
                let v2594: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2592);
                let v2596 = {
                    let clo_73 = Func0::from(v2453);
                    Func1::new({
                        let clo_73 = clo_73.clone();
                        move |arg_73: ()| clo_73()
                    })
                };
                let v2610: string =
                    string(" class=move || \"text-gray-700 \".to_owned() + &v2596(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v2616: string =
                    string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v2617: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                let v2619: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2617);
                let v2621: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2619);
                let v2623: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v2616))),
                                    string(">move || { v2621 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v2625: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v2621 }</path> };
                let v2628: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v2625));
                let v2630: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2628);
                let v2632: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2630);
                let v2634: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v2610))),
                                    string(">move || { v2632 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v2636: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v2596(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v2632 }</svg> };
                let v2639: Vec<leptos::prelude::AnyView> =
                    Dice_ui::method173(leptos::prelude::IntoAny::into_any(v2636));
                let v2641: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2639);
                let v2642 = Func0::new({
                    let v2087 = v2087.clone();
                    move || Dice_ui::closure361(v2087.clone(), ())
                });
                {
                    let v2646 = {
                        let clo_74 = Func0::new({
                            let v66 = v66.clone();
                            move || Dice_ui::closure362(v66.clone(), ())
                        });
                        Func1::new({
                            let clo_74 = clo_74.clone();
                            move |arg_74: ()| clo_74()
                        })
                    };
                    let v2649 = {
                        let clo_75 = Func0::new({
                            let v66 = v66.clone();
                            move || Dice_ui::closure363(v66.clone(), ())
                        });
                        Func1::new({
                            let clo_75 = clo_75.clone();
                            move |arg_75: ()| clo_75()
                        })
                    };
                    let v2651: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v2649(())");
                    let v2655: string = append(
                        (append(
                            string(" aria-current=move || if v2646(()) { \"page\" } else { \"\" }"),
                            (append(
                                (append(
                                    (append(string(" "), (v2651))),
                                    string(" href=move || v2642()"),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v2657: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2641);
                    let v2662: &str = &*string("Transactions");
                    let v2686: std::string::String = String::from(v2662);
                    let v2708: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                        v2657,
                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(
                            v2686,
                        )),
                    );
                    let v2710: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2708);
                    let v2712: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2710);
                    let v2714: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<a "), (v2655))),
                                        string(">move || { v2712 }</"),
                                    )),
                                    string("a"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2716: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v2646(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v2649(()) href=move || v2642()>move || { v2712 }</a> };
                    let v2718: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2716);
                    let v2720 = {
                        let clo_76 = Func0::from(v2453);
                        Func1::new({
                            let clo_76 = clo_76.clone();
                            move |arg_76: ()| clo_76()
                        })
                    };
                    let v2734: string =
                        string(" class=move || \"text-gray-700 \".to_owned() + &v2720(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v2740: string =
                        string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v2741: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v2743: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2741);
                    let v2745: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2743);
                    let v2747: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v2740))),
                                        string(">move || { v2745 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2749: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v2745 }</path> };
                    let v2751: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2749);
                    let v2759: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
                    let v2760: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v2762: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2760);
                    let v2764: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2762);
                    let v2767: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v2759))),
                                        string(">move || { v2764 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2769: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v2764 }</circle> };
                    let v2771: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2769);
                    let v2779: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
                    let v2780: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v2782: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2780);
                    let v2784: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2782);
                    let v2786: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v2779))),
                                        string(">move || { v2784 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2788: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v2784 }</circle> };
                    let v2790: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2788);
                    let v2798: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
                    let v2799: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                    let v2801: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2799);
                    let v2803: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2801);
                    let v2805: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v2798))),
                                        string(">move || { v2803 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2807: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v2803 }</circle> };
                    let v2810: Vec<leptos::prelude::AnyView> = Dice_ui::method276(
                        v2751,
                        v2771,
                        v2790,
                        leptos::prelude::IntoAny::into_any(v2807),
                    );
                    let v2812: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2810);
                    let v2814: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2812);
                    let v2816: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v2734))),
                                        string(">move || { v2814 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2818: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v2720(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v2814 }</svg> };
                    let v2821: Vec<leptos::prelude::AnyView> =
                        Dice_ui::method173(leptos::prelude::IntoAny::into_any(v2818));
                    let v2823: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2821);
                    let v2824 = Func0::new({
                        let v2087 = v2087.clone();
                        move || Dice_ui::closure364(v2087.clone(), ())
                    });
                    {
                        let v2828 = {
                            let clo_77 = Func0::new({
                                let v66 = v66.clone();
                                move || Dice_ui::closure365(v66.clone(), ())
                            });
                            Func1::new({
                                let clo_77 = clo_77.clone();
                                move |arg_77: ()| clo_77()
                            })
                        };
                        let v2831 = {
                            let clo_78 = Func0::new({
                                let v66 = v66.clone();
                                move || Dice_ui::closure366(v66.clone(), ())
                            });
                            Func1::new({
                                let clo_78 = clo_78.clone();
                                move |arg_78: ()| clo_78()
                            })
                        };
                        let v2833: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v2831(())");
                        let v2837: string = append(
                            (append(
                                string(
                                    " aria-current=move || if v2828(()) { \"page\" } else { \"\" }",
                                ),
                                (append(
                                    (append(
                                        (append(string(" "), (v2833))),
                                        string(" href=move || v2824()"),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v2839: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2823);
                        let v2844: &str = &*string("Lists");
                        let v2868: std::string::String = String::from(v2844);
                        let v2890: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                            v2839,
                            leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v2868),
                            ),
                        );
                        let v2892: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2890);
                        let v2894: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2892);
                        let v2896: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<a "), (v2837))),
                                            string(">move || { v2894 }</"),
                                        )),
                                        string("a"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2898: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v2828(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v2831(()) href=move || v2824()>move || { v2894 }</a> };
                        let v2900: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2898);
                        let v2902 = {
                            let clo_79 = Func0::from(v2453);
                            Func1::new({
                                let clo_79 = clo_79.clone();
                                move |arg_79: ()| clo_79()
                            })
                        };
                        let v2914: string =
                            string(" class=move || \" \".to_owned() + &v2902(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v2928: string =
                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
                        let v2929: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v2931: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2929);
                        let v2933: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2931);
                        let v2936: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v2928))),
                                            string(">move || { v2933 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2938: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v2933 }</rect> };
                        let v2940: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2938);
                        let v2948: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
                        let v2949: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v2951: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2949);
                        let v2953: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2951);
                        let v2955: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v2948))),
                                            string(">move || { v2953 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2957: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v2953 }</circle> };
                        let v2959: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2957);
                        let v2967: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
                        let v2968: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v2970: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2968);
                        let v2972: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2970);
                        let v2974: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v2967))),
                                            string(">move || { v2972 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2976: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v2972 }</circle> };
                        let v2978: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2976);
                        let v2986: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
                        let v2987: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v2989: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2987);
                        let v2991: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2989);
                        let v2993: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v2986))),
                                            string(">move || { v2991 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2995: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v2991 }</circle> };
                        let v2997: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2995);
                        let v3005: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
                        let v3006: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v3008: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3006);
                        let v3010: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3008);
                        let v3012: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v3005))),
                                            string(">move || { v3010 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3014: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v3010 }</circle> };
                        let v3016: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3014);
                        let v3024: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
                        let v3025: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
                        let v3027: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3025);
                        let v3029: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3027);
                        let v3031: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v3024))),
                                            string(">move || { v3029 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3033: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v3029 }</circle> };
                        let v3036: Vec<leptos::prelude::AnyView> = Dice_ui::method192(
                            v2940,
                            v2959,
                            v2978,
                            v2997,
                            v3016,
                            leptos::prelude::IntoAny::into_any(v3033),
                        );
                        let v3038: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3036);
                        let v3040: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3038);
                        let v3042: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v2914))),
                                            string(">move || { v3040 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3044: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v2902(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3040 }</svg> };
                        let v3047: Vec<leptos::prelude::AnyView> =
                            Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3044));
                        let v3049: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3047);
                        let v3050 = Func0::new({
                            let v2087 = v2087.clone();
                            move || Dice_ui::closure367(v2087.clone(), ())
                        });
                        {
                            let v3054 = {
                                let clo_80 = Func0::new({
                                    let v66 = v66.clone();
                                    move || Dice_ui::closure368(v66.clone(), ())
                                });
                                Func1::new({
                                    let clo_80 = clo_80.clone();
                                    move |arg_80: ()| clo_80()
                                })
                            };
                            let v3057 = {
                                let clo_81 = Func0::new({
                                    let v66 = v66.clone();
                                    move || Dice_ui::closure369(v66.clone(), ())
                                });
                                Func1::new({
                                    let clo_81 = clo_81.clone();
                                    move |arg_81: ()| clo_81()
                                })
                            };
                            let v3059: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v3057(())");
                            let v3063: string =
                                append((append(string(" aria-current=move || if v3054(()) { \"page\" } else { \"\" }"),
                                               (append((append((append(string(" "),
                                                                       (v3059))),
                                                               string(" href=move || v3050()"))),
                                                       string(""))))),
                                       string(""));
                            let v3065: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3049);
                            let v3070: &str = &*string("Dice");
                            let v3094: std::string::String = String::from(v3070);
                            let v3116: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                v3065,
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v3094),
                                ),
                            );
                            let v3118: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3116);
                            let v3120: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3118);
                            let v3122: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<a "), (v3063))),
                                                string(">move || { v3120 }</"),
                                            )),
                                            string("a"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3124: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v3054(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v3057(()) href=move || v3050()>move || { v3120 }</a> };
                            let v3127: Vec<leptos::prelude::AnyView> = Dice_ui::method276(
                                leptos::prelude::IntoAny::into_any(v3124),
                                v2900,
                                v2718,
                                v2594,
                            );
                            let v3129: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3127);
                            let v3131: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3129);
                            let v3134: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<nav "), (v2451))),
                                                string(">move || { v3131 }</"),
                                            )),
                                            string("nav"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3136: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Nav, _, _>,
                            > = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v3131 }</nav> };
                            let v3139: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3136));
                            let v3141: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3139);
                            let v3143: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3141);
                            let v3145: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2447))),
                                                string(">move || { v3143 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3147: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v3143 }</div> };
                            let v3150: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3147));
                            let v3152: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3150);
                            let v3154: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3152);
                            let v3156: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2445))),
                                                string(">move || { v3154 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3158: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v3154 }</div> };
                            let v3160: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3158);
                            let v3163: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                leptos::prelude::IntoAny::into_any(v2443),
                                v3160,
                            );
                            let v3165: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3163);
                            let v3167: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3165);
                            let v3169: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2077))),
                                                string(">move || { v3167 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3171: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex">move || { v3167 }</div> };
                            let v3174: Vec<leptos::prelude::AnyView> = Dice_ui::method176(
                                v2075,
                                leptos::prelude::IntoAny::into_any(v3171),
                            );
                            let v3176: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3174);
                            let v3178: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3176);
                            let v3180: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v84))),
                                                string(">move || { v3178 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3182: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v3178 }</div> };
                            let v3185: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3182));
                            let v3187: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3185);
                            let v3189: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3187);
                            let v3191: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v82))),
                                                string(">move || { v3189 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3193: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v3189 }</div> };
                            let v3196: Vec<leptos::prelude::AnyView> =
                                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v3193));
                            let v3198: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3196);
                            let v3200: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3198);
                            let v3202: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v45))),
                                                string(">move || { v3200 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            leptos::prelude::view! { <div  class:dark={move || v40()} class="flex flex-1">move || { v3200 }</div> }
                        }
                    }
                }
            }
        }
        pub fn method5(
        ) -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method277(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure370(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v4: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1));
            let v6: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4);
            leptos::prelude::AnyView::from(v6)
        }
        pub fn method278(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure370(v0_1.clone(), ())
            })
        }
        pub fn closure371(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1: Vec<leptos::prelude::AnyView> = Dice_ui::method172();
            leptos::prelude::Fragment::new(v0_1)
        }
        pub fn closure372(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v4: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1));
            let v6: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4);
            leptos::prelude::AnyView::from(v6)
        }
        pub fn method279(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure372(v0_1.clone(), ())
            })
        }
        pub fn closure373(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v4: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1));
            let v6: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4);
            leptos::prelude::AnyView::from(v6)
        }
        pub fn method280(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure373(v0_1.clone(), ())
            })
        }
        pub fn closure374(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v4: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v1));
            let v6: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4);
            leptos::prelude::AnyView::from(v6)
        }
        pub fn method281(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure374(v0_1.clone(), ())
            })
        }
        pub fn method283(
            v0_1: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>,
        ) -> leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> {
            v0_1
        }
        pub fn method282(
            v0_1: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>,
            v1: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>,
            v2: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>,
            v3: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>,
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v4: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method283(v3);
            let v8: string = string("v4");
            let v9: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method283(v2);
            let v13: string = append(string("v9, "), (v8));
            let v14: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method283(v1);
            let v17: string = append(string("v14, "), (v13));
            let v18: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                Dice_ui::method283(v0_1);
            let v22: string = append(
                (append(string("vec!["), (append(string("v18, "), (v17))))),
                string("]"),
            );
            vec![v18, v14, v9, v4]
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method5();
            let v6: &str = &*string("");
            let v50: std::string::String = Dice_ui::method277(String::from(v6));
            let v51 = Dice_ui::method278(v0_1.clone());
            let v61: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router_macro::path!(v50) /> })");
            let v62: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router_macro::path!(v50) /> },
                );
            let v68: &str = &*string("/");
            let v112: std::string::String = Dice_ui::method277(String::from(v68));
            let v113 = Dice_ui::method279(v0_1.clone());
            let v121: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router_macro::path!(v112) /> })");
            let v122: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router_macro::path!(v112) /> },
                );
            let v128: &str = &*string("/*");
            let v172: std::string::String = Dice_ui::method277(String::from(v128));
            let v173 = Dice_ui::method280(v0_1.clone());
            let v181: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router_macro::path!(v172) /> })");
            let v182: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router_macro::path!(v172) /> },
                );
            let v188: &str = &*string("*");
            let v232: std::string::String = Dice_ui::method277(String::from(v188));
            let v233 = Dice_ui::method281(v0_1);
            let v241: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router_macro::path!(v232) /> })");
            Dice_ui::method282(
                v62,
                v122,
                v182,
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router_macro::path!(v232) /> },
                ),
            )
        }
        pub fn method4() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method284(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method284(Dice_ui::method4());
            let v7: &str = &*string("leptos.routes / fallback");
            let v31: std::string::String = String::from(v7);
            let v52: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v31));
            let v60: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> })");
            let v61 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> },
            );
            let v64: Vec<leptos::prelude::AnyView> =
                Dice_ui::method173(leptos::prelude::IntoAny::into_any(v61));
            leptos::prelude::Fragment::new(v64)
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::RwSignal<bool> = leptos::prelude::RwSignal::new(false);
            let v8: leptos::prelude::RwSignal<bool> = leptos::prelude::RwSignal::new(false);
            let v14: &str = &*string("");
            let v38: std::string::String = String::from(v14);
            let v59: leptos::prelude::RwSignal<std::string::String> =
                leptos::prelude::RwSignal::new(v38);
            let v65: &str = &*string("i574n.near");
            let v89: std::string::String = String::from(v65);
            let v115: &str = &*string("luckier.near");
            let v160: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v89)),
                LrcPtr::new((true, String::from(v115))),
            ]);
            let v165: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v160.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v168: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v59,
                l3: leptos::prelude::RwSignal::new(v165),
            });
            let v170: leptos::prelude::RwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::RwSignal::new(v168);
            let v172: std::collections::HashMap<
                std::string::String,
                leptos::prelude::RwSignal<bool>,
            > = std::collections::HashMap::new();
            let v175: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v170,
                l1: leptos::prelude::RwSignal::new(v172),
            });
            let v177: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v175);
            let v183: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> })");
            let v184 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> },
            );
            leptos::prelude::IntoAny::into_any(v184)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure375(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method285() -> Func0<()> {
            Func0::new(move || Dice_ui::closure375((), ()))
        }
        pub fn method286(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(
                (append(string("main / args: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v21: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v28: string = append(
                    (append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v21.clone()),
                    )),
                    string(""),
                );
                let v30: bool = true;
                leptos::logging::log!("{}", v28);
                if let Dice_ui::US0::US0_0(v21_0_0) = &v21 {
                    let v32: string = Dice_ui::method1();
                    let v37: &str = &*v32;
                    let v57: web_sys::HtmlElement = Dice_ui::method2(v21_0_0.clone());
                    v57.set_inner_html(v37);
                    Dice_ui::method3()
                } else {
                    let v59 = Dice_ui::method285();
                    let v62: Box<dyn Fn()> = Dice_ui::method286(Box::new(move || v59()));
                    let v64: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v62);
                    let v66: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v64);
                    let v68: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v66);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v68)
                        .unwrap();
                    v64.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_75bc3c80::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_6140596b;
pub use module_6140596b::*;
#[path = "../../deps/polyglot/lib/spiral/async__wasm.rs"]
mod module_daedefb8;
pub use module_daedefb8::*;
#[path = "../../deps/polyglot/lib/spiral/common_wasm.rs"]
mod module_70286a4c;
pub use module_70286a4c::*;
#[path = "../../deps/polyglot/lib/spiral/crypto_wasm.rs"]
mod module_4a98a962;
pub use module_4a98a962::*;
#[path = "../../deps/polyglot/lib/spiral/date_time_wasm.rs"]
mod module_94ca555f;
pub use module_94ca555f::*;
#[path = "../../deps/polyglot/lib/spiral/file_system_wasm.rs"]
mod module_b697ea1d;
pub use module_b697ea1d::*;
#[path = "../../deps/polyglot/lib/spiral/lib_wasm.rs"]
mod module_ed8da8a6;
pub use module_ed8da8a6::*;
#[path = "../../deps/polyglot/lib/spiral/networking_wasm.rs"]
mod module_9dd8007f;
pub use module_9dd8007f::*;
#[path = "../../deps/polyglot/lib/spiral/platform_wasm.rs"]
mod module_4c4781e;
pub use module_4c4781e::*;
#[path = "../../deps/polyglot/lib/spiral/runtime_wasm.rs"]
mod module_c40559dd;
pub use module_c40559dd::*;
#[path = "../../deps/polyglot/lib/spiral/sm_wasm.rs"]
mod module_fc92da1f;
pub use module_fc92da1f::*;
#[path = "../../deps/polyglot/lib/spiral/threading_wasm.rs"]
mod module_af40e92f;
pub use module_af40e92f::*;
#[path = "../../deps/polyglot/lib/spiral/trace_wasm.rs"]
mod module_981750e0;
pub use module_981750e0::*;
pub mod Polyglot {
    // pub use crate::module_6140596b::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
