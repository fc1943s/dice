#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_9c940d83 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::ofArray as ofArray_1;
        use fable_library_rust::List_::List;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::getZero;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Hash,
            PartialEq,
            PartialOrd,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::ArcRwSignal<bool>,
            pub l1: leptos::prelude::ArcRwSignal<bool>,
            pub l2: leptos::prelude::ArcRwSignal<std::string::String>,
            pub l3: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::ArcRwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US2 {
            US2_0(std::sync::Arc<rexie::Rexie>),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US3_1,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(wasm_bindgen::JsValue),
            US4_1,
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(serde_json::Value),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US6_1(std::string::String),
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(LrcPtr<Dice_ui::Heap3>),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(Dice_ui::US8),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Option<web_sys::Storage>),
            US9_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(web_sys::Storage),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Dice_ui::US11),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(Option<std::string::String>),
            US12_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::string::String),
            US14_1,
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Dice_ui::US14),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(Dice_ui::US14),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(leptos::prelude::ArcRwSignal<bool>),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(bool),
            US17_1,
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US19 {
            US19_0,
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0,
            US18_1(Dice_ui::US19),
            US18_2,
            US18_3,
            US18_4,
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(leptos_router::location::Url),
            US20_1(std::string::String),
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US21 {
            US21_0(Dice_ui::US18),
            US21_1,
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(leptos::prelude::Fragment),
            US22_1,
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US23 {
            US23_0,
            US23_1,
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH0 {
            UH0_0,
            UH0_1(
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
                LrcPtr<Dice_ui::UH0>,
            ),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(Vec<string>, LrcPtr<Dice_ui::UH1>),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(LrcPtr<Dice_ui::Heap4>),
            US25_1,
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US26 {
            US26_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US26_1,
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Vec<Dice_ui::US25>),
            US28_1(std::string::String),
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Dice_ui::US28),
            US27_1,
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US31 {
            US31_0(string),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1(std::string::String),
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Dice_ui::US30),
            US29_1,
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(Dice_ui::US25),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Option<string>),
            US33_1(std::string::String),
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Vec<()>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Array<Dice_ui::US25>),
            US36_1(std::string::String),
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Dice_ui::US36),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Result<Vec<Option<string>>, std::string::String>),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Vec<Option<string>>),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US38 {
            US38_0(Dice_ui::US39),
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Vec<Dice_ui::US31>),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Dice_ui::US41),
            US40_1,
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Dice_ui::US31),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(Dice_ui::US45),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US47_1,
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(Dice_ui::US47),
            US46_1(std::string::String),
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US49_1,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Dice_ui::US49),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
                LrcPtr<Dice_ui::UH2>,
            ),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<LrcPtr<Dice_ui::UH2>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US55 {
            US55_0(Array<(string, Dice_ui::US23, string, bool, bool)>),
            US55_1,
        }
        impl core::fmt::Display for US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Dice_ui::US55),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(Option<Array<(string, Dice_ui::US23, string, bool, bool)>>),
            US56_1(std::string::String),
        }
        impl core::fmt::Display for US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Dice_ui::US14),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US59_1,
        }
        impl core::fmt::Display for US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(Dice_ui::US59),
            US58_1(std::string::String),
        }
        impl core::fmt::Display for US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(crate::model::near::rpc::RpcResponse),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(Dice_ui::US58),
            US62_1,
        }
        impl core::fmt::Display for US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US63_1(std::string::String),
        }
        impl core::fmt::Display for US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US64_1,
        }
        impl core::fmt::Display for US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(leptos::prelude::ArcMemo<Dice_ui::US31>),
            US65_1,
        }
        impl core::fmt::Display for US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            ),
            US66_1,
        }
        impl core::fmt::Display for US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(chrono::DateTime<chrono::Utc>),
            US68_1,
        }
        impl core::fmt::Display for US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US69 {
            US69_0(string),
            US69_1(string),
        }
        impl core::fmt::Display for US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US31>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0(std::string::String),
            US70_1(std::string::String),
        }
        impl core::fmt::Display for US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method6() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure6((), v))
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method7() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure7((), v))
        }
        pub fn method8(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if (v2) <= (v0_1) {
                v1.clone()
            } else {
                let v8: f64 = (v0_1 as f64) / 2.0_f64;
                let v12: i64 = v8.ceil() as i64;
                let v18: i64 = v8.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some(((v12) - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some(((v2) - (v18)) as i32), Some(((v2) - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn closure8(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
                                            */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v7: */
                std::sync::Arc<rexie::Rexie>, /* = getZero();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v13: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v15: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v17: &std::sync::Arc<rexie::Rexie> = &v15.0;
                    let v19: &std::sync::Arc<rexie::Rexie> = &v13.0;
                    let v21: bool = std::sync::Arc::ptr_eq(v19, v17);
                    v21 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US2 {
            Dice_ui::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US2> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure9((), v))
        }
        pub fn method10(
            v0_1: Func1<string, std::string::String>,
        ) -> Func1<string, std::string::String> {
            v0_1
        }
        pub fn closure10(
            v0_1: Func1<string, std::string::String>,
            v1: string,
        ) -> std::string::String {
            let v2: Func1<string, std::string::String> = Dice_ui::method10(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method11(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure11(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method12() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure11((), v))
        }
        pub fn method13() -> string {
            string("store")
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method14() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn method15() -> string {
            string("core-state-heap")
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method16() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn closure14(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method17() -> Func1<wasm_bindgen::JsValue, Dice_ui::US4> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure14((), v))
        }
        pub fn method18(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure15(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method19() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method20() -> Func1<serde_json::Value, Dice_ui::US5> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v))
        }
        pub fn method21(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method22() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method23() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure18((), v))
        }
        pub fn closure19(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method24() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US6> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: std::string::String) -> Dice_ui::US6 {
            Dice_ui::US6::US6_1(v0_1)
        }
        pub fn method25() -> Func1<std::string::String, Dice_ui::US6> {
            Func1::new(move |v: std::string::String| Dice_ui::closure20((), v))
        }
        pub fn closure21(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method26() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US3> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method27() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US8> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure22((), v))
        }
        pub fn method28() -> web_sys::Window {
            leptos::prelude::window()
        }
        pub fn method29(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure23(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method30() -> Func1<Option<web_sys::Storage>, Dice_ui::US9> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US9 {
            Dice_ui::US9::US9_1(v0_1)
        }
        pub fn method31() -> Func1<wasm_bindgen::JsValue, Dice_ui::US9> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure24((), v))
        }
        pub fn closure25(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US11 {
            Dice_ui::US11::US11_0(v0_1)
        }
        pub fn method32() -> Func1<web_sys::Storage, Dice_ui::US11> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure25((), v))
        }
        pub fn closure26(unitVar: (), v0_1: Dice_ui::US8) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method33() -> Func1<Dice_ui::US8, Dice_ui::US7> {
            Func1::new(move |v: Dice_ui::US8| Dice_ui::closure26((), v))
        }
        pub fn method34(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method35() -> string {
            string("core-state-heap")
        }
        pub fn closure27(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method36() -> Func1<Option<std::string::String>, Dice_ui::US12> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure27((), v))
        }
        pub fn closure28(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US12 {
            Dice_ui::US12::US12_1(v0_1)
        }
        pub fn method37() -> Func1<wasm_bindgen::JsValue, Dice_ui::US12> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure28((), v))
        }
        pub fn method38(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure29(unitVar: (), v0_1: std::string::String) -> Dice_ui::US14 {
            Dice_ui::US14::US14_0(v0_1)
        }
        pub fn method39() -> Func1<std::string::String, Dice_ui::US14> {
            Func1::new(move |v: std::string::String| Dice_ui::closure29((), v))
        }
        pub fn method41(v0_1: string) -> string {
            v0_1
        }
        pub fn closure31(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method42() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure31((), v))
        }
        pub fn closure30(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            let v3: string = Dice_ui::method41(fable_library_rust::String_::fromString(v0_1));
            let v8: &str = &*v3;
            let v29: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v8);
            let v30 = Dice_ui::method42();
            let v35: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v29.map_err(|x| v30(x));
            let v49: Option<LrcPtr<Dice_ui::Heap3>> = v35.ok();
            defaultValue(Dice_ui::US8::US8_1, map(Dice_ui::method27(), v49))
        }
        pub fn method40() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure30((), v))
        }
        pub fn closure32(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure33(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l1
        }
        pub fn closure34(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l2.clone()
        }
        pub fn closure35(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure36(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading new_arc_memo")
            );
            let v6: std::pin::Pin<
                Box<
                    leptos::prelude::ArcRwSignal<
                        std::collections::HashMap<
                            std::string::String,
                            leptos::prelude::ArcRwSignal<bool>,
                        >,
                    >,
                >,
            > = Box::pin(v0_1.l1.clone());
            leptos::prelude::ArcRwSignal::get_untracked(&v6)
        }
        pub fn method43() -> string {
            string("core-state-heap")
        }
        pub fn method44(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
        ) -> Func1<LrcPtr<Dice_ui::Heap3>, std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>>
        {
            v0_1
        }
        pub fn closure37(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = Dice_ui::method44(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method45(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure38(unitVar: (), v0_1: leptos::prelude::ArcRwSignal<bool>) -> Dice_ui::US16 {
            Dice_ui::US16::US16_0(v0_1)
        }
        pub fn method46() -> Func1<leptos::prelude::ArcRwSignal<bool>, Dice_ui::US16> {
            Func1::new(move |v: leptos::prelude::ArcRwSignal<bool>| Dice_ui::closure38((), v))
        }
        pub fn closure39(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method47(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method48() -> string {
            string("core-state-heap")
        }
        pub fn method49(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure40(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method50(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure40(v0_1.clone(), ())
            })
        }
        pub fn closure41(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = leptos::prelude::Memo::get(&v2);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = leptos::prelude::Memo::get(&v8);
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                (v6),
                (if (v12.clone()) == string("") {
                    string("")
                } else {
                    concat(new_array(&[string("?"), v12]))
                }),
            )
        }
        pub fn method51(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method52(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure42(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US20 {
            Dice_ui::US20::US20_0(v0_1)
        }
        pub fn method53() -> Func1<leptos_router::location::Url, Dice_ui::US20> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure42((), v))
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Dice_ui::US20 {
            Dice_ui::US20::US20_1(v0_1)
        }
        pub fn method54() -> Func1<std::string::String, Dice_ui::US20> {
            Func1::new(move |v: std::string::String| Dice_ui::closure43((), v))
        }
        pub fn closure45(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method55() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure45((), arg10_0040)
            })
        }
        pub fn method56(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure44(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v5.l3.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v8);
            let v13: bool = true;
            let _vec_map: Vec<_> = v10
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    //;
                    let v15: LrcPtr<(bool, std::string::String)> = x;
                    let v23: bool = true;
                    v15.0.clone()
                })
                .collect::<Vec<_>>();
            let v25: Vec<(bool, std::string::String)> = _vec_map;
            let v26 = Dice_ui::method55();
            let v27: Vec<(bool, std::string::String)> = Dice_ui::method56(v25);
            let v29: Vec<(bool, std::string::String)> = v27
                .into_iter()
                .filter(|x| v26(x.clone().clone()))
                .collect::<Vec<_>>();
            let v31: bool = true;
            let _vec_map: Vec<_> = v29
                .into_iter()
                .map(|x| {
                    //;
                    let patternInput: (bool, std::string::String) = x;
                    let v36: bool = true;
                    patternInput.1.clone()
                })
                .collect::<Vec<_>>();
            let v38: Vec<std::string::String> = _vec_map;
            let v40: bool = true;
            let _vec_map: Vec<_> = v38
                .into_iter()
                .map(|x| {
                    //;
                    let v42: std::string::String = x;
                    let v44: string = fable_library_rust::String_::fromString(v42);
                    let v46: bool = true;
                    v44
                })
                .collect::<Vec<_>>();
            let v48: Vec<string> = _vec_map;
            let v54: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("use_transactions.render (2) / accounts new_arc_memo / result: "),
                        sprintf!("{:?}", v48.clone()),
                    )),
                    string(""),
                ),
            );
            let v56: bool = true;
            leptos::logging::log!("{}", v54);
            v48
        }
        pub fn method57(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure47(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
            v1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<string, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method57(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn closure46(
            v0_1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<string> = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v8: string = append(
                    (append(string("https://api3.nearblocks.io/v1/account/"), (value))),
                    string(""),
                );
                let v13: bool = true;
                (v8, Dice_ui::US23::US23_0, string(""), false, true) /*;
                                                                     let v15: bool = */
            }); //;
            let v17: Func1<string, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v3;
            let v20: Vec<(string, Dice_ui::US23, string, bool, bool)> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v17 = v17.clone();
                        move |v: string| Dice_ui::closure47(v17.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<(string, Dice_ui::US23, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v20.clone());
            let v28: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (3) / accounts_metadata new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v22.clone()))),
                                        string("")));
            let v30: bool = true;
            leptos::logging::log!("{}", v28);
            v22
        }
        pub fn method59(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method58(v0_1: LrcPtr<Dice_ui::Heap0>) -> Vec<i32> {
            let v1: i32 = v0_1.l3;
            let v2: Array<i32> = new_init(&0_i32, v1);
            let v3: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method59(v1, v3.clone()) {
                let v5: i32 = v3.l0.get().clone();
                v2.get_mut()[v5 as usize] = v5;
                {
                    let v6: i32 = (v5) + 1_i32;
                    v3.l0.set(v6);
                    ()
                }
            }
            v2.clone().to_vec()
        }
        pub fn method60(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<i32, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure49(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
            v1: i32,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method60(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn method61(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
        ) -> Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            v0_1
        }
        pub fn closure50(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) {
            let v2: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                Dice_ui::method61(v0_1);
            let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure48(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v6.l3.clone());
            let v11: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v9);
            let v13: Vec<string> = leptos::prelude::ArcMemo::get(&v1);
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: string = value;
                let v19: Vec<i32> = Dice_ui::method58(v11);
                let v22: bool = true;
                let _func1_from_v20 = Func1::from(move |value| {
                    //;
                    let v26: string = append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string("https://api3.nearblocks.io/v1/account/"),
                                            (v18.clone()),
                                        )),
                                        string("/txns?&order=desc&page="),
                                    )),
                                    (toString((value) + 1_i32)),
                                )),
                                string("&per_page="),
                            )),
                            (toString(25_i32)),
                        )),
                        string(""),
                    );
                    let v31: bool = true;
                    (v26, Dice_ui::US23::US23_0, string(""), false, true) /*;
                                                                          let v33: bool = */
                }); //;
                let v35: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v20;
                let v38: Vec<(string, Dice_ui::US23, string, bool, bool)> = v19
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v35 = v35.clone();
                            move |v: i32| Dice_ui::closure49(v35.clone(), v)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v41: bool = true;
                (v18, v38) /*;
                           let v43: bool = */
            }); //;
            let v45: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                _func1_from_v14;
            let v48: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v45 = v45.clone();
                        move |v_1: string| Dice_ui::closure50(v45.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v54: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (4) / accounts_requests new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v48.clone()))),
                                        string("")));
            let v56: bool = true;
            leptos::logging::log!("{}", v54);
            v48
        }
        pub fn method62(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
        ) -> Func1<
            (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
        > {
            v0_1
        }
        pub fn closure52(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v3: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = Dice_ui::method62(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure54(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
            v1: LrcPtr<Dice_ui::UH0>,
        ) -> LrcPtr<Dice_ui::UH0> {
            LrcPtr::new(Dice_ui::UH0::UH0_1(v0_1, v1))
        }
        pub fn closure53(
            unitVar: (),
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH0>| Dice_ui::closure54(v0_1.clone(), v)
            })
        }
        pub fn method63() -> Func1<
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
            Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>>,
        > {
            Func1::new(move |v: Vec<(string, Dice_ui::US23, string, bool, bool)>| {
                Dice_ui::closure53((), v)
            })
        }
        pub fn method65(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method66(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method64(
            v0_1: LrcPtr<Dice_ui::UH0>,
            v1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH0>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                MutCell::new(v1.clone());
            '_method64: loop {
                break '_method64 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH0::UH0_0 => v1.get().clone(),
                    Dice_ui::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method65(
                                match v0_1.get().clone().as_ref() {
                                    Dice_ui::UH0::UH0_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            );
                        let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method66(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH0> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH0::UH0_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<(string, Dice_ui::US23, string, bool, bool)> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method64;
                        }
                    }
                });
            }
        }
        pub fn closure51(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                patternInput.1.clone() /*;
                                       let v13: bool = */
            }); //;
            let v15: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = _func1_from_v3;
            let v18: Vec<Vec<(string, Dice_ui::US23, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v15 = v15.clone();
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure52(v15.clone(), arg10_0040)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v21: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US23, string, bool, bool)>().to_vec();
            let v24: List<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v18.clone()));
            let v54: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method64(
                foldBack(
                    Func2::new(
                        move |b0: Vec<(string, Dice_ui::US23, string, bool, bool)>,
                              b1: LrcPtr<Dice_ui::UH0>| {
                            (Dice_ui::method63())(b0)(b1)
                        },
                    ),
                    v24,
                    LrcPtr::new(Dice_ui::UH0::UH0_0),
                ),
                v21,
            );
            let v60: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (5) / txns_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v54.clone()),
                    )),
                    string(""),
                ),
            );
            let v62: bool = true;
            leptos::logging::log!("{}", v60);
            v54
        }
        pub fn method67(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
        ) -> Func1<(string, Dice_ui::US23, string, bool, bool), string> {
            v0_1
        }
        pub fn closure56(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> string {
            let v6: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                Dice_ui::method67(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method68(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
        ) -> Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>
        {
            v0_1
        }
        pub fn closure57(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<string> {
            let v3: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>> =
                Dice_ui::method68(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure59(v0_1: Vec<string>, v1: LrcPtr<Dice_ui::UH1>) -> LrcPtr<Dice_ui::UH1> {
            LrcPtr::new(Dice_ui::UH1::UH1_1(v0_1, v1))
        }
        pub fn closure58(
            unitVar: (),
            v0_1: Vec<string>,
        ) -> Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH1>| Dice_ui::closure59(v0_1.clone(), v)
            })
        }
        pub fn method69() -> Func1<Vec<string>, Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>>> {
            Func1::new(move |v: Vec<string>| Dice_ui::closure58((), v))
        }
        pub fn method71(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method72(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method70(v0_1: LrcPtr<Dice_ui::UH1>, v1: Vec<string>) -> Vec<string> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH1>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<string>> = MutCell::new(v1.clone());
            '_method70: loop {
                break '_method70 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH1::UH1_0 => v1.get().clone(),
                    Dice_ui::UH1::UH1_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<string> = Dice_ui::method71(
                            match v0_1.get().clone().as_ref() {
                                Dice_ui::UH1::UH1_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v5: Vec<string> = Dice_ui::method72(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH1> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH1::UH1_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<string> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method70;
                        }
                    }
                });
            }
        }
        pub fn closure55(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                let _func1_from_v9 = Func1::from(move |value| {
                    //;
                    let patternInput_1: (string, Dice_ui::US23, string, bool, bool) = value;
                    let v20: bool = true;
                    patternInput.0.clone() /*;
                                           let v22: bool = */
                }); //;
                let v24: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                    _func1_from_v9;
                let v27: Vec<string> = patternInput
                    .1
                    .clone()
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v24 = v24.clone();
                            move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                                Dice_ui::closure56(v24.clone(), arg10_0040)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v30: bool = true;
                v27 /*;
                    let v32: bool = */
            }); //;
            let v34: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<string>,
            > = _func1_from_v3;
            let v37: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v34 = v34.clone();
                        move |arg10_0040_1: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure57(v34.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v40: Vec<string> = new_empty::<string>().to_vec();
            let v43: List<Vec<string>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v37.clone()));
            let v73: Vec<string> = Dice_ui::method70(
                foldBack(
                    Func2::new(move |b0: Vec<string>, b1: LrcPtr<Dice_ui::UH1>| {
                        (Dice_ui::method69())(b0)(b1)
                    }),
                    v43,
                    LrcPtr::new(Dice_ui::UH1::UH1_0),
                ),
                v40,
            );
            let v75: Array<string> = fable_library_rust::NativeArray_::array_from(v73.clone());
            let v81: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (6) / urls_accounts new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v75.clone()),
                    )),
                    string(""),
                ),
            );
            let v83: bool = true;
            leptos::logging::log!("{}", v81);
            v75
        }
        pub fn method73(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Action,
            (std::string::String, Option<std::string::String>),
        > {
            v0_1
        }
        pub fn closure61(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
            v1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            let v2: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            > = Dice_ui::method73(v0_1);
            let patternInput: (std::string::String, Option<std::string::String>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method74(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure62(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1.clone())
        }
        pub fn method75() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure62((), v))
        }
        pub fn method76(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Txn,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure63(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method76(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
            )
        }
        pub fn method77(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure60(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::nearblocks::Txn = value;
                let v9: std::string::String = v7.clone().receipt_id;
                let v11: std::string::String = v7.clone().predecessor_account_id;
                let v13: std::string::String = v7.clone().receiver_account_id;
                let v15: std::string::String = v7.clone().transaction_hash;
                let v17: std::string::String = v7.clone().included_in_block_hash;
                let v19: std::string::String = v7.clone().block_timestamp;
                let v21: crate::model::near::nearblocks::Block = v7.clone().block;
                let v23: u32 = v21.block_height;
                let v25: Vec<crate::model::near::nearblocks::Action> = v7.clone().actions;
                let v28: bool = true;
                let _func1_from_v26 = Func1::from(move |value| {
                    //;
                    let v30: crate::model::near::nearblocks::Action = value;
                    let v32: std::string::String = v30.clone().action;
                    let v34: Option<std::string::String> = v30.method;
                    let v37: bool = true;
                    (v32, v34) /*;
                               let v39: bool = */
                }); //;
                let v41: Func1<
                    crate::model::near::nearblocks::Action,
                    (std::string::String, Option<std::string::String>),
                > = _func1_from_v26;
                let v44: Vec<(std::string::String, Option<std::string::String>)> = v25
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v41 = v41.clone();
                            move |v: crate::model::near::nearblocks::Action| {
                                Dice_ui::closure61(v41.clone(), v)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v47: Array<(std::string::String, Option<std::string::String>)> =
                    Dice_ui::method74(fable_library_rust::NativeArray_::array_from(v44.clone()));
                let v49: crate::model::near::nearblocks::ActionsAgg = v7.clone().actions_agg;
                let v51: f64 = v49.deposit;
                let v53: crate::model::near::nearblocks::Outcomes = v7.clone().outcomes;
                let v55: bool = v53.status;
                let v57: crate::model::near::nearblocks::OutcomesAgg = v7.clone().outcomes_agg;
                let v59: f64 = v57.transaction_fee;
                let v61: Option<Vec<std::string::String>> = v7.logs;
                let v76: Array<std::string::String> = defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method75(), v61),
                );
                let v81: bool = true;
                (v9, v11, v13, v15, v17, v19, v23, v47, v51, v55, v59, v76) /*;
                                                                            let v83: bool = */
            }); //;
            let v85: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = _func1_from_v3;
            let v88: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v85 = v85.clone();
                        move |v_1: crate::model::near::nearblocks::Txn| {
                            Dice_ui::closure63(v85.clone(), v_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method77(fable_library_rust::NativeArray_::array_from(v88.clone()))
        }
        pub fn closure64(
            v0_1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone());
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn method79(v0_1: string) -> string {
            v0_1
        }
        pub fn method80(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure65(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            > = Dice_ui::method80(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method81(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure66(
            v0_1: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method29(Dice_ui::method28());
            let v6 = Dice_ui::method30();
            let v7 = Dice_ui::method31();
            let v8: Dice_ui::US9 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v31: Dice_ui::US10 = match &v8 {
                Dice_ui::US9::US9_0(v8_0_0) => Dice_ui::US10::US10_0(defaultValue(
                    Dice_ui::US11::US11_1,
                    map(Dice_ui::method32(), v8_0_0.clone()),
                )),
                Dice_ui::US9::US9_1(v8_1_0) => Dice_ui::US10::US10_1(v8_1_0.clone()),
            };
            let v39: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US10::US10_0(v31_0_0) = &v31 {
                    if let Dice_ui::US11::US11_0(v31_0_0) = &v31_0_0 {
                        Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone())
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v45: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v39.clone()),
                    )),
                    string(""),
                ),
            );
            let v47: bool = true;
            leptos::logging::log!("{}", v45);
            v39
        }
        pub fn closure67(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method82(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US26>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure67((), v)
                },
            )
        }
        pub fn closure68(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US24 {
            Dice_ui::US24::US24_0(v0_1)
        }
        pub fn method83() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US24> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure68((), v))
        }
        pub fn closure69(unitVar: (), v0_1: std::string::String) -> Dice_ui::US24 {
            Dice_ui::US24::US24_1(v0_1)
        }
        pub fn method84() -> Func1<std::string::String, Dice_ui::US24> {
            Func1::new(move |v: std::string::String| Dice_ui::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method85() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US25> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure70((), v))
        }
        pub fn closure73(unitVar: (), v0_1: Dice_ui::US25) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method87() -> Func1<Dice_ui::US25, Dice_ui::US32> {
            Func1::new(move |v: Dice_ui::US25| Dice_ui::closure73((), v))
        }
        pub fn method88(v0_1: Dice_ui::US23) -> Dice_ui::US23 {
            v0_1
        }
        pub fn method89(v0_1: string) -> string {
            v0_1
        }
        pub fn method90(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method91(v0_1: string) -> string {
            v0_1
        }
        pub fn method92(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method93(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method94(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure74(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method95() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure74((), v))
        }
        pub fn closure72(
            v0_1: Dice_ui::US27,
            v1: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US23 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(
                /*;
                let v10: bool = */
                async move {
                    /*;
                    let v12: bool = */
 //;
                    let v58: Dice_ui::US29 = match &v0_1 {
                        Dice_ui::US27::US27_0(v0_1_0_0) => {
                            let v13: Dice_ui::US28 = match &v0_1 {
                                Dice_ui::US27::US27_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            Dice_ui::US29::US29_0(match &v13 {
                                Dice_ui::US28::US28_0(v13_0_0) => {
                                    let v17: Option<Dice_ui::US25> = tryItem(
                                        v1,
                                        fable_library_rust::NativeArray_::array_from(
                                            v13_0_0.clone().clone(),
                                        ),
                                    );
                                    let v31: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method87(), v17),
                                    );
                                    let v41: Dice_ui::US25 =
                                        if let Dice_ui::US32::US32_0(v31_0_0) = &v31 {
                                            let v35: Dice_ui::US25 = v31_0_0.clone();
                                            if let Dice_ui::US25::US25_0(v35_0_0) = &v35 {
                                                Dice_ui::US25::US25_0(v35_0_0.clone())
                                            } else {
                                                Dice_ui::US25::US25_1
                                            }
                                        } else {
                                            Dice_ui::US25::US25_1
                                        };
                                    Dice_ui::US30::US30_0(match &v41 {
                                        Dice_ui::US25::US25_0(v41_0_0) => Dice_ui::US31::US31_0(
                                            fable_library_rust::String_::fromString(
                                                (match &v41 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                                .l0
                                                .clone(),
                                            ),
                                        ),
                                        _ => Dice_ui::US31::US31_1,
                                    })
                                }
                                Dice_ui::US28::US28_1(v13_1_0) => {
                                    Dice_ui::US30::US30_1(v13_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_1,
                    };
                    let v63: string =
                        Dice_ui::method8(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                    let v68: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v0_1.clone()));
                    let v73: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v58.clone()));
                    let v98: bool = if v6 {
                        true
                    } else {
                        if let Dice_ui::US27::US27_0(v0_1_0_0) = &v0_1 {
                            let v74: Dice_ui::US28 = v0_1_0_0.clone();
                            if let Dice_ui::US28::US28_0(v74_0_0) = &v74 {
                                if (get_Count(fable_library_rust::NativeArray_::array_from(
                                    v74_0_0.clone().clone(),
                                ))) == 0_i32
                                {
                                    false
                                } else {
                                    if let Dice_ui::US29::US29_0(v58_0_0) = &v58 {
                                        let v80: Dice_ui::US30 = v58_0_0.clone();
                                        if let Dice_ui::US30::US30_0(v80_0_0) = &v80 {
                                            if let Dice_ui::US31::US31_1 = &v80_0_0 {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US29::US29_0(v58_0_0) = &v58 {
                                    let v86: Dice_ui::US30 = v58_0_0.clone();
                                    if let Dice_ui::US30::US30_0(v86_0_0) = &v86 {
                                        if let Dice_ui::US31::US31_1 = &v86_0_0 {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US29::US29_0(v58_0_0) = &v58 {
                                let v92: Dice_ui::US30 = v58_0_0.clone();
                                if let Dice_ui::US30::US30_0(v92_0_0) = &v92 {
                                    if let Dice_ui::US31::US31_1 = &v92_0_0 {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v99: string =
                append((append((append((append((append((append((append((append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                               (v68))),
                                                                       string(" / state_data\': "))),
                                                               (v73))),
                                                       string(" / request: "))),
                                               (v63))),
                                       string(" / should_fetch: "))),
                               (ofBoolean(v98)))), string(""));
                    let v101: bool = true;
                    leptos::logging::log!("{}", v99);
                    let v419: Dice_ui::US33 = if (v98) == false {
                        Dice_ui::US33::US33_0(None::<string>)
                    } else {
                        let v105: Dice_ui::US23 = Dice_ui::method88(v3);
                        let v211: reqwest_wasm::RequestBuilder = match &v105 {
                            Dice_ui::US23::US23_1 => {
                                let v158: string = Dice_ui::method91(v2.clone());
                                let v163: &str = &*v158;
                                let v207: std::string::String =
                                    Dice_ui::method92(String::from(v163));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .post(v207)
                            }
                            _ => {
                                let v106: string = Dice_ui::method89(v2.clone());
                                let v111: &str = &*v106;
                                let v155: std::string::String =
                                    Dice_ui::method90(String::from(v111));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .get(v155)
                            }
                        };
                        let v216: &str = &*_arg.2.clone();
                        let v240: std::string::String = String::from(v216);
                        let v261: reqwest_wasm::RequestBuilder =
                            reqwest_wasm::RequestBuilder::body(v211, v240);
                        let v370: reqwest_wasm::RequestBuilder =
                            Dice_ui::method94(if (v5) == false {
                                v261
                            } else {
                                let v266: std::string::String =
                                    reqwest_wasm::header::CONTENT_TYPE.to_string();
                                let v268: string = fable_library_rust::String_::fromString(v266);
                                let v269: reqwest_wasm::RequestBuilder = Dice_ui::method93(v261);
                                let v274: &str = &*v268;
                                let v298: std::string::String = String::from(v274);
                                let v323: &str = &*string("application/json");
                                let v347: std::string::String = String::from(v323);
                                reqwest_wasm::RequestBuilder::header(v269, v298, v347)
                            });
                        let v372: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::RequestBuilder::send(v370));
                        let v374: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v372.await;
                        let v375 = Dice_ui::method95();
                        let v380: Result<reqwest_wasm::Response, std::string::String> =
                            v374.map_err(|x| v375(x));
                        let v391: reqwest_wasm::Response = v380?;
                        let v393: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<std::string::String, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::Response::text(v391));
                        let v395: Result<std::string::String, reqwest_wasm::Error> = v393.await;
                        let v396 = Dice_ui::method95();
                        let v401: Result<std::string::String, std::string::String> =
                            v395.map_err(|x| v396(x));
                        let v412: std::string::String = v401?;
                        Dice_ui::US33::US33_0(Some(fable_library_rust::String_::fromString(v412)))
                    };
                    let v425: Result<Option<string>, std::string::String> = match &v419 {
                        Dice_ui::US33::US33_0(v419_0_0) => {
                            Ok::<Option<string>, std::string::String>(v419_0_0.clone())
                        }
                        Dice_ui::US33::US33_1(v419_1_0) => {
                            Err::<Option<string>, std::string::String>(v419_1_0.clone())
                        }
                    };
                    let v428: string = string("}");
                    let v435: bool = true;
                    let _fix_closure_v430 = v425;
                    let v440: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v430 "), (v428))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v441: bool = true;
                    _fix_closure_v430
                },
            ); // rust.fix_closure';
            let v443 = __future_init;
            v443
        }
        pub fn closure71(
            v0_1: Dice_ui::US27,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure72(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method86(
            v0_1: Dice_ui::US27,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure71(v0_1.clone(), v)
            })
        }
        pub fn method96(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method97(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method98(v0_1: string) -> string {
            v0_1
        }
        pub fn closure75(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method99() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure75((), v))
        }
        pub fn method100(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            > = Dice_ui::method100(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method101(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method102(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap4>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure77(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = Dice_ui::method102(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US37 {
            Dice_ui::US37::US37_0(v0_1)
        }
        pub fn method103() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US37>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure79((), v)
            })
        }
        pub fn closure80(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US39 {
            Dice_ui::US39::US39_0(v0_1)
        }
        pub fn method104() -> Func1<Vec<Option<string>>, Dice_ui::US39> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure80((), v))
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US39 {
            Dice_ui::US39::US39_1(v0_1)
        }
        pub fn method105() -> Func1<std::string::String, Dice_ui::US39> {
            Func1::new(move |v: std::string::String| Dice_ui::closure81((), v))
        }
        pub fn closure82(unitVar: (), v0_1: string) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn method106() -> Func1<string, Dice_ui::US31> {
            Func1::new(move |v: string| Dice_ui::closure82((), v))
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US31) -> Dice_ui::US42 {
            Dice_ui::US42::US42_0(v0_1)
        }
        pub fn method108() -> Func1<Dice_ui::US31, Dice_ui::US42> {
            Func1::new(move |v: Dice_ui::US31| Dice_ui::closure85((), v))
        }
        pub fn closure86(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method109(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure86((), v))
        }
        pub fn method110(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v51: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v34: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US25 = v24_0_0.clone();
                                if let Dice_ui::US25::US25_0(v28_0_0) = &v28 {
                                    Dice_ui::US25::US25_0(v28_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v34 {
                                Dice_ui::US25::US25_0(v34_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v62: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v51.clone()))),
                )),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v90: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v76));
                    if let Dice_ui::US42::US42_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US31 = v90_0_0.clone();
                        if let Dice_ui::US31::US31_0(v94_0_0) = &v94 {
                            Dice_ui::US31::US31_0(v94_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method41(v104_0_0.clone());
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method42();
                let v138: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method109();
                let v149: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method110(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US29::US29_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US30 = v51_0_0.clone();
                    if let Dice_ui::US30::US30_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US31 = v152_0_0.clone();
                        if let Dice_ui::US31::US31_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method41(v153_0_0.clone());
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method42();
                            let v187: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method109();
                            let v198: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method110(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                )),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            )),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v222: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104.clone(), v51.clone())),
                        )),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure83(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure84(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method107(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v9: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v27: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v13));
            let v71: Dice_ui::US35 = match &v27 {
                Dice_ui::US26::US26_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v32 = Dice_ui::method83();
                    let v33 = Dice_ui::method84();
                    let v34: Dice_ui::US24 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v34 {
                        Dice_ui::US24::US24_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v60.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v34_1_0) => Dice_ui::US36::US36_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v77: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v71.clone()))),
                )),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v95: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v81));
            let v106: Dice_ui::US38 = match &v95 {
                Dice_ui::US37::US37_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v100 = Dice_ui::method104();
                    let v101 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v142: Dice_ui::US40 = match &v106 {
                Dice_ui::US38::US38_0(v106_0_0) => {
                    let v107: Dice_ui::US39 = match &v106 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v107 {
                        Dice_ui::US39::US39_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v107_1_0) => Dice_ui::US41::US41_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v145: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v149: Dice_ui::US41 = match &v142 {
                Dice_ui::US40::US40_0(v142_0_0) => match &v142 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v145.clone()),
            };
            let v214: bool = match &v149 {
                Dice_ui::US41::US41_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US31 = x;
                        let v207: bool = if let Dice_ui::US31::US31_0(v154_0_0) = &v154 {
                            let v160: &str = &*v154_0_0.clone();
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v204.clone());
                            true
                        } else {
                            false
                        };
                        let v209: bool = true;
                        let v211: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v215 = Dice_ui::method107(v71, v149.clone());
            let v216: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v218: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v216
                .iter()
                .enumerate()
                .map(|(i, x)| v215(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v220: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v218.clone());
            let v226: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v220.clone()),
                    )),
                    string(""),
                ),
            );
            let v228: bool = true;
            leptos::logging::log!("{}", v226);
            v220
        }
        pub fn method112(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure88(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method112(v0_1), v1)
        }
        pub fn method111(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure88(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method113(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn method114(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure89(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = Dice_ui::method114(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure87(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v27: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v46: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v32));
            let v90: Dice_ui::US35 = match &v46 {
                Dice_ui::US26::US26_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v51 = Dice_ui::method83();
                    let v52 = Dice_ui::method84();
                    let v53: Dice_ui::US24 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v53 {
                        Dice_ui::US24::US24_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v79.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v53_1_0) => Dice_ui::US36::US36_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v95: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v95))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v100))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v107: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v105.to_vec();
            let v110: bool = true;
            let _func1_from_v108 = Func1::from(move |value| {
                //;
                let v112: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = value;
                let v113 = Dice_ui::method111(v0_1);
                let v114: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = Dice_ui::method113(v112);
                let v116: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = v114.map(|x| v113(x));
                let v119: bool = true;
                v116 /*;
                     let v121: bool = */
            }); //;
            let v123: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = _func1_from_v108;
            let v126: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v123 = v123.clone();
                        move |v: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure89(v123.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v132: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v126.clone()),
                    )),
                    string(""),
                ),
            );
            let v134: bool = true;
            leptos::logging::log!("{}", v132);
            v126
        }
        pub fn method78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
 //;
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
 //;
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v38: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v50: string = string("}");
                                let v57: bool = true;
                                let _fix_closure_v52 = v38;
                                let v62: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v52 "), (v50))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v63: bool = true;
                                _fix_closure_v52
                            },
                        ); // rust.fix_closure';
                        let v65 = __future_init;
                        let v67: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v65;
                        let v69: Result<rexie::Rexie, std::string::String> = v67.await;
                        let v74: rexie::Rexie = v69.unwrap();
                        let v85: rexie::Rexie = (Dice_ui::method7())(v74);
                        let v87: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v85);
                        let v93: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v87.clone()))),
                                        string("")));
                        let v95: bool = true;
                        leptos::logging::log!("{}", v93);
                        let v96: string = string("}");
                        let v103: bool = true;
                        let _fix_closure_v98 = v87;
                        let v108: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v98 "), (v96))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v109: bool = true;
                        _fix_closure_v98
                    },
                ); // rust.fix_closure';
                let v111 = __future_init;
                let v113: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v111;
                let v115: bool = true;
                v113 /*;
                     let v117: bool = */
            }); //;
            let v119: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v121: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v119().await });
            let v124: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v121 = v121.clone();
                    move || Dice_ui::closure64(v121.clone(), ())
                })()
            });
            let v127: bool = true;
            let _func0_from_v125 = Func0::from(move || {
                //;
                let v129: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v121.clone()), |x| {
                        x.clone()
                    });
                let v131: bool = true;
                let _optionm_map_ = v129.map(|x| {
                    //;
                    let v133: std::sync::Arc<rexie::Rexie> = x;
                    let v136: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v133);
                    let v138: bool = true;
                    v136
                });
                let v140: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v142: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v144: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v146: bool = */
                    async move {
                        /*;
                        let v148: bool = */
 //;
                        let v149: string = sprintf!("{:?}", v140.clone());
                        let v157: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v142.clone()))))),
                                       string(" / database: "))), (v149))),
                       string(""));
                        let v159: bool = true;
                        leptos::logging::log!("{}", v157);
                        let v161: bool = true;
                        let _optionm_map_ = v140.map(|x| {
                            //;
                            let v163: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v165: std::sync::Arc<rexie::Rexie> = v163.0;
                            let v167: bool = true;
                            v165
                        });
                        let v169: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v183: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v169));
                        let v594: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v183_0_0) = &v183 {
                            let v190: bool = true;
                            let _func1_from_v188 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v197: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v198: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v197.clone()),
                                    )),
                                    string(""),
                                );
                                let v200: bool = true;
                                leptos::logging::log!("{}", v198);
                                let v202: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v204: bool = */
                                    async {
                                        /*;
                                        let v206: bool = */
 //;
                                        let v208: Array<string> = new_array(&[string("store")]);
                                        let v210: Vec<string> = v208.to_vec();
                                        let v213: bool = true;
                                        let _func1_from_v211 = Func1::from(move |value| {
                                            //;
                                            let v215: string = value;
                                            let v220: &str = &*v215;
                                            let v244: std::string::String = String::from(v220);
                                            let v266: bool = true;
                                            v244 /*;
                                                 let v268: bool = */
                                        }); //;
                                        let v270: Func1<string, std::string::String> =
                                            _func1_from_v211;
                                        let v273: Vec<std::string::String> = v210
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v270 = v270.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v270.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v274: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v183_0_0.clone());
                                        let v276: Result<rexie::Transaction, rexie::Error> = v274
                                            .transaction(&v273, rexie::TransactionMode::ReadOnly);
                                        let v277 = Dice_ui::method12();
                                        let v282: Result<rexie::Transaction, std::string::String> =
                                            v276.map_err(|x| v277(x));
                                        let v293: rexie::Transaction = v282?;
                                        let v294: string = Dice_ui::method13();
                                        let v299: &str = &*v294;
                                        let v320: Result<rexie::Store, rexie::Error> =
                                            v293.store(v299);
                                        let v321 = Dice_ui::method14();
                                        let v326: Result<rexie::Store, std::string::String> =
                                            v320.map_err(|x| v321(x));
                                        let v337: rexie::Store = v326?;
                                        let v338: string = Dice_ui::method79(v197);
                                        let v343: &str = &*v338;
                                        let v364: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v343);
                                        let v366: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v337, v364));
                                        let v368: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v366.await;
                                        let v369 = Dice_ui::method16();
                                        let v374: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v368.map_err(|x| v369(x));
                                        let v385: Option<wasm_bindgen::JsValue> = v374?;
                                        let v399: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v385),
                                        );
                                        let v499: Dice_ui::US25 = match &v399 {
                                            Dice_ui::US4::US4_0(v399_0_0) => {
                                                let v404: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v399 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v406: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v404);
                                                let v407 = Dice_ui::method19();
                                                let v412: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v406.map_err(|x| v407(x));
                                                let v423: Option<serde_json::Value> = v412?;
                                                let v437: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v423),
                                                );
                                                match &v437 {
                                                    Dice_ui::US5::US5_0(v437_0_0) => {
                                                        let v442: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v437 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v444: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v442);
                                                        let v445 = Dice_ui::method22();
                                                        let v450: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v444.map_err(|x| v445(x));
                                                        let v461: Vec<u8> = v450?;
                                                        let v463: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v461.clone());
                                                        let v465: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v463.clone()))))),
                                                   string(""));
                                                        let v467: bool = true;
                                                        leptos::logging::log!("{}", v465);
                                                        let v469: Vec<u8> = v463.to_vec();
                                                        let v471: &[u8] = v469.as_slice();
                                                        let v473: bool = true;
                                                        let mut v471 = v471;
                                                        let v475: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v471,
                                                        );
                                                        let v476 = Dice_ui::method23();
                                                        let v481: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v475.map_err(|x| v476(x));
                                                        Dice_ui::US25::US25_0(v481?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v506: Option<LrcPtr<Dice_ui::Heap4>> = match &v499 {
                                            Dice_ui::US25::US25_0(v499_0_0) => Some(
                                                match &v499 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v508: string = string("}");
                                        let v515: bool = true;
                                        let _fix_closure_v510 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v506
                                        );
                                        let v520: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v510 "),
                                                        (v508),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v521: bool = true;
                                        _fix_closure_v510
                                    },
                                ); // rust.fix_closure';
                                let v523 = __future_init;
                                let v525: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v523;
                                let v528: bool = true;
                                v525 /*;
                                     let v530: bool = */
                            }); //;
                            let v532: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v188;
                            let v536: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v142.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v532 = v532.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v532.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v538: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v536);
                            let v540: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v538.await;
                            Dice_ui::US24::US24_0(v540?)
                        } else {
                            let v549: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v549))
                        };
                        let v600: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v594 {
                                Dice_ui::US24::US24_0(v594_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v594_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v594_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v594_1_0.clone(),
                                    )
                                }
                            };
                        let v606: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v600.clone()))),
                                        string("")));
                        let v608: bool = true;
                        leptos::logging::log!("{}", v606);
                        let v609: string = string("}");
                        let v616: bool = true;
                        let _fix_closure_v611 = v600;
                        let v621: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v611 "), (v609))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v622: bool = true;
                        _fix_closure_v611
                    },
                ); // rust.fix_closure';
                let v624 = __future_init;
                let v626: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v624;
                let v628: bool = true;
                v626 /*;
                     let v630: bool = */
            }); //;
            let v632: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v125;
            let v634: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v632().await });
            let v637: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v634 = v634.clone();
                    move || Dice_ui::closure66(v634.clone(), ())
                })()
            });
            let v640: bool = true;
            let _func0_from_v638 = Func0::from(move || {
                //;
                let v642: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v644: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v637.clone());
                let v650: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v642.clone()))),
                    )),
                    string(""),
                );
                let v652: bool = true;
                leptos::logging::log!("{}", v650);
                let v654: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v656: bool = */
                    async move {
                        /*;
                        let v658: bool = */
 //;
                        let v672: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v644));
                        let v714: Dice_ui::US27 = match &v672 {
                            Dice_ui::US26::US26_0(v672_0_0) => {
                                let v676: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v672 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v677 = Dice_ui::method83();
                                let v678 = Dice_ui::method84();
                                let v679: Dice_ui::US24 = match &v676 {
                                    Err(v676_1_0) => v678(v676_1_0.clone()),
                                    Ok(v676_0_0) => v677(v676_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v679 {
                                    Dice_ui::US24::US24_0(v679_0_0) => {
                                        let v682: bool = true;
                                        let _vec_map: Vec<_> = v679_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v684: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v698: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v684),
                                                );
                                                let v703: bool = true;
                                                v698
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v679_1_0) => {
                                        Dice_ui::US28::US28_1(v679_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v720: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v714.clone()))),
                            )),
                            string(""),
                        );
                        let v722: bool = true;
                        leptos::logging::log!("{}", v720);
                        let v723 = Dice_ui::method86(v714);
                        let v724: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v642);
                        let v727: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v724.iter()
                                .enumerate()
                                .map(|(i, x)| v723(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v729: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v727);
                        let v731: Result<Vec<Option<string>>, std::string::String> = v729.await;
                        let v733: Vec<Option<string>> = v731?;
                        let v735: string = string("}");
                        let v742: bool = true;
                        let _fix_closure_v737 =
                            Ok::<Vec<Option<string>>, std::string::String>(v733);
                        let v747: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v737 "), (v735))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v748: bool = true;
                        _fix_closure_v737
                    },
                ); // rust.fix_closure';
                let v750 = __future_init;
                let v752: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v750;
                let v754: bool = true;
                v752 /*;
                     let v756: bool = */
            }); //;
            let v758: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v638;
            let v760: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v758().await });
            let v763: bool = true;
            let _func1_from_v761 = Func1::from(move |value| {
                //;
                let v765: LrcPtr<Dice_ui::Heap4> = value;
                let v770: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v765.clone())) as i64)),
                    )),
                    string(""),
                );
                let v772: bool = true;
                leptos::logging::log!("{}", v770);
                let v774: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v776: bool = */
                    async move {
                        /*;
                        let v778: bool = */
 //;
                        let v780: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v782: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v780);
                        let v784: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v124);
                        let v786: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v784);
                        let v788: bool = true;
                        let _optionm_map_ = v786.map(|x| {
                            //;
                            let v790: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v792: std::sync::Arc<rexie::Rexie> = v790.0;
                            let v794: bool = true;
                            v792
                        });
                        let v796: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v810: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v796));
                        let v970: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v810_0_0) = &v810 {
                            let v817: bool = true;
                            let _func1_from_v815 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v819: string = patternInput_1.0.clone();
                                let v825: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v827: bool = */
                                    async move {
                                        /*;
                                        let v829: bool = */
 //;
                                        let v830: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v819.clone()))), string(""));
                                        let v832: bool = true;
                                        leptos::logging::log!("{}", v830);
                                        let v833: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v819))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v838: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v765.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v840: bool = true;
                                        leptos::logging::log!("{}", v838);
                                        let v842: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v844: bool = */
                                            async move {
                                                /*;
                                                let v846: bool = */
 //;
                                                let v848: bool = true;
                                                let mut data = Vec::new();
                                                let v850: bool = true;
                                                borsh::BorshSerialize::serialize(&v765, &mut data)
                                                    .unwrap();
                                                let v852: Vec<u8> = data;
                                                let v854: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v852).unwrap();
                                                let v855: string = Dice_ui::method98(v833);
                                                let v860: &str = &*v855;
                                                let v881: rexie::Transaction =
                                                    v810_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v883: rexie::Store = v881.store("store")?;
                                                let v885: bool = true;
                                                v883.put(&v854, Some(&v860.into())).await?;
                                                let v887: bool = true;
                                                v881.done().await?;
                                                let v889: string = string("}");
                                                let v896: bool = true;
                                                let _fix_closure_v891 = Ok::<(), rexie::Error>(());
                                                let v901: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v891 "),
                                                                (v889),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v902: bool = true;
                                                _fix_closure_v891
                                            },
                                        ); // rust.fix_closure';
                                        let v904 = __future_init;
                                        let v906: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v904;
                                        let v908: Result<(), rexie::Error> = v906.await;
                                        let v909 = Dice_ui::method99();
                                        let v914: Result<(), std::string::String> =
                                            v908.map_err(|x| v909(x));
                                        let v925: bool = true;
                                        v914?;
                                        let v927: string = string("}");
                                        let v934: bool = true;
                                        let _fix_closure_v929 = Ok::<(), std::string::String>(());
                                        let v939: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v929 "),
                                                        (v927),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v940: bool = true;
                                        _fix_closure_v929
                                    },
                                ); // rust.fix_closure';
                                let v942 = __future_init;
                                let v944: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                > = v942;
                                let v947: bool = true;
                                v944 /*;
                                     let v949: bool = */
                            }); //;
                            let v951: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v815;
                            let v955: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v782.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v951 = v951.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v951.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v957: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v955);
                            let v959: Result<Vec<()>, std::string::String> = v957.await;
                            Dice_ui::US34::US34_0(v959?)
                        } else {
                            let v965: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v976: Result<Vec<()>, std::string::String> = match &v970 {
                            Dice_ui::US34::US34_0(v970_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v970_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v970_1_0) => {
                                Err::<Vec<()>, std::string::String>(v970_1_0.clone())
                            }
                        };
                        let v977: string = string("}");
                        let v984: bool = true;
                        let _fix_closure_v979 = v976;
                        let v989: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v979 "), (v977))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v990: bool = true;
                        _fix_closure_v979
                    },
                ); // rust.fix_closure';
                let v992 = __future_init;
                let v994: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v992;
                let v997: bool = true;
                v994 /*;
                     let v999: bool = */
            }); //;
            let v1001: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v761;
            let v1004: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1001 = v1001.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1001.clone(), v_1)
                })(value.clone())
            });
            let v1007: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1004 = v1004.clone();
                    let v637 = v637.clone();
                    let v760 = v760.clone();
                    move || {
                        Dice_ui::closure78(
                            v0_1.clone(),
                            v637.clone(),
                            v760.clone(),
                            v1004.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1007 = v1007.clone();
                    let v121 = v121.clone();
                    let v634 = v634.clone();
                    move || {
                        Dice_ui::closure87(
                            v1.clone(),
                            v121.clone(),
                            v634.clone(),
                            v1007.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method115() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US43,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure91((), v),
            )
        }
        pub fn closure92(unitVar: (), v0_1: std::string::String) -> Dice_ui::US43 {
            Dice_ui::US43::US43_1(v0_1)
        }
        pub fn method116() -> Func1<std::string::String, Dice_ui::US43> {
            Func1::new(move |v: std::string::String| Dice_ui::closure92((), v))
        }
        pub fn method117(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
        ) -> Func1<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
            Dice_ui::US43,
        > {
            v0_1
        }
        pub fn closure93(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
            v1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US43 {
            let v2: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = Dice_ui::method117(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure94(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn method118() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US45,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure94((), v),
            )
        }
        pub fn method119(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
        ) -> Func1<Dice_ui::US43, Dice_ui::US44> {
            v0_1
        }
        pub fn closure95(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
            v1: Dice_ui::US43,
        ) -> Dice_ui::US44 {
            let v2: Func1<Dice_ui::US43, Dice_ui::US44> = Dice_ui::method119(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure96(unitVar: (), v0_1: Dice_ui::US44) -> bool {
            if let Dice_ui::US44::US44_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US45::US45_1 = &v0_1_0_0 {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method120() -> Func1<Dice_ui::US44, bool> {
            Func1::new(move |v: Dice_ui::US44| Dice_ui::closure96((), v))
        }
        pub fn method121(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method123(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )>,
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure99(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1_: usize,
            v1__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method123(v0_1);
            let patternInput: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
                patternInput.12.clone(),
            )
        }
        pub fn method124(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
        ) -> Func1<
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
            (string, usize, LrcPtr<Dice_ui::Heap5>),
        > {
            v0_1
        }
        pub fn closure100(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            let v14: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            > = Dice_ui::method124(v0_1);
            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = (move |x| v14(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
                _arg.6.clone(),
                _arg.7.clone(),
                _arg.8.clone(),
                _arg.9.clone(),
                _arg.10.clone(),
                _arg.11.clone(),
                _arg.12.clone(),
            ));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure98(v0_1: Array<string>, v1: i32, v2: Dice_ui::US44) -> Dice_ui::US48 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US44::US44_0(v2_0_0) => {
                    let v4: Dice_ui::US45 = v2_0_0.clone();
                    Dice_ui::US48::US48_0(match &v4 {
                        Dice_ui::US45::US45_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US45::US45_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: bool = true;
                            let _func1_from_v14 = Func1::from(move |value| {
                                //;
                                let v18: LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )> = value;
                                let b: (
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = v18.1.clone();
                                let v60: bool = true;
                                (
                                    v18.0.clone(),
                                    b.0.clone(),
                                    b.1.clone(),
                                    b.2.clone(),
                                    b.3.clone(),
                                    b.4.clone(),
                                    b.5.clone(),
                                    b.6.clone(),
                                    b.7.clone(),
                                    b.8.clone(),
                                    b.9.clone(),
                                    b.10.clone(),
                                    b.11.clone(),
                                ) /*;
                                  let v62: bool = */
                            }); //;
                            let v64: Func1<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                            > = _func1_from_v14;
                            let v67: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new({
                                        let v64 = v64.clone();
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure99(
                                                v64.clone(),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        }
                                    })(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v69: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v67.clone());
                            let v71: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v69.to_vec();
                            let v74: bool = true;
                            let _func1_from_v72 = Func1::from(move |value| {
                                //;
                                let patternInput: (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = value;
                                let v89: usize = v1 as usize;
                                let v92: LrcPtr<Dice_ui::Heap5> = LrcPtr::new(Dice_ui::Heap5 {
                                    l0: patternInput.1.clone(),
                                    l1: patternInput.2.clone(),
                                    l2: patternInput.3.clone(),
                                    l3: patternInput.4.clone(),
                                    l4: patternInput.5.clone(),
                                    l5: patternInput.6.clone(),
                                    l6: patternInput.7.clone(),
                                    l7: patternInput.8.clone(),
                                    l8: patternInput.9.clone(),
                                    l9: patternInput.10.clone(),
                                    l10: patternInput.11.clone(),
                                    l11: patternInput.12.clone(),
                                });
                                let v95: bool = true;
                                (v3.clone(), v89, v92) /*;
                                                       let v97: bool = */
                            }); //;
                            let v99: Func1<
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                                (string, usize, LrcPtr<Dice_ui::Heap5>),
                            > = _func1_from_v72;
                            Dice_ui::US49::US49_0(
                                v71.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v99 = v99.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure100(v99.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US49::US49_1,
                    })
                }
                Dice_ui::US44::US44_1(v2_1_0) => Dice_ui::US48::US48_1(v2_1_0.clone()),
            }
        }
        pub fn closure97(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US44, Dice_ui::US48> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US44| Dice_ui::closure98(v0_1.clone(), v1, v)
            })
        }
        pub fn method122(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US44, Dice_ui::US48>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure97(v0_1.clone(), v)
            })
        }
        pub fn method125(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method126(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
        ) -> Func1<Dice_ui::US48, Dice_ui::US50> {
            v0_1
        }
        pub fn closure101(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
            v1: Dice_ui::US48,
        ) -> Dice_ui::US50 {
            let v2: Func1<Dice_ui::US48, Dice_ui::US50> = Dice_ui::method126(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method127(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func1<
            Dice_ui::US50,
            Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure102(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v1: Dice_ui::US50,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v2: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            > = Dice_ui::method127(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method128(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method130(
        ) -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US50> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure103((), v)
                },
            )
        }
        pub fn closure104(unitVar: (), v0_1: std::string::String) -> Dice_ui::US50 {
            Dice_ui::US50::US50_1(v0_1)
        }
        pub fn method131() -> Func1<std::string::String, Dice_ui::US50> {
            Func1::new(move |v: std::string::String| Dice_ui::closure104((), v))
        }
        pub fn closure105(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US49 {
            Dice_ui::US49::US49_0(v0_1)
        }
        pub fn method132() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US49> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure105((), v)
            })
        }
        pub fn method133(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method134(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method129(v0_1: LrcPtr<Dice_ui::UH2>, v1: Dice_ui::US51) -> Dice_ui::US51 {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH2>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Dice_ui::US51> = MutCell::new(v1.clone());
            '_method129: loop {
                break '_method129 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH2::UH2_0 => v1.get().clone(),
                    Dice_ui::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v2: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        > = match v0_1.get().clone().as_ref() {
                            Dice_ui::UH2::UH2_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v4 = Dice_ui::method130();
                        let v5 = Dice_ui::method131();
                        let v6: Dice_ui::US50 = match &v2 {
                            Err(v2_1_0) => v5(v2_1_0.clone()),
                            Ok(v2_0_0) => v4(v2_0_0.clone()),
                        };
                        let v29: Dice_ui::US48 = match &v6 {
                            Dice_ui::US50::US50_0(v6_0_0) => Dice_ui::US48::US48_0(defaultValue(
                                Dice_ui::US49::US49_1,
                                map(Dice_ui::method132(), v6_0_0.clone()),
                            )),
                            Dice_ui::US50::US50_1(v6_1_0) => Dice_ui::US48::US48_1(v6_1_0.clone()),
                        };
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH2> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Dice_ui::US51 = if let Dice_ui::US51::US51_0(v1_0_0) =
                                &v1.get().clone()
                            {
                                match &v29 {
                                    Dice_ui::US48::US48_0(v29_0_0) => {
                                        let v31: Dice_ui::US49 = v29_0_0.clone();
                                        if let Dice_ui::US49::US49_0(v31_0_0) = &v31 {
                                            let v33: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method133(v31_0_0.clone());
                                            let v34: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method134(v1_0_0.clone());
                                            let v36: bool = true;
                                            let mut v34 = v34;
                                            let v38: bool = true;
                                            v34.extend(v33);
                                            Dice_ui::US51::US51_0(v34)
                                        } else {
                                            v1.get().clone()
                                        }
                                    }
                                    Dice_ui::US48::US48_1(v29_1_0) => {
                                        Dice_ui::US51::US51_1(v29_1_0.clone())
                                    }
                                }
                            } else {
                                if let Dice_ui::US48::US48_1(v29_1_0) = &v29 {
                                    Dice_ui::US51::US51_1(v29_1_0.clone())
                                } else {
                                    v1.get().clone()
                                }
                            };
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method129;
                        }
                    }
                });
            }
        }
        pub fn method135(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure106(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method136() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure106((), arg10_0040)
            })
        }
        pub fn method137(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure90(
            v0_1: leptos::prelude::ArcMemo<Array<string>>,
            v1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = leptos::prelude::ArcMemo::get(&v1);
            let v6: bool = true;
            let _func1_from_v4 = Func1::from(move |value| {
                //;
                let v8: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = value;
                let v9 = Dice_ui::method115();
                let v10 = Dice_ui::method116();
                let v11: Dice_ui::US43 = match &v8 {
                    Err(v8_1_0) => v10(v8_1_0.clone()),
                    Ok(v8_0_0) => v9(v8_0_0.clone()),
                };
                let v14: bool = true;
                v11 /*;
                    let v16: bool = */
            }); //;
            let v18: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = _func1_from_v4;
            let v21: Vec<Dice_ui::US43> = v3
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v18 = v18.clone();
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure93(v18.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v24: bool = true;
            let _func1_from_v22 = Func1::from(move |value| {
                //;
                let v26: Dice_ui::US43 = value;
                let v49: Dice_ui::US44 = match &v26 {
                    Dice_ui::US43::US43_0(v26_0_0) => Dice_ui::US44::US44_0(defaultValue(
                        Dice_ui::US45::US45_1,
                        map(Dice_ui::method118(), v26_0_0.clone()),
                    )),
                    Dice_ui::US43::US43_1(v26_1_0) => Dice_ui::US44::US44_1(v26_1_0.clone()),
                };
                let v52: bool = true;
                v49 /*;
                    let v54: bool = */
            }); //;
            let v56: Func1<Dice_ui::US43, Dice_ui::US44> = _func1_from_v22;
            let v59: Vec<Dice_ui::US44> = v21
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v56 = v56.clone();
                        move |v_1: Dice_ui::US43| Dice_ui::closure95(v56.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v65: string = append(
                (append(
                    string("transactions.render (8) / txns move / root: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v59.clone()))),
                )),
                string(""),
            );
            let v67: bool = true;
            leptos::logging::log!("{}", v65);
            let v68 = Dice_ui::method120();
            let v69: Vec<Dice_ui::US44> = Dice_ui::method121(v59.clone());
            let v71: Vec<Dice_ui::US44> = v69
                .into_iter()
                .filter(|x| v68(x.clone().clone()))
                .collect::<Vec<_>>();
            let v78: bool = (get_Count(fable_library_rust::NativeArray_::array_from(v71.clone())))
                == (get_Count(fable_library_rust::NativeArray_::array_from(
                    v59.clone().clone(),
                )));
            let v192: Dice_ui::US46 = if v78 {
                Dice_ui::US46::US46_0(Dice_ui::US47::US47_1)
            } else {
                let v83 = Dice_ui::method122(leptos::prelude::ArcMemo::get(&v0_1));
                let v84: Vec<Dice_ui::US44> = Dice_ui::method125(v59);
                let v86: Vec<Dice_ui::US48> = v84
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v83(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v89: bool = true;
                let _func1_from_v87 = Func1::from(move |value| {
                    //;
                    let v91: Dice_ui::US48 = value;
                    let v104: Dice_ui::US50 = match &v91 {
                        Dice_ui::US48::US48_0(v91_0_0) => {
                            let v92: Dice_ui::US49 = v91_0_0.clone();
                            Dice_ui::US50::US50_0(match &v92 {
                                Dice_ui::US49::US49_0(v92_0_0) => Some(
                                    match &v92 {
                                        Dice_ui::US49::US49_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            })
                        }
                        Dice_ui::US48::US48_1(v91_1_0) => Dice_ui::US50::US50_1(v91_1_0.clone()),
                    };
                    let v107: bool = true;
                    v104 /*;
                         let v109: bool = */
                }); //;
                let v111: Func1<Dice_ui::US48, Dice_ui::US50> = _func1_from_v87;
                let v114: Vec<Dice_ui::US50> = v86
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v111 = v111.clone();
                            move |v_2: Dice_ui::US48| Dice_ui::closure101(v111.clone(), v_2)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v117: bool = true;
                let _func1_from_v115 = Func1::from(move |value| {
                    //;
                    let v119: Dice_ui::US50 = value;
                    let v125: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = match &v119 {
                        Dice_ui::US50::US50_0(v119_0_0) => {
                            Ok::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v119_0_0.clone())
                        }
                        Dice_ui::US50::US50_1(v119_1_0) => {
                            Err::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v119_1_0.clone())
                        }
                    };
                    let v128: bool = true;
                    v125 /*;
                         let v130: bool = */
                }); //;
                let v132: Func1<
                    Dice_ui::US50,
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = _func1_from_v115;
                let v135: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v114
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v132 = v132.clone();
                            move |v_3: Dice_ui::US50| Dice_ui::closure102(v132.clone(), v_3)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v138: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v140: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v135.clone());
                let v141: i32 = get_Count(v140.clone());
                let v143: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(LrcPtr::new(Dice_ui::UH2::UH2_0)),
                });
                while Dice_ui::method128(v141, v143.clone()) {
                    let v145: i32 = v143.l0.get().clone();
                    let v148: i32 = ((v145.wrapping_neg()) + (v141)) - 1_i32;
                    let v149: LrcPtr<Dice_ui::UH2> = v143.l1.get().clone();
                    let v150: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v140[v148].clone();
                    let v151: i32 = (v145) + 1_i32;
                    v143.l0.set(v151);
                    v143.l1.set(LrcPtr::new(Dice_ui::UH2::UH2_1(v150, v149)));
                    ()
                }
                {
                    let v155: Dice_ui::US51 =
                        Dice_ui::method129(v143.l1.get().clone(), Dice_ui::US51::US51_0(v138));
                    let v169: Dice_ui::US51 = match &v155 {
                        Dice_ui::US51::US51_0(v155_0_0) => {
                            let v157: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method135(v155_0_0.clone());
                            let v158 = Dice_ui::method136();
                            let v160: bool = true;
                            let mut v157 = v157;
                            let v162: bool = true;
                            v157.sort_by_key(|x| v158(x.clone()));
                            Dice_ui::US51::US51_0(v157)
                        }
                        Dice_ui::US51::US51_1(v155_1_0) => Dice_ui::US51::US51_1(v155_1_0.clone()),
                    };
                    let v184: Dice_ui::US52 = match &v169 {
                        Dice_ui::US51::US51_0(v169_0_0) => {
                            let v171: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method137(v169_0_0.clone());
                            let v173: bool = true;
                            let mut v171 = v171;
                            let v175: bool = true;
                            v171.reverse();
                            let v177: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v171;
                            Dice_ui::US52::US52_0(fable_library_rust::NativeArray_::array_from(
                                v177.clone(),
                            ))
                        }
                        Dice_ui::US51::US51_1(v169_1_0) => Dice_ui::US52::US52_1(v169_1_0.clone()),
                    };
                    match &v184 {
                        Dice_ui::US52::US52_0(v184_0_0) => {
                            Dice_ui::US46::US46_0(Dice_ui::US47::US47_0(v184_0_0.clone()))
                        }
                        Dice_ui::US52::US52_1(v184_1_0) => Dice_ui::US46::US46_1(v184_1_0.clone()),
                    }
                }
            };
            let v205: Dice_ui::US53 = match &v192 {
                Dice_ui::US46::US46_0(v192_0_0) => {
                    let v193: Dice_ui::US47 = v192_0_0.clone();
                    Dice_ui::US53::US53_0(match &v193 {
                        Dice_ui::US47::US47_0(v193_0_0) => Some(
                            match &v193 {
                                Dice_ui::US47::US47_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US46::US46_1(v192_1_0) => Dice_ui::US53::US53_1(v192_1_0.clone()),
            };
            let v211: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v205 {
                Dice_ui::US53::US53_0(v205_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v205_0_0.clone()),
                Dice_ui::US53::US53_1(v205_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v205_1_0.clone()),
            };
            let v217: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        (append(
                            (append(
                                string(
                                    "use_transactions.render (9) / txns new_arc_memo / result: ",
                                ),
                                sprintf!("{:?}", v211.clone()),
                            )),
                            string(" / loading: "),
                        )),
                        (ofBoolean(v78)),
                    )),
                    string(""),
                ),
            );
            let v219: bool = true;
            leptos::logging::log!("{}", v217);
            v211
        }
        pub fn closure108(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn method138(
        ) -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US53> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure108((), v)
                },
            )
        }
        pub fn closure109(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn method139() -> Func1<std::string::String, Dice_ui::US53> {
            Func1::new(move |v: std::string::String| Dice_ui::closure109((), v))
        }
        pub fn closure110(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US47 {
            Dice_ui::US47::US47_0(v0_1)
        }
        pub fn method140() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US47> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure110((), v)
            })
        }
        pub fn closure111(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method141() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure111((), v))
        }
        pub fn closure112(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn method142() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure112((), v))
        }
        pub fn method143(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure113(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US23::US23_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method144() -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure113((), v))
        }
        pub fn method145(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn method146(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
        ) -> Func1<
            (string, usize, LrcPtr<Dice_ui::Heap5>),
            Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
        > {
            v0_1
        }
        pub fn closure114(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US23, string, bool, bool), std::string::String> {
            let v4: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            > = Dice_ui::method146(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure107(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method138();
            let v4 = Dice_ui::method139();
            let v5: Dice_ui::US53 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US46 = match &v5 {
                Dice_ui::US53::US53_0(v5_0_0) => Dice_ui::US46::US46_0(defaultValue(
                    Dice_ui::US47::US47_1,
                    map(Dice_ui::method140(), v5_0_0.clone()),
                )),
                Dice_ui::US53::US53_1(v5_1_0) => Dice_ui::US46::US46_1(v5_1_0.clone()),
            };
            let v291: Dice_ui::US54 = match &v28 {
                Dice_ui::US46::US46_0(v28_0_0) => {
                    let v29: Dice_ui::US47 = v28_0_0.clone();
                    if let Dice_ui::US47::US47_0(v29_0_0) = &v29 {
                        let v32: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v29_0_0.clone().to_vec();
                        let v35: bool = true;
                        let _func1_from_v33 = Func1::from(move |value| {
                            //;
                            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = value;
                            let v45: &str = &*string("2.0");
                            let v69: std::string::String = String::from(v45);
                            let v94: &str = &*string("dontcare");
                            let v118: std::string::String = String::from(v94);
                            let v143: &str = &*string("EXPERIMENTAL_tx_status");
                            let v167: std::string::String = String::from(v143);
                            let v193: &str = &*string("bowen");
                            let v237: Array<std::string::String> = new_array(&[
                                (patternInput.2.clone()).l3.clone(),
                                String::from(v193),
                            ]);
                            let v239: Vec<std::string::String> = v237.to_vec();
                            let v241: crate::model::near::rpc::RpcInput =
                                crate::model::near::rpc::RpcInput {
                                    jsonrpc: v69,
                                    id: v118,
                                    method: v167,
                                    params: v239,
                                };
                            let v243: Result<std::string::String, serde_json::Error> =
                                serde_json::to_string(&v241);
                            let v244 = Dice_ui::method141();
                            let v249: Result<std::string::String, std::string::String> =
                                v243.map_err(|x| v244(x));
                            let v259 = Dice_ui::method142();
                            let v260: Result<std::string::String, std::string::String> =
                                Dice_ui::method143(v249);
                            let v262: Result<string, std::string::String> = v260.map(|x| v259(x));
                            let v263 = Dice_ui::method144();
                            let v264: Result<string, std::string::String> =
                                Dice_ui::method145(v262);
                            let v266: Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            > = v264.map(|x| v263(x));
                            let v269: bool = true;
                            v266 /*;
                                 let v271: bool = */
                        }); //;
                        let v273: Func1<
                            (string, usize, LrcPtr<Dice_ui::Heap5>),
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = _func1_from_v33;
                        let v276: Vec<
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = v32
                            .into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v273 = v273.clone();
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure114(v273.clone(), arg10_0040)
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v278: Result<
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                            std::string::String,
                        > = v276.into_iter().collect();
                        let v280: Vec<(string, Dice_ui::US23, string, bool, bool)> = v278?;
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_0(
                            fable_library_rust::NativeArray_::array_from(v280.clone()),
                        ))
                    } else {
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_1)
                    }
                }
                Dice_ui::US46::US46_1(v28_1_0) => Dice_ui::US54::US54_1(v28_1_0.clone()),
            };
            let v304: Dice_ui::US56 = match &v291 {
                Dice_ui::US54::US54_0(v291_0_0) => {
                    let v292: Dice_ui::US55 = v291_0_0.clone();
                    Dice_ui::US56::US56_0(match &v292 {
                        Dice_ui::US55::US55_0(v292_0_0) => Some(
                            match &v292 {
                                Dice_ui::US55::US55_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    })
                }
                Dice_ui::US54::US54_1(v291_1_0) => Dice_ui::US56::US56_1(v291_1_0.clone()),
            };
            let v310: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = match &v304 {
                Dice_ui::US56::US56_0(v304_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v304_0_0.clone()),
                Dice_ui::US56::US56_1(v304_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v304_1_0.clone()),
            };
            let v316: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (10) / rpc_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v310.clone()),
                    )),
                    string(""),
                ),
            );
            let v318: bool = true;
            leptos::logging::log!("{}", v316);
            v310
        }
        pub fn closure116(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method147(
        ) -> Func1<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, Dice_ui::US56>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>| {
                    Dice_ui::closure116((), v)
                },
            )
        }
        pub fn closure117(unitVar: (), v0_1: std::string::String) -> Dice_ui::US56 {
            Dice_ui::US56::US56_1(v0_1)
        }
        pub fn method148() -> Func1<std::string::String, Dice_ui::US56> {
            Func1::new(move |v: std::string::String| Dice_ui::closure117((), v))
        }
        pub fn closure118(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Dice_ui::US55 {
            Dice_ui::US55::US55_0(v0_1)
        }
        pub fn method149(
        ) -> Func1<Array<(string, Dice_ui::US23, string, bool, bool)>, Dice_ui::US55> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US23, string, bool, bool)>| {
                    Dice_ui::closure118((), v)
                },
            )
        }
        pub fn closure115(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method147();
            let v4 = Dice_ui::method148();
            let v5: Dice_ui::US56 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v28: Dice_ui::US54 = match &v5 {
                Dice_ui::US56::US56_0(v5_0_0) => Dice_ui::US54::US54_0(defaultValue(
                    Dice_ui::US55::US55_1,
                    map(Dice_ui::method149(), v5_0_0.clone()),
                )),
                Dice_ui::US56::US56_1(v5_1_0) => Dice_ui::US54::US54_1(v5_1_0.clone()),
            };
            let v34: Array<(string, Dice_ui::US23, string, bool, bool)> =
                if let Dice_ui::US54::US54_0(v28_0_0) = &v28 {
                    let v29: Dice_ui::US55 = v28_0_0.clone();
                    if let Dice_ui::US55::US55_0(v29_0_0) = &v29 {
                        v29_0_0.clone()
                    } else {
                        new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                };
            let v36: Vec<(string, Dice_ui::US23, string, bool, bool)> = v34.to_vec();
            let v42: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v36.clone()),
                    )),
                    string(""),
                ),
            );
            let v44: bool = true;
            leptos::logging::log!("{}", v42);
            v36
        }
        pub fn closure121(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn method151(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
        ) -> Func1<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
            std::collections::HashMap<
                std::string::String,
                (
                    std::string::String,
                    Option<std::string::String>,
                    Option<f64>,
                    Option<std::string::String>,
                ),
            >,
        > {
            v0_1
        }
        pub fn closure122(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            v1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            let v2: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = Dice_ui::method151(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method152(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::Receipt,
            (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure123(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method152(v0_1);
            let patternInput: (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
            )
        }
        pub fn method153(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::GasProfile,
            (
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure124(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method153(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method155(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
        ) -> Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>
        {
            v0_1
        }
        pub fn closure126(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
            v1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            let v2: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = Dice_ui::method155(v0_1);
            let patternInput: (std::string::String, std::string::String) = (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure125(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: bool = true;
            let _func1_from_v1 = Func1::from(move |value| {
                //;
                let v5: crate::model::near::rpc::Proof = value;
                let v7: std::string::String = v5.clone().direction;
                let v9: std::string::String = v5.hash;
                let v12: bool = true;
                (v7, v9) /*;
                         let v14: bool = */
            }); //;
            let v16: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = _func1_from_v1;
            let v19: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v16 = v16.clone();
                        move |v: crate::model::near::rpc::Proof| Dice_ui::closure126(v16.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v19.clone())
        }
        pub fn method154() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure125((), v))
        }
        pub fn method156(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::ReceiptsOutcome,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ),
        > {
            v0_1
        }
        pub fn closure127(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
            v1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = Dice_ui::method156(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
            )
        }
        pub fn closure120(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::rpc::Receipt = value;
                let v9: std::string::String = v7.clone().predecessor_id;
                let v11: crate::model::near::rpc::ReceiptDetail = v7.clone().receipt;
                let v13: crate::model::near::rpc::ActionDetail = v11.action;
                let v15: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                > = v13.clone().actions;
                let v18: bool = true;
                let _func1_from_v16 = Func1::from(move |value| {
                    //;
                    let v20: std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    > = value;
                    let v23: std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    > = v20
                        .into_iter()
                        .map(|(k, v)| {
                            (
                                k,
                                Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                                    Dice_ui::closure121((), v)
                                })(v),
                            )
                        })
                        .collect();
                    let v26: bool = true;
                    v23 /*;
                        let v28: bool = */
                }); //;
                let v30: Func1<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = _func1_from_v16;
                let v33: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = v15
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v30 = v30.clone();
                            move |v_1: std::collections::HashMap<
                                std::string::String,
                                crate::model::near::rpc::TransferDetail,
                            >| Dice_ui::closure122(v30.clone(), v_1)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v35: Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = fable_library_rust::NativeArray_::array_from(v33.clone());
                let v37: std::string::String = v13.clone().gas_price;
                let v39: Vec<std::string::String> = v13.clone().input_data_ids;
                let v41: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v39.clone());
                let v43: Vec<std::string::String> = v13.clone().output_data_receivers;
                let v45: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v43.clone());
                let v47: std::string::String = v13.clone().signer_id;
                let v49: std::string::String = v13.signer_public_key;
                let v51: std::string::String = v7.clone().receipt_id;
                let v53: std::string::String = v7.receiver_id;
                let v56: bool = true;
                (v9, v35, v37, v41, v45, v47, v49, v51, v53) /*;
                                                             let v58: bool = */
            }); //;
            let v60: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = _func1_from_v3;
            let v63: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v60 = v60.clone();
                        move |v_2: crate::model::near::rpc::Receipt| {
                            Dice_ui::closure123(v60.clone(), v_2)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v65: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v63.clone());
            let v67: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v70: bool = true;
            let _func1_from_v68 = Func1::from(move |value| {
                //;
                let v72: crate::model::near::rpc::ReceiptsOutcome = value;
                let v74: std::string::String = v72.clone().block_hash;
                let v76: std::string::String = v72.clone().id;
                let v78: crate::model::near::rpc::OutcomeDetail = v72.clone().outcome;
                let v80: std::string::String = v78.clone().executor_id;
                let v82: u64 = v78.clone().gas_burnt;
                let v84: Vec<std::string::String> = v78.clone().logs;
                let v86: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v84.clone());
                let v88: crate::model::near::rpc::Metadata = v78.clone().metadata;
                let v90: Vec<crate::model::near::rpc::GasProfile> = v88.clone().gas_profile;
                let v93: bool = true;
                let _func1_from_v91 = Func1::from(move |value| {
                    //;
                    let v95: crate::model::near::rpc::GasProfile = value;
                    let v97: std::string::String = v95.clone().cost;
                    let v99: std::string::String = v95.clone().cost_category;
                    let v101: std::string::String = v95.gas_used;
                    let v104: bool = true;
                    (v97, v99, v101) /*;
                                     let v106: bool = */
                }); //;
                let v108: Func1<
                    crate::model::near::rpc::GasProfile,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                > = _func1_from_v91;
                let v111: Vec<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = v90
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v108 = v108.clone();
                            move |v_3: crate::model::near::rpc::GasProfile| {
                                Dice_ui::closure124(v108.clone(), v_3)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v113: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = fable_library_rust::NativeArray_::array_from(v111.clone());
                let v115: u8 = v88.version;
                let v117: Vec<std::string::String> = v78.clone().receipt_ids;
                let v119: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v117.clone());
                let v121: std::collections::HashMap<std::string::String, std::string::String> =
                    v78.clone().status;
                let v123: Option<std::string::String> = v78.tokens_burnt;
                let v125: Option<Vec<crate::model::near::rpc::Proof>> = v72.proof;
                let v159: Array<(std::string::String, std::string::String)> = defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method154(), v125),
                );
                let v164: bool = true;
                (v74, v76, v80, v82, v86, v113, v115, v119, v121, v123, v159) /*;
                                                                              let v166: bool = */
            }); //;
            let v168: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = _func1_from_v68;
            let v171: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v67
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v168 = v168.clone();
                        move |v_4: crate::model::near::rpc::ReceiptsOutcome| {
                            Dice_ui::closure127(v168.clone(), v_4)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (
                v65,
                fable_library_rust::NativeArray_::array_from(v171.clone()),
            )
        }
        pub fn method150() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure120((), v)
            })
        }
        pub fn closure129(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method158() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure129((), v))
        }
        pub fn closure128(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method158(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method157() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure128((), v))
        }
        pub fn closure119(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v6: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method150(), v4);
            let v190: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v6, map(Dice_ui::method157(), v190), v0_1.id)
        }
        pub fn closure133(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method161(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure133((), v))
        }
        pub fn method162(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure132(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v51: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v24: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v34: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v24_0_0) = &v24 {
                                let v28: Dice_ui::US25 = v24_0_0.clone();
                                if let Dice_ui::US25::US25_0(v28_0_0) = &v28 {
                                    Dice_ui::US25::US25_0(v28_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v34 {
                                Dice_ui::US25::US25_0(v34_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v34 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v62: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v51.clone()))),
                )),
                string(""),
            );
            let v64: bool = true;
            leptos::logging::log!("{}", v62);
            let v70: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v72: bool = true;
            leptos::logging::log!("{}", v70);
            let v104: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v76: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v90: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v76));
                    if let Dice_ui::US42::US42_0(v90_0_0) = &v90 {
                        let v94: Dice_ui::US31 = v90_0_0.clone();
                        if let Dice_ui::US31::US31_0(v94_0_0) = &v94 {
                            Dice_ui::US31::US31_0(v94_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v104_0_0) = &v104 {
                let v106: string = Dice_ui::method41(v104_0_0.clone());
                let v111: &str = &*v106;
                let v132: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v111);
                let v133 = Dice_ui::method42();
                let v138: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v132.map_err(|x| v133(x));
                let v148 = Dice_ui::method161();
                let v149: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method162(v138);
                v149.map(|x| v148(x))
            } else {
                if let Dice_ui::US29::US29_0(v51_0_0) = &v51 {
                    let v152: Dice_ui::US30 = v51_0_0.clone();
                    if let Dice_ui::US30::US30_0(v152_0_0) = &v152 {
                        let v153: Dice_ui::US31 = v152_0_0.clone();
                        if let Dice_ui::US31::US31_0(v153_0_0) = &v153 {
                            let v155: string = Dice_ui::method41(v153_0_0.clone());
                            let v160: &str = &*v155;
                            let v181: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v160);
                            let v182 = Dice_ui::method42();
                            let v187: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v181.map_err(|x| v182(x));
                            let v197 = Dice_ui::method161();
                            let v198: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method162(v187);
                            v198.map(|x| v197(x))
                        } else {
                            let v204: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v104.clone(), v51.clone())),
                                )),
                                string(""),
                            );
                            let v206: bool = true;
                            leptos::logging::log!("{}", v204);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v213: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v104.clone(), v51.clone())),
                            )),
                            string(""),
                        );
                        let v215: bool = true;
                        leptos::logging::log!("{}", v213);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v222: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v104.clone(), v51.clone())),
                        )),
                        string(""),
                    );
                    let v224: bool = true;
                    leptos::logging::log!("{}", v222);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure131(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure132(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method160(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure131(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure130(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v9: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v11: bool = true;
            leptos::logging::log!("{}", v9);
            let v13: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v27: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v13));
            let v71: Dice_ui::US35 = match &v27 {
                Dice_ui::US26::US26_0(v27_0_0) => {
                    let v31: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v27 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v32 = Dice_ui::method83();
                    let v33 = Dice_ui::method84();
                    let v34: Dice_ui::US24 = match &v31 {
                        Err(v31_1_0) => v33(v31_1_0.clone()),
                        Ok(v31_0_0) => v32(v31_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v34 {
                        Dice_ui::US24::US24_0(v34_0_0) => {
                            let v37: bool = true;
                            let _vec_map: Vec<_> = v34_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v39: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v53: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v39),
                                    );
                                    let v58: bool = true;
                                    v53
                                })
                                .collect::<Vec<_>>();
                            let v60: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v60.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v34_1_0) => Dice_ui::US36::US36_1(v34_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v77: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v71.clone()))),
                )),
                string(""),
            );
            let v79: bool = true;
            leptos::logging::log!("{}", v77);
            let v81: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v95: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v81));
            let v106: Dice_ui::US38 = match &v95 {
                Dice_ui::US37::US37_0(v95_0_0) => {
                    let v99: Result<Vec<Option<string>>, std::string::String> = match &v95 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v100 = Dice_ui::method104();
                    let v101 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v99 {
                        Err(v99_1_0) => v101(v99_1_0.clone()),
                        Ok(v99_0_0) => v100(v99_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v142: Dice_ui::US40 = match &v106 {
                Dice_ui::US38::US38_0(v106_0_0) => {
                    let v107: Dice_ui::US39 = match &v106 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v107 {
                        Dice_ui::US39::US39_0(v107_0_0) => {
                            let v110: bool = true;
                            let _vec_map: Vec<_> = v107_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v112: Option<string> = x;
                                    let v126: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v112),
                                    );
                                    let v131: bool = true;
                                    v126
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v107_1_0) => Dice_ui::US41::US41_1(v107_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v145: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v149: Dice_ui::US41 = match &v142 {
                Dice_ui::US40::US40_0(v142_0_0) => match &v142 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v145.clone()),
            };
            let v214: bool = match &v149 {
                Dice_ui::US41::US41_0(v149_0_0) => {
                    let v152: bool = true;
                    v149_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v154: Dice_ui::US31 = x;
                        let v207: bool = if let Dice_ui::US31::US31_0(v154_0_0) = &v154 {
                            let v160: &str = &*v154_0_0.clone();
                            let v204: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v160),
                            });
                            let v206: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v204.clone());
                            true
                        } else {
                            false
                        };
                        let v209: bool = true;
                        let v211: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v215 = Dice_ui::method160(v71, v149.clone());
            let v216: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v218: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v216
                .iter()
                .enumerate()
                .map(|(i, x)| v215(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v220: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v218.clone());
            let v226: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v220.clone()),
                    )),
                    string(""),
                ),
            );
            let v228: bool = true;
            leptos::logging::log!("{}", v226);
            v220
        }
        pub fn method164(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure135(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method164(v0_1), v1)
        }
        pub fn method163(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure135(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method165(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn method166(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure136(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = Dice_ui::method166(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure134(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v27: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v32: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v46: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v32));
            let v90: Dice_ui::US35 = match &v46 {
                Dice_ui::US26::US26_0(v46_0_0) => {
                    let v50: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v46 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v51 = Dice_ui::method83();
                    let v52 = Dice_ui::method84();
                    let v53: Dice_ui::US24 = match &v50 {
                        Err(v50_1_0) => v52(v50_1_0.clone()),
                        Ok(v50_0_0) => v51(v50_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v53 {
                        Dice_ui::US24::US24_0(v53_0_0) => {
                            let v56: bool = true;
                            let _vec_map: Vec<_> = v53_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v58: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v72: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v58),
                                    );
                                    let v77: bool = true;
                                    v72
                                })
                                .collect::<Vec<_>>();
                            let v79: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v79.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v53_1_0) => Dice_ui::US36::US36_1(v53_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v95: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v27));
            let v100: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v90));
            let v101: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v95))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v100))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v103: bool = true;
            leptos::logging::log!("{}", v101);
            let v105: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v107: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v105.to_vec();
            let v110: bool = true;
            let _func1_from_v108 = Func1::from(move |value| {
                //;
                let v112: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = value;
                let v113 = Dice_ui::method163(v0_1);
                let v114: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = Dice_ui::method165(v112);
                let v116: Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                > = v114.map(|x| v113(x));
                let v119: bool = true;
                v116 /*;
                     let v121: bool = */
            }); //;
            let v123: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = _func1_from_v108;
            let v126: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v107
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v123 = v123.clone();
                        move |v: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure136(v123.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v132: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v126.clone()),
                    )),
                    string(""),
                ),
            );
            let v134: bool = true;
            leptos::logging::log!("{}", v132);
            v126
        }
        pub fn method159(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
 //;
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
 //;
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v38: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v50: string = string("}");
                                let v57: bool = true;
                                let _fix_closure_v52 = v38;
                                let v62: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v52 "), (v50))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v63: bool = true;
                                _fix_closure_v52
                            },
                        ); // rust.fix_closure';
                        let v65 = __future_init;
                        let v67: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v65;
                        let v69: Result<rexie::Rexie, std::string::String> = v67.await;
                        let v74: rexie::Rexie = v69.unwrap();
                        let v85: rexie::Rexie = (Dice_ui::method7())(v74);
                        let v87: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v85);
                        let v93: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v87.clone()))),
                                        string("")));
                        let v95: bool = true;
                        leptos::logging::log!("{}", v93);
                        let v96: string = string("}");
                        let v103: bool = true;
                        let _fix_closure_v98 = v87;
                        let v108: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v98 "), (v96))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v109: bool = true;
                        _fix_closure_v98
                    },
                ); // rust.fix_closure';
                let v111 = __future_init;
                let v113: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v111;
                let v115: bool = true;
                v113 /*;
                     let v117: bool = */
            }); //;
            let v119: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v121: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v119().await });
            let v124: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v121 = v121.clone();
                    move || Dice_ui::closure64(v121.clone(), ())
                })()
            });
            let v127: bool = true;
            let _func0_from_v125 = Func0::from(move || {
                //;
                let v129: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v121.clone()), |x| {
                        x.clone()
                    });
                let v131: bool = true;
                let _optionm_map_ = v129.map(|x| {
                    //;
                    let v133: std::sync::Arc<rexie::Rexie> = x;
                    let v136: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v133);
                    let v138: bool = true;
                    v136
                });
                let v140: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v142: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v144: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v146: bool = */
                    async move {
                        /*;
                        let v148: bool = */
 //;
                        let v149: string = sprintf!("{:?}", v140.clone());
                        let v157: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v142.clone()))))),
                                       string(" / database: "))), (v149))),
                       string(""));
                        let v159: bool = true;
                        leptos::logging::log!("{}", v157);
                        let v161: bool = true;
                        let _optionm_map_ = v140.map(|x| {
                            //;
                            let v163: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v165: std::sync::Arc<rexie::Rexie> = v163.0;
                            let v167: bool = true;
                            v165
                        });
                        let v169: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v183: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v169));
                        let v594: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v183_0_0) = &v183 {
                            let v190: bool = true;
                            let _func1_from_v188 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v197: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v198: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v197.clone()),
                                    )),
                                    string(""),
                                );
                                let v200: bool = true;
                                leptos::logging::log!("{}", v198);
                                let v202: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v204: bool = */
                                    async {
                                        /*;
                                        let v206: bool = */
 //;
                                        let v208: Array<string> = new_array(&[string("store")]);
                                        let v210: Vec<string> = v208.to_vec();
                                        let v213: bool = true;
                                        let _func1_from_v211 = Func1::from(move |value| {
                                            //;
                                            let v215: string = value;
                                            let v220: &str = &*v215;
                                            let v244: std::string::String = String::from(v220);
                                            let v266: bool = true;
                                            v244 /*;
                                                 let v268: bool = */
                                        }); //;
                                        let v270: Func1<string, std::string::String> =
                                            _func1_from_v211;
                                        let v273: Vec<std::string::String> = v210
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v270 = v270.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v270.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v274: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v183_0_0.clone());
                                        let v276: Result<rexie::Transaction, rexie::Error> = v274
                                            .transaction(&v273, rexie::TransactionMode::ReadOnly);
                                        let v277 = Dice_ui::method12();
                                        let v282: Result<rexie::Transaction, std::string::String> =
                                            v276.map_err(|x| v277(x));
                                        let v293: rexie::Transaction = v282?;
                                        let v294: string = Dice_ui::method13();
                                        let v299: &str = &*v294;
                                        let v320: Result<rexie::Store, rexie::Error> =
                                            v293.store(v299);
                                        let v321 = Dice_ui::method14();
                                        let v326: Result<rexie::Store, std::string::String> =
                                            v320.map_err(|x| v321(x));
                                        let v337: rexie::Store = v326?;
                                        let v338: string = Dice_ui::method79(v197);
                                        let v343: &str = &*v338;
                                        let v364: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v343);
                                        let v366: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v337, v364));
                                        let v368: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v366.await;
                                        let v369 = Dice_ui::method16();
                                        let v374: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v368.map_err(|x| v369(x));
                                        let v385: Option<wasm_bindgen::JsValue> = v374?;
                                        let v399: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v385),
                                        );
                                        let v499: Dice_ui::US25 = match &v399 {
                                            Dice_ui::US4::US4_0(v399_0_0) => {
                                                let v404: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v399 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v406: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v404);
                                                let v407 = Dice_ui::method19();
                                                let v412: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v406.map_err(|x| v407(x));
                                                let v423: Option<serde_json::Value> = v412?;
                                                let v437: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v423),
                                                );
                                                match &v437 {
                                                    Dice_ui::US5::US5_0(v437_0_0) => {
                                                        let v442: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v437 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v444: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v442);
                                                        let v445 = Dice_ui::method22();
                                                        let v450: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v444.map_err(|x| v445(x));
                                                        let v461: Vec<u8> = v450?;
                                                        let v463: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v461.clone());
                                                        let v465: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v463.clone()))))),
                                                   string(""));
                                                        let v467: bool = true;
                                                        leptos::logging::log!("{}", v465);
                                                        let v469: Vec<u8> = v463.to_vec();
                                                        let v471: &[u8] = v469.as_slice();
                                                        let v473: bool = true;
                                                        let mut v471 = v471;
                                                        let v475: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v471,
                                                        );
                                                        let v476 = Dice_ui::method23();
                                                        let v481: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v475.map_err(|x| v476(x));
                                                        Dice_ui::US25::US25_0(v481?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v506: Option<LrcPtr<Dice_ui::Heap4>> = match &v499 {
                                            Dice_ui::US25::US25_0(v499_0_0) => Some(
                                                match &v499 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v508: string = string("}");
                                        let v515: bool = true;
                                        let _fix_closure_v510 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v506
                                        );
                                        let v520: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v510 "),
                                                        (v508),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v521: bool = true;
                                        _fix_closure_v510
                                    },
                                ); // rust.fix_closure';
                                let v523 = __future_init;
                                let v525: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v523;
                                let v528: bool = true;
                                v525 /*;
                                     let v530: bool = */
                            }); //;
                            let v532: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v188;
                            let v536: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v142.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v532 = v532.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v532.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v538: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v536);
                            let v540: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v538.await;
                            Dice_ui::US24::US24_0(v540?)
                        } else {
                            let v549: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v549))
                        };
                        let v600: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v594 {
                                Dice_ui::US24::US24_0(v594_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v594_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v594_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v594_1_0.clone(),
                                    )
                                }
                            };
                        let v606: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v600.clone()))),
                                        string("")));
                        let v608: bool = true;
                        leptos::logging::log!("{}", v606);
                        let v609: string = string("}");
                        let v616: bool = true;
                        let _fix_closure_v611 = v600;
                        let v621: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v611 "), (v609))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v622: bool = true;
                        _fix_closure_v611
                    },
                ); // rust.fix_closure';
                let v624 = __future_init;
                let v626: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v624;
                let v628: bool = true;
                v626 /*;
                     let v630: bool = */
            }); //;
            let v632: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v125;
            let v634: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v632().await });
            let v637: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v634 = v634.clone();
                    move || Dice_ui::closure66(v634.clone(), ())
                })()
            });
            let v640: bool = true;
            let _func0_from_v638 = Func0::from(move || {
                //;
                let v642: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v644: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v637.clone());
                let v650: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v642.clone()))),
                    )),
                    string(""),
                );
                let v652: bool = true;
                leptos::logging::log!("{}", v650);
                let v654: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v656: bool = */
                    async move {
                        /*;
                        let v658: bool = */
 //;
                        let v672: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v644));
                        let v714: Dice_ui::US27 = match &v672 {
                            Dice_ui::US26::US26_0(v672_0_0) => {
                                let v676: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v672 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v677 = Dice_ui::method83();
                                let v678 = Dice_ui::method84();
                                let v679: Dice_ui::US24 = match &v676 {
                                    Err(v676_1_0) => v678(v676_1_0.clone()),
                                    Ok(v676_0_0) => v677(v676_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v679 {
                                    Dice_ui::US24::US24_0(v679_0_0) => {
                                        let v682: bool = true;
                                        let _vec_map: Vec<_> = v679_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v684: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v698: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v684),
                                                );
                                                let v703: bool = true;
                                                v698
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v679_1_0) => {
                                        Dice_ui::US28::US28_1(v679_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v720: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v714.clone()))),
                            )),
                            string(""),
                        );
                        let v722: bool = true;
                        leptos::logging::log!("{}", v720);
                        let v723 = Dice_ui::method86(v714);
                        let v724: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v642);
                        let v727: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v724.iter()
                                .enumerate()
                                .map(|(i, x)| v723(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v729: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v727);
                        let v731: Result<Vec<Option<string>>, std::string::String> = v729.await;
                        let v733: Vec<Option<string>> = v731?;
                        let v735: string = string("}");
                        let v742: bool = true;
                        let _fix_closure_v737 =
                            Ok::<Vec<Option<string>>, std::string::String>(v733);
                        let v747: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v737 "), (v735))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v748: bool = true;
                        _fix_closure_v737
                    },
                ); // rust.fix_closure';
                let v750 = __future_init;
                let v752: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v750;
                let v754: bool = true;
                v752 /*;
                     let v756: bool = */
            }); //;
            let v758: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v638;
            let v760: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v758().await });
            let v763: bool = true;
            let _func1_from_v761 = Func1::from(move |value| {
                //;
                let v765: LrcPtr<Dice_ui::Heap4> = value;
                let v770: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v765.clone())) as i64)),
                    )),
                    string(""),
                );
                let v772: bool = true;
                leptos::logging::log!("{}", v770);
                let v774: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v776: bool = */
                    async move {
                        /*;
                        let v778: bool = */
 //;
                        let v780: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v782: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v780);
                        let v784: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v124);
                        let v786: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v784);
                        let v788: bool = true;
                        let _optionm_map_ = v786.map(|x| {
                            //;
                            let v790: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v792: std::sync::Arc<rexie::Rexie> = v790.0;
                            let v794: bool = true;
                            v792
                        });
                        let v796: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v810: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v796));
                        let v970: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v810_0_0) = &v810 {
                            let v817: bool = true;
                            let _func1_from_v815 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v819: string = patternInput_1.0.clone();
                                let v825: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v827: bool = */
                                    async move {
                                        /*;
                                        let v829: bool = */
 //;
                                        let v830: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v819.clone()))), string(""));
                                        let v832: bool = true;
                                        leptos::logging::log!("{}", v830);
                                        let v833: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v819))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v838: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v765.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v840: bool = true;
                                        leptos::logging::log!("{}", v838);
                                        let v842: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v844: bool = */
                                            async move {
                                                /*;
                                                let v846: bool = */
 //;
                                                let v848: bool = true;
                                                let mut data = Vec::new();
                                                let v850: bool = true;
                                                borsh::BorshSerialize::serialize(&v765, &mut data)
                                                    .unwrap();
                                                let v852: Vec<u8> = data;
                                                let v854: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v852).unwrap();
                                                let v855: string = Dice_ui::method98(v833);
                                                let v860: &str = &*v855;
                                                let v881: rexie::Transaction =
                                                    v810_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v883: rexie::Store = v881.store("store")?;
                                                let v885: bool = true;
                                                v883.put(&v854, Some(&v860.into())).await?;
                                                let v887: bool = true;
                                                v881.done().await?;
                                                let v889: string = string("}");
                                                let v896: bool = true;
                                                let _fix_closure_v891 = Ok::<(), rexie::Error>(());
                                                let v901: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v891 "),
                                                                (v889),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v902: bool = true;
                                                _fix_closure_v891
                                            },
                                        ); // rust.fix_closure';
                                        let v904 = __future_init;
                                        let v906: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v904;
                                        let v908: Result<(), rexie::Error> = v906.await;
                                        let v909 = Dice_ui::method99();
                                        let v914: Result<(), std::string::String> =
                                            v908.map_err(|x| v909(x));
                                        let v925: bool = true;
                                        v914?;
                                        let v927: string = string("}");
                                        let v934: bool = true;
                                        let _fix_closure_v929 = Ok::<(), std::string::String>(());
                                        let v939: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v929 "),
                                                        (v927),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v940: bool = true;
                                        _fix_closure_v929
                                    },
                                ); // rust.fix_closure';
                                let v942 = __future_init;
                                let v944: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                > = v942;
                                let v947: bool = true;
                                v944 /*;
                                     let v949: bool = */
                            }); //;
                            let v951: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v815;
                            let v955: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v782.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v951 = v951.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v951.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v957: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v955);
                            let v959: Result<Vec<()>, std::string::String> = v957.await;
                            Dice_ui::US34::US34_0(v959?)
                        } else {
                            let v965: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v976: Result<Vec<()>, std::string::String> = match &v970 {
                            Dice_ui::US34::US34_0(v970_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v970_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v970_1_0) => {
                                Err::<Vec<()>, std::string::String>(v970_1_0.clone())
                            }
                        };
                        let v977: string = string("}");
                        let v984: bool = true;
                        let _fix_closure_v979 = v976;
                        let v989: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v979 "), (v977))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v990: bool = true;
                        _fix_closure_v979
                    },
                ); // rust.fix_closure';
                let v992 = __future_init;
                let v994: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v992;
                let v997: bool = true;
                v994 /*;
                     let v999: bool = */
            }); //;
            let v1001: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v761;
            let v1004: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1001 = v1001.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1001.clone(), v_1)
                })(value.clone())
            });
            let v1007: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1004 = v1004.clone();
                    let v637 = v637.clone();
                    let v760 = v760.clone();
                    move || {
                        Dice_ui::closure130(
                            v0_1.clone(),
                            v637.clone(),
                            v760.clone(),
                            v1004.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1007 = v1007.clone();
                    let v121 = v121.clone();
                    let v634 = v634.clone();
                    move || {
                        Dice_ui::closure134(
                            v1.clone(),
                            v121.clone(),
                            v634.clone(),
                            v1007.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn method167() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure137(unitVar: (), v0_1: Dice_ui::US14) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method168() -> Func1<Dice_ui::US14, Dice_ui::US57> {
            Func1::new(move |v: Dice_ui::US14| Dice_ui::closure137((), v))
        }
        pub fn closure138(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method169() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure138((), v))
        }
        pub fn closure139(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method170() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US60> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure139((), v))
        }
        pub fn closure140(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method171() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure140((), v))
        }
        pub fn method172(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap6>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure141(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            > = Dice_ui::method172(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure144(unitVar: (), v0_1: Dice_ui::US59) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(v0_1)
        }
        pub fn method174() -> Func1<Dice_ui::US59, Dice_ui::US58> {
            Func1::new(move |v: Dice_ui::US59| Dice_ui::closure144((), v))
        }
        pub fn closure145(unitVar: (), v0_1: std::string::String) -> Dice_ui::US58 {
            Dice_ui::US58::US58_1(v0_1)
        }
        pub fn method175() -> Func1<std::string::String, Dice_ui::US58> {
            Func1::new(move |v: std::string::String| Dice_ui::closure145((), v))
        }
        pub fn closure143(
            unitVar: (),
            v0_1: Result<Dice_ui::US59, std::string::String>,
        ) -> Dice_ui::US58 {
            let v1 = Dice_ui::method174();
            let v2 = Dice_ui::method175();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method173() -> Func1<Result<Dice_ui::US59, std::string::String>, Dice_ui::US58> {
            Func1::new(move |v: Result<Dice_ui::US59, std::string::String>| {
                Dice_ui::closure143((), v)
            })
        }
        pub fn closure146(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn method176() -> Func1<Dice_ui::US58, Dice_ui::US62> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure146((), v))
        }
        pub fn closure142(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::ArcRwSignal<
                Option<Result<Dice_ui::US59, std::string::String>>,
            > = leptos::prelude::ArcAction::value(&v0_1);
            let v4: Option<Result<Dice_ui::US59, std::string::String>> =
                leptos::prelude::ArcRwSignal::get(&v2);
            let v6: Option<Dice_ui::US58> = map(Dice_ui::method173(), v4);
            let v32: Dice_ui::US62 =
                defaultValue(Dice_ui::US62::US62_1, map(Dice_ui::method176(), v6));
            let v53: Dice_ui::US58 = if let Dice_ui::US62::US62_0(v32_0_0) = &v32 {
                let v36: Dice_ui::US58 = v32_0_0.clone();
                match &v36 {
                    Dice_ui::US58::US58_0(v36_0_0) => {
                        let v39: Dice_ui::US59 = v36_0_0.clone();
                        if let Dice_ui::US59::US59_0(v39_0_0, v39_0_1, v39_0_2, v39_0_3) = &v39 {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                v39_0_0.clone(),
                                v39_0_1.clone(),
                                v39_0_2.clone(),
                                v39_0_3.clone(),
                            ))
                        } else {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                        }
                    }
                    Dice_ui::US58::US58_1(v36_1_0) => Dice_ui::US58::US58_1(v36_1_0.clone()),
                }
            } else {
                Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
            };
            let v69: Dice_ui::US63 = match &v53 {
                Dice_ui::US58::US58_0(v53_0_0) => {
                    let v54: Dice_ui::US59 = v53_0_0.clone();
                    Dice_ui::US63::US63_0(match &v54 {
                        Dice_ui::US59::US59_0(v54_0_0, v54_0_1, v54_0_2, v54_0_3) => Some((
                            match &v54 {
                                Dice_ui::US59::US59_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US59::US59_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US59::US59_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v54 {
                                Dice_ui::US59::US59_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US58::US58_1(v53_1_0) => Dice_ui::US63::US63_1(v53_1_0.clone()),
            };
            let v75: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v69 {
                Dice_ui::US63::US63_0(v69_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_0_0.clone()),
                Dice_ui::US63::US63_1(v69_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v69_1_0.clone()),
            };
            let v81: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / roll new_arc_memo / result: "),
                        sprintf!("{:?}", v75.clone()),
                    )),
                    string(""),
                ),
            );
            let v83: bool = true;
            leptos::logging::log!("{}", v81);
            v75
        }
        pub fn closure148(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method177() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US63,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure148((), v),
            )
        }
        pub fn closure149(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn method178() -> Func1<std::string::String, Dice_ui::US63> {
            Func1::new(move |v: std::string::String| Dice_ui::closure149((), v))
        }
        pub fn closure150(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method179() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US59,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure150((), arg10_0040),
            )
        }
        pub fn closure151(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method180() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US64,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure151((), arg10_0040),
            )
        }
        pub fn closure147(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method177();
            let v4 = Dice_ui::method178();
            let v5: Dice_ui::US63 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v31: Dice_ui::US58 = match &v5 {
                Dice_ui::US63::US63_0(v5_0_0) => Dice_ui::US58::US58_0(defaultValue(
                    Dice_ui::US59::US59_1,
                    map(Dice_ui::method179(), v5_0_0.clone()),
                )),
                Dice_ui::US63::US63_1(v5_1_0) => Dice_ui::US58::US58_1(v5_1_0.clone()),
            };
            let v72: Dice_ui::US31 = if let Dice_ui::US58::US58_0(v31_0_0) = &v31 {
                let v32: Dice_ui::US59 = v31_0_0.clone();
                if let Dice_ui::US59::US59_0(v32_0_0, v32_0_1, v32_0_2, v32_0_3) = &v32 {
                    let v55: Dice_ui::US64 = defaultValue(
                        Dice_ui::US64::US64_1,
                        map(Dice_ui::method180(), v32_0_2.clone()),
                    );
                    if let Dice_ui::US64::US64_0(
                        v55_0_0,
                        v55_0_1,
                        v55_0_2,
                        v55_0_3,
                        v55_0_4,
                        v55_0_5,
                    ) = &v55
                    {
                        Dice_ui::US31::US31_0(append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append((toString(v55_0_0.clone())), string(": "))),
                                                (toString(v55_0_4.clone())),
                                            )),
                                            string(" - "),
                                        )),
                                        (toString(v55_0_5.clone())),
                                    )),
                                    string(" ("),
                                )),
                                (toString(v55_0_1.clone())),
                            )),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US31::US31_1
                    }
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            let v79: Option<string> = match &v72 {
                Dice_ui::US31::US31_0(v72_0_0) => Some(
                    match &v72 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => None::<string>,
            };
            let v85: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / error_message new_arc_memo / result: "),
                        sprintf!("{:?}", v79.clone()),
                    )),
                    string(""),
                ),
            );
            let v87: bool = true;
            leptos::logging::log!("{}", v85);
            v79
        }
        pub fn closure152(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US31 {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v23: Dice_ui::US14 = defaultValue(
                Dice_ui::US14::US14_1,
                map(Dice_ui::method39(), v8.l1.clone()),
            );
            match &v23 {
                Dice_ui::US14::US14_0(v23_0_0) => {
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                        match &v23 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US31::US31_1,
            }
        }
        pub fn method181(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> {
            v0_1
        }
        pub fn closure154(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
            v1_: bool,
            v1__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v2: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                Dice_ui::method181(v0_1);
            let patternInput: (bool, std::string::String) =
                (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method182(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
        ) -> Func1<(bool, std::string::String), std::string::String> {
            v0_1
        }
        pub fn closure155(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
            _arg: (bool, std::string::String),
        ) -> std::string::String {
            let v3: Func1<(bool, std::string::String), std::string::String> =
                Dice_ui::method182(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure157(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure156(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure157(v0_1, v)
            })
        }
        pub fn method183() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure156((), v))
        }
        pub fn method184(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure153(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let v14: LrcPtr<(bool, std::string::String)> = value;
                let v23: bool = true;
                (v14.0.clone(), v14.1.clone()) /*;
                                               let v25: bool = */
            }); //;
            let v27: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                _func1_from_v10;
            let v30: Vec<(bool, std::string::String)> = v8
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v27 = v27.clone();
                        move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                            Dice_ui::closure154(
                                v27.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v31 = Dice_ui::method55();
            let v32: Vec<(bool, std::string::String)> = Dice_ui::method56(v30);
            let v34: Vec<(bool, std::string::String)> = v32
                .into_iter()
                .filter(|x| v31(x.clone().clone()))
                .collect::<Vec<_>>();
            let v37: bool = true;
            let _func1_from_v35 = Func1::from(move |value| {
                //;
                let patternInput: (bool, std::string::String) = value;
                let v43: bool = true;
                patternInput.1.clone() /*;
                                       let v45: bool = */
            }); //;
            let v47: Func1<(bool, std::string::String), std::string::String> = _func1_from_v35;
            let v50: Vec<std::string::String> = v34
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v47 = v47.clone();
                        move |arg10_0040_1: (bool, std::string::String)| {
                            Dice_ui::closure155(v47.clone(), arg10_0040_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v51 = Dice_ui::method183();
            let v52: Vec<std::string::String> = Dice_ui::method184(v50);
            v52.iter()
                .enumerate()
                .map(|(i, x)| v51(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method185(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure159(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<std::string::String>,
            leptos::prelude::WriteSignal<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = Dice_ui::method185(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method186(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
            (i32, leptos::prelude::ReadSignal<std::string::String>),
        > {
            v0_1
        }
        pub fn closure160(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::prelude::ReadSignal<std::string::String>) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = Dice_ui::method186(v0_1);
            let patternInput: (i32, leptos::prelude::ReadSignal<std::string::String>) =
                (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure158(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = v7.1.clone();
                let v19: bool = true;
                (v7.0.clone(), b.0.clone(), b.1.clone()) /*;
                                                         let v21: bool = */
            }); //;
            let v23: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = _func1_from_v3;
            let v26: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v23 = v23.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<std::string::String>,
                                leptos::prelude::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure159(
                                v23.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v29: bool = true;
            let _func1_from_v27 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = value;
                let v36: bool = true;
                (patternInput.0.clone(), patternInput.1.clone()) /*;
                                                                 let v38: bool = */
            }); //;
            let v40: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = _func1_from_v27;
            v26.into_iter()
                .map(|x| {
                    Func1::new({
                        let v40 = v40.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        )| Dice_ui::closure160(v40.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure161(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure162(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure163(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure164(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure165(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method187() -> Func0<string> {
            Func0::new(move || Dice_ui::closure165((), ()))
        }
        pub fn closure166(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure168(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure169(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure170(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure171(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure173(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<Dice_ui::US31>,
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(v0_1)
        }
        pub fn method189() -> Func1<leptos::prelude::ArcMemo<Dice_ui::US31>, Dice_ui::US65> {
            Func1::new(move |v: leptos::prelude::ArcMemo<Dice_ui::US31>| Dice_ui::closure173((), v))
        }
        pub fn closure172(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v16: Dice_ui::US65 =
                defaultValue(Dice_ui::US65::US65_1, map(Dice_ui::method189(), v1));
            let v26: Dice_ui::US42 = match &v16 {
                Dice_ui::US65::US65_0(v16_0_0) => {
                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                        &match &v16 {
                            Dice_ui::US65::US65_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US42::US42_1,
            };
            let v33: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v26_0_0) = &v26 {
                let v27: Dice_ui::US31 = v26_0_0.clone();
                if let Dice_ui::US31::US31_0(v27_0_0) = &v27 {
                    Dice_ui::US31::US31_0(v27_0_0.clone())
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            match &v33 {
                Dice_ui::US31::US31_0(v33_0_0) => match &v33 {
                    Dice_ui::US31::US31_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string("Select..."),
            }
        }
        pub fn method188(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure172(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure175(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method190() -> Func1<
            leptos::prelude::ArcMemo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US66,
        > {
            Func1::new(
                move |v: leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure175((), v),
            )
        }
        pub fn method192(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            v0_1
        }
        pub fn closure176(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            let v3: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> =
                Dice_ui::method192(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method191(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure176(v0_1.clone(), arg10_0040)
                }
            })
        }
        pub fn method193(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure177(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method194(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), leptos::prelude::AnyView>
        {
            v0_1
        }
        pub fn closure178(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v3: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            > = Dice_ui::method194(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure174(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v5: string = append(
                (append((append(string(" "), (v3))), string(""))),
                string(""),
            );
            let v19: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method190(), v0_1.clone()),
            );
            let v29: Dice_ui::US67 = match &v19 {
                Dice_ui::US66::US66_0(v19_0_0) => {
                    Dice_ui::US67::US67_0(leptos::prelude::ArcMemo::get(
                        &match &v19 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US67::US67_1,
            };
            let v32: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v35: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v29 {
                Dice_ui::US67::US67_0(v29_0_0) => match &v29 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => v32.clone(),
            };
            let v716: leptos::prelude::Fragment = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v35.clone()),
            ) as u64)
                == 0_u64
            {
                let v41: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v43: string = string(" class=\"[height:17px]\"");
                let v57: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v63: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v64: string = string("vec![]");
                let v65: Vec<leptos::prelude::AnyView> = vec![];
                let v67: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v65);
                let v69: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v67);
                let v72: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v63))),
                                    string(">move || { v69 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v74: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v69 }</path> };
                let v76: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v74);
                let v80: string = string("vec![v76]");
                let v81: Vec<leptos::prelude::AnyView> = vec![v76];
                let v83: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v81);
                let v85: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v83);
                let v88: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v57))),
                                    string(">move || { v85 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v90: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v85 }</svg> };
                let v92: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v90);
                let v96: string = string("vec![v92]");
                let v97: Vec<leptos::prelude::AnyView> = vec![v92];
                let v99: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v97);
                let v101: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v99);
                let v104: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v43))),
                                    string(">move || { v101 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v106: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v101 }</span> };
                let v108: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v106);
                let v110: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v116: &str = &*string("No data");
                let v140: std::string::String = String::from(v116);
                let v161: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v140));
                let v165: string = string("vec![v161]");
                let v166: Vec<leptos::prelude::AnyView> = vec![v161];
                let v168: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v166);
                let v170: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v168);
                let v173: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v110))),
                                    string(">move || { v170 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v175: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v170 }</pre> };
                let v177: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v175);
                let v185: string = string("vec![v108, v177]");
                let v186: Vec<leptos::prelude::AnyView> = vec![v108, v177];
                let v188: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v186);
                let v190: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v188);
                let v193: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v41))),
                                    string(">move || { v190 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v195: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v190 }</div> };
                let v197: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v195);
                let v201: string = string("vec![v197]");
                let v202: Vec<leptos::prelude::AnyView> = vec![v197];
                leptos::prelude::Fragment::new(v202)
            } else {
                let v218: Dice_ui::US66 =
                    defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method190(), v0_1));
                match &v218 {
                    Dice_ui::US66::US66_0(v218_0_0) => {
                        let v224: leptos::prelude::ArcMemo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = match &v218 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v227: bool = true;
                        let _func1_from_v225 = Func1::from(move |value| {
                            //;
                            let patternInput: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v233: bool = true;
                            patternInput.0.clone() /*;
                                                   let v235: bool = */
                        }); //;
                        let v238 = Dice_ui::method191(_func1_from_v225);
                        let v241: bool = true;
                        let _func1_from_v239 = Func1::from(move |value| {
                            //;
                            let patternInput_1: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v246: std::string::String =
                                leptos::prelude::ReadSignal::get(&patternInput_1.1.clone());
                            let v247: std::string::String = Dice_ui::method193(v246.clone());
                            let v250: bool = true;
                            let _func0_from_v248 = Func0::from(move || {
                                //;
                                let v252: string =
                                    fable_library_rust::String_::fromString(v246.clone());
                                let v255: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v257: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v255);
                                let v260: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                                > = Box::pin(v257.l3.clone());
                                let v262: LrcPtr<Dice_ui::Heap0> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v260);
                                let v270: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v272: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v270);
                                let v278: &str = &*v252;
                                let v325: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                                    l0: v262.l0.clone(),
                                    l1: Some(String::from(v278)),
                                    l2: v262.l2,
                                    l3: v262.l3,
                                    l4: v262.l4.clone(),
                                });
                                let v327: bool = true;
                                leptos::prelude::ArcRwSignal::set(&v272.l3.clone(), v325); //;
                                let v329: bool = true; /*;
                                                       let v331: bool = */
                            }); //;
                            let v333: Func0<()> = _func0_from_v248;
                            let v423: string = join(
                                string(" "),
                                toArray(delay(Func0::new(move || {
                                    ofList(ofArray_1(new_array(&[
                                        string("flex"),
                                        string("flex-1"),
                                        string("gap-[10px]"),
                                        string("[align-items:center]"),
                                        string("[justify-content:center]"),
                                        string("inline-block"),
                                        string("rounded"),
                                        string("border"),
                                        string("border-gray-400"),
                                        string("hover:bg-gray-100"),
                                        string("px-[22px]"),
                                        string("py-1"),
                                        string("text-sm"),
                                        string("text-gray-900"),
                                        string("bg-gray-200"),
                                        string("hover:text-gray-600"),
                                        string("focus:outline-none"),
                                        string("focus:ring"),
                                        string("active:text-gray-500"),
                                    ])))
                                }))),
                            );
                            let v430: &str = &*v423;
                            let v454: std::string::String = String::from(v430);
                            let v475: std::string::String = v454;
                            let v481: string =
                                string(" aria-label=v247 on:click=move |_| v333() class=v475");
                            let v483: string = fable_library_rust::String_::fromString(v246);
                            let v497: Dice_ui::US65 = defaultValue(
                                Dice_ui::US65::US65_1,
                                map(Dice_ui::method189(), v1.clone()),
                            );
                            let v507: Dice_ui::US42 = match &v497 {
                                Dice_ui::US65::US65_0(v497_0_0) => {
                                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                                        &match &v497 {
                                            Dice_ui::US65::US65_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US42::US42_1,
                            };
                            let v514: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v507_0_0) = &v507
                            {
                                let v508: Dice_ui::US31 = v507_0_0.clone();
                                if let Dice_ui::US31::US31_0(v508_0_0) = &v508 {
                                    Dice_ui::US31::US31_0(v508_0_0.clone())
                                } else {
                                    Dice_ui::US31::US31_1
                                }
                            } else {
                                Dice_ui::US31::US31_1
                            };
                            let v603: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(
                                v514_0_0,
                            ) = &v514
                            {
                                if (v483.clone()) == (v514_0_0.clone()) {
                                    let v519 = {
                                        let clo = Func0::new(move || Dice_ui::closure177((), ()));
                                        Func1::new({
                                            let clo = clo.clone();
                                            move |arg: ()| clo()
                                        })
                                    };
                                    let v531: string =
                                            string(" class=move || \" \".to_owned() + &v519(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                                    let v541: string =
                                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"");
                                    let v542: string = string("vec![]");
                                    let v543: Vec<leptos::prelude::AnyView> = vec![];
                                    let v545: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v543);
                                    let v547: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v545);
                                    let v550: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<circle "), (v541))),
                                                        string(">move || { v547 }</"),
                                                    )),
                                                    string("circle"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v552: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                                    > = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v547 }</circle> };
                                    let v554: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v552);
                                    let v560: string =
                                            string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                                    let v561: string = string("vec![]");
                                    let v562: Vec<leptos::prelude::AnyView> = vec![];
                                    let v564: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v562);
                                    let v566: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v564);
                                    let v569: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<path "), (v560))),
                                                        string(">move || { v566 }</"),
                                                    )),
                                                    string("path"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v571: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                    > = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v566 }</path> };
                                    let v573: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v571);
                                    let v581: string = string("vec![v554, v573]");
                                    let v582: Vec<leptos::prelude::AnyView> = vec![v554, v573];
                                    let v584: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v582);
                                    let v586: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v584);
                                    let v589: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<svg "), (v531))),
                                                        string(">move || { v586 }</"),
                                                    )),
                                                    string("svg"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v591: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v519(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v586 }</svg> };
                                    leptos::prelude::IntoAny::into_any(v591)
                                } else {
                                    let v594: string = string("vec![]");
                                    let v595: Vec<leptos::prelude::AnyView> = vec![];
                                    leptos::prelude::IntoAny::into_any(v595)
                                }
                            } else {
                                let v599: string = string("vec![]");
                                let v600: Vec<leptos::prelude::AnyView> = vec![];
                                leptos::prelude::IntoAny::into_any(v600)
                            };
                            let v608: &str = &*v483;
                            let v632: std::string::String = String::from(v608);
                            let v653: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v632),
                            );
                            let v661: string = string("vec![v603, v653]");
                            let v662: Vec<leptos::prelude::AnyView> = vec![v603, v653];
                            let v664: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v662);
                            let v666: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v664);
                            let v669: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<button "), (v481))),
                                                string(">move || { v666 }</"),
                                            )),
                                            string("button"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v671: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Button, _, _>,
                            > = leptos::prelude::view! { <button  aria-label=v247 on:click=move |_| v333() class=v475>move || { v666 }</button> };
                            let v673: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v671);
                            let v677: string = string("vec![v673]");
                            let v678: Vec<leptos::prelude::AnyView> = vec![v673];
                            let v680: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v678);
                            let v682: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v680);
                            let v685: bool = true;
                            v682 /*;
                                 let v687: bool = */
                        }); //;
                        let v689: Func1<
                            (i32, leptos::prelude::ReadSignal<std::string::String>),
                            leptos::prelude::AnyView,
                        > = _func1_from_v239;
                        let v701: string =
                                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v693(x) let:x key=move |x| v238(x.to_owned()) each=v224 /> })");
                        let v702: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::view! { <leptos::prelude::For  children=move |x| v693(x) let:x key=move |x| v238(x.to_owned()) each=v224 /> },
                        );
                        let v706: string = string("vec![v702]");
                        let v707: Vec<leptos::prelude::AnyView> = vec![v702];
                        leptos::prelude::Fragment::new(v707)
                    }
                    _ => {
                        let v710: string = string("vec![]");
                        let v711: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::Fragment::new(v711)
                    }
                }
            };
            let v718: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v716);
            let v721: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5))),
                                string(">move || { v718 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v723: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v718 }</div> };
            let v725: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v723);
            let v729: string = string("vec![v725]");
            let v730: Vec<leptos::prelude::AnyView> = vec![v725];
            leptos::prelude::Fragment::new(v730)
        }
        pub fn method195(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure179(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method196(v0_1: Func1<std::string::String, ()>) -> Func1<std::string::String, ()> {
            v0_1
        }
        pub fn closure180(v0_1: Func1<std::string::String, ()>, v1: std::string::String) {
            let v2: Func1<std::string::String, ()> = Dice_ui::method196(v0_1);
            (move |x| v2(x))(v1);
            ()
        }
        pub fn closure181(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::ArcMemo<bool> = leptos::prelude::ArcAction::pending(&v0_1);
            leptos::prelude::ArcMemo::get(&v2)
        }
        pub fn method197(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure182(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure167(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<Option<string>>,
            v3: leptos::prelude::ArcMemo<Dice_ui::US31>,
            v4: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v9: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v15: &str = &*string("Account");
            let v39: std::string::String = String::from(v15);
            let v60: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v39));
            let v63: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            > = Some(v4);
            let v66: Option<leptos::prelude::ArcMemo<Dice_ui::US31>> = Some(v3);
            let v69: string = string("vec![]");
            let v70: Vec<leptos::prelude::AnyView> = vec![];
            let v72: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v70);
            let v74: string = string(" class=\"flex flex-col [position:relative]\"");
            let v77 = {
                let clo = Func0::new(move || Dice_ui::closure168((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v80 = {
                let clo_1 = Func0::new(move || Dice_ui::closure169((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v82: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v86: string = string("vec![v72]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v72];
            let v89: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v87);
            let v91: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v89);
            let v94: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v82))),
                                string(">move || { v91 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v96: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v91 }</div> };
            let v98: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v96);
            let v99: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v77(())");
            let v102: string = append(
                (append(
                    string(" open=move || v80(())"),
                    (append(
                        (append((append(string(" "), (v99))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v105 = {
                let clo_2 = Func0::new(move || Dice_ui::closure170((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v108 = {
                let clo_3 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v63 = v63.clone();
                    let v66 = v66.clone();
                    move || Dice_ui::closure171(v63.clone(), v66.clone(), v0_1.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v109: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v108(()) + \" \" + &v105(())");
            let v110: string = append(
                (append((append(string(" "), (v109))), string(""))),
                string(""),
            );
            let v112: string = string(" class=\"flex items-center gap-2\"");
            let v115: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v116: string = (Dice_ui::method188(v63.clone(), v66.clone(), v0_1.clone()))();
            let v121: &str = &*v116;
            let v145: std::string::String = String::from(v121);
            let v166: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v145));
            let v170: string = string("vec![v166]");
            let v171: Vec<leptos::prelude::AnyView> = vec![v166];
            let v173: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v171);
            let v175: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v173);
            let v178: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v115))),
                                string(">move || { v175 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v180: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v175 }</span> };
            let v182: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v180);
            let v186: string = string("vec![v182]");
            let v187: Vec<leptos::prelude::AnyView> = vec![v182];
            let v189: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v187);
            let v191: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v189);
            let v193: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v112))),
                                string(">move || { v191 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v195: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v191 }</div> };
            let v197: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v195);
            let v199: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v202 = {
                let clo_4 = Func0::new(move || Dice_ui::closure166((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v210: string =
                string(" class=move || \" \".to_owned() + &v202(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v212: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v216: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v212))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v217: string = string("vec![]");
            let v218: Vec<leptos::prelude::AnyView> = vec![];
            let v220: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v218);
            let v222: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v220);
            let v225: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v216))),
                                string(">move || { v222 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v227: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v222 }</path> };
            let v229: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v227);
            let v233: string = string("vec![v229]");
            let v234: Vec<leptos::prelude::AnyView> = vec![v229];
            let v236: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v234);
            let v238: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v236);
            let v241: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v210))),
                                string(">move || { v238 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v243: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v202(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v238 }</svg> };
            let v245: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v243);
            let v249: string = string("vec![v245]");
            let v250: Vec<leptos::prelude::AnyView> = vec![v245];
            let v252: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v250);
            let v254: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v252);
            let v256: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v199))),
                                string(">move || { v254 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v258: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v254 }</span> };
            let v260: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v258);
            let v268: string = string("vec![v197, v260]");
            let v269: Vec<leptos::prelude::AnyView> = vec![v197, v260];
            let v271: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v269);
            let v273: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v271);
            let v276: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<summary "), (v110))),
                                string(">move || { v273 }</"),
                            )),
                            string("summary"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v278: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v108(()) + " " + &v105(())>move || { v273 }</summary> };
            let v280: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v278);
            let v282: string = string(" class=\"flex flex-1 flex-col\"");
            let v286: Func0<leptos::prelude::Fragment> =
                Dice_ui::method195(Func0::new(move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v63 = v63.clone();
                        let v66 = v66.clone();
                        move || Dice_ui::closure174(v63.clone(), v66.clone(), v0_1.clone(), ())
                    })()
                }));
            let v288: leptos::prelude::Fragment = (move || v286())();
            let v290: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v288);
            let v292: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v282))),
                                string(">move || { v290 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v294: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v290 }</div> };
            let v296: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v294);
            let v303: string = string("vec![v280, v296]");
            let v304: Vec<leptos::prelude::AnyView> = vec![v280, v296];
            let v306: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v304);
            let v308: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v306);
            let v311: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<details "), (v102))),
                                string(">move || { v308 }</"),
                            )),
                            string("details"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v313: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Details, _, _>,
            > = leptos::prelude::view! { <details  open=move || v80(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v77(())>move || { v308 }</details> };
            let v315: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v313);
            let v322: string = string("vec![v98, v315]");
            let v323: Vec<leptos::prelude::AnyView> = vec![v98, v315];
            let v325: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v323);
            let v327: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v325);
            let v329: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v74))),
                                string(">move || { v327 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v331: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v327 }</div> };
            let v333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v331);
            let v340: string = string("vec![v60, v333]");
            let v341: Vec<leptos::prelude::AnyView> = vec![v60, v333];
            let v343: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v341);
            let v345: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v343);
            let v347: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v9))),
                                string(">move || { v345 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v349: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v345 }</div> };
            let v351: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v349);
            let v353: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v359: &str = &*string("Max");
            let v383: std::string::String = String::from(v359);
            let v404: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v383));
            let v407: bool = true;
            let _func0_from_v405 = Func0::from(move || {
                //;
                let v410: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v412: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v410);
                let v415: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v412.l3.clone());
                let v417: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v415);
                let v420: bool = true;
                v417.l2 /*;
                        let v422: bool = */
            }); //;
            let v424: Func0<i32> = _func0_from_v405;
            let v427: bool = true;
            let _func1_from_v425 = Func0::from(move || {
                //;
                let v429: std::string::String = value;
                let v432: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v434: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v432);
                let v437: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v434.l3.clone());
                let v439: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v437);
                let v447: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v449: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v447);
                let v452: string = toString(v429);
                let v464: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: v439.l0.clone(),
                    l1: v439.l1.clone(),
                    l2: if string("") == (v452.clone()) {
                        1_i32
                    } else {
                        toInt32(v452)
                    },
                    l3: v439.l3,
                    l4: v439.l4.clone(),
                });
                let v466: bool = true;
                leptos::prelude::ArcRwSignal::set(&v449.l3.clone(), v464); //;
                let v468: bool = true; /*;
                                       let v470: bool = */
            }); //;
            let v472: Func1<std::string::String, ()> = _func1_from_v425;
            let v475 = {
                let clo_5 = Func0::new(move || Dice_ui::closure179((), ()));
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v485: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v478(leptos::prelude::event_target_value(&event)) prop:value=move || v424() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v475(()) /> }");
            let v487: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v478(leptos::prelude::event_target_value(&event)) prop:value=move || v424() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v475(()) /> };
            let v489: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v487);
            let v496: string = string("vec![v404, v489]");
            let v497: Vec<leptos::prelude::AnyView> = vec![v404, v489];
            let v499: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v497);
            let v501: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v499);
            let v503: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v353))),
                                string(">move || { v501 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v505: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v501 }</div> };
            let v507: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v505);
            let v509: string = string(" class=\"flex\"");
            let v512: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure181(v1.clone(), ())
                })()
            });
            let v513: Func0<bool> = Dice_ui::method197(v512.clone());
            let v516: bool = true;
            let _func0_from_v514 = Func0::from(move || {
                //;
                let v519: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v521: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v519);
                let v524: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v521.l3.clone());
                let v528: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                    l0: (leptos::prelude::ArcRwSignal::get_untracked(&v524)).l2,
                });
                let v530: bool = true;
                leptos::prelude::ArcAction::dispatch(&v1.clone(), v528.clone());
                let v532: bool = true; /*;
                                       let v534: bool = */
            }); //;
            let v536: Func0<()> = _func0_from_v514;
            let v622: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("flex"),
                        string("gap-[10px]"),
                        string("[align-items:center]"),
                        string("inline-block"),
                        string("rounded"),
                        string("border"),
                        string("border-gray-400"),
                        string("hover:bg-gray-400"),
                        string("px-4"),
                        string("py-1"),
                        string("text-sm"),
                        string("font-medium"),
                        string("text-gray-900"),
                        string("bg-transparent"),
                        string("hover:text-gray-600"),
                        string("focus:outline-none"),
                        string("focus:ring"),
                        string("active:text-gray-500"),
                    ])))
                }))),
            );
            let v629: &str = &*v622;
            let v653: std::string::String = String::from(v629);
            let v674: std::string::String = v653;
            let v680: string =
                string(" on:click=move |_| v536() prop:disabled=move || v513() class=v674");
            let v686: &str = &*string("Roll");
            let v710: std::string::String = String::from(v686);
            let v731: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v710));
            let v1097: leptos::prelude::AnyView = if v512() {
                let v736 = {
                    let clo_6 = Func0::new(move || Dice_ui::closure182((), ()));
                    Func1::new({
                        let clo_6 = clo_6.clone();
                        move |arg_6: ()| clo_6()
                    })
                };
                let v754: string =
                        string(" class=move || \" \".to_owned() + &v736(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                let v766: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                );
                let v778: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v779: string = string("vec![]");
                let v780: Vec<leptos::prelude::AnyView> = vec![];
                let v782: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v780);
                let v784: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v782);
                let v787: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v778))),
                                    string(">move || { v784 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v789: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v784 }</animate> };
                let v791: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v789);
                let v803: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v804: string = string("vec![]");
                let v805: Vec<leptos::prelude::AnyView> = vec![];
                let v807: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v805);
                let v809: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v807);
                let v811: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v803))),
                                    string(">move || { v809 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v813: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v809 }</animate> };
                let v815: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v813);
                let v827: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v828: string = string("vec![]");
                let v829: Vec<leptos::prelude::AnyView> = vec![];
                let v831: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v829);
                let v833: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v831);
                let v835: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v827))),
                                    string(">move || { v833 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v837: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v833 }</animate> };
                let v839: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v837);
                let v849: string = string("vec![v791, v815, v839]");
                let v850: Vec<leptos::prelude::AnyView> = vec![v791, v815, v839];
                let v852: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v850);
                let v854: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v852);
                let v857: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v766))),
                                    string(">move || { v854 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v859: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v854 }</rect> };
                let v871: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                );
                let v883: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v884: string = string("vec![]");
                let v885: Vec<leptos::prelude::AnyView> = vec![];
                let v887: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v885);
                let v889: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v887);
                let v891: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v883))),
                                    string(">move || { v889 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v893: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v889 }</animate> };
                let v895: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v893);
                let v907: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v908: string = string("vec![]");
                let v909: Vec<leptos::prelude::AnyView> = vec![];
                let v911: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v909);
                let v913: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v911);
                let v915: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v907))),
                                    string(">move || { v913 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v917: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v913 }</animate> };
                let v919: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v917);
                let v931: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v932: string = string("vec![]");
                let v933: Vec<leptos::prelude::AnyView> = vec![];
                let v935: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v933);
                let v937: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v935);
                let v939: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v931))),
                                    string(">move || { v937 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v941: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v937 }</animate> };
                let v943: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v941);
                let v953: string = string("vec![v895, v919, v943]");
                let v954: Vec<leptos::prelude::AnyView> = vec![v895, v919, v943];
                let v956: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v954);
                let v958: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v956);
                let v960: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v871))),
                                    string(">move || { v958 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v962: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v958 }</rect> };
                let v974: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                );
                let v986: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v987: string = string("vec![]");
                let v988: Vec<leptos::prelude::AnyView> = vec![];
                let v990: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v988);
                let v992: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v990);
                let v994: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v986))),
                                    string(">move || { v992 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v996: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v992 }</animate> };
                let v998: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v996);
                let v1010: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v1011: string = string("vec![]");
                let v1012: Vec<leptos::prelude::AnyView> = vec![];
                let v1014: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1012);
                let v1016: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1014);
                let v1018: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1010))),
                                    string(">move || { v1016 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1020: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1016 }</animate> };
                let v1022: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1020);
                let v1034: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v1035: string = string("vec![]");
                let v1036: Vec<leptos::prelude::AnyView> = vec![];
                let v1038: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1036);
                let v1040: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1038);
                let v1042: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1034))),
                                    string(">move || { v1040 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1044: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1040 }</animate> };
                let v1046: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1044);
                let v1056: string = string("vec![v998, v1022, v1046]");
                let v1057: Vec<leptos::prelude::AnyView> = vec![v998, v1022, v1046];
                let v1059: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1057);
                let v1061: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1059);
                let v1063: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v974))),
                                    string(">move || { v1061 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1065: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1061 }</rect> };
                let v1067: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1065);
                let v1069: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v962);
                let v1071: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v859);
                let v1081: string = string("vec![v1071, v1069, v1067]");
                let v1082: Vec<leptos::prelude::AnyView> = vec![v1071, v1069, v1067];
                let v1084: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1082);
                let v1086: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1084);
                let v1088: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v754))),
                                    string(">move || { v1086 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1090: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v736(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1086 }</svg> };
                leptos::prelude::IntoAny::into_any(v1090)
            } else {
                let v1093: string = string("vec![]");
                let v1094: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1094)
            };
            let v1104: string = string("vec![v731, v1097]");
            let v1105: Vec<leptos::prelude::AnyView> = vec![v731, v1097];
            let v1107: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1105);
            let v1109: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1107);
            let v1112: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<button "), (v680))),
                                string(">move || { v1109 }</"),
                            )),
                            string("button"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1114: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Button, _, _>,
            > = leptos::prelude::view! { <button  on:click=move |_| v536() prop:disabled=move || v513() class=v674>move || { v1109 }</button> };
            let v1116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1114);
            let v1118: Option<string> = leptos::prelude::ArcMemo::get(&v2);
            let v1132: Dice_ui::US31 =
                defaultValue(Dice_ui::US31::US31_1, map(Dice_ui::method106(), v1118));
            let v1293: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(v1132_0_0) = &v1132 {
                let v1138: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v1140: string = string(" class=\"[height:17px]\"");
                let v1154: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v1160: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v1161: string = string("vec![]");
                let v1162: Vec<leptos::prelude::AnyView> = vec![];
                let v1164: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1162);
                let v1166: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1164);
                let v1168: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v1160))),
                                    string(">move || { v1166 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1170: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1166 }</path> };
                let v1172: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1170);
                let v1176: string = string("vec![v1172]");
                let v1177: Vec<leptos::prelude::AnyView> = vec![v1172];
                let v1179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1177);
                let v1181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1179);
                let v1183: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v1154))),
                                    string(">move || { v1181 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1185: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1181 }</svg> };
                let v1187: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1185);
                let v1191: string = string("vec![v1187]");
                let v1192: Vec<leptos::prelude::AnyView> = vec![v1187];
                let v1194: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1192);
                let v1196: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1194);
                let v1198: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v1140))),
                                    string(">move || { v1196 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1200: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1196 }</span> };
                let v1202: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1200);
                let v1204: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v1209: &str = &*v1132_0_0.clone();
                let v1233: std::string::String = String::from(v1209);
                let v1254: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1233));
                let v1258: string = string("vec![v1254]");
                let v1259: Vec<leptos::prelude::AnyView> = vec![v1254];
                let v1261: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1259);
                let v1263: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1261);
                let v1266: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v1204))),
                                    string(">move || { v1263 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1268: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v1263 }</pre> };
                let v1270: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1268);
                let v1277: string = string("vec![v1202, v1270]");
                let v1278: Vec<leptos::prelude::AnyView> = vec![v1202, v1270];
                let v1280: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1278);
                let v1282: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1280);
                let v1284: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v1138))),
                                    string(">move || { v1282 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1286: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v1282 }</div> };
                leptos::prelude::IntoAny::into_any(v1286)
            } else {
                let v1289: string = string("vec![]");
                let v1290: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1290)
            };
            let v1300: string = string("vec![v1116, v1293]");
            let v1301: Vec<leptos::prelude::AnyView> = vec![v1116, v1293];
            let v1303: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1301);
            let v1305: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1303);
            let v1307: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v509))),
                                string(">move || { v1305 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1309: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v1305 }</div> };
            let v1311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1309);
            let v1321: string = string("vec![v351, v507, v1311]");
            let v1322: Vec<leptos::prelude::AnyView> = vec![v351, v507, v1311];
            let v1324: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1322);
            let v1326: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1324);
            let v1328: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v1326 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1330: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v1326 }</div> };
            let v1332: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1330);
            let v1336: string = string("vec![v1332]");
            let v1337: Vec<leptos::prelude::AnyView> = vec![v1332];
            leptos::prelude::Fragment::new(v1337)
        }
        pub fn closure183(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure184(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure185(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method198() -> Func0<string> {
            Func0::new(move || Dice_ui::closure185((), ()))
        }
        pub fn method200(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
        ) -> Func1<(std::string::String, Option<std::string::String>), (string, Dice_ui::US31)>
        {
            v0_1
        }
        pub fn closure188(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US31) {
            let v3: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = Dice_ui::method200(v0_1);
            let patternInput: (string, Dice_ui::US31) =
                (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure189(unitVar: (), _arg: (string, Dice_ui::US31)) -> bool {
            let v1: Dice_ui::US31 = _arg.1.clone();
            if string("FUNCTION_CALL") == (_arg.0.clone()) {
                if let Dice_ui::US31::US31_0(v1_0_0) = &v1 {
                    string("generate_random_number") == (v1_0_0.clone())
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method201() -> Func1<(string, Dice_ui::US31), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US31)| {
                Dice_ui::closure189((), arg10_0040)
            })
        }
        pub fn method202(v0_1: Vec<(string, Dice_ui::US31)>) -> Vec<(string, Dice_ui::US31)> {
            v0_1
        }
        pub fn closure187(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let patternInput: (std::string::String, Option<std::string::String>) = value;
                let v13: string = fable_library_rust::String_::fromString(patternInput.0.clone());
                let v27: Dice_ui::US14 = defaultValue(
                    Dice_ui::US14::US14_1,
                    map(Dice_ui::method39(), patternInput.1.clone()),
                );
                let v37: Dice_ui::US31 = match &v27 {
                    Dice_ui::US14::US14_0(v27_0_0) => {
                        Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                            match &v27 {
                                Dice_ui::US14::US14_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US31::US31_1,
                };
                let v40: bool = true;
                (v13, v37) /*;
                           let v42: bool = */
            }); //;
            let v44: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = _func1_from_v6;
            let v47: Vec<(string, Dice_ui::US31)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v44 = v44.clone();
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure188(v44.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v48 = Dice_ui::method201();
            let v49: Vec<(string, Dice_ui::US31)> = Dice_ui::method202(v47);
            let v51: Vec<(string, Dice_ui::US31)> = v49
                .into_iter()
                .filter(|x| v48(x.clone().clone()))
                .collect::<Vec<_>>();
            if (get_Count(fable_library_rust::NativeArray_::array_from(v51.clone()))) > 0_i32 {
                (_arg.0.clone()) == (fable_library_rust::String_::fromString(v2.l2.clone()))
            } else {
                false
            }
        }
        pub fn method199() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure187((), arg10_0040)
            })
        }
        pub fn method203(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method204(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure190(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method205() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US68> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure190((), v))
        }
        pub fn method206(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure186(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v2077: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v4.clone()),
            ) as u64)
                == 0_u64
            {
                let v11: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v13: string = string(" class=\"[height:17px]\"");
                let v27: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v33: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v34: string = string("vec![]");
                let v35: Vec<leptos::prelude::AnyView> = vec![];
                let v37: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v35);
                let v39: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v37);
                let v42: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v33))),
                                    string(">move || { v39 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v39 }</path> };
                let v46: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v44);
                let v50: string = string("vec![v46]");
                let v51: Vec<leptos::prelude::AnyView> = vec![v46];
                let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
                let v55: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v53);
                let v58: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v27))),
                                    string(">move || { v55 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v60: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v55 }</svg> };
                let v62: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v60);
                let v66: string = string("vec![v62]");
                let v67: Vec<leptos::prelude::AnyView> = vec![v62];
                let v69: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v67);
                let v71: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v69);
                let v74: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v13))),
                                    string(">move || { v71 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v76: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v71 }</span> };
                let v78: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v76);
                let v80: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v86: &str = &*string("No account selected");
                let v110: std::string::String = String::from(v86);
                let v131: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v110));
                let v135: string = string("vec![v131]");
                let v136: Vec<leptos::prelude::AnyView> = vec![v131];
                let v138: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v136);
                let v140: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v138);
                let v143: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v80))),
                                    string(">move || { v140 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v145: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v140 }</pre> };
                let v147: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v145);
                let v155: string = string("vec![v78, v147]");
                let v156: Vec<leptos::prelude::AnyView> = vec![v78, v147];
                let v158: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v156);
                let v160: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v158);
                let v163: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v11))),
                                    string(">move || { v160 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v165: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v160 }</div> };
                leptos::prelude::IntoAny::into_any(v165)
            } else {
                let v169: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v170 = Dice_ui::method138();
                let v171 = Dice_ui::method139();
                let v172: Dice_ui::US53 = match &v169 {
                    Err(v169_1_0) => v171(v169_1_0.clone()),
                    Ok(v169_0_0) => v170(v169_0_0.clone()),
                };
                let v195: Dice_ui::US46 = match &v172 {
                    Dice_ui::US53::US53_0(v172_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v172_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v172_1_0) => Dice_ui::US46::US46_1(v172_1_0.clone()),
                };
                match &v195 {
                    Dice_ui::US46::US46_0(v195_0_0) => {
                        let v196: Dice_ui::US47 = v195_0_0.clone();
                        if let Dice_ui::US47::US47_0(v196_0_0) = &v196 {
                            let v199: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v196_0_0.clone().to_vec();
                            let v200 = Dice_ui::method199();
                            let v201: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method203(v199);
                            let v203: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v201
                                .into_iter()
                                .filter(|x| v200(x.clone().clone()))
                                .collect::<Vec<_>>();
                            let v206: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v212: &str = &*string("Block Timestamp");
                            let v236: std::string::String = String::from(v212);
                            let v257: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v236),
                            );
                            let v261: string = string("vec![v257]");
                            let v262: Vec<leptos::prelude::AnyView> = vec![v257];
                            let v264: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v262);
                            let v266: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v264);
                            let v269: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v206))),
                                                string(">move || { v266 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v271: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v266 }</th> };
                            let v273: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v271);
                            let v275: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v281: &str = &*string("Predecessor");
                            let v305: std::string::String = String::from(v281);
                            let v326: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v305),
                            );
                            let v330: string = string("vec![v326]");
                            let v331: Vec<leptos::prelude::AnyView> = vec![v326];
                            let v333: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v331);
                            let v335: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v333);
                            let v337: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v275))),
                                                string(">move || { v335 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v339: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v335 }</th> };
                            let v341: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v339);
                            let v343: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v349: &str = &*string("Receiver");
                            let v373: std::string::String = String::from(v349);
                            let v394: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v373),
                            );
                            let v398: string = string("vec![v394]");
                            let v399: Vec<leptos::prelude::AnyView> = vec![v394];
                            let v401: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v399);
                            let v403: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v401);
                            let v405: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v343))),
                                                string(">move || { v403 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v407: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v403 }</th> };
                            let v409: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v407);
                            let v411: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v417: &str = &*string("Fee");
                            let v441: std::string::String = String::from(v417);
                            let v462: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v441),
                            );
                            let v466: string = string("vec![v462]");
                            let v467: Vec<leptos::prelude::AnyView> = vec![v462];
                            let v469: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v467);
                            let v471: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v469);
                            let v473: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v411))),
                                                string(">move || { v471 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v475: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v471 }</th> };
                            let v477: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v475);
                            let v479: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v485: &str = &*string("Result");
                            let v509: std::string::String = String::from(v485);
                            let v530: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v509),
                            );
                            let v534: string = string("vec![v530]");
                            let v535: Vec<leptos::prelude::AnyView> = vec![v530];
                            let v537: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v535);
                            let v539: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v537);
                            let v541: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v479))),
                                                string(">move || { v539 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v543: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v539 }</th> };
                            let v545: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v543);
                            let v547: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v553: &str = &*string("Status");
                            let v577: std::string::String = String::from(v553);
                            let v598: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v577),
                            );
                            let v602: string = string("vec![v598]");
                            let v603: Vec<leptos::prelude::AnyView> = vec![v598];
                            let v605: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v603);
                            let v607: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v605);
                            let v609: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v547))),
                                                string(">move || { v607 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v611: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v607 }</th> };
                            let v613: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v611);
                            let v633: string = string("vec![v273, v341, v409, v477, v545, v613]");
                            let v634: Vec<leptos::prelude::AnyView> =
                                vec![v273, v341, v409, v477, v545, v613];
                            let v636: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v634);
                            let v638: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v636);
                            let v641: string =
                                string("leptos::prelude::view! { <tr >move || { v638 }</tr> }");
                            let v643: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                            > = leptos::prelude::view! { <tr >move || { v638 }</tr> };
                            let v645: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v643);
                            let v649: string = string("vec![v645]");
                            let v650: Vec<leptos::prelude::AnyView> = vec![v645];
                            let v652: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v650);
                            let v654: Vec<
                                Result<
                                    Option<(
                                        std::string::String,
                                        Option<(
                                            Array<(
                                                std::string::String,
                                                Array<
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        (
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                            Option<f64>,
                                                            Option<std::string::String>,
                                                        ),
                                                    >,
                                                >,
                                                std::string::String,
                                                Array<std::string::String>,
                                                Array<std::string::String>,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u64,
                                                Array<std::string::String>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                u8,
                                                Array<std::string::String>,
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    std::string::String,
                                                >,
                                                Option<std::string::String>,
                                                Array<(std::string::String, std::string::String)>,
                                            )>,
                                        )>,
                                        Option<(
                                            std::string::String,
                                            std::string::String,
                                            Option<(
                                                Option<std::string::String>,
                                                Option<std::string::String>,
                                            )>,
                                            i32,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                >,
                            > = leptos::prelude::ArcMemo::get(&v0_1.clone());
                            let v656: bool = true;
                            let _vec_map : Vec<_> = v203.into_iter().map(|x| { //;
                                let patternInput:
                                        (string, usize,
                                         LrcPtr<Dice_ui::Heap5>) = x;
                                let v660: LrcPtr<Dice_ui::Heap5> =
                                    patternInput.2.clone();
                                let v662:
                                        Array<Result<Option<(std::string::String,
                                                             Option<(Array<(std::string::String,
                                                                            Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                  Option<std::string::String>,
                                                                                                                                  Option<f64>,
                                                                                                                                  Option<std::string::String>)>>,
                                                                            std::string::String,
                                                                            Array<std::string::String>,
                                                                            Array<std::string::String>,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String)>,
                                                                     Array<(std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            u64,
                                                                            Array<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String,
                                                                                   std::string::String)>,
                                                                            u8,
                                                                            Array<std::string::String>,
                                                                            std::collections::HashMap<std::string::String, std::string::String>,
                                                                            Option<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String)>)>)>,
                                                             Option<(std::string::String,
                                                                     std::string::String,
                                                                     Option<(Option<std::string::String>,
                                                                             Option<std::string::String>)>,
                                                                     i32,
                                                                     std::string::String,
                                                                     std::string::String)>,
                                                             Option<std::string::String>)>,
                                                     std::string::String>> =
                                    fable_library_rust::NativeArray_::array_from(v654.clone());
                                let v663: i32 = patternInput.1.clone() as i32;
                                let v670:
                                        Result<Option<(std::string::String,
                                                       Option<(Array<(std::string::String,
                                                                      Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                            Option<std::string::String>,
                                                                                                                            Option<f64>,
                                                                                                                            Option<std::string::String>)>>,
                                                                      std::string::String,
                                                                      Array<std::string::String>,
                                                                      Array<std::string::String>,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String)>,
                                                               Array<(std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      u64,
                                                                      Array<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String,
                                                                             std::string::String)>,
                                                                      u8,
                                                                      Array<std::string::String>,
                                                                      std::collections::HashMap<std::string::String, std::string::String>,
                                                                      Option<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String)>)>)>,
                                                       Option<(std::string::String,
                                                               std::string::String,
                                                               Option<(Option<std::string::String>,
                                                                       Option<std::string::String>)>,
                                                               i32,
                                                               std::string::String,
                                                               std::string::String)>,
                                                       Option<std::string::String>)>,
                                               std::string::String> =
                                    v662[v663].clone();
                                let v674: string =
                                    string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                let v676: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v685: i64 =
                                    (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v660.l5.clone()))))
                                        / 1000_i64;
                                let v687:
                                        Option<chrono::DateTime<chrono::Utc>> =
                                    chrono::DateTime::from_timestamp_micros(v685);
                                let v701: Dice_ui::US68 =
                                    defaultValue(Dice_ui::US68::US68_1,
                                                 map(Dice_ui::method205(),
                                                     v687));
                                let v720: Dice_ui::US31 =
                                    match &v701 {
                                        Dice_ui::US68::US68_0(v701_0_0) => {
                                            let v707: chrono::NaiveDateTime =
                                                match &v701 {
                                                    Dice_ui::US68::US68_0(x)
                                                    => x.clone(),
                                                    _ => unreachable!(),
                                                }.clone().naive_utc();
                                            let v709:
                                                    chrono::DateTime<chrono::Local> =
                                                chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v707);
                                            let v711: string =
                                                string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                            let v712: &str =
                                                r#"%Y-%m-%d %H:%M:%S"#;
                                            let v714: std::string::String =
                                                v709.format(v712).to_string();
                                            Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v714))
                                        }
                                        _ => Dice_ui::US31::US31_1,
                                    };
                                let v726: Dice_ui::US69 =
                                    match &v720 {
                                        Dice_ui::US31::US31_0(v720_0_0) =>
                                        Dice_ui::US69::US69_0(match &v720 {
                                                                  Dice_ui::US31::US31_0(x)
                                                                  =>
                                                                  x.clone(),
                                                                  _ =>
                                                                  unreachable!(),
                                                              }.clone()),
                                        _ =>
                                        Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                    };
                                let v731: string =
                                    match &v726 {
                                        Dice_ui::US69::US69_0(v726_0_0) =>
                                        v726_0_0.clone(),
                                        Dice_ui::US69::US69_1(v726_1_0) =>
                                        append((append(string("sm\'.to_string result / Error: "),
                                                       (v726_1_0.clone()))),
                                               string("")),
                                    };
                                let v736: &str = &*v731;
                                let v760: std::string::String =
                                    String::from(v736);
                                let v781: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v760));
                                let v785: string = string("vec![v781]");
                                let v786: Vec<leptos::prelude::AnyView> =
                                    vec![v781];
                                let v788: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v786);
                                let v790: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v788);
                                let v793: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v676))),
                                                                           string(">move || { v790 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v795:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v790 }</td> };
                                let v797: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v795);
                                let v799: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v802: string =
                                    fable_library_rust::String_::fromString(v660.l1.clone());
                                let v807: &str = &*v802;
                                let v831: std::string::String =
                                    String::from(v807);
                                let v852: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v831));
                                let v856: string = string("vec![v852]");
                                let v857: Vec<leptos::prelude::AnyView> =
                                    vec![v852];
                                let v859: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v857);
                                let v861: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v859);
                                let v863: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v799))),
                                                                           string(">move || { v861 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v865:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v861 }</td> };
                                let v867: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v865);
                                let v869: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v872: string =
                                    fable_library_rust::String_::fromString(v660.l2.clone());
                                let v877: &str = &*v872;
                                let v901: std::string::String =
                                    String::from(v877);
                                let v922: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v901));
                                let v926: string = string("vec![v922]");
                                let v927: Vec<leptos::prelude::AnyView> =
                                    vec![v922];
                                let v929: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v927);
                                let v931: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v929);
                                let v933: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v869))),
                                                                           string(">move || { v931 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v935:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v931 }</td> };
                                let v937: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v935);
                                let v939: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v942: string = toString(v660.l10);
                                let v949: &str = &*v942;
                                let v973: std::string::String =
                                    String::from(v949);
                                let v994: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v973));
                                let v998: string = string("vec![v994]");
                                let v999: Vec<leptos::prelude::AnyView> =
                                    vec![v994];
                                let v1001: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v999);
                                let v1003: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1001);
                                let v1005: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v939))),
                                                                           string(">move || { v1003 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1007:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1003 }</td> };
                                let v1009: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1007);
                                let v1011: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1159: leptos::prelude::Fragment =
                                    if (get_Count(v660.l11.clone()) as u64) ==
                                           0_u64 {
                                        let v1019: &str = &*string("");
                                        let v1043: std::string::String =
                                            String::from(v1019);
                                        let v1064: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1043));
                                        let v1068: string =
                                            string("vec![v1064]");
                                        let v1069:
                                                Vec<leptos::prelude::AnyView> =
                                            vec![v1064];
                                        leptos::prelude::Fragment::new(v1069)
                                    } else {
                                        let v1072:
                                                Array<std::string::String> =
                                            v660.l11.clone();
                                        let v1073: i32 =
                                            get_Count(v1072.clone());
                                        let v1075: LrcPtr<Dice_ui::Mut2> =
                                            LrcPtr::new(Dice_ui::Mut2{l0:
                                                                          MutCell::new(0_i32),
                                                                      l1:
                                                                          MutCell::new(Dice_ui::US31::US31_1),});
                                        while Dice_ui::method206(v1073,
                                                                 v1075.clone())
                                              {
                                            let v1077: i32 =
                                                v1075.l0.get().clone();
                                            let v1080: i32 =
                                                ((v1077.wrapping_neg()) +
                                                     (v1073)) - 1_i32;
                                            let v1081: Dice_ui::US31 =
                                                v1075.l1.get().clone();
                                            let v1082: std::string::String =
                                                v1072[v1080].clone();
                                            let v1086: Array<string> =
                                                split(fable_library_rust::String_::fromString(v1082),
                                                      string(" / result: "),
                                                      -1_i32, 0_i32);
                                            let v1095: Dice_ui::US31 =
                                                if let Dice_ui::US31::US31_1 =
                                                       &v1081 {
                                                    if (get_Count(v1086.clone())
                                                            as u64) == 2_u64 {
                                                        let v1091: string =
                                                            v1086[0_i32].clone();
                                                        Dice_ui::US31::US31_0(v1086[1_i32].clone())
                                                    } else { v1081 }
                                                } else { v1081.clone() };
                                            let v1096: i32 = (v1077) + 1_i32;
                                            v1075.l0.set(v1096);
                                            v1075.l1.set(v1095);
                                            ()
                                        }
                                        {
                                            let v1097: Dice_ui::US31 =
                                                v1075.l1.get().clone();
                                            let v1101: string =
                                                match &v1097 {
                                                    Dice_ui::US31::US31_0(v1097_0_0)
                                                    =>
                                                    match &v1097 {
                                                        Dice_ui::US31::US31_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone(),
                                                    _ => string("?"),
                                                };
                                            let v1106: &str = &*v1101;
                                            let v1130: std::string::String =
                                                String::from(v1106);
                                            let v1151:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1130));
                                            let v1155: string =
                                                string("vec![v1151]");
                                            let v1156:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1151];
                                            leptos::prelude::Fragment::new(v1156)
                                        }
                                    };
                                let v1161: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1159);
                                let v1163: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1011))),
                                                                           string(">move || { v1161 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1165:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1161 }</td> };
                                let v1167: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1165);
                                let v1169: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1173: string =
                                    if v660.l9 {
                                        string("Ok")
                                    } else { string("Outcome Error") };
                                let v1174 = Dice_ui::method177();
                                let v1175 = Dice_ui::method178();
                                let v1176: Dice_ui::US63 =
                                    match &v670 {
                                        Err(v670_1_0) =>
                                        v1175(v670_1_0.clone()),
                                        Ok(v670_0_0) =>
                                        v1174(v670_0_0.clone()),
                                    };
                                let v1202: Dice_ui::US58 =
                                    match &v1176 {
                                        Dice_ui::US63::US63_0(v1176_0_0) =>
                                        Dice_ui::US58::US58_0(defaultValue(Dice_ui::US59::US59_1,
                                                                           map(Dice_ui::method179(),
                                                                               v1176_0_0.clone()))),
                                        Dice_ui::US63::US63_1(v1176_1_0) =>
                                        Dice_ui::US58::US58_1(v1176_1_0.clone()),
                                    };
                                let v1298: Dice_ui::US69 =
                                    match &v1202 {
                                        Dice_ui::US58::US58_0(v1202_0_0) => {
                                            let v1203: Dice_ui::US59 =
                                                v1202_0_0.clone();
                                            if let Dice_ui::US59::US59_0(v1203_0_0,
                                                                         v1203_0_1,
                                                                         v1203_0_2,
                                                                         v1203_0_3)
                                                   = &v1203 {
                                                let v1206:
                                                        Option<(std::string::String,
                                                                std::string::String,
                                                                Option<(Option<std::string::String>,
                                                                        Option<std::string::String>)>,
                                                                i32,
                                                                std::string::String,
                                                                std::string::String)> =
                                                    v1203_0_2.clone();
                                                let v1226: Dice_ui::US64 =
                                                    defaultValue(Dice_ui::US64::US64_1,
                                                                 map(Dice_ui::method180(),
                                                                     v1206.clone()));
                                                match &v1226 {
                                                    Dice_ui::US64::US64_0(v1226_0_0,
                                                                          v1226_0_1,
                                                                          v1226_0_2,
                                                                          v1226_0_3,
                                                                          v1226_0_4,
                                                                          v1226_0_5)
                                                    => {
                                                        let v1254:
                                                                Dice_ui::US64 =
                                                            defaultValue(Dice_ui::US64::US64_1,
                                                                         map(Dice_ui::method180(),
                                                                             v1206.clone()));
                                                        let v1267:
                                                                Dice_ui::US31 =
                                                            if let Dice_ui::US64::US64_0(v1254_0_0,
                                                                                         v1254_0_1,
                                                                                         v1254_0_2,
                                                                                         v1254_0_3,
                                                                                         v1254_0_4,
                                                                                         v1254_0_5)
                                                                   = &v1254 {
                                                                Dice_ui::US31::US31_0(append((append((append((append((append((append((append((toString(v1254_0_0.clone())),
                                                                                                                                             string(": "))),
                                                                                                                                     (toString(v1254_0_4.clone())))),
                                                                                                                             string(" - "))),
                                                                                                                     (toString(v1254_0_5.clone())))),
                                                                                                             string(" ("))),
                                                                                                     (toString(v1254_0_1.clone())))),
                                                                                             string(")")))
                                                            } else {
                                                                Dice_ui::US31::US31_1
                                                            };
                                                        Dice_ui::US69::US69_1(match &v1267
                                                                                  {
                                                                                  Dice_ui::US31::US31_0(v1267_0_0)
                                                                                  =>
                                                                                  match &v1267
                                                                                      {
                                                                                      Dice_ui::US31::US31_0(x)
                                                                                      =>
                                                                                      x.clone(),
                                                                                      _
                                                                                      =>
                                                                                      unreachable!(),
                                                                                  }.clone(),
                                                                                  _
                                                                                  =>
                                                                                  Dice_ui::method8(400_i64,
                                                                                                   sprintf!("{:?}",
                                                                                                            ())),
                                                                              })
                                                    }
                                                    _ =>
                                                    Dice_ui::US69::US69_0(Dice_ui::method8(400_i64,
                                                                                           sprintf!("{:?}",
                                                                                                    (v1203_0_0.clone(),
                                                                                                     v1203_0_1.clone(),
                                                                                                     v1206.clone(),
                                                                                                     v1203_0_3.clone())))),
                                                }
                                            } else {
                                                Dice_ui::US69::US69_1(concat(new_array(&[string("RPC Response: "),
                                                                                         Dice_ui::method8(400_i64,
                                                                                                          sprintf!("{:?}",
                                                                                                                   v1202.clone()))])))
                                            }
                                        }
                                        Dice_ui::US58::US58_1(v1202_1_0) =>
                                        Dice_ui::US69::US69_1(fable_library_rust::String_::fromString(v1202_1_0.clone())),
                                    };
                                let v1310: string =
                                    concat(new_array(&[v1173, string(" / "),
                                                       match &v1298 {
                                                           Dice_ui::US69::US69_0(v1298_0_0)
                                                           =>
                                                           concat(new_array(&[string("RPC Response: "),
                                                                              Dice_ui::method8(400_i64,
                                                                                               sprintf!("{:?}",
                                                                                                        v1298_0_0.clone()))])),
                                                           Dice_ui::US69::US69_1(v1298_1_0)
                                                           =>
                                                           concat(new_array(&[string("Error: "),
                                                                              v1298_1_0.clone()])),
                                                       }]));
                                let v1315: &str = &*v1310;
                                let v1339: std::string::String =
                                    String::from(v1315);
                                let v1360: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1339));
                                let v1364: string = string("vec![v1360]");
                                let v1365: Vec<leptos::prelude::AnyView> =
                                    vec![v1360];
                                let v1367: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1365);
                                let v1369: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1367);
                                let v1371: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1169))),
                                                                           string(">move || { v1369 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1373:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1369 }</td> };
                                let v1375: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1373);
                                let v1394: string =
                                    string("vec![v797, v867, v937, v1009, v1167, v1375]");
                                let v1395: Vec<leptos::prelude::AnyView> =
                                    vec![v797, v867, v937, v1009, v1167, v1375];
                                let v1397: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1395);
                                let v1399: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1397);
                                let v1401: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<tr "),
                                                                                   (v674))),
                                                                           string(">move || { v1399 }</"))),
                                                                   string("tr"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1403:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                    leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v1399 }</tr> };
                                let v1405: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1403);
                                let v1407: bool =
                                    true; v1405 }).collect::<Vec<_>>();
                            let v1409: Vec<leptos::prelude::AnyView> = _vec_map;
                            let v1411: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1409);
                            let v1415: string = string("vec![v1411]");
                            let v1416: Vec<leptos::prelude::AnyView> = vec![v1411];
                            let v1418: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1416);
                            let v1420: string =
                                    string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                            let v1422: string = string(" class=\"ltr:text-left rtl:text-right\"");
                            let v1424: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v652);
                            let v1427: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<thead "), (v1422))),
                                                string(">move || { v1424 }</"),
                                            )),
                                            string("thead"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1429: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                            > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v1424 }</thead> };
                            let v1431: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1429);
                            let v1433: string =
                                string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
                            let v1435: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1418);
                            let v1438: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<tbody "), (v1433))),
                                                string(">move || { v1435 }</"),
                                            )),
                                            string("tbody"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1440: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                            > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v1435 }</tbody> };
                            let v1442: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1440);
                            let v1449: string = string("vec![v1431, v1442]");
                            let v1450: Vec<leptos::prelude::AnyView> = vec![v1431, v1442];
                            let v1452: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1450);
                            let v1454: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1452);
                            let v1457: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<table "), (v1420))),
                                                string(">move || { v1454 }</"),
                                            )),
                                            string("table"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1459: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Table, _, _>,
                            > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v1454 }</table> };
                            leptos::prelude::IntoAny::into_any(v1459)
                        } else {
                            let v1464: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v1466: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v1469 = {
                                let clo = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo = clo.clone();
                                    move |arg: ()| clo()
                                })
                            };
                            let v1487: string =
                                    string(" class=move || \" \".to_owned() + &v1469(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v1499: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v1511: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1512: string = string("vec![]");
                            let v1513: Vec<leptos::prelude::AnyView> = vec![];
                            let v1515: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1513);
                            let v1517: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1515);
                            let v1520: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1511))),
                                                string(">move || { v1517 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1522: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1517 }</animate> };
                            let v1524: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1522);
                            let v1536: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v1537: string = string("vec![]");
                            let v1538: Vec<leptos::prelude::AnyView> = vec![];
                            let v1540: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1538);
                            let v1542: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1540);
                            let v1544: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1536))),
                                                string(">move || { v1542 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1546: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1542 }</animate> };
                            let v1548: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1546);
                            let v1560: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1561: string = string("vec![]");
                            let v1562: Vec<leptos::prelude::AnyView> = vec![];
                            let v1564: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1562);
                            let v1566: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1564);
                            let v1568: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1560))),
                                                string(">move || { v1566 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1570: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1566 }</animate> };
                            let v1572: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1570);
                            let v1583: string = string("vec![v1524, v1548, v1572]");
                            let v1584: Vec<leptos::prelude::AnyView> = vec![v1524, v1548, v1572];
                            let v1586: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1584);
                            let v1588: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1586);
                            let v1591: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1499))),
                                                string(">move || { v1588 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1593: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v1588 }</rect> };
                            let v1605: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v1617: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1618: string = string("vec![]");
                            let v1619: Vec<leptos::prelude::AnyView> = vec![];
                            let v1621: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1619);
                            let v1623: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1621);
                            let v1625: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1617))),
                                                string(">move || { v1623 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1627: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1623 }</animate> };
                            let v1629: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1627);
                            let v1641: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1642: string = string("vec![]");
                            let v1643: Vec<leptos::prelude::AnyView> = vec![];
                            let v1645: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1643);
                            let v1647: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1645);
                            let v1649: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1641))),
                                                string(">move || { v1647 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1651: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1647 }</animate> };
                            let v1653: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1651);
                            let v1665: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1666: string = string("vec![]");
                            let v1667: Vec<leptos::prelude::AnyView> = vec![];
                            let v1669: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1667);
                            let v1671: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1669);
                            let v1673: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1665))),
                                                string(">move || { v1671 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1675: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1671 }</animate> };
                            let v1677: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1675);
                            let v1687: string = string("vec![v1629, v1653, v1677]");
                            let v1688: Vec<leptos::prelude::AnyView> = vec![v1629, v1653, v1677];
                            let v1690: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1688);
                            let v1692: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1690);
                            let v1694: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1605))),
                                                string(">move || { v1692 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1696: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1692 }</rect> };
                            let v1708: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v1720: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1721: string = string("vec![]");
                            let v1722: Vec<leptos::prelude::AnyView> = vec![];
                            let v1724: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1722);
                            let v1726: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1724);
                            let v1728: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1720))),
                                                string(">move || { v1726 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1730: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1726 }</animate> };
                            let v1732: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1730);
                            let v1744: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v1745: string = string("vec![]");
                            let v1746: Vec<leptos::prelude::AnyView> = vec![];
                            let v1748: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1746);
                            let v1750: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1748);
                            let v1752: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1744))),
                                                string(">move || { v1750 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1754: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1750 }</animate> };
                            let v1756: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1754);
                            let v1768: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1769: string = string("vec![]");
                            let v1770: Vec<leptos::prelude::AnyView> = vec![];
                            let v1772: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1770);
                            let v1774: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1772);
                            let v1776: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1768))),
                                                string(">move || { v1774 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1778: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1774 }</animate> };
                            let v1780: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1778);
                            let v1790: string = string("vec![v1732, v1756, v1780]");
                            let v1791: Vec<leptos::prelude::AnyView> = vec![v1732, v1756, v1780];
                            let v1793: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1791);
                            let v1795: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1793);
                            let v1797: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1708))),
                                                string(">move || { v1795 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1799: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1795 }</rect> };
                            let v1801: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1799);
                            let v1803: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1696);
                            let v1805: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1593);
                            let v1815: string = string("vec![v1805, v1803, v1801]");
                            let v1816: Vec<leptos::prelude::AnyView> = vec![v1805, v1803, v1801];
                            let v1818: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1816);
                            let v1820: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1818);
                            let v1823: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v1487))),
                                                string(">move || { v1820 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1825: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1469(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1820 }</svg> };
                            let v1827: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1825);
                            let v1833: &str = &*string("Loading...");
                            let v1857: std::string::String = String::from(v1833);
                            let v1878: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v1857),
                                );
                            let v1885: string = string("vec![v1827, v1878]");
                            let v1886: Vec<leptos::prelude::AnyView> = vec![v1827, v1878];
                            let v1888: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1886);
                            let v1890: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1888);
                            let v1893: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1466))),
                                                string(">move || { v1890 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1895: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v1890 }</div> };
                            let v1897: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1895);
                            let v1901: string = string("vec![v1897]");
                            let v1902: Vec<leptos::prelude::AnyView> = vec![v1897];
                            let v1904: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1902);
                            let v1906: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1904);
                            let v1908: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1464))),
                                                string(">move || { v1906 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1910: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v1906 }</div> };
                            leptos::prelude::IntoAny::into_any(v1910)
                        }
                    }
                    Dice_ui::US46::US46_1(v195_1_0) => {
                        let v1916: string =
                            fable_library_rust::String_::fromString(v195_1_0.clone());
                        let v1919: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v1921: string = string(" class=\"[height:17px]\"");
                        let v1935: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v1941: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v1942: string = string("vec![]");
                        let v1943: Vec<leptos::prelude::AnyView> = vec![];
                        let v1945: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1943);
                        let v1947: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1945);
                        let v1950: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v1941))),
                                            string(">move || { v1947 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1952: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1947 }</path> };
                        let v1954: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1952);
                        let v1958: string = string("vec![v1954]");
                        let v1959: Vec<leptos::prelude::AnyView> = vec![v1954];
                        let v1961: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1959);
                        let v1963: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1961);
                        let v1966: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v1935))),
                                            string(">move || { v1963 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1968: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1963 }</svg> };
                        let v1970: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1968);
                        let v1974: string = string("vec![v1970]");
                        let v1975: Vec<leptos::prelude::AnyView> = vec![v1970];
                        let v1977: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v1975);
                        let v1979: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1977);
                        let v1982: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v1921))),
                                            string(">move || { v1979 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v1984: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1979 }</span> };
                        let v1986: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v1984);
                        let v1988: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v1993: &str = &*v1916;
                        let v2017: std::string::String = String::from(v1993);
                        let v2038: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v2017),
                        );
                        let v2042: string = string("vec![v2038]");
                        let v2043: Vec<leptos::prelude::AnyView> = vec![v2038];
                        let v2045: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2043);
                        let v2047: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2045);
                        let v2050: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v1988))),
                                            string(">move || { v2047 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2052: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v2047 }</pre> };
                        let v2054: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2052);
                        let v2062: string = string("vec![v1986, v2054]");
                        let v2063: Vec<leptos::prelude::AnyView> = vec![v1986, v2054];
                        let v2065: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2063);
                        let v2067: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2065);
                        let v2070: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v1919))),
                                            string(">move || { v2067 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2072: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v2067 }</div> };
                        leptos::prelude::IntoAny::into_any(v2072)
                    }
                }
            };
            let v2082: string = string("vec![v2077]");
            let v2083: Vec<leptos::prelude::AnyView> = vec![v2077];
            leptos::prelude::Fragment::new(v2083)
        }
        pub fn closure194(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure193(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure194(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method207() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure193((), v))
        }
        pub fn method208(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure192(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v10 = Dice_ui::method207();
            let v11: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v8.l0.clone());
            v11.iter()
                .enumerate()
                .map(|(i, x)| v10(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method209(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure196(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method209(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method210(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure197(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method210(v0_1);
            let patternInput: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure195(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::ReadSignal::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let v10: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = v10.1.clone();
                let v22: bool = true;
                (v10.0.clone(), b.0.clone(), b.1.clone()) /*;
                                                          let v24: bool = */
            }); //;
            let v26: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v6;
            let v29: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v26 = v26.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure196(
                                v26.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v32: bool = true;
            let _func1_from_v30 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v39: bool = true;
                (v3, patternInput.0.clone(), patternInput.1.clone()) /*;
                                                                     let v41: bool = */
            }); //;
            let v43: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v30;
            v29.into_iter()
                .map(|x| {
                    Func1::new({
                        let v43 = v43.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure197(v43.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure198(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = leptos::prelude::ArcMemo::get(&v0_1);
            get_Count(fable_library_rust::NativeArray_::array_from(v2.clone()))
        }
        pub fn method211(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method212(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method213(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            LrcPtr<(bool, std::string::String)>,
        > {
            v0_1
        }
        pub fn closure200(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = Dice_ui::method213(v0_1);
            (move |x| v2(x))(LrcPtr::new((v1_, v1__1)))
        }
        pub fn closure199(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v11: i32 = get_Count(fable_library_rust::NativeArray_::array_from(
                v8.clone().clone(),
            ));
            let v17: &str = &*string("");
            let v41: std::string::String = String::from(v17);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v41)));
            let v65: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v66: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method211(v65.0.clone(), v65.1.clone());
            let v67: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method212(v8);
            let v69: bool = true;
            let mut v67 = v67;
            let v71: bool = true;
            v67.push(v66);
            let v73: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v67;
            let v76: bool = true;
            let _func1_from_v74 = Func1::from(move |value| {
                //;
                let v78: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v89: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v78.1.clone()).0.clone());
                let v92: bool = true;
                v89 /*;
                    let v94: bool = */
            }); //;
            let v96: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v74;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v73
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v96 = v96.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v96.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure201(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + (v0_1)
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v5)
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure205(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure206(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method214(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure206((), ()))
        }
        pub fn method216(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            v0_1
        }
        pub fn closure208(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(i32, i32)> {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            > = Dice_ui::method216(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn method215(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure208(v0_1.clone(), arg10_0040)
            })
        }
        pub fn method217(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn method219(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure211(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method219((v1) == (v0_1)) {
                v2.clone()
            } else {
                LrcPtr::new(((v2.0.clone()) == false, v2.1.clone()))
            }
        }
        pub fn closure210(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure211(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method218(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure210(v0_1, v)
            })
        }
        pub fn closure209(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v5);
            let v10: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v7.l3.clone());
            let v12: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v10);
            let v20: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v20);
            let v24 = Dice_ui::method218(v1);
            let v25: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v12.l0.clone());
            let v28: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v25
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v24(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v12.l1.clone(),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v30: bool = true;
            leptos::prelude::ArcRwSignal::set(&v22.l3.clone(), v28); //;
            ()
        }
        pub fn closure212(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::ReadSignal::get(&v0_1)).0.clone()
        }
        pub fn method220(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure213(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append((append(string("account-"), (toString(v0_1)))), string(""));
            let v6: &str = &*v1;
            String::from(v6)
        }
        pub fn method221(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure213(v0_1, ())
            })
        }
        pub fn method223(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure215(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method223((v2) == (v0_1)) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure214(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure215(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method222(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure214(v0_1, v1.clone(), v)
            })
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method224(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure219(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn method226() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure219((), v))
        }
        pub fn closure218(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v11: bool = ((LrcPtr::new((v1_, v1__1))).0.clone()) == (v0_1);
            (Dice_ui::method226())(v11)
        }
        pub fn method225(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure218(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure217(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method224(leptos::prelude::ArcMemo::get(&v0_1));
            let v11 = Dice_ui::method225(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            let v20: bool = true;
            let _func1_from_v18 = Func1::from(move |value| {
                //;
                let v22: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v33: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v22.1.clone()).0.clone());
                let v36: bool = true;
                v33 /*;
                    let v38: bool = */
            }); //;
            let v40: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v18;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v40 = v40.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v40.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure221(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v5)
        }
        pub fn method227(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::prelude::AnyView,
        > {
            v0_1
        }
        pub fn closure222(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::AnyView {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = Dice_ui::method227(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure207(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::ArcMemo<i32>,
            v3: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v9: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = v1;
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v20: bool = true;
                LrcPtr::new((patternInput.0.clone(), patternInput.1.clone())) /*;
                                                                              let v22: bool = */
            }); //;
            let v25 = Dice_ui::method215(_func1_from_v10);
            let v28: bool = true;
            let _func1_from_v26 = Func1::from(move |value| {
                //;
                let patternInput_1: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v32: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                    patternInput_1.2.clone();
                let v34: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
                let v35: i32 = Dice_ui::method217(patternInput_1.1.clone());
                let v38: bool = true;
                let _func0_from_v36 = Func0::from(move || {
                    //;
                    let v39: string =
                        append((append(string("account-"), (toString(v35)))), string(""));
                    let v44: &str = &*v39;
                    let v68: std::string::String = String::from(v44);
                    let v89: bool = true;
                    v68 /*;
                        let v91: bool = */
                }); //;
                let v93: Func0<std::string::String> = _func0_from_v36;
                let v131: string = join(
                    string(" "),
                    toArray(delay(Func0::new(move || {
                        ofList(ofArray_1(new_array(&[
                            string("block"),
                            string("relative"),
                            string("h-8"),
                            string("w-14"),
                            string("cursor-pointer"),
                            string("[-webkit-tap-highlight-color:_transparent]"),
                        ])))
                    }))),
                );
                let v138: &str = &*v131;
                let v162: std::string::String = String::from(v138);
                let v183: std::string::String = v162;
                let v187: string = string(" class=v183 for=move || v93()");
                let v190: bool = true;
                let v188 = Func1::new({
                    let v0_1 = v0_1.clone();
                    let v35 = v35.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure209(v0_1.clone(), v35, v)
                }); //;
                let v191 = Dice_ui::method220(v32.clone());
                let v192 = Dice_ui::method221(v35);
                let v193: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v205: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                string("<input "),
                                (append(
                                    (append(
                                        string(" prop:checked=move || v191()"),
                                        (append(
                                            (append(
                                                string(" on:change=move |event| v188(event)"),
                                                (append(
                                                    (append(
                                                        string(" id=move || v192()"),
                                                        (append(
                                                            (append(
                                                                string(" type=\"checkbox\""),
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            string(" "),
                                                                            (v193),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string(""),
                                                                )),
                                                            )),
                                                            string(""),
                                                        )),
                                                    )),
                                                    string(""),
                                                )),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(" />"),
                        )),
                    )),
                    string(" }"),
                );
                let v207: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v191() on:change=move |event| v188(event) id=move || v192() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v209: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v207);
                let v210: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v211: string = append(
                    (append((append(string(" "), (v210))), string(""))),
                    string(""),
                );
                let v221: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                let v223: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                let v227: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v223))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v228: string = string("vec![]");
                let v229: Vec<leptos::prelude::AnyView> = vec![];
                let v231: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v229);
                let v233: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v231);
                let v236: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v227))),
                                    string(">move || { v233 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v238: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v233 }</path> };
                let v240: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v238);
                let v244: string = string("vec![v240]");
                let v245: Vec<leptos::prelude::AnyView> = vec![v240];
                let v247: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v245);
                let v249: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v247);
                let v252: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v221))),
                                    string(">move || { v249 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v254: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v249 }</svg> };
                let v264: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                let v266: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                let v270: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v266))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v271: string = string("vec![]");
                let v272: Vec<leptos::prelude::AnyView> = vec![];
                let v274: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v272);
                let v276: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v274);
                let v278: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v270))),
                                    string(">move || { v276 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v280: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v276 }</path> };
                let v282: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v280);
                let v286: string = string("vec![v282]");
                let v287: Vec<leptos::prelude::AnyView> = vec![v282];
                let v289: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v287);
                let v291: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v289);
                let v293: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v264))),
                                    string(">move || { v291 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v295: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v291 }</svg> };
                let v297: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v295);
                let v299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v254);
                let v307: string = string("vec![v299, v297]");
                let v308: Vec<leptos::prelude::AnyView> = vec![v299, v297];
                let v310: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v308);
                let v312: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v310);
                let v315: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v211))),
                                    string(">move || { v312 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v317: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v312 }</span> };
                let v319: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v317);
                let v320: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v321: string = append(
                    (append((append(string(" "), (v320))), string(""))),
                    string(""),
                );
                let v322: string = string("vec![]");
                let v323: Vec<leptos::prelude::AnyView> = vec![];
                let v325: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v323);
                let v327: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v325);
                let v329: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v321))),
                                    string(">move || { v327 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v331: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v327 }</span> };
                let v333: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v331);
                let v343: string = string("vec![v209, v319, v333]");
                let v344: Vec<leptos::prelude::AnyView> = vec![v209, v319, v333];
                let v346: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v344);
                let v348: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v346);
                let v351: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<label "), (v187))),
                                    string(">move || { v348 }</"),
                                )),
                                string("label"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v353: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class=v183 for=move || v93()>move || { v348 }</label> };
                let v355: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v353);
                let v358: bool = true;
                let _func0_from_v356 = Func0::from(move || {
                    //;
                    let v360: LrcPtr<(bool, std::string::String)> =
                        leptos::prelude::ReadSignal::get(&v32);
                    let v368: bool = true;
                    v360.1.clone() /*;
                                   let v370: bool = */
                }); //;
                let v372: Func0<std::string::String> = _func0_from_v356;
                let v375: bool = true;
                let _func1_from_v373 = Func0::from(move || {
                    //;
                    let v377: std::string::String = value;
                    let v380: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v382: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v380);
                    let v385: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                    > = Box::pin(v382.l3.clone());
                    let v387: LrcPtr<Dice_ui::Heap0> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v385);
                    let v395: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v397: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v395);
                    let v399 = Dice_ui::method222(v35, v377);
                    let v400: Vec<LrcPtr<(bool, std::string::String)>> =
                        Dice_ui::method208(v387.l0.clone());
                    let v403: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                        l0: v400
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v399(i.try_into().unwrap())(x.clone()))
                            .collect::<Vec<_>>(),
                        l1: v387.l1.clone(),
                        l2: v387.l2,
                        l3: v387.l3,
                        l4: v387.l4.clone(),
                    });
                    let v405: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v397.l3.clone(), v403); //;
                    let v407: bool = true; /*;
                                           let v409: bool = */
                }); //;
                let v411: Func1<std::string::String, ()> = _func1_from_v373;
                let v414 = {
                    let clo = Func0::new(move || Dice_ui::closure216((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v423: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v417(leptos::prelude::event_target_value(&event)) prop:value=move || v372() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v414(()) /> }");
                let v425: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v417(leptos::prelude::event_target_value(&event)) prop:value=move || v372() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v414(()) /> };
                let v427: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v425);
                let v539: leptos::prelude::AnyView = if (leptos::prelude::ArcMemo::get(&v2))
                    == 1_i32
                {
                    let v431: string = string("vec![]");
                    let v432: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v432)
                } else {
                    let v437: bool = true;
                    let _func0_from_v435 = Func0::from(move || {
                        //;
                        let v440: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v0_1.l0.clone());
                        let v442: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v440);
                        let v445: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v442.l3.clone(),
                            |x: &mut /*;
                             let v446: */
                             LrcPtr<Dice_ui::Heap0> /* = getZero();
                                                    let v451: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3 = v3.clone();
                                    let v35 = v35.clone();
                                    move |v_2: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure217(v3.clone(), v35, v_2)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v453: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4,
                            |x: &mut /*;
                             let v454: */
                             i32 /* = getZero();
                                 let v459: bool =
                                     */| {
                                *x = Func1::new(move |v_3: i32| Dice_ui::closure201((), v_3))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v461: bool = true; /*;
                                               let v463: bool = */
                    }); //;
                    let v465: Func0<()> = _func0_from_v435;
                    let v468 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure220((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v480: string =
                        string(" class=move || \" \".to_owned() + &v468(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v486: string =
                        string(" d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v487: string = string("vec![]");
                    let v488: Vec<leptos::prelude::AnyView> = vec![];
                    let v490: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v488);
                    let v492: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v490);
                    let v494: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v486))),
                                        string(">move || { v492 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v496: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v492 }</path> };
                    let v498: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v496);
                    let v502: string = string("vec![v498]");
                    let v503: Vec<leptos::prelude::AnyView> = vec![v498];
                    let v505: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v503);
                    let v507: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v505);
                    let v509: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v480))),
                                        string(">move || { v507 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v511: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v468(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v507 }</svg> };
                    let v516 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure221((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v517: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v516(())");
                    let v520: string = append(
                        (append(
                            string(" aria-label=\"Delete\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v465()"),
                                    (append(
                                        (append((append(string(" "), (v517))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v522: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v511);
                    let v526: string = string("vec![v522]");
                    let v527: Vec<leptos::prelude::AnyView> = vec![v522];
                    let v529: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v527);
                    let v531: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v529);
                    let v534: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v520))),
                                        string(">move || { v531 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v536: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v465() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v516(())>move || { v531 }</button> };
                    leptos::prelude::IntoAny::into_any(v536)
                };
                let v549: string = string("vec![v355, v427, v539]");
                let v550: Vec<leptos::prelude::AnyView> = vec![v355, v427, v539];
                let v552: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v550);
                let v554: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v552);
                let v557: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v34))),
                                    string(">move || { v554 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v559: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v554 }</div> };
                let v561: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v559);
                let v565: string = string("vec![v561]");
                let v566: Vec<leptos::prelude::AnyView> = vec![v561];
                let v568: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v566);
                let v570: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v568);
                let v573: bool = true;
                v570 /*;
                     let v575: bool = */
            }); //;
            let v577: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = _func1_from_v26;
            let v589: string =
                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v581(x) let:x key=move |x| v25(x.to_owned()) each=v9 /> })");
            let v590: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v581(x) let:x key=move |x| v25(x.to_owned()) each=v9 /> },
            );
            let v594: string = string("vec![v590]");
            let v595: Vec<leptos::prelude::AnyView> = vec![v590];
            let v597: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v595);
            let v599: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v597);
            let v601: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v599 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v603: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v599 }</div> };
            let v605: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v603);
            let v609: string = string("vec![v605]");
            let v610: Vec<leptos::prelude::AnyView> = vec![v605];
            leptos::prelude::Fragment::new(v610)
        }
        pub fn closure223(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure224(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method228() -> Func0<string> {
            Func0::new(move || Dice_ui::closure225((), ()))
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Dark Mode");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method229() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure227((), ()))
        }
        pub fn closure230(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure229(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l0.clone(),
                |x: &mut /*;
                 let v10: */
                 bool /* = getZero();
                      let v15: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure231(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method231(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure231(v0_1.clone(), ())
            })
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("dark-mode");
            String::from(v5)
        }
        pub fn method232() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure228(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v9: &str = &*string("dark-mode");
                let v33: std::string::String = String::from(v9);
                let v54: bool = true;
                v33 /*;
                    let v56: bool = */
            }); //;
            let v58: Func0<std::string::String> = _func0_from_v1;
            let v96: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v103: &str = &*v96;
            let v127: std::string::String = String::from(v103);
            let v148: std::string::String = v127;
            let v153: string = string(" class=v148 for=move || v58()");
            let v156: bool = true;
            let v154 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure229(v0_1.clone(), v)
            }); //;
            let v157 = Dice_ui::method231(v0_1.clone());
            let v158 = Dice_ui::method232();
            let v159: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v171: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v157()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v154(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v158()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v159))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v173: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v157() on:change=move |event| v154(event) id=move || v158() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v175: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v173);
            let v176: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v177: string = append(
                (append((append(string(" "), (v176))), string(""))),
                string(""),
            );
            let v187: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v189: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v193: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v189))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v194: string = string("vec![]");
            let v195: Vec<leptos::prelude::AnyView> = vec![];
            let v197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v195);
            let v199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v197);
            let v202: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v193))),
                                string(">move || { v199 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v204: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v199 }</path> };
            let v206: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v204);
            let v210: string = string("vec![v206]");
            let v211: Vec<leptos::prelude::AnyView> = vec![v206];
            let v213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v211);
            let v215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v213);
            let v218: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v187))),
                                string(">move || { v215 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v220: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v215 }</svg> };
            let v230: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v232: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v236: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v232))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v237: string = string("vec![]");
            let v238: Vec<leptos::prelude::AnyView> = vec![];
            let v240: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v238);
            let v242: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v240);
            let v244: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v236))),
                                string(">move || { v242 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v246: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v242 }</path> };
            let v248: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v246);
            let v252: string = string("vec![v248]");
            let v253: Vec<leptos::prelude::AnyView> = vec![v248];
            let v255: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v253);
            let v257: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v255);
            let v259: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v230))),
                                string(">move || { v257 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v261: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v257 }</svg> };
            let v263: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v261);
            let v265: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v220);
            let v273: string = string("vec![v265, v263]");
            let v274: Vec<leptos::prelude::AnyView> = vec![v265, v263];
            let v276: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v274);
            let v278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v276);
            let v281: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v177))),
                                string(">move || { v278 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v283: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v278 }</span> };
            let v285: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v283);
            let v286: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v287: string = append(
                (append((append(string(" "), (v286))), string(""))),
                string(""),
            );
            let v288: string = string("vec![]");
            let v289: Vec<leptos::prelude::AnyView> = vec![];
            let v291: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v289);
            let v293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v291);
            let v295: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v287))),
                                string(">move || { v293 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v297: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v293 }</span> };
            let v299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v297);
            let v309: string = string("vec![v175, v285, v299]");
            let v310: Vec<leptos::prelude::AnyView> = vec![v175, v285, v299];
            let v312: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v310);
            let v314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v312);
            let v317: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v153))),
                                string(">move || { v314 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v319: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v148 for=move || v58()>move || { v314 }</label> };
            let v321: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v319);
            let v325: string = string("vec![v321]");
            let v326: Vec<leptos::prelude::AnyView> = vec![v321];
            leptos::prelude::Fragment::new(v326)
        }
        pub fn method230(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure228(v0_1.clone(), ())
            })
        }
        pub fn closure233(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Debug");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method233() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure239(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l1.clone(),
                |x: &mut /*;
                 let v10: */
                 bool /* = getZero();
                      let v15: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure240(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l1.clone())
        }
        pub fn method235(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure240(v0_1.clone(), ())
            })
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("debug");
            String::from(v5)
        }
        pub fn method236() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure238(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v9: &str = &*string("debug");
                let v33: std::string::String = String::from(v9);
                let v54: bool = true;
                v33 /*;
                    let v56: bool = */
            }); //;
            let v58: Func0<std::string::String> = _func0_from_v1;
            let v96: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v103: &str = &*v96;
            let v127: std::string::String = String::from(v103);
            let v148: std::string::String = v127;
            let v153: string = string(" class=v148 for=move || v58()");
            let v156: bool = true;
            let v154 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure239(v0_1.clone(), v)
            }); //;
            let v157 = Dice_ui::method235(v0_1.clone());
            let v158 = Dice_ui::method236();
            let v159: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v171: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v157()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v154(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v158()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v159))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v173: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v157() on:change=move |event| v154(event) id=move || v158() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v175: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v173);
            let v176: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v177: string = append(
                (append((append(string(" "), (v176))), string(""))),
                string(""),
            );
            let v187: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v189: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v193: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v189))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v194: string = string("vec![]");
            let v195: Vec<leptos::prelude::AnyView> = vec![];
            let v197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v195);
            let v199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v197);
            let v202: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v193))),
                                string(">move || { v199 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v204: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v199 }</path> };
            let v206: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v204);
            let v210: string = string("vec![v206]");
            let v211: Vec<leptos::prelude::AnyView> = vec![v206];
            let v213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v211);
            let v215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v213);
            let v218: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v187))),
                                string(">move || { v215 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v220: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v215 }</svg> };
            let v230: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v232: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v236: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v232))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v237: string = string("vec![]");
            let v238: Vec<leptos::prelude::AnyView> = vec![];
            let v240: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v238);
            let v242: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v240);
            let v244: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v236))),
                                string(">move || { v242 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v246: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v242 }</path> };
            let v248: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v246);
            let v252: string = string("vec![v248]");
            let v253: Vec<leptos::prelude::AnyView> = vec![v248];
            let v255: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v253);
            let v257: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v255);
            let v259: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v230))),
                                string(">move || { v257 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v261: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v257 }</svg> };
            let v263: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v261);
            let v265: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v220);
            let v273: string = string("vec![v265, v263]");
            let v274: Vec<leptos::prelude::AnyView> = vec![v265, v263];
            let v276: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v274);
            let v278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v276);
            let v281: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v177))),
                                string(">move || { v278 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v283: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v278 }</span> };
            let v285: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v283);
            let v286: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v287: string = append(
                (append((append(string(" "), (v286))), string(""))),
                string(""),
            );
            let v288: string = string("vec![]");
            let v289: Vec<leptos::prelude::AnyView> = vec![];
            let v291: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v289);
            let v293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v291);
            let v295: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v287))),
                                string(">move || { v293 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v297: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v293 }</span> };
            let v299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v297);
            let v309: string = string("vec![v175, v285, v299]");
            let v310: Vec<leptos::prelude::AnyView> = vec![v175, v285, v299];
            let v312: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v310);
            let v314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v312);
            let v317: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v153))),
                                string(">move || { v314 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v319: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v148 for=move || v58()>move || { v314 }</label> };
            let v321: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v319);
            let v325: string = string("vec![v321]");
            let v326: Vec<leptos::prelude::AnyView> = vec![v321];
            leptos::prelude::Fragment::new(v326)
        }
        pub fn method234(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure226(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method229();
            let v5 = Dice_ui::method230(v0_1.clone());
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure233((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v10() -> string {
                Dice_ui::closure234((), ())
            }
            let v11 = {
                let clo_1 = Func0::from(v10);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v13() -> string {
                Dice_ui::closure235((), ())
            }
            let v14 = {
                let clo_2 = Func0::from(v13);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            fn v18() -> string {
                Dice_ui::closure236((), ())
            }
            let v19 = {
                let clo_3 = Func0::from(v18);
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v62 = Dice_ui::method233();
            let v63 = Dice_ui::method234(v0_1);
            let v66 = {
                let clo_4 = Func0::new(move || Dice_ui::closure242((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v68 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v70 = {
                let clo_6 = Func0::from(v13);
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v71: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v70(()) + \" \" + &v68(()) + \" \" + &v66(())");
            let v72: string = append(
                (append((append(string(" "), (v71))), string(""))),
                string(""),
            );
            let v74 = {
                let clo_7 = Func0::from(v18);
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v76: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v77: leptos::prelude::Fragment = v62();
            let v79: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v77);
            let v81: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v76))),
                                string(">move || { v79 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v83: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v79 }</dt> };
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v87: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v74(())");
            let v88: leptos::prelude::Fragment = v63();
            let v90: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v88);
            let v92: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v87))),
                                string(">move || { v90 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v94: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v74(())>move || { v90 }</dd> };
            let v96: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v94);
            let v103: string = string("vec![v85, v96]");
            let v104: Vec<leptos::prelude::AnyView> = vec![v85, v96];
            let v106: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v104);
            let v108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v106);
            let v110: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v72))),
                                string(">move || { v108 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v112: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v70(()) + " " + &v68(()) + " " + &v66(())>move || { v108 }</dl> };
            let v114: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v112);
            let v116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v123: string = string("vec![v116, v114]");
            let v124: Vec<leptos::prelude::AnyView> = vec![v116, v114];
            let v126: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v124);
            let v128: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v126);
            let v131: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v128 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v133: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v128 }</div> };
            let v135: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v133);
            let v139: string = string("vec![v135]");
            let v140: Vec<leptos::prelude::AnyView> = vec![v135];
            leptos::prelude::Fragment::new(v140)
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method237() -> Func0<string> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Global State");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method238() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn closure250(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_0(v0_1)
        }
        pub fn method240() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure250((), v))
        }
        pub fn closure251(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_1(v0_1)
        }
        pub fn method241() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure251((), v))
        }
        pub fn closure249(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v5: LrcPtr<Dice_ui::Heap2> = v0_1.clone();
            let v7: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v5).map_err(|x| x.to_string());
            let v8 = Dice_ui::method240();
            let v9 = Dice_ui::method241();
            let v10: Dice_ui::US70 = match &v7 {
                Err(v7_1_0) => v9(v7_1_0.clone()),
                Ok(v7_0_0) => v8(v7_0_0.clone()),
            };
            match &v10 {
                Dice_ui::US70::US70_0(v10_0_0) => {
                    fable_library_rust::String_::fromString(v10_0_0.clone())
                }
                Dice_ui::US70::US70_1(v10_1_0) => append(
                    (append(string("Error: "), (toString(v10_1_0.clone())))),
                    string(""),
                ),
            }
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure248(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9: leptos::prelude::ArcMemo<string> = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure249(v6.clone(), ())
                })()
            });
            let v11: string = leptos::prelude::ArcMemo::get(&v9);
            let v14 = {
                let clo = Func0::new(move || Dice_ui::closure252((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v15: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v14(())");
            let v17: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v22: &str = &*v11;
            let v46: std::string::String = String::from(v22);
            let v67: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v46));
            let v71: string = string("vec![v67]");
            let v72: Vec<leptos::prelude::AnyView> = vec![v67];
            let v74: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v72);
            let v76: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v74);
            let v79: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v17))),
                                string(">move || { v76 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v81: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v14(())>move || { v76 }</pre> };
            let v83: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v81);
            let v87: string = string("vec![v83]");
            let v88: Vec<leptos::prelude::AnyView> = vec![v83];
            leptos::prelude::Fragment::new(v88)
        }
        pub fn method239() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure248((), ()))
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method238();
            let v1 = Dice_ui::method239();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v13: string = append(
                (append((append(string(" "), (v11))), string(""))),
                string(""),
            );
            let v16 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v18: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v19: leptos::prelude::Fragment = v0_1();
            let v21: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v19);
            let v24: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v18))),
                                string(">move || { v21 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v21 }</dt> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())");
            let v31: leptos::prelude::Fragment = v1();
            let v33: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v31);
            let v36: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v30))),
                                string(">move || { v33 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v38: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v16(())>move || { v33 }</dd> };
            let v40: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v38);
            let v48: string = string("vec![v28, v40]");
            let v49: Vec<leptos::prelude::AnyView> = vec![v28, v40];
            let v51: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v49);
            let v53: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v51);
            let v56: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v13))),
                                string(">move || { v53 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v58: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v53 }</dl> };
            let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
            let v64: string = string("vec![v60]");
            let v65: Vec<leptos::prelude::AnyView> = vec![v60];
            leptos::prelude::Fragment::new(v65)
        }
        pub fn closure254(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v2: bool = true;
            leptos::prelude::WriteSignal::update(
                &v0_1,
                |x: &mut /*;
                 let v3: */
                 bool /* = getZero();
                      let v8: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method242(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure256(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str =
                Dice_ui::method242(if leptos::prelude::ReadSignal::get(&v0_1) {
                    let v4: string = string("r#\"\"#");
                    r#""#
                } else {
                    let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                    r#"bg-gray-300 hover:bg-gray-200"#
                });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure258(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure259(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method243(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure259((), ()))
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Settings");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Table View");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method244() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure262((), ()))
        }
        pub fn closure265(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure264(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l3.clone(),
                |x: &mut /*;
                 let v10: */
                 LrcPtr<Dice_ui::Heap0> /* = getZero();
                                        let v15: bool =
                                            */| {
                    *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure265((), v))(
                        x.clone(),
                    )
                },
            ); //;
            ()
        }
        pub fn closure266(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::ArcRwSignal::get(&v5.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method246(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure266(v0_1.clone(), ())
            })
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v5: &str = &*string("table-view");
            String::from(v5)
        }
        pub fn method247() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure267((), ()))
        }
        pub fn closure263(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v9: &str = &*string("table-view");
                let v33: std::string::String = String::from(v9);
                let v54: bool = true;
                v33 /*;
                    let v56: bool = */
            }); //;
            let v58: Func0<std::string::String> = _func0_from_v1;
            let v96: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v103: &str = &*v96;
            let v127: std::string::String = String::from(v103);
            let v148: std::string::String = v127;
            let v153: string = string(" class=v148 for=move || v58()");
            let v156: bool = true;
            let v154 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure264(v0_1.clone(), v)
            }); //;
            let v157 = Dice_ui::method246(v0_1.clone());
            let v158 = Dice_ui::method247();
            let v159: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v171: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v157()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v154(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v158()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v159))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v173: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v157() on:change=move |event| v154(event) id=move || v158() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v175: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v173);
            let v176: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v177: string = append(
                (append((append(string(" "), (v176))), string(""))),
                string(""),
            );
            let v187: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v189: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v193: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v189))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v194: string = string("vec![]");
            let v195: Vec<leptos::prelude::AnyView> = vec![];
            let v197: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v195);
            let v199: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v197);
            let v202: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v193))),
                                string(">move || { v199 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v204: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v199 }</path> };
            let v206: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v204);
            let v210: string = string("vec![v206]");
            let v211: Vec<leptos::prelude::AnyView> = vec![v206];
            let v213: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v211);
            let v215: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v213);
            let v218: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v187))),
                                string(">move || { v215 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v220: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v215 }</svg> };
            let v230: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v232: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v236: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v232))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v237: string = string("vec![]");
            let v238: Vec<leptos::prelude::AnyView> = vec![];
            let v240: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v238);
            let v242: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v240);
            let v244: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v236))),
                                string(">move || { v242 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v246: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v242 }</path> };
            let v248: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v246);
            let v252: string = string("vec![v248]");
            let v253: Vec<leptos::prelude::AnyView> = vec![v248];
            let v255: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v253);
            let v257: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v255);
            let v259: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v230))),
                                string(">move || { v257 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v261: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v257 }</svg> };
            let v263: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v261);
            let v265: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v220);
            let v273: string = string("vec![v265, v263]");
            let v274: Vec<leptos::prelude::AnyView> = vec![v265, v263];
            let v276: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v274);
            let v278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v276);
            let v281: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v177))),
                                string(">move || { v278 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v283: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v278 }</span> };
            let v285: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v283);
            let v286: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v287: string = append(
                (append((append(string(" "), (v286))), string(""))),
                string(""),
            );
            let v288: string = string("vec![]");
            let v289: Vec<leptos::prelude::AnyView> = vec![];
            let v291: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v289);
            let v293: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v291);
            let v295: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v287))),
                                string(">move || { v293 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v297: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v293 }</span> };
            let v299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v297);
            let v309: string = string("vec![v175, v285, v299]");
            let v310: Vec<leptos::prelude::AnyView> = vec![v175, v285, v299];
            let v312: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v310);
            let v314: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v312);
            let v317: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v153))),
                                string(">move || { v314 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v319: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v148 for=move || v58()>move || { v314 }</label> };
            let v321: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v319);
            let v325: string = string("vec![v321]");
            let v326: Vec<leptos::prelude::AnyView> = vec![v321];
            leptos::prelude::Fragment::new(v326)
        }
        pub fn method245(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure263(v0_1.clone(), ())
            })
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure269(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                (append(string("Transaction "), (toString((v0_1) + 1_i64)))),
                string(""),
            );
            let v6: &str = &*v1;
            let v30: std::string::String = String::from(v6);
            let v51: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v30));
            let v56: string = string("vec![v51]");
            let v57: Vec<leptos::prelude::AnyView> = vec![v51];
            leptos::prelude::Fragment::new(v57)
        }
        pub fn closure270(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Account");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method248() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure270((), ()))
        }
        pub fn closure271(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*v0_1;
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method249(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure271(v0_1.clone(), ())
            })
        }
        pub fn closure272(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure273(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure274(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Timestamp");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method250() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure274((), ()))
        }
        pub fn closure275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v19: i64 =
                (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v5))))
                    / 1000_i64;
            let v21: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v19);
            let v35: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method205(), v21));
            let v54: Dice_ui::US31 = match &v35 {
                Dice_ui::US68::US68_0(v35_0_0) => {
                    let v41: chrono::NaiveDateTime = match &v35 {
                        Dice_ui::US68::US68_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v43: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v41);
                    let v45: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v46: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v48: std::string::String = v43.format(v46).to_string();
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v48))
                }
                _ => Dice_ui::US31::US31_1,
            };
            let v60: Dice_ui::US69 = match &v54 {
                Dice_ui::US31::US31_0(v54_0_0) => Dice_ui::US69::US69_0(
                    match &v54 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => Dice_ui::US69::US69_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v65: string = match &v60 {
                Dice_ui::US69::US69_0(v60_0_0) => v60_0_0.clone(),
                Dice_ui::US69::US69_1(v60_1_0) => append(
                    (append(string("sm\'.to_string result / Error: "), (v60_1_0.clone()))),
                    string(""),
                ),
            };
            let v70: &str = &*v65;
            let v94: std::string::String = String::from(v70);
            let v115: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v94));
            let v120: string = string("vec![v115]");
            let v121: Vec<leptos::prelude::AnyView> = vec![v115];
            leptos::prelude::Fragment::new(v121)
        }
        pub fn method251(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure275(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure276(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Predecessor");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method252() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure278((), ()))
        }
        pub fn closure279(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method253(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure279(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure280(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure281(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure282(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receiver");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method254() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure282((), ()))
        }
        pub fn closure283(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method255(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure283(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure285(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure286(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Actions");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method256() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure286((), ()))
        }
        pub fn closure288(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == (v2.clone()) {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == (v2.clone()) {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == (v2.clone()) {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v16: &str = &*v11;
            let v40: std::string::String = String::from(v16);
            let v61: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v40));
            let v66: string = string("vec![v61]");
            let v67: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v67)
        }
        pub fn method258(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure288(v0_1.clone(), ())
            })
        }
        pub fn closure290(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Method");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method260() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure290((), ()))
        }
        pub fn closure291(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: Dice_ui::US14 =
                defaultValue(Dice_ui::US14::US14_1, map(Dice_ui::method39(), v0_1));
            match &v14 {
                Dice_ui::US14::US14_0(v14_0_0) => {
                    let v20: string = fable_library_rust::String_::fromString(
                        match &v14 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v25: &str = &*v20;
                    let v49: std::string::String = String::from(v25);
                    let v70: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v49),
                    );
                    let v75: string = string("vec![v70]");
                    let v76: Vec<leptos::prelude::AnyView> = vec![v70];
                    leptos::prelude::Fragment::new(v76)
                }
                _ => {
                    let v84: &str = &*string("None");
                    let v108: std::string::String = String::from(v84);
                    let v129: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v108),
                    );
                    let v134: string = string("vec![v129]");
                    let v135: Vec<leptos::prelude::AnyView> = vec![v129];
                    leptos::prelude::Fragment::new(v135)
                }
            }
        }
        pub fn method261(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure291(v0_1.clone(), ())
            })
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure294(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure289(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method260();
            let v5 = Dice_ui::method261(v0_1);
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure292((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11 = {
                let clo_1 = Func0::new(move || Dice_ui::closure293((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v19 = {
                let clo_3 = Func0::new(move || Dice_ui::closure294((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
            let v75: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v72 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v72 }</div> };
            let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
            let v83: string = string("vec![v79]");
            let v84: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v84)
        }
        pub fn method259(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure289(v0_1.clone(), ())
            })
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure298(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure287(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v15: bool = true;
            let _vec_map : Vec<_> = v13.into_iter().map(|x| { //;
            let patternInput:
                    (std::string::String, Option<std::string::String>) = x;
            let v19 = Dice_ui::method258(patternInput.0.clone());
            let v20 = Dice_ui::method259(patternInput.1.clone());
            let v23 =
                {
                    let clo = Func0::new(move || Dice_ui::closure295((), ()));
                    Func1::new({
                                   let clo = clo.clone();
                                   move |arg: ()| clo()
                               })
                };
            let v26 =
                {
                    let clo_1 =
                        Func0::new(move || Dice_ui::closure296((), ()));
                    Func1::new({
                                   let clo_1 = clo_1.clone();
                                   move |arg_1: ()| clo_1()
                               })
                };
            let v29 =
                {
                    let clo_2 =
                        Func0::new(move || Dice_ui::closure297((), ()));
                    Func1::new({
                                   let clo_2 = clo_2.clone();
                                   move |arg_2: ()| clo_2()
                               })
                };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())");
            let v32: string =
                append((append((append(string(" "), (v30))), string(""))),
                       string(""));
            let v35 =
                {
                    let clo_3 =
                        Func0::new(move || Dice_ui::closure298((), ()));
                    Func1::new({
                                   let clo_3 = clo_3.clone();
                                   move |arg_3: ()| clo_3()
                               })
                };
            let v37: string =
                string(" class=\"[font-size:12px] text-gray-400\"");
            let v38: leptos::prelude::Fragment = v19();
            let v40: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v38);
            let v43: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dt "),
                                                               (v37))),
                                                       string(">move || { v40 }</"))),
                                               string("dt"))),
                                       string(">"))))), string(" }"));
            let v45:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v40 }</dt> };
            let v47: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v45);
            let v49: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())");
            let v50: leptos::prelude::Fragment = v20();
            let v52: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v50);
            let v55: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dd "),
                                                               (v49))),
                                                       string(">move || { v52 }</"))),
                                               string("dd"))),
                                       string(">"))))), string(" }"));
            let v57:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v35(())>move || { v52 }</dd> };
            let v59: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v57);
            let v67: string = string("vec![v47, v59]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v47, v59];
            let v70: leptos::prelude::Fragment =
                leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v70);
            let v75: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dl "),
                                                               (v32))),
                                                       string(">move || { v72 }</"))),
                                               string("dl"))),
                                       string(">"))))), string(" }"));
            let v77:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v26(()) + " " + &v23(())>move || { v72 }</dl> };
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v77);
            let v81: bool = true; v79 }).collect::<Vec<_>>();
            let v83: Vec<leptos::prelude::AnyView> = _vec_map;
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method257(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure287(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure299(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure301(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure302(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Deposit");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method262() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure302((), ()))
        }
        pub fn closure303(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v8);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method263(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure303(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure304(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Outcome Status");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method264() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure306((), ()))
        }
        pub fn closure307(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = ofBoolean(v9);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method265(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure307(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure309(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure310(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Fee");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method266() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure310((), ()))
        }
        pub fn closure311(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v10);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method267(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure311(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure313(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Height");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method268() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure314((), ()))
        }
        pub fn closure315(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = toString(v6);
            let v20: &str = &*v13;
            let v44: std::string::String = String::from(v20);
            let v65: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v70: string = string("vec![v65]");
            let v71: Vec<leptos::prelude::AnyView> = vec![v65];
            leptos::prelude::Fragment::new(v71)
        }
        pub fn method269(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure315(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure316(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure317(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure318(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Hash");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method270() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure318((), ()))
        }
        pub fn closure319(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method271(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure319(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Block Hash");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method272() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure323(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method273(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure323(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure324(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure325(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Receipt ID");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method274() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure326((), ()))
        }
        pub fn closure327(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v18: &str = &*v13;
            let v42: std::string::String = String::from(v18);
            let v63: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v68: string = string("vec![v63]");
            let v69: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v69)
        }
        pub fn method275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure327(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure328(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure329(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure330(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Logs");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method276() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure330((), ()))
        }
        pub fn method278(
            v0_1: Func1<std::string::String, string>,
        ) -> Func1<std::string::String, string> {
            v0_1
        }
        pub fn closure332(
            v0_1: Func1<std::string::String, string>,
            v1: std::string::String,
        ) -> string {
            let v2: Func1<std::string::String, string> = Dice_ui::method278(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method279() -> string {
            string("\n")
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure331(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: std::string::String = value;
                let v20: string = fable_library_rust::String_::fromString(v18);
                let v23: bool = true;
                v20 /*;
                    let v25: bool = */
            }); //;
            let v27: Func1<std::string::String, string> = _func1_from_v14;
            let v30: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v27 = v27.clone();
                        move |v: std::string::String| Dice_ui::closure332(v27.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v33: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v30.clone()));
            let v45: string = replace(
                join(Dice_ui::method279(), toArray(v33)),
                string("\\n"),
                string("\n"),
            );
            let v48 = {
                let clo = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v49: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v48(())");
            let v51: string = append(
                (append((append(string(" "), (v49))), string(""))),
                string(""),
            );
            let v56: &str = &*v45;
            let v80: std::string::String = String::from(v56);
            let v101: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v80));
            let v105: string = string("vec![v101]");
            let v106: Vec<leptos::prelude::AnyView> = vec![v101];
            let v108: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v106);
            let v110: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v108);
            let v113: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v51))),
                                string(">move || { v110 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v115: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v48(())>move || { v110 }</pre> };
            let v117: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v115);
            let v121: string = string("vec![v117]");
            let v122: Vec<leptos::prelude::AnyView> = vec![v117];
            leptos::prelude::Fragment::new(v122)
        }
        pub fn method277(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure331(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method281(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method281: loop {
                break '_method281 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if (length(fable_library_rust::String_::fromString(v4))) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method281;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method280(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method280: loop {
                break '_method280 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    if Dice_ui::method281(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method280;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure260(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v144: leptos::prelude::AnyView = if leptos::prelude::ReadSignal::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v10: string = string(" class=\"flex items-center pb-[6px]\"");
                let v12: string = string(" class=\"pr-[15px] [font-size:13px]\"");
                let v16: Func0<leptos::prelude::Fragment> =
                    Dice_ui::method195(Func0::new(move || {
                        Func0::new(move || Dice_ui::closure261((), ()))()
                    }));
                let v18: leptos::prelude::Fragment = (move || v16())();
                let v20: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v18);
                let v23: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v12))),
                                    string(">move || { v20 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v25: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v20 }</span> };
                let v27: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v25);
                let v29: string = string(" class=\"h-px flex-1 bg-gray-300\"");
                let v30: string = string("vec![]");
                let v31: Vec<leptos::prelude::AnyView> = vec![];
                let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
                let v35: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v33);
                let v37: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v29))),
                                    string(">move || { v35 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v35 }</span> };
                let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
                let v49: string = string("vec![v27, v41]");
                let v50: Vec<leptos::prelude::AnyView> = vec![v27, v41];
                let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
                let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
                let v56: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v10))),
                                    string(">move || { v54 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v58: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v54 }</span> };
                let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
                let v61 = Dice_ui::method244();
                let v62 = Dice_ui::method245(v0_1.clone());
                let v65 = {
                    let clo = Func0::new(move || Dice_ui::closure268((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v68 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v71 = {
                    let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v72: string =
                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v71(()) + \" \" + &v68(()) + \" \" + &v65(())");
                let v73: string = append(
                    (append((append(string(" "), (v72))), string(""))),
                    string(""),
                );
                let v76 = {
                    let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v78: string = string(" class=\"[font-size:12px] text-gray-400\"");
                let v79: leptos::prelude::Fragment = v61();
                let v81: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v79);
                let v84: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dt "), (v78))),
                                    string(">move || { v81 }</"),
                                )),
                                string("dt"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v86: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v81 }</dt> };
                let v88: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v86);
                let v90: string =
                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v76(())");
                let v91: leptos::prelude::Fragment = v62();
                let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
                let v96: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dd "), (v90))),
                                    string(">move || { v93 }</"),
                                )),
                                string("dd"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v98: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v76(())>move || { v93 }</dd> };
                let v100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v98);
                let v107: string = string("vec![v88, v100]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v88, v100];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dl "), (v73))),
                                    string(">move || { v112 }</"),
                                )),
                                string("dl"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v71(()) + " " + &v68(()) + " " + &v65(())>move || { v112 }</dl> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v126: string = string("vec![v60, v119]");
                let v127: Vec<leptos::prelude::AnyView> = vec![v60, v119];
                let v129: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v127);
                let v131: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v129);
                let v134: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v8))),
                                    string(">move || { v131 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v136: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v131 }</div> };
                leptos::prelude::IntoAny::into_any(v136)
            } else {
                let v140: string = string("vec![]");
                let v141: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v141)
            };
            let v146: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v4045: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v146.clone()),
            ) as u64)
                == 0_u64
            {
                let v153: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v155: string = string(" class=\"[height:17px]\"");
                let v169: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v175: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v176: string = string("vec![]");
                let v177: Vec<leptos::prelude::AnyView> = vec![];
                let v179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v177);
                let v181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v179);
                let v184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v175))),
                                    string(">move || { v181 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v181 }</path> };
                let v188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v186);
                let v192: string = string("vec![v188]");
                let v193: Vec<leptos::prelude::AnyView> = vec![v188];
                let v195: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v193);
                let v197: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v195);
                let v200: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v169))),
                                    string(">move || { v197 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v202: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v197 }</svg> };
                let v204: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v202);
                let v208: string = string("vec![v204]");
                let v209: Vec<leptos::prelude::AnyView> = vec![v204];
                let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
                let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
                let v216: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v155))),
                                    string(">move || { v213 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v218: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v213 }</span> };
                let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
                let v222: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v228: &str = &*string("No account selected");
                let v252: std::string::String = String::from(v228);
                let v273: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v252));
                let v277: string = string("vec![v273]");
                let v278: Vec<leptos::prelude::AnyView> = vec![v273];
                let v280: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v278);
                let v282: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v280);
                let v285: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v222))),
                                    string(">move || { v282 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v287: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v282 }</pre> };
                let v289: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v287);
                let v297: string = string("vec![v220, v289]");
                let v298: Vec<leptos::prelude::AnyView> = vec![v220, v289];
                let v300: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v298);
                let v302: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v300);
                let v305: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v153))),
                                    string(">move || { v302 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v307: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v302 }</div> };
                leptos::prelude::IntoAny::into_any(v307)
            } else {
                let v311: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v312 = Dice_ui::method138();
                let v313 = Dice_ui::method139();
                let v314: Dice_ui::US53 = match &v311 {
                    Err(v311_1_0) => v313(v311_1_0.clone()),
                    Ok(v311_0_0) => v312(v311_0_0.clone()),
                };
                let v337: Dice_ui::US46 = match &v314 {
                    Dice_ui::US53::US53_0(v314_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v314_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v314_1_0) => Dice_ui::US46::US46_1(v314_1_0.clone()),
                };
                match &v337 {
                    Dice_ui::US46::US46_0(v337_0_0) => {
                        let v338: Dice_ui::US47 = v337_0_0.clone();
                        if let Dice_ui::US47::US47_0(v338_0_0) = &v338 {
                            let v339: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v338_0_0.clone();
                            let v342: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v0_1.l0.clone());
                            let v344: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v342);
                            if if let Dice_ui::US1::US1_0 =
                                &(leptos::prelude::ArcRwSignal::get(&v344.l3.clone())).l4
                            {
                                true
                            } else {
                                false
                            } {
                                let v350: string =
                                        string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                let v352: string = append(
                                    (append((append(string(" "), (v350))), string(""))),
                                    string(""),
                                );
                                let v354: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v339.clone().to_vec();
                                let v356: bool = true;
                                let _vec_map : Vec<_> = v354.into_iter().map(|x| { //;
                                    let patternInput:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v360: LrcPtr<Dice_ui::Heap5> =
                                        patternInput.2.clone();
                                    let v361: std::string::String =
                                        v360.l0.clone();
                                    let v362: std::string::String =
                                        v360.l1.clone();
                                    let v363: std::string::String =
                                        v360.l2.clone();
                                    let v364: std::string::String =
                                        v360.l3.clone();
                                    let v365: std::string::String =
                                        v360.l4.clone();
                                    let v366: std::string::String =
                                        v360.l5.clone();
                                    let v367: u32 = v360.l6;
                                    let v368:
                                            Array<(std::string::String,
                                                   Option<std::string::String>)> =
                                        v360.l7.clone();
                                    let v369: f64 = v360.l8;
                                    let v370: bool = v360.l9;
                                    let v371: f64 = v360.l10;
                                    let v372: Array<std::string::String> =
                                        v360.l11.clone();
                                    let v374: i64 =
                                        patternInput.1.clone() as i64;
                                    let v379: bool =
                                        true; leptos::logging::log!("{}", string("transaction.render (1)"));
                                    let v381: Option<LrcPtr<Dice_ui::Heap2>> =
                                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                                    let v383: LrcPtr<Dice_ui::Heap2> =
                                        v381.unwrap();
                                    let v385: string =
                                        string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                                    let v387: string =
                                        string(" class=\"flex items-center pb-[6px]\"");
                                    let v389: string =
                                        string(" class=\"pr-[15px] [font-size:13px]\"");
                                    let v393:
                                            Func0<leptos::prelude::Fragment> =
                                        Dice_ui::method195(Func0::new(move || Func0::new({
                                                                                             let v374
                                                                                                 =
                                                                                                 v374.clone();
                                                                                             move
                                                                                                 ||
                                                                                                 Dice_ui::closure269(v374,
                                                                                                                     ())
                                                                                         })()));
                                    let v395: leptos::prelude::Fragment =
                                        (move || v393())();
                                    let v397: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v395);
                                    let v400: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v389))),
                                                                               string(">move || { v397 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v402:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v397 }</span> };
                                    let v404: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v402);
                                    let v406: string =
                                        string(" class=\"h-px flex-1 bg-gray-300\"");
                                    let v407: string = string("vec![]");
                                    let v408: Vec<leptos::prelude::AnyView> =
                                        vec![];
                                    let v410: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v408);
                                    let v412: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v410);
                                    let v414: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v406))),
                                                                               string(">move || { v412 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v416:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v412 }</span> };
                                    let v418: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v416);
                                    let v426: string =
                                        string("vec![v404, v418]");
                                    let v427: Vec<leptos::prelude::AnyView> =
                                        vec![v404, v418];
                                    let v429: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v427);
                                    let v431: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v429);
                                    let v433: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v387))),
                                                                               string(">move || { v431 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v435:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v431 }</span> };
                                    let v437: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v435);
                                    let v439: string =
                                        string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
                                    let v440 = Dice_ui::method248();
                                    let v441 =
                                        Dice_ui::method249(patternInput.0.clone());
                                    let v444 =
                                        {
                                            let clo_4 =
                                                Func0::new(move ||
                                                               Dice_ui::closure272((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_4 =
                                                               clo_4.clone();
                                                           move |arg_4: ()|
                                                               clo_4()
                                                       })
                                        };
                                    let v447 =
                                        {
                                            let clo_5 =
                                                Func0::new(move ||
                                                               Dice_ui::closure273((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_5 =
                                                               clo_5.clone();
                                                           move |arg_5: ()|
                                                               clo_5()
                                                       })
                                        };
                                    fn v449() -> string {
                                        Dice_ui::closure235((), ())
                                    }
                                    let v450 =
                                        {
                                            let clo_6 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_6 =
                                                               clo_6.clone();
                                                           move |arg_6: ()|
                                                               clo_6()
                                                       })
                                        };
                                    let v451: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v450(()) + \" \" + &v447(()) + \" \" + &v444(())");
                                    let v452: string =
                                        append((append((append(string(" "),
                                                               (v451))),
                                                       string(""))),
                                               string(""));
                                    fn v454() -> string {
                                        Dice_ui::closure236((), ())
                                    }
                                    let v455 =
                                        {
                                            let clo_7 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_7 =
                                                               clo_7.clone();
                                                           move |arg_7: ()|
                                                               clo_7()
                                                       })
                                        };
                                    let v457: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v458: leptos::prelude::Fragment =
                                        v440();
                                    let v460: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v458);
                                    let v463: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v457))),
                                                                               string(">move || { v460 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v465:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v460 }</dt> };
                                    let v467: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v465);
                                    let v469: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v455(())");
                                    let v470: leptos::prelude::Fragment =
                                        v441();
                                    let v472: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v470);
                                    let v475: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v469))),
                                                                               string(">move || { v472 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v477:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v455(())>move || { v472 }</dd> };
                                    let v479: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v477);
                                    let v486: string =
                                        string("vec![v467, v479]");
                                    let v487: Vec<leptos::prelude::AnyView> =
                                        vec![v467, v479];
                                    let v489: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v487);
                                    let v491: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v489);
                                    let v494: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v452))),
                                                                               string(">move || { v491 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v496:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v450(()) + " " + &v447(()) + " " + &v444(())>move || { v491 }</dl> };
                                    let v498: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v496);
                                    let v499 = Dice_ui::method250();
                                    let v500 =
                                        Dice_ui::method251(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v503 =
                                        {
                                            let clo_8 =
                                                Func0::new(move ||
                                                               Dice_ui::closure276((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_8 =
                                                               clo_8.clone();
                                                           move |arg_8: ()|
                                                               clo_8()
                                                       })
                                        };
                                    let v506 =
                                        {
                                            let clo_9 =
                                                Func0::new(move ||
                                                               Dice_ui::closure277((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_9 =
                                                               clo_9.clone();
                                                           move |arg_9: ()|
                                                               clo_9()
                                                       })
                                        };
                                    let v508 =
                                        {
                                            let clo_10 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_10 =
                                                               clo_10.clone();
                                                           move |arg_10: ()|
                                                               clo_10()
                                                       })
                                        };
                                    let v509: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v508(()) + \" \" + &v506(()) + \" \" + &v503(())");
                                    let v510: string =
                                        append((append((append(string(" "),
                                                               (v509))),
                                                       string(""))),
                                               string(""));
                                    let v512 =
                                        {
                                            let clo_11 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_11 =
                                                               clo_11.clone();
                                                           move |arg_11: ()|
                                                               clo_11()
                                                       })
                                        };
                                    let v514: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v515: leptos::prelude::Fragment =
                                        v499();
                                    let v517: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v515);
                                    let v519: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v514))),
                                                                               string(">move || { v517 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v521:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v517 }</dt> };
                                    let v523: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v521);
                                    let v525: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v512(())");
                                    let v526: leptos::prelude::Fragment =
                                        v500();
                                    let v528: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v526);
                                    let v530: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v525))),
                                                                               string(">move || { v528 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v532:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v512(())>move || { v528 }</dd> };
                                    let v534: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v532);
                                    let v541: string =
                                        string("vec![v523, v534]");
                                    let v542: Vec<leptos::prelude::AnyView> =
                                        vec![v523, v534];
                                    let v544: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v542);
                                    let v546: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v544);
                                    let v548: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v510))),
                                                                               string(">move || { v546 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v550:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v508(()) + " " + &v506(()) + " " + &v503(())>move || { v546 }</dl> };
                                    let v552: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v550);
                                    let v553 = Dice_ui::method252();
                                    let v554 =
                                        Dice_ui::method253(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v557 =
                                        {
                                            let clo_12 =
                                                Func0::new(move ||
                                                               Dice_ui::closure280((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_12 =
                                                               clo_12.clone();
                                                           move |arg_12: ()|
                                                               clo_12()
                                                       })
                                        };
                                    let v560 =
                                        {
                                            let clo_13 =
                                                Func0::new(move ||
                                                               Dice_ui::closure281((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_13 =
                                                               clo_13.clone();
                                                           move |arg_13: ()|
                                                               clo_13()
                                                       })
                                        };
                                    let v562 =
                                        {
                                            let clo_14 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_14 =
                                                               clo_14.clone();
                                                           move |arg_14: ()|
                                                               clo_14()
                                                       })
                                        };
                                    let v563: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v562(()) + \" \" + &v560(()) + \" \" + &v557(())");
                                    let v564: string =
                                        append((append((append(string(" "),
                                                               (v563))),
                                                       string(""))),
                                               string(""));
                                    let v566 =
                                        {
                                            let clo_15 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_15 =
                                                               clo_15.clone();
                                                           move |arg_15: ()|
                                                               clo_15()
                                                       })
                                        };
                                    let v568: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v569: leptos::prelude::Fragment =
                                        v553();
                                    let v571: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v569);
                                    let v573: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v568))),
                                                                               string(">move || { v571 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v575:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v571 }</dt> };
                                    let v577: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v575);
                                    let v579: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v566(())");
                                    let v580: leptos::prelude::Fragment =
                                        v554();
                                    let v582: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v580);
                                    let v584: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v579))),
                                                                               string(">move || { v582 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v586:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v566(())>move || { v582 }</dd> };
                                    let v588: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v586);
                                    let v595: string =
                                        string("vec![v577, v588]");
                                    let v596: Vec<leptos::prelude::AnyView> =
                                        vec![v577, v588];
                                    let v598: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v596);
                                    let v600: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v598);
                                    let v602: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v564))),
                                                                               string(">move || { v600 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v604:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v562(()) + " " + &v560(()) + " " + &v557(())>move || { v600 }</dl> };
                                    let v606: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v604);
                                    let v607 = Dice_ui::method254();
                                    let v608 =
                                        Dice_ui::method255(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v611 =
                                        {
                                            let clo_16 =
                                                Func0::new(move ||
                                                               Dice_ui::closure284((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_16 =
                                                               clo_16.clone();
                                                           move |arg_16: ()|
                                                               clo_16()
                                                       })
                                        };
                                    let v614 =
                                        {
                                            let clo_17 =
                                                Func0::new(move ||
                                                               Dice_ui::closure285((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_17 =
                                                               clo_17.clone();
                                                           move |arg_17: ()|
                                                               clo_17()
                                                       })
                                        };
                                    let v616 =
                                        {
                                            let clo_18 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_18 =
                                                               clo_18.clone();
                                                           move |arg_18: ()|
                                                               clo_18()
                                                       })
                                        };
                                    let v617: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v616(()) + \" \" + &v614(()) + \" \" + &v611(())");
                                    let v618: string =
                                        append((append((append(string(" "),
                                                               (v617))),
                                                       string(""))),
                                               string(""));
                                    let v620 =
                                        {
                                            let clo_19 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_19 =
                                                               clo_19.clone();
                                                           move |arg_19: ()|
                                                               clo_19()
                                                       })
                                        };
                                    let v622: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v623: leptos::prelude::Fragment =
                                        v607();
                                    let v625: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v623);
                                    let v627: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v622))),
                                                                               string(">move || { v625 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v629:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v625 }</dt> };
                                    let v631: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v629);
                                    let v633: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v620(())");
                                    let v634: leptos::prelude::Fragment =
                                        v608();
                                    let v636: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v634);
                                    let v638: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v633))),
                                                                               string(">move || { v636 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v640:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v620(())>move || { v636 }</dd> };
                                    let v642: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v640);
                                    let v649: string =
                                        string("vec![v631, v642]");
                                    let v650: Vec<leptos::prelude::AnyView> =
                                        vec![v631, v642];
                                    let v652: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v650);
                                    let v654: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v652);
                                    let v656: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v618))),
                                                                               string(">move || { v654 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v658:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v616(()) + " " + &v614(()) + " " + &v611(())>move || { v654 }</dl> };
                                    let v660: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v658);
                                    let v661 = Dice_ui::method256();
                                    let v662 =
                                        Dice_ui::method257(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v665 =
                                        {
                                            let clo_20 =
                                                Func0::new(move ||
                                                               Dice_ui::closure299((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_20 =
                                                               clo_20.clone();
                                                           move |arg_20: ()|
                                                               clo_20()
                                                       })
                                        };
                                    let v668 =
                                        {
                                            let clo_21 =
                                                Func0::new(move ||
                                                               Dice_ui::closure300((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_21 =
                                                               clo_21.clone();
                                                           move |arg_21: ()|
                                                               clo_21()
                                                       })
                                        };
                                    let v670 =
                                        {
                                            let clo_22 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_22 =
                                                               clo_22.clone();
                                                           move |arg_22: ()|
                                                               clo_22()
                                                       })
                                        };
                                    let v671: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v670(()) + \" \" + &v668(()) + \" \" + &v665(())");
                                    let v672: string =
                                        append((append((append(string(" "),
                                                               (v671))),
                                                       string(""))),
                                               string(""));
                                    let v675 =
                                        {
                                            let clo_23 =
                                                Func0::new(move ||
                                                               Dice_ui::closure301((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_23 =
                                                               clo_23.clone();
                                                           move |arg_23: ()|
                                                               clo_23()
                                                       })
                                        };
                                    let v677: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v678: leptos::prelude::Fragment =
                                        v661();
                                    let v680: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v678);
                                    let v682: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v677))),
                                                                               string(">move || { v680 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v684:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v680 }</dt> };
                                    let v686: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v684);
                                    let v688: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v675(())");
                                    let v689: leptos::prelude::Fragment =
                                        v662();
                                    let v691: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v689);
                                    let v693: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v688))),
                                                                               string(">move || { v691 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v695:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v675(())>move || { v691 }</dd> };
                                    let v697: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v695);
                                    let v704: string =
                                        string("vec![v686, v697]");
                                    let v705: Vec<leptos::prelude::AnyView> =
                                        vec![v686, v697];
                                    let v707: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v705);
                                    let v709: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v707);
                                    let v711: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v672))),
                                                                               string(">move || { v709 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v713:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v670(()) + " " + &v668(()) + " " + &v665(())>move || { v709 }</dl> };
                                    let v715: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v713);
                                    let v716 = Dice_ui::method262();
                                    let v717 =
                                        Dice_ui::method263(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v720 =
                                        {
                                            let clo_24 =
                                                Func0::new(move ||
                                                               Dice_ui::closure304((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_24 =
                                                               clo_24.clone();
                                                           move |arg_24: ()|
                                                               clo_24()
                                                       })
                                        };
                                    let v723 =
                                        {
                                            let clo_25 =
                                                Func0::new(move ||
                                                               Dice_ui::closure305((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_25 =
                                                               clo_25.clone();
                                                           move |arg_25: ()|
                                                               clo_25()
                                                       })
                                        };
                                    let v725 =
                                        {
                                            let clo_26 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_26 =
                                                               clo_26.clone();
                                                           move |arg_26: ()|
                                                               clo_26()
                                                       })
                                        };
                                    let v726: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v725(()) + \" \" + &v723(()) + \" \" + &v720(())");
                                    let v727: string =
                                        append((append((append(string(" "),
                                                               (v726))),
                                                       string(""))),
                                               string(""));
                                    let v729 =
                                        {
                                            let clo_27 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_27 =
                                                               clo_27.clone();
                                                           move |arg_27: ()|
                                                               clo_27()
                                                       })
                                        };
                                    let v731: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v732: leptos::prelude::Fragment =
                                        v716();
                                    let v734: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v732);
                                    let v736: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v731))),
                                                                               string(">move || { v734 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v738:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v734 }</dt> };
                                    let v740: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v738);
                                    let v742: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v729(())");
                                    let v743: leptos::prelude::Fragment =
                                        v717();
                                    let v745: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v743);
                                    let v747: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v742))),
                                                                               string(">move || { v745 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v749:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v729(())>move || { v745 }</dd> };
                                    let v751: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v749);
                                    let v758: string =
                                        string("vec![v740, v751]");
                                    let v759: Vec<leptos::prelude::AnyView> =
                                        vec![v740, v751];
                                    let v761: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v759);
                                    let v763: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v761);
                                    let v765: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v727))),
                                                                               string(">move || { v763 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v767:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v725(()) + " " + &v723(()) + " " + &v720(())>move || { v763 }</dl> };
                                    let v769: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v767);
                                    let v770 = Dice_ui::method264();
                                    let v771 =
                                        Dice_ui::method265(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v774 =
                                        {
                                            let clo_28 =
                                                Func0::new(move ||
                                                               Dice_ui::closure308((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_28 =
                                                               clo_28.clone();
                                                           move |arg_28: ()|
                                                               clo_28()
                                                       })
                                        };
                                    let v777 =
                                        {
                                            let clo_29 =
                                                Func0::new(move ||
                                                               Dice_ui::closure309((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_29 =
                                                               clo_29.clone();
                                                           move |arg_29: ()|
                                                               clo_29()
                                                       })
                                        };
                                    let v779 =
                                        {
                                            let clo_30 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_30 =
                                                               clo_30.clone();
                                                           move |arg_30: ()|
                                                               clo_30()
                                                       })
                                        };
                                    let v780: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v779(()) + \" \" + &v777(()) + \" \" + &v774(())");
                                    let v781: string =
                                        append((append((append(string(" "),
                                                               (v780))),
                                                       string(""))),
                                               string(""));
                                    let v783 =
                                        {
                                            let clo_31 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_31 =
                                                               clo_31.clone();
                                                           move |arg_31: ()|
                                                               clo_31()
                                                       })
                                        };
                                    let v785: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v786: leptos::prelude::Fragment =
                                        v770();
                                    let v788: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v786);
                                    let v790: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v785))),
                                                                               string(">move || { v788 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v792:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v788 }</dt> };
                                    let v794: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v792);
                                    let v796: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v783(())");
                                    let v797: leptos::prelude::Fragment =
                                        v771();
                                    let v799: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v797);
                                    let v801: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v796))),
                                                                               string(">move || { v799 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v803:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v783(())>move || { v799 }</dd> };
                                    let v805: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v803);
                                    let v812: string =
                                        string("vec![v794, v805]");
                                    let v813: Vec<leptos::prelude::AnyView> =
                                        vec![v794, v805];
                                    let v815: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v813);
                                    let v817: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v815);
                                    let v819: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v781))),
                                                                               string(">move || { v817 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v821:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v779(()) + " " + &v777(()) + " " + &v774(())>move || { v817 }</dl> };
                                    let v823: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v821);
                                    let v824 = Dice_ui::method266();
                                    let v825 =
                                        Dice_ui::method267(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v828 =
                                        {
                                            let clo_32 =
                                                Func0::new(move ||
                                                               Dice_ui::closure312((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_32 =
                                                               clo_32.clone();
                                                           move |arg_32: ()|
                                                               clo_32()
                                                       })
                                        };
                                    let v831 =
                                        {
                                            let clo_33 =
                                                Func0::new(move ||
                                                               Dice_ui::closure313((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_33 =
                                                               clo_33.clone();
                                                           move |arg_33: ()|
                                                               clo_33()
                                                       })
                                        };
                                    let v833 =
                                        {
                                            let clo_34 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_34 =
                                                               clo_34.clone();
                                                           move |arg_34: ()|
                                                               clo_34()
                                                       })
                                        };
                                    let v834: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v833(()) + \" \" + &v831(()) + \" \" + &v828(())");
                                    let v835: string =
                                        append((append((append(string(" "),
                                                               (v834))),
                                                       string(""))),
                                               string(""));
                                    let v837 =
                                        {
                                            let clo_35 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_35 =
                                                               clo_35.clone();
                                                           move |arg_35: ()|
                                                               clo_35()
                                                       })
                                        };
                                    let v839: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v840: leptos::prelude::Fragment =
                                        v824();
                                    let v842: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v840);
                                    let v844: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v839))),
                                                                               string(">move || { v842 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v846:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v842 }</dt> };
                                    let v848: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v846);
                                    let v850: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v837(())");
                                    let v851: leptos::prelude::Fragment =
                                        v825();
                                    let v853: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v851);
                                    let v855: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v850))),
                                                                               string(">move || { v853 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v857:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v837(())>move || { v853 }</dd> };
                                    let v859: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v857);
                                    let v866: string =
                                        string("vec![v848, v859]");
                                    let v867: Vec<leptos::prelude::AnyView> =
                                        vec![v848, v859];
                                    let v869: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v867);
                                    let v871: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v869);
                                    let v873: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v835))),
                                                                               string(">move || { v871 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v875:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v833(()) + " " + &v831(()) + " " + &v828(())>move || { v871 }</dl> };
                                    let v877: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v875);
                                    let v878 = Dice_ui::method268();
                                    let v879 =
                                        Dice_ui::method269(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v882 =
                                        {
                                            let clo_36 =
                                                Func0::new(move ||
                                                               Dice_ui::closure316((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_36 =
                                                               clo_36.clone();
                                                           move |arg_36: ()|
                                                               clo_36()
                                                       })
                                        };
                                    let v885 =
                                        {
                                            let clo_37 =
                                                Func0::new(move ||
                                                               Dice_ui::closure317((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_37 =
                                                               clo_37.clone();
                                                           move |arg_37: ()|
                                                               clo_37()
                                                       })
                                        };
                                    let v887 =
                                        {
                                            let clo_38 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_38 =
                                                               clo_38.clone();
                                                           move |arg_38: ()|
                                                               clo_38()
                                                       })
                                        };
                                    let v888: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v887(()) + \" \" + &v885(()) + \" \" + &v882(())");
                                    let v889: string =
                                        append((append((append(string(" "),
                                                               (v888))),
                                                       string(""))),
                                               string(""));
                                    let v891 =
                                        {
                                            let clo_39 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_39 =
                                                               clo_39.clone();
                                                           move |arg_39: ()|
                                                               clo_39()
                                                       })
                                        };
                                    let v893: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v894: leptos::prelude::Fragment =
                                        v878();
                                    let v896: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v894);
                                    let v898: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v893))),
                                                                               string(">move || { v896 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v900:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v896 }</dt> };
                                    let v902: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v900);
                                    let v904: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v891(())");
                                    let v905: leptos::prelude::Fragment =
                                        v879();
                                    let v907: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v905);
                                    let v909: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v904))),
                                                                               string(">move || { v907 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v911:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v891(())>move || { v907 }</dd> };
                                    let v913: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v911);
                                    let v920: string =
                                        string("vec![v902, v913]");
                                    let v921: Vec<leptos::prelude::AnyView> =
                                        vec![v902, v913];
                                    let v923: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v921);
                                    let v925: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v923);
                                    let v927: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v889))),
                                                                               string(">move || { v925 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v929:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v887(()) + " " + &v885(()) + " " + &v882(())>move || { v925 }</dl> };
                                    let v931: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v929);
                                    let v932 = Dice_ui::method270();
                                    let v933 =
                                        Dice_ui::method271(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v936 =
                                        {
                                            let clo_40 =
                                                Func0::new(move ||
                                                               Dice_ui::closure320((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_40 =
                                                               clo_40.clone();
                                                           move |arg_40: ()|
                                                               clo_40()
                                                       })
                                        };
                                    let v939 =
                                        {
                                            let clo_41 =
                                                Func0::new(move ||
                                                               Dice_ui::closure321((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_41 =
                                                               clo_41.clone();
                                                           move |arg_41: ()|
                                                               clo_41()
                                                       })
                                        };
                                    let v941 =
                                        {
                                            let clo_42 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_42 =
                                                               clo_42.clone();
                                                           move |arg_42: ()|
                                                               clo_42()
                                                       })
                                        };
                                    let v942: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v941(()) + \" \" + &v939(()) + \" \" + &v936(())");
                                    let v943: string =
                                        append((append((append(string(" "),
                                                               (v942))),
                                                       string(""))),
                                               string(""));
                                    let v945 =
                                        {
                                            let clo_43 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_43 =
                                                               clo_43.clone();
                                                           move |arg_43: ()|
                                                               clo_43()
                                                       })
                                        };
                                    let v947: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v948: leptos::prelude::Fragment =
                                        v932();
                                    let v950: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v948);
                                    let v952: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v947))),
                                                                               string(">move || { v950 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v954:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v950 }</dt> };
                                    let v956: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v954);
                                    let v958: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v945(())");
                                    let v959: leptos::prelude::Fragment =
                                        v933();
                                    let v961: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v959);
                                    let v963: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v958))),
                                                                               string(">move || { v961 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v965:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v945(())>move || { v961 }</dd> };
                                    let v967: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v965);
                                    let v974: string =
                                        string("vec![v956, v967]");
                                    let v975: Vec<leptos::prelude::AnyView> =
                                        vec![v956, v967];
                                    let v977: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v975);
                                    let v979: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v977);
                                    let v981: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v943))),
                                                                               string(">move || { v979 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v983:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v941(()) + " " + &v939(()) + " " + &v936(())>move || { v979 }</dl> };
                                    let v985: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v983);
                                    let v986 = Dice_ui::method272();
                                    let v987 =
                                        Dice_ui::method273(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v990 =
                                        {
                                            let clo_44 =
                                                Func0::new(move ||
                                                               Dice_ui::closure324((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_44 =
                                                               clo_44.clone();
                                                           move |arg_44: ()|
                                                               clo_44()
                                                       })
                                        };
                                    let v993 =
                                        {
                                            let clo_45 =
                                                Func0::new(move ||
                                                               Dice_ui::closure325((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_45 =
                                                               clo_45.clone();
                                                           move |arg_45: ()|
                                                               clo_45()
                                                       })
                                        };
                                    let v995 =
                                        {
                                            let clo_46 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_46 =
                                                               clo_46.clone();
                                                           move |arg_46: ()|
                                                               clo_46()
                                                       })
                                        };
                                    let v996: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v995(()) + \" \" + &v993(()) + \" \" + &v990(())");
                                    let v997: string =
                                        append((append((append(string(" "),
                                                               (v996))),
                                                       string(""))),
                                               string(""));
                                    let v999 =
                                        {
                                            let clo_47 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_47 =
                                                               clo_47.clone();
                                                           move |arg_47: ()|
                                                               clo_47()
                                                       })
                                        };
                                    let v1001: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1002: leptos::prelude::Fragment =
                                        v986();
                                    let v1004: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1002);
                                    let v1006: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1001))),
                                                                               string(">move || { v1004 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1008:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1004 }</dt> };
                                    let v1010: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1008);
                                    let v1012: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v999(())");
                                    let v1013: leptos::prelude::Fragment =
                                        v987();
                                    let v1015: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1013);
                                    let v1017: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1012))),
                                                                               string(">move || { v1015 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1019:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v999(())>move || { v1015 }</dd> };
                                    let v1021: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1019);
                                    let v1028: string =
                                        string("vec![v1010, v1021]");
                                    let v1029: Vec<leptos::prelude::AnyView> =
                                        vec![v1010, v1021];
                                    let v1031: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1029);
                                    let v1033: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1031);
                                    let v1035: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v997))),
                                                                               string(">move || { v1033 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1037:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v995(()) + " " + &v993(()) + " " + &v990(())>move || { v1033 }</dl> };
                                    let v1039: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1037);
                                    let v1040 = Dice_ui::method274();
                                    let v1041 =
                                        Dice_ui::method275(v361.clone(),
                                                           v362.clone(),
                                                           v363.clone(),
                                                           v364.clone(),
                                                           v365.clone(),
                                                           v366.clone(), v367,
                                                           v368.clone(), v369,
                                                           v370, v371,
                                                           v372.clone());
                                    let v1044 =
                                        {
                                            let clo_48 =
                                                Func0::new(move ||
                                                               Dice_ui::closure328((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_48 =
                                                               clo_48.clone();
                                                           move |arg_48: ()|
                                                               clo_48()
                                                       })
                                        };
                                    let v1047 =
                                        {
                                            let clo_49 =
                                                Func0::new(move ||
                                                               Dice_ui::closure329((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_49 =
                                                               clo_49.clone();
                                                           move |arg_49: ()|
                                                               clo_49()
                                                       })
                                        };
                                    let v1049 =
                                        {
                                            let clo_50 = Func0::from(v449);
                                            Func1::new({
                                                           let clo_50 =
                                                               clo_50.clone();
                                                           move |arg_50: ()|
                                                               clo_50()
                                                       })
                                        };
                                    let v1050: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1049(()) + \" \" + &v1047(()) + \" \" + &v1044(())");
                                    let v1051: string =
                                        append((append((append(string(" "),
                                                               (v1050))),
                                                       string(""))),
                                               string(""));
                                    let v1053 =
                                        {
                                            let clo_51 = Func0::from(v454);
                                            Func1::new({
                                                           let clo_51 =
                                                               clo_51.clone();
                                                           move |arg_51: ()|
                                                               clo_51()
                                                       })
                                        };
                                    let v1055: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1056: leptos::prelude::Fragment =
                                        v1040();
                                    let v1058: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1056);
                                    let v1060: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1055))),
                                                                               string(">move || { v1058 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1062:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1058 }</dt> };
                                    let v1064: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1062);
                                    let v1066: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1053(())");
                                    let v1067: leptos::prelude::Fragment =
                                        v1041();
                                    let v1069: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1067);
                                    let v1071: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1066))),
                                                                               string(">move || { v1069 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1073:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1053(())>move || { v1069 }</dd> };
                                    let v1075: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1073);
                                    let v1082: string =
                                        string("vec![v1064, v1075]");
                                    let v1083: Vec<leptos::prelude::AnyView> =
                                        vec![v1064, v1075];
                                    let v1085: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1083);
                                    let v1087: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1085);
                                    let v1089: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1051))),
                                                                               string(">move || { v1087 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1091:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1049(()) + " " + &v1047(()) + " " + &v1044(())>move || { v1087 }</dl> };
                                    let v1093: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1091);
                                    let v1154: leptos::prelude::AnyView =
                                        if (get_Count(v372.clone()) as u64) ==
                                               0_u64 {
                                            let v1096: string =
                                                string("vec![]");
                                            let v1097:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![];
                                            leptos::prelude::IntoAny::into_any(v1097)
                                        } else {
                                            let v1100 = Dice_ui::method276();
                                            let v1101 =
                                                Dice_ui::method277(v361, v362,
                                                                   v363, v364,
                                                                   v365, v366,
                                                                   v367, v368,
                                                                   v369, v370,
                                                                   v371,
                                                                   v372);
                                            let v1104 =
                                                {
                                                    let clo_52 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure334((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_52
                                                                       =
                                                                       clo_52.clone();
                                                                   move
                                                                       |arg_52:
                                                                            ()|
                                                                       clo_52()
                                                               })
                                                };
                                            let v1107 =
                                                {
                                                    let clo_53 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure335((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_53
                                                                       =
                                                                       clo_53.clone();
                                                                   move
                                                                       |arg_53:
                                                                            ()|
                                                                       clo_53()
                                                               })
                                                };
                                            let v1109 =
                                                {
                                                    let clo_54 =
                                                        Func0::from(v449);
                                                    Func1::new({
                                                                   let clo_54
                                                                       =
                                                                       clo_54.clone();
                                                                   move
                                                                       |arg_54:
                                                                            ()|
                                                                       clo_54()
                                                               })
                                                };
                                            let v1110: string =
                                                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1109(()) + \" \" + &v1107(()) + \" \" + &v1104(())");
                                            let v1111: string =
                                                append((append((append(string(" "),
                                                                       (v1110))),
                                                               string(""))),
                                                       string(""));
                                            let v1113 =
                                                {
                                                    let clo_55 =
                                                        Func0::from(v454);
                                                    Func1::new({
                                                                   let clo_55
                                                                       =
                                                                       clo_55.clone();
                                                                   move
                                                                       |arg_55:
                                                                            ()|
                                                                       clo_55()
                                                               })
                                                };
                                            let v1115: string =
                                                string(" class=\"[font-size:12px] text-gray-400\"");
                                            let v1116:
                                                    leptos::prelude::Fragment =
                                                v1100();
                                            let v1118:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1116);
                                            let v1120: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dt "),
                                                                                               (v1115))),
                                                                                       string(">move || { v1118 }</"))),
                                                                               string("dt"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1122:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1118 }</dt> };
                                            let v1124:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1122);
                                            let v1126: string =
                                                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1113(())");
                                            let v1127:
                                                    leptos::prelude::Fragment =
                                                v1101();
                                            let v1129:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1127);
                                            let v1131: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dd "),
                                                                                               (v1126))),
                                                                                       string(">move || { v1129 }</"))),
                                                                               string("dd"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1133:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1113(())>move || { v1129 }</dd> };
                                            let v1135:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1133);
                                            let v1142: string =
                                                string("vec![v1124, v1135]");
                                            let v1143:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1124, v1135];
                                            let v1145:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v1143);
                                            let v1147:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1145);
                                            let v1149: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dl "),
                                                                                               (v1111))),
                                                                                       string(">move || { v1147 }</"))),
                                                                               string("dl"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1151:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1109(()) + " " + &v1107(()) + " " + &v1104(())>move || { v1147 }</dl> };
                                            leptos::prelude::IntoAny::into_any(v1151)
                                        };
                                    let v1194: string =
                                        string("vec![v498, v552, v606, v660, v715, v769, v823, v877, v931, v985, v1039, v1093, v1154]");
                                    let v1195: Vec<leptos::prelude::AnyView> =
                                        vec![v498, v552, v606, v660, v715, v769, v823, v877, v931, v985, v1039, v1093, v1154];
                                    let v1197: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1195);
                                    let v1199: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1197);
                                    let v1202: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v439))),
                                                                               string(">move || { v1199 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1204:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v1199 }</div> };
                                    let v1206: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1204);
                                    let v1213: string =
                                        string("vec![v437, v1206]");
                                    let v1214: Vec<leptos::prelude::AnyView> =
                                        vec![v437, v1206];
                                    let v1216: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1214);
                                    let v1218: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1216);
                                    let v1220: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v385))),
                                                                               string(">move || { v1218 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1222:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v1218 }</div> };
                                    let v1224: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1222);
                                    let v1226: bool =
                                        true; v1224 }).collect::<Vec<_>>();
                                let v1228: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v1230: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1228);
                                let v1234: string = string("vec![v1230]");
                                let v1235: Vec<leptos::prelude::AnyView> = vec![v1230];
                                let v1237: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1235);
                                let v1239: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1237);
                                let v1241: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v352))),
                                                    string(">move || { v1239 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1243: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v1239 }</div> };
                                leptos::prelude::IntoAny::into_any(v1243)
                            } else {
                                let v1247: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v339.clone().to_vec();
                                let v1249: bool = true;
                                let _vec_map : Vec<_> = v1247.into_iter().map(|x| { //;
                                    let patternInput_1:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v1253: LrcPtr<Dice_ui::Heap5> =
                                        patternInput_1.2.clone();
                                    let v1256: bool =
                                        true; leptos::logging::log!("{}", string("transaction.tr_render (1)"));
                                    let v1259: string =
                                        string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                    let v1261: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1266: &str =
                                        &*patternInput_1.0.clone();
                                    let v1290: std::string::String =
                                        String::from(v1266);
                                    let v1311: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1290));
                                    let v1315: string = string("vec![v1311]");
                                    let v1316: Vec<leptos::prelude::AnyView> =
                                        vec![v1311];
                                    let v1318: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1316);
                                    let v1320: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1318);
                                    let v1323: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1261))),
                                                                               string(">move || { v1320 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1325:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1320 }</td> };
                                    let v1327: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1325);
                                    let v1329: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1338: i64 =
                                        (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v1253.l5.clone()))))
                                            / 1000_i64;
                                    let v1340:
                                            Option<chrono::DateTime<chrono::Utc>> =
                                        chrono::DateTime::from_timestamp_micros(v1338);
                                    let v1354: Dice_ui::US68 =
                                        defaultValue(Dice_ui::US68::US68_1,
                                                     map(Dice_ui::method205(),
                                                         v1340));
                                    let v1373: Dice_ui::US31 =
                                        match &v1354 {
                                            Dice_ui::US68::US68_0(v1354_0_0)
                                            => {
                                                let v1360:
                                                        chrono::NaiveDateTime =
                                                    match &v1354 {
                                                        Dice_ui::US68::US68_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone().naive_utc();
                                                let v1362:
                                                        chrono::DateTime<chrono::Local> =
                                                    chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v1360);
                                                let v1364: string =
                                                    string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                let v1365: &str =
                                                    r#"%Y-%m-%d %H:%M:%S"#;
                                                let v1367:
                                                        std::string::String =
                                                    v1362.format(v1365).to_string();
                                                Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v1367))
                                            }
                                            _ => Dice_ui::US31::US31_1,
                                        };
                                    let v1379: Dice_ui::US69 =
                                        match &v1373 {
                                            Dice_ui::US31::US31_0(v1373_0_0)
                                            =>
                                            Dice_ui::US69::US69_0(match &v1373
                                                                      {
                                                                      Dice_ui::US31::US31_0(x)
                                                                      =>
                                                                      x.clone(),
                                                                      _ =>
                                                                      unreachable!(),
                                                                  }.clone()),
                                            _ =>
                                            Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                        };
                                    let v1384: string =
                                        match &v1379 {
                                            Dice_ui::US69::US69_0(v1379_0_0)
                                            => v1379_0_0.clone(),
                                            Dice_ui::US69::US69_1(v1379_1_0)
                                            =>
                                            append((append(string("sm\'.to_string result / Error: "),
                                                           (v1379_1_0.clone()))),
                                                   string("")),
                                        };
                                    let v1389: &str = &*v1384;
                                    let v1413: std::string::String =
                                        String::from(v1389);
                                    let v1434: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1413));
                                    let v1438: string = string("vec![v1434]");
                                    let v1439: Vec<leptos::prelude::AnyView> =
                                        vec![v1434];
                                    let v1441: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1439);
                                    let v1443: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1441);
                                    let v1445: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1329))),
                                                                               string(">move || { v1443 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1447:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1443 }</td> };
                                    let v1449: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1447);
                                    let v1451: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1454: string =
                                        fable_library_rust::String_::fromString(v1253.l1.clone());
                                    let v1459: &str = &*v1454;
                                    let v1483: std::string::String =
                                        String::from(v1459);
                                    let v1504: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1483));
                                    let v1508: string = string("vec![v1504]");
                                    let v1509: Vec<leptos::prelude::AnyView> =
                                        vec![v1504];
                                    let v1511: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1509);
                                    let v1513: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1511);
                                    let v1515: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1451))),
                                                                               string(">move || { v1513 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1517:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1513 }</td> };
                                    let v1519: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1517);
                                    let v1521: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1524: string =
                                        fable_library_rust::String_::fromString(v1253.l2.clone());
                                    let v1529: &str = &*v1524;
                                    let v1553: std::string::String =
                                        String::from(v1529);
                                    let v1574: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1553));
                                    let v1578: string = string("vec![v1574]");
                                    let v1579: Vec<leptos::prelude::AnyView> =
                                        vec![v1574];
                                    let v1581: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1579);
                                    let v1583: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1581);
                                    let v1585: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1521))),
                                                                               string(">move || { v1583 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1587:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1583 }</td> };
                                    let v1589: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1587);
                                    let v1591: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1594:
                                            Vec<(std::string::String,
                                                 Option<std::string::String>)> =
                                        v1253.l7.clone().to_vec();
                                    let v1596: bool =
                                        true; let _vec_map : Vec<_> = v1594.into_iter().map(|x| { //;
                                    let patternInput_2:
                                            (std::string::String,
                                             Option<std::string::String>) = x;
                                    let v1600 =
                                        Dice_ui::method258(patternInput_2.0.clone());
                                    let v1601 =
                                        Dice_ui::method259(patternInput_2.1.clone());
                                    let v1604 =
                                        {
                                            let clo_56 =
                                                Func0::new(move ||
                                                               Dice_ui::closure295((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_56 =
                                                               clo_56.clone();
                                                           move |arg_56: ()|
                                                               clo_56()
                                                       })
                                        };
                                    let v1607 =
                                        {
                                            let clo_57 =
                                                Func0::new(move ||
                                                               Dice_ui::closure296((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_57 =
                                                               clo_57.clone();
                                                           move |arg_57: ()|
                                                               clo_57()
                                                       })
                                        };
                                    let v1610 =
                                        {
                                            let clo_58 =
                                                Func0::new(move ||
                                                               Dice_ui::closure297((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_58 =
                                                               clo_58.clone();
                                                           move |arg_58: ()|
                                                               clo_58()
                                                       })
                                        };
                                    let v1611: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1610(()) + \" \" + &v1607(()) + \" \" + &v1604(())");
                                    let v1612: string =
                                        append((append((append(string(" "),
                                                               (v1611))),
                                                       string(""))),
                                               string(""));
                                    let v1615 =
                                        {
                                            let clo_59 =
                                                Func0::new(move ||
                                                               Dice_ui::closure298((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_59 =
                                                               clo_59.clone();
                                                           move |arg_59: ()|
                                                               clo_59()
                                                       })
                                        };
                                    let v1617: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1618: leptos::prelude::Fragment =
                                        v1600();
                                    let v1620: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1618);
                                    let v1623: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1617))),
                                                                               string(">move || { v1620 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1625:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1620 }</dt> };
                                    let v1627: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1625);
                                    let v1629: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1615(())");
                                    let v1630: leptos::prelude::Fragment =
                                        v1601();
                                    let v1632: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1630);
                                    let v1635: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1629))),
                                                                               string(">move || { v1632 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1637:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1615(())>move || { v1632 }</dd> };
                                    let v1639: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1637);
                                    let v1647: string =
                                        string("vec![v1627, v1639]");
                                    let v1648: Vec<leptos::prelude::AnyView> =
                                        vec![v1627, v1639];
                                    let v1650: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1648);
                                    let v1652: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1650);
                                    let v1655: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1612))),
                                                                               string(">move || { v1652 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1657:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1610(()) + " " + &v1607(()) + " " + &v1604(())>move || { v1652 }</dl> };
                                    let v1659: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1657);
                                    let v1661: bool =
                                        true; v1659 }).collect::<Vec<_>>();
                                    let v1663: Vec<leptos::prelude::AnyView> =
                                        _vec_map;
                                    let v1665: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1663);
                                    let v1669: string = string("vec![v1665]");
                                    let v1670: Vec<leptos::prelude::AnyView> =
                                        vec![v1665];
                                    let v1672: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1670);
                                    let v1674: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1672);
                                    let v1676: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1591))),
                                                                               string(">move || { v1674 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1678:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1674 }</td> };
                                    let v1680: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1678);
                                    let v1682: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1685: string = toString(v1253.l8);
                                    let v1692: &str = &*v1685;
                                    let v1716: std::string::String =
                                        String::from(v1692);
                                    let v1737: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1716));
                                    let v1741: string = string("vec![v1737]");
                                    let v1742: Vec<leptos::prelude::AnyView> =
                                        vec![v1737];
                                    let v1744: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1742);
                                    let v1746: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1744);
                                    let v1748: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1682))),
                                                                               string(">move || { v1746 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1750:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1746 }</td> };
                                    let v1752: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1750);
                                    let v1754: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1757: string = toString(v1253.l10);
                                    let v1764: &str = &*v1757;
                                    let v1788: std::string::String =
                                        String::from(v1764);
                                    let v1809: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1788));
                                    let v1813: string = string("vec![v1809]");
                                    let v1814: Vec<leptos::prelude::AnyView> =
                                        vec![v1809];
                                    let v1816: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1814);
                                    let v1818: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1816);
                                    let v1820: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1754))),
                                                                               string(">move || { v1818 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1822:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1818 }</td> };
                                    let v1824: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1822);
                                    let v1826: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1829: string = toString(v1253.l6);
                                    let v1836: &str = &*v1829;
                                    let v1860: std::string::String =
                                        String::from(v1836);
                                    let v1881: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1860));
                                    let v1885: string = string("vec![v1881]");
                                    let v1886: Vec<leptos::prelude::AnyView> =
                                        vec![v1881];
                                    let v1888: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1886);
                                    let v1890: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1888);
                                    let v1892: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1826))),
                                                                               string(">move || { v1890 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1894:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1890 }</td> };
                                    let v1896: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1894);
                                    let v1898: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
                                    let v2072: leptos::prelude::Fragment =
                                        if (get_Count(v1253.l11.clone()) as
                                                u64) == 0_u64 {
                                            let v1906: &str = &*string("");
                                            let v1930: std::string::String =
                                                String::from(v1906);
                                            let v1951:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1930));
                                            let v1955: string =
                                                string("vec![v1951]");
                                            let v1956:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1951];
                                            leptos::prelude::Fragment::new(v1956)
                                        } else {
                                            let v1961:
                                                    Vec<std::string::String> =
                                                v1253.l11.clone().to_vec();
                                            let v1964: bool =
                                                true; let _func1_from_v1962 = Func1::from(move |value| { //;
                                            let v1966: std::string::String =
                                                value;
                                            let v1968: string =
                                                fable_library_rust::String_::fromString(v1966);
                                            let v1971: bool = true; v1968 /*;
                                            let v1973: bool = */ }); //;
                                            let v1975:
                                                    Func1<std::string::String, string> =
                                                _func1_from_v1962;
                                            let v1978: Vec<string> =
                                                v1961.into_iter().map(|x| Func1::new({
                                                                                         let v1975
                                                                                             =
                                                                                             v1975.clone();
                                                                                         move
                                                                                             |v:
                                                                                                  std::string::String|
                                                                                             Dice_ui::closure332(v1975.clone(),
                                                                                                                 v)
                                                                                     })(x.clone())).collect::<Vec<_>>();
                                            let v1981:
                                                    LrcPtr<dyn IEnumerable_1<string>> =
                                                ofArray(fable_library_rust::NativeArray_::array_from(v1978.clone()));
                                            let v1993: string =
                                                replace(join(Dice_ui::method279(),
                                                             toArray(v1981)),
                                                        string("\\n"),
                                                        string("\n"));
                                            let v1996 =
                                                {
                                                    let clo_60 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure336((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_60
                                                                       =
                                                                       clo_60.clone();
                                                                   move
                                                                       |arg_60:
                                                                            ()|
                                                                       clo_60()
                                                               })
                                                };
                                            let v1997: string =
                                                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v1996(())");
                                            let v1998: string =
                                                append((append((append(string(" "),
                                                                       (v1997))),
                                                               string(""))),
                                                       string(""));
                                            let v2003: &str = &*v1993;
                                            let v2027: std::string::String =
                                                String::from(v2003);
                                            let v2048:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2027));
                                            let v2052: string =
                                                string("vec![v2048]");
                                            let v2053:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2048];
                                            let v2055:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v2053);
                                            let v2057:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v2055);
                                            let v2060: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<pre "),
                                                                                               (v1998))),
                                                                                       string(">move || { v2057 }</"))),
                                                                               string("pre"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v2062:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> =
                                                leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v1996(())>move || { v2057 }</pre> };
                                            let v2064:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v2062);
                                            let v2068: string =
                                                string("vec![v2064]");
                                            let v2069:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2064];
                                            leptos::prelude::Fragment::new(v2069)
                                        };
                                    let v2074: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2072);
                                    let v2076: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1898))),
                                                                               string(">move || { v2074 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2078:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v2074 }</td> };
                                    let v2080: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2078);
                                    let v2082: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2085: string = ofBoolean(v1253.l9);
                                    let v2092: &str = &*v2085;
                                    let v2116: std::string::String =
                                        String::from(v2092);
                                    let v2137: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2116));
                                    let v2141: string = string("vec![v2137]");
                                    let v2142: Vec<leptos::prelude::AnyView> =
                                        vec![v2137];
                                    let v2144: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2142);
                                    let v2146: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2144);
                                    let v2148: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2082))),
                                                                               string(">move || { v2146 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2150:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2146 }</td> };
                                    let v2152: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2150);
                                    let v2154: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2157: string =
                                        fable_library_rust::String_::fromString(v1253.l3.clone());
                                    let v2162: &str = &*v2157;
                                    let v2186: std::string::String =
                                        String::from(v2162);
                                    let v2207: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2186));
                                    let v2211: string = string("vec![v2207]");
                                    let v2212: Vec<leptos::prelude::AnyView> =
                                        vec![v2207];
                                    let v2214: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2212);
                                    let v2216: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2214);
                                    let v2218: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2154))),
                                                                               string(">move || { v2216 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2220:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2216 }</td> };
                                    let v2222: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2220);
                                    let v2224: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2227: string =
                                        fable_library_rust::String_::fromString(v1253.l4.clone());
                                    let v2232: &str = &*v2227;
                                    let v2256: std::string::String =
                                        String::from(v2232);
                                    let v2277: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2256));
                                    let v2281: string = string("vec![v2277]");
                                    let v2282: Vec<leptos::prelude::AnyView> =
                                        vec![v2277];
                                    let v2284: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2282);
                                    let v2286: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2284);
                                    let v2288: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2224))),
                                                                               string(">move || { v2286 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2290:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2286 }</td> };
                                    let v2292: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2290);
                                    let v2294: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2297: string =
                                        fable_library_rust::String_::fromString(v1253.l0.clone());
                                    let v2302: &str = &*v2297;
                                    let v2326: std::string::String =
                                        String::from(v2302);
                                    let v2347: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2326));
                                    let v2351: string = string("vec![v2347]");
                                    let v2352: Vec<leptos::prelude::AnyView> =
                                        vec![v2347];
                                    let v2354: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2352);
                                    let v2356: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2354);
                                    let v2358: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2294))),
                                                                               string(">move || { v2356 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2360:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2356 }</td> };
                                    let v2362: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2360);
                                    let v2402: string =
                                        string("vec![v1327, v1449, v1519, v1589, v1680, v1752, v1824, v1896, v2080, v2152, v2222, v2292, v2362]");
                                    let v2403: Vec<leptos::prelude::AnyView> =
                                        vec![v1327, v1449, v1519, v1589, v1680, v1752, v1824, v1896, v2080, v2152, v2222, v2292, v2362];
                                    let v2405: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2403);
                                    let v2407: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2405);
                                    let v2410: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<tr "),
                                                                                       (v1259))),
                                                                               string(">move || { v2407 }</"))),
                                                                       string("tr"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2412:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                        leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v2407 }</tr> };
                                    let v2414: bool =
                                        true; v2412 }).collect::<Vec<_>>();
                                let v2416: Vec<
                                    leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    >,
                                > = _vec_map;
                                let v2418: bool = true;
                                let _vec_map: Vec<_> = v2416
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2420: leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        > = x;
                                        let v2422: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(v2420);
                                        let v2424: bool = true;
                                        v2422
                                    })
                                    .collect::<Vec<_>>();
                                let v2426: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v2428: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2426);
                                let v2432: string = string("vec![v2428]");
                                let v2433: Vec<leptos::prelude::AnyView> = vec![v2428];
                                let v2435: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2433);
                                let v2438: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string("transaction.tr_head_render (1)")
                                );
                                let v2440: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2446: &str = &*string("Account");
                                let v2470: std::string::String = String::from(v2446);
                                let v2491: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2470),
                                    );
                                let v2495: string = string("vec![v2491]");
                                let v2496: Vec<leptos::prelude::AnyView> = vec![v2491];
                                let v2498: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2496);
                                let v2500: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2498);
                                let v2503: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2440))),
                                                    string(">move || { v2500 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2505: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2500 }</th> };
                                let v2507: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2505);
                                let v2509: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2515: &str = &*string("Block Timestamp");
                                let v2539: std::string::String = String::from(v2515);
                                let v2560: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2539),
                                    );
                                let v2564: string = string("vec![v2560]");
                                let v2565: Vec<leptos::prelude::AnyView> = vec![v2560];
                                let v2567: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2565);
                                let v2569: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2567);
                                let v2571: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2509))),
                                                    string(">move || { v2569 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2573: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2569 }</th> };
                                let v2575: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2573);
                                let v2577: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2583: &str = &*string("Predecessor");
                                let v2607: std::string::String = String::from(v2583);
                                let v2628: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2607),
                                    );
                                let v2632: string = string("vec![v2628]");
                                let v2633: Vec<leptos::prelude::AnyView> = vec![v2628];
                                let v2635: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2633);
                                let v2637: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2635);
                                let v2639: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2577))),
                                                    string(">move || { v2637 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2641: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2637 }</th> };
                                let v2643: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2641);
                                let v2645: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2651: &str = &*string("Receiver");
                                let v2675: std::string::String = String::from(v2651);
                                let v2696: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2675),
                                    );
                                let v2700: string = string("vec![v2696]");
                                let v2701: Vec<leptos::prelude::AnyView> = vec![v2696];
                                let v2703: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2701);
                                let v2705: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2703);
                                let v2707: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2645))),
                                                    string(">move || { v2705 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2709: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2705 }</th> };
                                let v2711: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2709);
                                let v2713: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2719: &str = &*string("Action");
                                let v2743: std::string::String = String::from(v2719);
                                let v2764: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2743),
                                    );
                                let v2768: string = string("vec![v2764]");
                                let v2769: Vec<leptos::prelude::AnyView> = vec![v2764];
                                let v2771: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2769);
                                let v2773: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2771);
                                let v2775: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2713))),
                                                    string(">move || { v2773 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2777: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2773 }</th> };
                                let v2779: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2777);
                                let v2781: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2787: &str = &*string("Deposit");
                                let v2811: std::string::String = String::from(v2787);
                                let v2832: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2811),
                                    );
                                let v2836: string = string("vec![v2832]");
                                let v2837: Vec<leptos::prelude::AnyView> = vec![v2832];
                                let v2839: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2837);
                                let v2841: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2839);
                                let v2843: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2781))),
                                                    string(">move || { v2841 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2845: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2841 }</th> };
                                let v2847: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2845);
                                let v2849: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2855: &str = &*string("Fee");
                                let v2879: std::string::String = String::from(v2855);
                                let v2900: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2879),
                                    );
                                let v2904: string = string("vec![v2900]");
                                let v2905: Vec<leptos::prelude::AnyView> = vec![v2900];
                                let v2907: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2905);
                                let v2909: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2907);
                                let v2911: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2849))),
                                                    string(">move || { v2909 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2913: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2909 }</th> };
                                let v2915: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2913);
                                let v2917: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2923: &str = &*string("Block Height");
                                let v2947: std::string::String = String::from(v2923);
                                let v2968: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2947),
                                    );
                                let v2972: string = string("vec![v2968]");
                                let v2973: Vec<leptos::prelude::AnyView> = vec![v2968];
                                let v2975: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2973);
                                let v2977: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2975);
                                let v2979: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2917))),
                                                    string(">move || { v2977 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2981: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2977 }</th> };
                                let v2983: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2981);
                                let v2985: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2990: string = if false == (Dice_ui::method280(v339, 0_i32)) {
                                    string("")
                                } else {
                                    string("Logs")
                                };
                                let v2995: &str = &*v2990;
                                let v3019: std::string::String = String::from(v2995);
                                let v3040: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3019),
                                    );
                                let v3044: string = string("vec![v3040]");
                                let v3045: Vec<leptos::prelude::AnyView> = vec![v3040];
                                let v3047: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3045);
                                let v3049: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3047);
                                let v3051: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2985))),
                                                    string(">move || { v3049 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3053: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3049 }</th> };
                                let v3055: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3053);
                                let v3057: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3063: &str = &*string("Outcome Status");
                                let v3087: std::string::String = String::from(v3063);
                                let v3108: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3087),
                                    );
                                let v3112: string = string("vec![v3108]");
                                let v3113: Vec<leptos::prelude::AnyView> = vec![v3108];
                                let v3115: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3113);
                                let v3117: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3115);
                                let v3119: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3057))),
                                                    string(">move || { v3117 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3121: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3117 }</th> };
                                let v3123: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3121);
                                let v3125: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3131: &str = &*string("Hash");
                                let v3155: std::string::String = String::from(v3131);
                                let v3176: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3155),
                                    );
                                let v3180: string = string("vec![v3176]");
                                let v3181: Vec<leptos::prelude::AnyView> = vec![v3176];
                                let v3183: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3181);
                                let v3185: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3183);
                                let v3187: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3125))),
                                                    string(">move || { v3185 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3189: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3185 }</th> };
                                let v3191: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3189);
                                let v3193: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3199: &str = &*string("Block Hash");
                                let v3223: std::string::String = String::from(v3199);
                                let v3244: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3223),
                                    );
                                let v3248: string = string("vec![v3244]");
                                let v3249: Vec<leptos::prelude::AnyView> = vec![v3244];
                                let v3251: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3249);
                                let v3253: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3251);
                                let v3255: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3193))),
                                                    string(">move || { v3253 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3257: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3253 }</th> };
                                let v3259: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3257);
                                let v3261: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3267: &str = &*string("Receipt ID");
                                let v3291: std::string::String = String::from(v3267);
                                let v3312: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3291),
                                    );
                                let v3316: string = string("vec![v3312]");
                                let v3317: Vec<leptos::prelude::AnyView> = vec![v3312];
                                let v3319: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3317);
                                let v3321: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3319);
                                let v3323: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3261))),
                                                    string(">move || { v3321 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3325: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3321 }</th> };
                                let v3327: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3325);
                                let v3367: string =
                                        string("vec![v2507, v2575, v2643, v2711, v2779, v2847, v2915, v2983, v3055, v3123, v3191, v3259, v3327]");
                                let v3368: Vec<leptos::prelude::AnyView> = vec![
                                    v2507, v2575, v2643, v2711, v2779, v2847, v2915, v2983, v3055,
                                    v3123, v3191, v3259, v3327,
                                ];
                                let v3370: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3368);
                                let v3372: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3370);
                                let v3374: string = string(
                                    "leptos::prelude::view! { <tr >move || { v3372 }</tr> }",
                                );
                                let v3376: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v3372 }</tr> };
                                let v3378: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3376);
                                let v3382: string = string("vec![v3378]");
                                let v3383: Vec<leptos::prelude::AnyView> = vec![v3378];
                                let v3385: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3383);
                                let v3387: string =
                                        string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v3389: string =
                                    string(" class=\"ltr:text-left rtl:text-right\"");
                                let v3391: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3385);
                                let v3394: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<thead "), (v3389))),
                                                    string(">move || { v3391 }</"),
                                                )),
                                                string("thead"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3396: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v3391 }</thead> };
                                let v3398: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3396);
                                let v3400: string = string(
                                    " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                );
                                let v3402: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2435);
                                let v3405: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<tbody "), (v3400))),
                                                    string(">move || { v3402 }</"),
                                                )),
                                                string("tbody"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3407: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v3402 }</tbody> };
                                let v3409: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3407);
                                let v3416: string = string("vec![v3398, v3409]");
                                let v3417: Vec<leptos::prelude::AnyView> = vec![v3398, v3409];
                                let v3419: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3417);
                                let v3421: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3419);
                                let v3424: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<table "), (v3387))),
                                                    string(">move || { v3421 }</"),
                                                )),
                                                string("table"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3426: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v3421 }</table> };
                                leptos::prelude::IntoAny::into_any(v3426)
                            }
                        } else {
                            let v3432: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v3434: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v3437 = {
                                let clo_61 = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo_61 = clo_61.clone();
                                    move |arg_61: ()| clo_61()
                                })
                            };
                            let v3455: string =
                                    string(" class=move || \" \".to_owned() + &v3437(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v3467: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v3479: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3480: string = string("vec![]");
                            let v3481: Vec<leptos::prelude::AnyView> = vec![];
                            let v3483: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3481);
                            let v3485: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3483);
                            let v3488: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3479))),
                                                string(">move || { v3485 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3490: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3485 }</animate> };
                            let v3492: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3490);
                            let v3504: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v3505: string = string("vec![]");
                            let v3506: Vec<leptos::prelude::AnyView> = vec![];
                            let v3508: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3506);
                            let v3510: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3508);
                            let v3512: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3504))),
                                                string(">move || { v3510 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3514: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v3510 }</animate> };
                            let v3516: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3514);
                            let v3528: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v3529: string = string("vec![]");
                            let v3530: Vec<leptos::prelude::AnyView> = vec![];
                            let v3532: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3530);
                            let v3534: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3532);
                            let v3536: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3528))),
                                                string(">move || { v3534 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3538: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3534 }</animate> };
                            let v3540: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3538);
                            let v3551: string = string("vec![v3492, v3516, v3540]");
                            let v3552: Vec<leptos::prelude::AnyView> = vec![v3492, v3516, v3540];
                            let v3554: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3552);
                            let v3556: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3554);
                            let v3559: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3467))),
                                                string(">move || { v3556 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3561: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v3556 }</rect> };
                            let v3573: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v3585: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3586: string = string("vec![]");
                            let v3587: Vec<leptos::prelude::AnyView> = vec![];
                            let v3589: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3587);
                            let v3591: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3589);
                            let v3593: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3585))),
                                                string(">move || { v3591 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3595: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3591 }</animate> };
                            let v3597: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3595);
                            let v3609: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3610: string = string("vec![]");
                            let v3611: Vec<leptos::prelude::AnyView> = vec![];
                            let v3613: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3611);
                            let v3615: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3613);
                            let v3617: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3609))),
                                                string(">move || { v3615 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3619: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v3615 }</animate> };
                            let v3621: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3619);
                            let v3633: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v3634: string = string("vec![]");
                            let v3635: Vec<leptos::prelude::AnyView> = vec![];
                            let v3637: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3635);
                            let v3639: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3637);
                            let v3641: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3633))),
                                                string(">move || { v3639 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3643: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3639 }</animate> };
                            let v3645: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3643);
                            let v3655: string = string("vec![v3597, v3621, v3645]");
                            let v3656: Vec<leptos::prelude::AnyView> = vec![v3597, v3621, v3645];
                            let v3658: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3656);
                            let v3660: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3658);
                            let v3662: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3573))),
                                                string(">move || { v3660 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3664: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v3660 }</rect> };
                            let v3676: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v3688: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3689: string = string("vec![]");
                            let v3690: Vec<leptos::prelude::AnyView> = vec![];
                            let v3692: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3690);
                            let v3694: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3692);
                            let v3696: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3688))),
                                                string(">move || { v3694 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3698: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3694 }</animate> };
                            let v3700: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3698);
                            let v3712: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v3713: string = string("vec![]");
                            let v3714: Vec<leptos::prelude::AnyView> = vec![];
                            let v3716: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3714);
                            let v3718: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3716);
                            let v3720: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3712))),
                                                string(">move || { v3718 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3722: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v3718 }</animate> };
                            let v3724: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3722);
                            let v3736: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v3737: string = string("vec![]");
                            let v3738: Vec<leptos::prelude::AnyView> = vec![];
                            let v3740: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3738);
                            let v3742: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3740);
                            let v3744: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3736))),
                                                string(">move || { v3742 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3746: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v3742 }</animate> };
                            let v3748: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3746);
                            let v3758: string = string("vec![v3700, v3724, v3748]");
                            let v3759: Vec<leptos::prelude::AnyView> = vec![v3700, v3724, v3748];
                            let v3761: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3759);
                            let v3763: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3761);
                            let v3765: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3676))),
                                                string(">move || { v3763 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3767: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v3763 }</rect> };
                            let v3769: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3767);
                            let v3771: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3664);
                            let v3773: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3561);
                            let v3783: string = string("vec![v3773, v3771, v3769]");
                            let v3784: Vec<leptos::prelude::AnyView> = vec![v3773, v3771, v3769];
                            let v3786: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3784);
                            let v3788: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3786);
                            let v3791: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3455))),
                                                string(">move || { v3788 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3793: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3437(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v3788 }</svg> };
                            let v3795: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3793);
                            let v3801: &str = &*string("Loading...");
                            let v3825: std::string::String = String::from(v3801);
                            let v3846: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v3825),
                                );
                            let v3853: string = string("vec![v3795, v3846]");
                            let v3854: Vec<leptos::prelude::AnyView> = vec![v3795, v3846];
                            let v3856: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3854);
                            let v3858: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3856);
                            let v3861: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3434))),
                                                string(">move || { v3858 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3863: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v3858 }</div> };
                            let v3865: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3863);
                            let v3869: string = string("vec![v3865]");
                            let v3870: Vec<leptos::prelude::AnyView> = vec![v3865];
                            let v3872: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3870);
                            let v3874: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3872);
                            let v3876: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3432))),
                                                string(">move || { v3874 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3878: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v3874 }</div> };
                            leptos::prelude::IntoAny::into_any(v3878)
                        }
                    }
                    Dice_ui::US46::US46_1(v337_1_0) => {
                        let v3884: string =
                            fable_library_rust::String_::fromString(v337_1_0.clone());
                        let v3887: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v3889: string = string(" class=\"[height:17px]\"");
                        let v3903: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3909: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v3910: string = string("vec![]");
                        let v3911: Vec<leptos::prelude::AnyView> = vec![];
                        let v3913: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3911);
                        let v3915: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3913);
                        let v3918: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3909))),
                                            string(">move || { v3915 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3920: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v3915 }</path> };
                        let v3922: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3920);
                        let v3926: string = string("vec![v3922]");
                        let v3927: Vec<leptos::prelude::AnyView> = vec![v3922];
                        let v3929: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3927);
                        let v3931: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3929);
                        let v3934: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3903))),
                                            string(">move || { v3931 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3936: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3931 }</svg> };
                        let v3938: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3936);
                        let v3942: string = string("vec![v3938]");
                        let v3943: Vec<leptos::prelude::AnyView> = vec![v3938];
                        let v3945: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3943);
                        let v3947: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3945);
                        let v3950: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3889))),
                                            string(">move || { v3947 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3952: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v3947 }</span> };
                        let v3954: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3952);
                        let v3956: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v3961: &str = &*v3884;
                        let v3985: std::string::String = String::from(v3961);
                        let v4006: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v3985),
                        );
                        let v4010: string = string("vec![v4006]");
                        let v4011: Vec<leptos::prelude::AnyView> = vec![v4006];
                        let v4013: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4011);
                        let v4015: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4013);
                        let v4018: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v3956))),
                                            string(">move || { v4015 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4020: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v4015 }</pre> };
                        let v4022: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4020);
                        let v4030: string = string("vec![v3954, v4022]");
                        let v4031: Vec<leptos::prelude::AnyView> = vec![v3954, v4022];
                        let v4033: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4031);
                        let v4035: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4033);
                        let v4038: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3887))),
                                            string(">move || { v4035 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4040: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v4035 }</div> };
                        leptos::prelude::IntoAny::into_any(v4040)
                    }
                }
            };
            let v4054: string = string("vec![v144, v4045]");
            let v4055: Vec<leptos::prelude::AnyView> = vec![v144, v4045];
            leptos::prelude::Fragment::new(v4055)
        }
        pub fn closure337(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure339(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method282() -> Func0<string> {
            Func0::new(move || Dice_ui::closure339((), ()))
        }
        pub fn closure341(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v5: &str = &*string("Transactions");
            let v29: std::string::String = String::from(v5);
            let v50: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v29));
            let v55: string = string("vec![v50]");
            let v56: Vec<leptos::prelude::AnyView> = vec![v50];
            leptos::prelude::Fragment::new(v56)
        }
        pub fn method283() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure341((), ()))
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure342(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v9: std::string::String = format!("{:#?}", v2);
            let v11: string = fable_library_rust::String_::fromString(v9);
            let v35 = {
                let clo = Func0::new(move || Dice_ui::closure343((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v36: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v35(())");
            let v38: string = append(
                (append((append(string(" "), (v36))), string(""))),
                string(""),
            );
            let v43: &str = &*v11;
            let v67: std::string::String = String::from(v43);
            let v88: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v67));
            let v92: string = string("vec![v88]");
            let v93: Vec<leptos::prelude::AnyView> = vec![v88];
            let v95: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v93);
            let v97: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v95);
            let v100: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v38))),
                                string(">move || { v97 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v102: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v35(())>move || { v97 }</pre> };
            let v104: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v102);
            let v108: string = string("vec![v104]");
            let v109: Vec<leptos::prelude::AnyView> = vec![v104];
            leptos::prelude::Fragment::new(v109)
        }
        pub fn method284(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure342(v0_1.clone(), ())
            })
        }
        pub fn closure340(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method283();
            let v2 = Dice_ui::method284(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(
                (append((append(string(" "), (v12))), string(""))),
                string(""),
            );
            let v17 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v19: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v20: leptos::prelude::Fragment = v1();
            let v22: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v20);
            let v25: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v19))),
                                string(">move || { v22 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v22 }</dt> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())");
            let v32: leptos::prelude::Fragment = v2();
            let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
            let v37: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v31))),
                                string(">move || { v34 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v39: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v17(())>move || { v34 }</dd> };
            let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
            let v49: string = string("vec![v29, v41]");
            let v50: Vec<leptos::prelude::AnyView> = vec![v29, v41];
            let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
            let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
            let v57: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v14))),
                                string(">move || { v54 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v59: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v54 }</dl> };
            let v61: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v59);
            let v65: string = string("vec![v61]");
            let v66: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v66)
        }
        pub fn closure344(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method285(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure344(v0_1.clone(), ())
            })
        }
        pub fn closure345(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method286(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure345(v0_1.clone(), ())
            })
        }
        pub fn closure346(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method287(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure346(v0_1.clone(), ())
            })
        }
        pub fn closure347(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method288(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure347(v0_1.clone(), ())
            })
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure349(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("settings"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure350(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure351(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure352(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("transactions"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure353(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure354(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure355(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("lists"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure356(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure357(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure358(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("dice"),
                )),
                string(""),
            );
            let v9: &str = &*v4;
            String::from(v9)
        }
        pub fn closure359(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure360(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                (append(string("home.render () / router: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v13: bool = true;
            let _func0_from_v11 = Func0::from(move || {
                //;
                let v15: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v17: bool = */
                    async move {
                        /*;
                        let v19: bool = */
 //;
                        let v22: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v25: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v27: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v29: bool = */
                            async {
                                /*;
                                let v31: bool = */
 //;
                                let v32: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v33: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v35: Result<rexie::Rexie, rexie::Error> = v33.await;
                                let v36 = Dice_ui::method6();
                                let v41: Result<rexie::Rexie, std::string::String> =
                                    v35.map_err(|x| v36(x));
                                let v53: string = string("}");
                                let v60: bool = true;
                                let _fix_closure_v55 = v41;
                                let v65: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v55 "), (v53))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v66: bool = true;
                                _fix_closure_v55
                            },
                        ); // rust.fix_closure';
                        let v68 = __future_init;
                        let v70: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v68;
                        let v72: Result<rexie::Rexie, std::string::String> = v70.await;
                        let v77: rexie::Rexie = v72.unwrap();
                        let v88: rexie::Rexie = (Dice_ui::method7())(v77);
                        let v90: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v88);
                        let v96: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v90.clone()))),
                                        string("")));
                        let v98: bool = true;
                        leptos::logging::log!("{}", v96);
                        let v99: string = string("}");
                        let v106: bool = true;
                        let _fix_closure_v101 = v90;
                        let v111: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v101 "), (v99))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v112: bool = true;
                        _fix_closure_v101
                    },
                ); // rust.fix_closure';
                let v114 = __future_init;
                let v116: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v114;
                let v118: bool = true;
                v116 /*;
                     let v120: bool = */
            }); //;
            let v122: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v11;
            let v124: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v122().await });
            let v127: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v130: bool = true;
            let _func0_from_v128 = Func0::from(move || {
                //;
                let v132: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124.clone()), |x| {
                        x.clone()
                    });
                let v134: bool = true;
                let _optionm_map_ = v132.map(|x| {
                    //;
                    let v136: std::sync::Arc<rexie::Rexie> = x;
                    let v139: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v136);
                    let v141: bool = true;
                    v139
                });
                let v143: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v145: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v147: bool = */
                    async move {
                        /*;
                        let v149: bool = */
 //;
                        let v153: string =
                append((append(string("state_core.use_core_database (2) / core_state_heap new_local_resource / database: "),
                               sprintf!("{:?}", v143.clone()))), string(""));
                        let v155: bool = true;
                        leptos::logging::log!("{}", v153);
                        let v157: bool = true;
                        let _optionm_map_ = v143.map(|x| {
                            //;
                            let v159: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v161: std::sync::Arc<rexie::Rexie> = v159.0;
                            let v163: bool = true;
                            v161
                        });
                        let v165: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v179: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v165));
                        let v545: Dice_ui::US3 = match &v179 {
                            Dice_ui::US2::US2_0(v179_0_0) => {
                                let v185: string =
                                    string("state_core.get_data () / id: core-state-heap");
                                let v187: bool = true;
                                leptos::logging::log!("{}", v185);
                                let v189: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v191: bool = */
                                    async {
                                        /*;
                                        let v193: bool = */
 //;
                                        let v195: Array<string> = new_array(&[string("store")]);
                                        let v197: Vec<string> = v195.to_vec();
                                        let v200: bool = true;
                                        let _func1_from_v198 = Func1::from(move |value| {
                                            //;
                                            let v202: string = value;
                                            let v207: &str = &*v202;
                                            let v231: std::string::String = String::from(v207);
                                            let v253: bool = true;
                                            v231 /*;
                                                 let v255: bool = */
                                        }); //;
                                        let v257: Func1<string, std::string::String> =
                                            _func1_from_v198;
                                        let v260: Vec<std::string::String> = v197
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v257 = v257.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v257.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v261: std::sync::Arc<rexie::Rexie> = Dice_ui::method11(
                                            match &v179 {
                                                Dice_ui::US2::US2_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v263: Result<rexie::Transaction, rexie::Error> = v261
                                            .transaction(&v260, rexie::TransactionMode::ReadOnly);
                                        let v264 = Dice_ui::method12();
                                        let v269: Result<rexie::Transaction, std::string::String> =
                                            v263.map_err(|x| v264(x));
                                        let v280: rexie::Transaction = v269?;
                                        let v281: string = Dice_ui::method13();
                                        let v286: &str = &*v281;
                                        let v307: Result<rexie::Store, rexie::Error> =
                                            v280.store(v286);
                                        let v308 = Dice_ui::method14();
                                        let v313: Result<rexie::Store, std::string::String> =
                                            v307.map_err(|x| v308(x));
                                        let v324: rexie::Store = v313?;
                                        let v325: string = Dice_ui::method15();
                                        let v330: &str = &*v325;
                                        let v351: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v330);
                                        let v353: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v324, v351));
                                        let v355: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v353.await;
                                        let v356 = Dice_ui::method16();
                                        let v361: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v355.map_err(|x| v356(x));
                                        let v372: Option<wasm_bindgen::JsValue> = v361?;
                                        let v386: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v372),
                                        );
                                        let v486: Dice_ui::US3 = match &v386 {
                                            Dice_ui::US4::US4_0(v386_0_0) => {
                                                let v391: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v386 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v393: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v391);
                                                let v394 = Dice_ui::method19();
                                                let v399: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v393.map_err(|x| v394(x));
                                                let v410: Option<serde_json::Value> = v399?;
                                                let v424: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v410),
                                                );
                                                match &v424 {
                                                    Dice_ui::US5::US5_0(v424_0_0) => {
                                                        let v429: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v424 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v431: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v429);
                                                        let v432 = Dice_ui::method22();
                                                        let v437: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v431.map_err(|x| v432(x));
                                                        let v448: Vec<u8> = v437?;
                                                        let v450: Array<u8> =
                                                fable_library_rust::NativeArray_::array_from(v448.clone());
                                                        let v452: string =
                                                append((append(string("state_core.get_data () / data_len: "),
                                                               (toString(get_Count(v450.clone()))))),
                                                       string(""));
                                                        let v454: bool = true;
                                                        leptos::logging::log!("{}", v452);
                                                        let v456: Vec<u8> = v450.to_vec();
                                                        let v458: &[u8] = v456.as_slice();
                                                        let v460: bool = true;
                                                        let mut v458 = v458;
                                                        let v462: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v458,
                                                        );
                                                        let v463 = Dice_ui::method23();
                                                        let v468: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v462.map_err(|x| v463(x));
                                                        Dice_ui::US3::US3_0(v468?)
                                                    }
                                                    _ => Dice_ui::US3::US3_1,
                                                }
                                            }
                                            _ => Dice_ui::US3::US3_1,
                                        };
                                        let v493: Option<Option<LrcPtr<Dice_ui::Heap3>>> =
                                            match &v486 {
                                                Dice_ui::US3::US3_0(v486_0_0) => Some(
                                                    match &v486 {
                                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            };
                                        let v495: string = string("}");
                                        let v502: bool = true;
                                        let _fix_closure_v497 =
                                            Ok::<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >(v493);
                                        let v507: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v497 "),
                                                        (v495),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v508: bool = true;
                                        _fix_closure_v497
                                    },
                                ); // rust.fix_closure';
                                let v510 = __future_init;
                                let v512: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v510;
                                let v514: Result<
                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                    std::string::String,
                                > = v512.await;
                                let v515 = Dice_ui::method24();
                                let v516 = Dice_ui::method25();
                                let v517: Dice_ui::US6 = match &v514 {
                                    Err(v514_1_0) => v516(v514_1_0.clone()),
                                    Ok(v514_0_0) => v515(v514_0_0.clone()),
                                };
                                match &v517 {
                                    Dice_ui::US6::US6_0(v517_0_0) => defaultValue(
                                        Dice_ui::US3::US3_1,
                                        map(Dice_ui::method26(), v517_0_0.clone()),
                                    ),
                                    Dice_ui::US6::US6_1(v517_1_0) => {
                                        let v537: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_core_database (3) / error: ",
                                                ),
                                                (toString(v517_1_0.clone())),
                                            )),
                                            string(""),
                                        );
                                        let v539: bool = true;
                                        leptos::logging::log!("{}", v537);
                                        Dice_ui::US3::US3_1
                                    }
                                }
                            }
                            _ => Dice_ui::US3::US3_1,
                        };
                        let v567: Dice_ui::US7 = match &v545 {
                            Dice_ui::US3::US3_0(v545_0_0) => Dice_ui::US7::US7_0(defaultValue(
                                Dice_ui::US8::US8_1,
                                map(
                                    Dice_ui::method27(),
                                    match &v545 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                            )),
                            _ => Dice_ui::US7::US7_1,
                        };
                        let v574: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v567_0_0) = &v567 {
                            let v568: Dice_ui::US8 = v567_0_0.clone();
                            if let Dice_ui::US8::US8_0(v568_0_0) = &v568 {
                                Dice_ui::US8::US8_0(v568_0_0.clone())
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        } else {
                            Dice_ui::US8::US8_1
                        };
                        let v575: string = string("}");
                        let v582: bool = true;
                        let _fix_closure_v577 = v574;
                        let v587: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v577 "), (v575))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v588: bool = true;
                        _fix_closure_v577
                    },
                ); // rust.fix_closure';
                let v590 = __future_init;
                let v592: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>> = v590;
                let v594: bool = true;
                v592 /*;
                     let v596: bool = */
            }); //;
            let v598: Func0<std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>>> =
                _func0_from_v128;
            let v600: leptos::prelude::ArcLocalResource<Dice_ui::US8> =
                leptos::prelude::ArcLocalResource::new(|| async move { v598().await });
            let v603: bool = true;
            let _func0_from_v601 = Func0::from(move || {
                //;
                let v606: bool = true;
                leptos::logging::log!(
                    "{}",
                    string("state_core.use_core_database (4) / effect core_state_heap / ##1")
                );
                let v608: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method29(Dice_ui::method28());
                let v609 = Dice_ui::method30();
                let v610 = Dice_ui::method31();
                let v611: Dice_ui::US9 = match &v608 {
                    Err(v608_1_0) => v610(v608_1_0.clone()),
                    Ok(v608_0_0) => v609(v608_0_0.clone()),
                };
                let v634: Dice_ui::US10 = match &v611 {
                    Dice_ui::US9::US9_0(v611_0_0) => Dice_ui::US10::US10_0(defaultValue(
                        Dice_ui::US11::US11_1,
                        map(Dice_ui::method32(), v611_0_0.clone()),
                    )),
                    Dice_ui::US9::US9_1(v611_1_0) => Dice_ui::US10::US10_1(v611_1_0.clone()),
                };
                let v1106: bool = if let Dice_ui::US10::US10_0(v634_0_0) = &v634 {
                    let v635: Dice_ui::US11 = v634_0_0.clone();
                    if let Dice_ui::US11::US11_0(v635_0_0) = &v635 {
                        let v636: web_sys::Storage = v635_0_0.clone();
                        let v638: Option<Dice_ui::US8> =
                            Option::map(leptos::prelude::ArcLocalResource::get(&v600), |x| {
                                x.clone()
                            });
                        let v652: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v638));
                        let v659: string =
                            append((append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                           sprintf!("{:?}", v652.clone()))),
                                   string(""));
                        let v661: bool = true;
                        leptos::logging::log!("{}", v659);
                        let v1040: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v652_0_0) = &v652 {
                            let v662: Dice_ui::US8 = v652_0_0.clone();
                            if let Dice_ui::US8::US8_0(v662_0_0) = &v662 {
                                Dice_ui::US8::US8_0(v662_0_0.clone())
                            } else {
                                let v665: web_sys::Storage = Dice_ui::method34(v636.clone());
                                let v666: string = Dice_ui::method35();
                                let v671: &str = &*v666;
                                let v692: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v665, v671);
                                let v693 = Dice_ui::method36();
                                let v694 = Dice_ui::method37();
                                let v695: Dice_ui::US12 = match &v692 {
                                    Err(v692_1_0) => v694(v692_1_0.clone()),
                                    Ok(v692_0_0) => v693(v692_0_0.clone()),
                                };
                                let v721: Dice_ui::US13 = match &v695 {
                                    Dice_ui::US12::US12_0(v695_0_0) => {
                                        let v697: Option<std::string::String> =
                                            Dice_ui::method38(v695_0_0.clone());
                                        let v699: Option<std::string::String> =
                                            serde_json::from_value(v697.into()).unwrap();
                                        Dice_ui::US13::US13_0(defaultValue(
                                            Dice_ui::US14::US14_1,
                                            map(Dice_ui::method39(), v699),
                                        ))
                                    }
                                    Dice_ui::US12::US12_1(v695_1_0) => {
                                        Dice_ui::US13::US13_1(v695_1_0.clone())
                                    }
                                };
                                let v727: Dice_ui::US15 = match &v721 {
                                    Dice_ui::US13::US13_0(v721_0_0) => {
                                        Dice_ui::US15::US15_0(v721_0_0.clone())
                                    }
                                    _ => Dice_ui::US15::US15_1,
                                };
                                let v734: Dice_ui::US14 =
                                    if let Dice_ui::US15::US15_0(v727_0_0) = &v727 {
                                        let v728: Dice_ui::US14 = v727_0_0.clone();
                                        if let Dice_ui::US14::US14_0(v728_0_0) = &v728 {
                                            Dice_ui::US14::US14_0(v728_0_0.clone())
                                        } else {
                                            Dice_ui::US14::US14_1
                                        }
                                    } else {
                                        Dice_ui::US14::US14_1
                                    };
                                let v741: Option<std::string::String> = match &v734 {
                                    Dice_ui::US14::US14_0(v734_0_0) => Some(
                                        match &v734 {
                                            Dice_ui::US14::US14_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => None::<std::string::String>,
                                };
                                let v743: Option<Dice_ui::US8> = map(Dice_ui::method40(), v741);
                                let v841: Dice_ui::US7 = defaultValue(
                                    Dice_ui::US7::US7_1,
                                    map(Dice_ui::method33(), v743),
                                );
                                if let Dice_ui::US7::US7_0(v841_0_0) = &v841 {
                                    let v845: Dice_ui::US8 = v841_0_0.clone();
                                    if let Dice_ui::US8::US8_0(v845_0_0) = &v845 {
                                        Dice_ui::US8::US8_0(v845_0_0.clone())
                                    } else {
                                        Dice_ui::US8::US8_1
                                    }
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            }
                        } else {
                            let v853: web_sys::Storage = Dice_ui::method34(v636);
                            let v854: string = Dice_ui::method35();
                            let v859: &str = &*v854;
                            let v880: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v853, v859);
                            let v881 = Dice_ui::method36();
                            let v882 = Dice_ui::method37();
                            let v883: Dice_ui::US12 = match &v880 {
                                Err(v880_1_0) => v882(v880_1_0.clone()),
                                Ok(v880_0_0) => v881(v880_0_0.clone()),
                            };
                            let v909: Dice_ui::US13 = match &v883 {
                                Dice_ui::US12::US12_0(v883_0_0) => {
                                    let v885: Option<std::string::String> =
                                        Dice_ui::method38(v883_0_0.clone());
                                    let v887: Option<std::string::String> =
                                        serde_json::from_value(v885.into()).unwrap();
                                    Dice_ui::US13::US13_0(defaultValue(
                                        Dice_ui::US14::US14_1,
                                        map(Dice_ui::method39(), v887),
                                    ))
                                }
                                Dice_ui::US12::US12_1(v883_1_0) => {
                                    Dice_ui::US13::US13_1(v883_1_0.clone())
                                }
                            };
                            let v915: Dice_ui::US15 = match &v909 {
                                Dice_ui::US13::US13_0(v909_0_0) => {
                                    Dice_ui::US15::US15_0(v909_0_0.clone())
                                }
                                _ => Dice_ui::US15::US15_1,
                            };
                            let v922: Dice_ui::US14 = if let Dice_ui::US15::US15_0(v915_0_0) = &v915
                            {
                                let v916: Dice_ui::US14 = v915_0_0.clone();
                                if let Dice_ui::US14::US14_0(v916_0_0) = &v916 {
                                    Dice_ui::US14::US14_0(v916_0_0.clone())
                                } else {
                                    Dice_ui::US14::US14_1
                                }
                            } else {
                                Dice_ui::US14::US14_1
                            };
                            let v929: Option<std::string::String> = match &v922 {
                                Dice_ui::US14::US14_0(v922_0_0) => Some(
                                    match &v922 {
                                        Dice_ui::US14::US14_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<std::string::String>,
                            };
                            let v931: Option<Dice_ui::US8> = map(Dice_ui::method40(), v929);
                            let v1029: Dice_ui::US7 =
                                defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v931));
                            if let Dice_ui::US7::US7_0(v1029_0_0) = &v1029 {
                                let v1033: Dice_ui::US8 = v1029_0_0.clone();
                                if let Dice_ui::US8::US8_0(v1033_0_0) = &v1033 {
                                    Dice_ui::US8::US8_0(v1033_0_0.clone())
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        };
                        let v1044: string =
                            append((append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                           sprintf!("{:?}", v1040.clone()))),
                                   string(""));
                        let v1046: bool = true;
                        leptos::logging::log!("{}", v1044);
                        if let Dice_ui::US8::US8_0(v1040_0_0) = &v1040 {
                            let v1047: LrcPtr<Dice_ui::Heap3> = v1040_0_0.clone();
                            let v1050: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1052: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1050);
                            let v1055: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1052.l0.clone(),
                                |x: &mut /*;
                                 let v1056: */
                                 bool /* = getZero();
                                      let v1061: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1047 = v1047.clone();
                                        move |v_1: bool| Dice_ui::closure32(v1047.clone(), v_1)
                                    })(x.clone())
                                },
                            ); //;
                            let v1064: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1066: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1064);
                            let v1069: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1066.l1.clone(),
                                |x: &mut /*;
                                 let v1070: */
                                 bool /* = getZero();
                                      let v1075: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1047 = v1047.clone();
                                        move |v_2: bool| Dice_ui::closure33(v1047.clone(), v_2)
                                    })(x.clone())
                                },
                            ); //;
                            let v1078: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1080: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1078);
                            let v1083: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1080.l2.clone(),
                                |x: &mut /*;
                                 let v1084: */
                                 std::string::String /* = getZero();
                                                     let v1089: bool =
                                                         */| {
                                    *x = Func1::new({
                                        let v1047 = v1047.clone();
                                        move |v_3: std::string::String| {
                                            Dice_ui::closure34(v1047.clone(), v_3)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            let v1092: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1094: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1092);
                            let v1097: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1094.l3.clone(),
                                |x: &mut /*;
                                 let v1098: */
                                 LrcPtr<Dice_ui::Heap0> /* =
                                                            getZero::<()>();
                                                        let v1103: bool =
                                                            */| {
                                    *x = Func1::new({
                                        let v1047 = v1047.clone();
                                        move |v_4: LrcPtr<Dice_ui::Heap0>| {
                                            Dice_ui::closure35(v1047.clone(), v_4)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            true
                        } else {
                            false
                        }
                    } else {
                        false
                    }
                } else {
                    false
                };
                let v1108: bool = true; /*;
                                        let v1110: bool = */
            }); //;
            let v1112: Func0<()> = _func0_from_v601;
            let v1114: bool = true;
            leptos::prelude::Effect::new(move |_| v1112());
            let v1117: leptos::prelude::ArcMemo<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure36(v7.clone(), ())
                })()
            });
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1123: bool = true;
            let _func1_from_v1121 = Func1::from(move |value| {
                //;
                let v1125: LrcPtr<Dice_ui::Heap3> = value;
                let v1126: string = sprintf!("{:?}", v1125.clone());
                let v1130: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124), |x| x.clone());
                let v1144: Dice_ui::US2 =
                    defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v1130));
                let v1149: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v1151: bool = */
                    async move {
                        /*;
                        let v1153: bool = */
 //;
                        let v1241: bool = match &v1144 {
                            Dice_ui::US2::US2_0(v1144_0_0) => {
                                let v1155: string =
                            append((append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                           (v1126.clone()))), string(""));
                                let v1157: bool = true;
                                leptos::logging::log!("{}", v1155);
                                let v1162: string = append(
                                    (append(
                                        string("state_core.set_data () / data_len: "),
                                        (toString(length(sprintf!("{:?}", v1125.clone())) as i64)),
                                    )),
                                    string(""),
                                );
                                let v1164: bool = true;
                                leptos::logging::log!("{}", v1162);
                                let v1166: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v1168: bool = */
                                    async move {
                                        /*;
                                        let v1170: bool = */
 //;
                                        let v1172: bool = true;
                                        let mut data = Vec::new();
                                        let v1174: bool = true;
                                        borsh::BorshSerialize::serialize(&v1125.clone(), &mut data)
                                            .unwrap();
                                        let v1176: Vec<u8> = data;
                                        let v1178: wasm_bindgen::JsValue =
                                            serde_wasm_bindgen::to_value(&v1176).unwrap();
                                        let v1179: string = Dice_ui::method43();
                                        let v1184: &str = &*v1179;
                                        let v1205: rexie::Transaction = match &v1144 {
                                            Dice_ui::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone()
                                        .transaction(
                                            &["store"],
                                            rexie::TransactionMode::ReadWrite,
                                        )?;
                                        let v1207: rexie::Store = v1205.store("store")?;
                                        let v1209: bool = true;
                                        v1207.put(&v1178, Some(&v1184.into())).await?;
                                        let v1211: bool = true;
                                        v1205.done().await?;
                                        let v1213: string = string("}");
                                        let v1220: bool = true;
                                        let _fix_closure_v1215 = Ok::<(), rexie::Error>(());
                                        let v1225: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1215 "),
                                                        (v1213),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1226: bool = true;
                                        _fix_closure_v1215
                                    },
                                ); // rust.fix_closure';
                                let v1228 = __future_init;
                                let v1230: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = v1228;
                                let v1232: Result<(), rexie::Error> = v1230.await;
                                v1232.unwrap();
                                true
                            }
                            _ => {
                                let v1239: bool = true;
                                leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                                false
                            }
                        };
                        let v1248: string =
                            string("true; _fix_closure_v1244 });  // rust.fix_closure\'");
                        let v1249: bool = true;
                        _fix_closure_v1244
                    },
                ); // rust.fix_closure';
                let v1251 = __future_init;
                let v1253: std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> = v1251;
                let v1256: bool = true;
                v1253 /*;
                      let v1258: bool = */
            }); //;
            let v1260: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = _func1_from_v1121;
            let v1263: leptos::prelude::ArcAction<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap3>| {
                    Func1::new({
                        let v1260 = v1260.clone();
                        move |v_5: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure37(v1260.clone(), v_5)
                    })(value.clone())
                });
            let v1266: bool = true;
            let _func0_from_v1264 = Func0::from(move || {
                //;
                let v1268: bool = leptos::prelude::ReadSignal::get(&patternInput.0.clone());
                let v1269: string =
                append((append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                               (ofBoolean(v1268)))), string(""));
                let v1271: bool = true;
                leptos::logging::log!("{}", v1269);
                let v1274: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1276: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1274);
                let v1279: bool = leptos::prelude::ArcRwSignal::get(&v1276.l0.clone());
                let v1282: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1284: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1282);
                let v1287: bool = leptos::prelude::ArcRwSignal::get(&v1284.l1.clone());
                let v1290: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1292: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1290);
                let v1295: std::string::String =
                    leptos::prelude::ArcRwSignal::get(&v1292.l2.clone());
                let v1298: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1300: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1298);
                let v1304: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v1279,
                    l1: v1287,
                    l2: v1295,
                    l3: leptos::prelude::ArcRwSignal::get(&v1300.l3.clone()),
                });
                let v1308: string =
                append((append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                               sprintf!("{:?}", v1304.clone()))), string(""));
                let v1310: bool = true;
                leptos::logging::log!("{}", v1308);
                let v1312: std::collections::HashMap<
                    std::string::String,
                    leptos::prelude::ArcRwSignal<bool>,
                > = leptos::prelude::ArcMemo::get(&v1117);
                let v1318: &str = &*string("dark_mode_key");
                let v1362: std::string::String = Dice_ui::method45(String::from(v1318));
                let v1364: Option<leptos::prelude::ArcRwSignal<bool>> =
                    std::collections::HashMap::get(&v1312, &v1362)
                        .map(|x| x)
                        .cloned();
                let v1378: Dice_ui::US16 =
                    defaultValue(Dice_ui::US16::US16_1, map(Dice_ui::method46(), v1364));
                let v1388: Dice_ui::US17 = match &v1378 {
                    Dice_ui::US16::US16_0(v1378_0_0) => {
                        Dice_ui::US17::US17_0(leptos::prelude::ArcRwSignal::get(
                            &match &v1378 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US17::US17_1,
                };
                let v1391: bool = match &v1388 {
                    Dice_ui::US17::US17_0(v1388_0_0) => match &v1388 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => false,
                };
                let v1392: string =
                append((append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                               (ofBoolean(v1391)))), string(""));
                let v1394: bool = true;
                leptos::logging::log!("{}", v1392);
                let v1476: bool = if (v1391) == false {
                    if (v1268) == false {
                        let v1398: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &patternInput.1.clone(),
                            |x: &mut /*;
                             let v1399: */
                             bool /* = getZero();
                                  let v1404: bool =
                                      */| {
                                *x = Func1::new(move |v_6: bool| Dice_ui::closure39((), v_6))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        true
                    } else {
                        let v1407: bool = true;
                        leptos::logging::log!("{}", string("state_core.use_core_database (18) / effect new_core_state_heap / ##4"));
                        let v1409: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                            Dice_ui::method29(Dice_ui::method28());
                        let v1410 = Dice_ui::method30();
                        let v1411 = Dice_ui::method31();
                        let v1412: Dice_ui::US9 = match &v1409 {
                            Err(v1409_1_0) => v1411(v1409_1_0.clone()),
                            Ok(v1409_0_0) => v1410(v1409_0_0.clone()),
                        };
                        let v1435: Dice_ui::US10 = match &v1412 {
                            Dice_ui::US9::US9_0(v1412_0_0) => Dice_ui::US10::US10_0(defaultValue(
                                Dice_ui::US11::US11_1,
                                map(Dice_ui::method32(), v1412_0_0.clone()),
                            )),
                            Dice_ui::US9::US9_1(v1412_1_0) => {
                                Dice_ui::US10::US10_1(v1412_1_0.clone())
                            }
                        };
                        if let Dice_ui::US10::US10_0(v1435_0_0) = &v1435 {
                            let v1436: Dice_ui::US11 = v1435_0_0.clone();
                            if let Dice_ui::US11::US11_0(v1436_0_0) = &v1436 {
                                let v1439: bool = true;
                                leptos::prelude::ArcAction::dispatch(&v1263, v1304.clone().clone());
                                let v1440: web_sys::Storage = Dice_ui::method47(v1436_0_0.clone());
                                let v1441: string = Dice_ui::method48();
                                let v1446: &str = &*v1441;
                                let v1466: LrcPtr<Dice_ui::Heap3> = Dice_ui::method49(v1304);
                                let v1468: std::string::String =
                                    serde_json::json!(v1466).to_string();
                                let v1470: &str = v1468.as_str();
                                let v1472: bool = true;
                                web_sys::Storage::set(&v1440, v1446, v1470).unwrap();
                                true
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                } else {
                    false
                };
                let v1478: bool = true; /*;
                                        let v1480: bool = */
            }); //;
            let v1482: Func0<()> = _func0_from_v1264;
            let v1484: bool = true;
            leptos::prelude::Effect::new(move |_| v1482());
            let v1486 = Dice_ui::method50(v7.clone());
            let v1490: string = string(" class:dark={move || v1486()} class=\"flex flex-1\"");
            let v1493: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v1495: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1497: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v1499: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1502: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v1499 = v1499.clone();
                        move || Dice_ui::closure41(v1499.clone(), ())
                    })()
                });
            let v1504: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v1506: LrcPtr<Dice_ui::Heap2> = v1504.unwrap();
            let patternInput_1: (
                leptos::prelude::ReadSignal<Dice_ui::US18>,
                leptos::prelude::WriteSignal<Dice_ui::US18>,
            ) = leptos::prelude::signal(Dice_ui::US18::US18_0);
            let v1509: leptos::prelude::ReadSignal<Dice_ui::US18> = patternInput_1.0.clone();
            let patternInput_2: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1516: bool = true;
            let _func0_from_v1514 = Func0::from(move || {
                //;
                let v1518: bool = leptos::prelude::ReadSignal::get(&patternInput_2.0.clone());
                let v1520: leptos::prelude::Memo<std::string::String> = v1495.clone().hash;
                let v1522: std::string::String = leptos::prelude::Memo::get(&v1520);
                let v1525: string =
                    sprintf!("{}{}", leptos::prelude::ArcMemo::get(&v1502), v1522.clone());
                let v1526: string = append(
                    (append(
                        (append(
                            (append(
                                string("content.render () / effect 1 / new_url_hash: "),
                                (v1525.clone()),
                            )),
                            string(" / loaded: "),
                        )),
                        (ofBoolean(v1518)),
                    )),
                    string(""),
                );
                let v1528: bool = true;
                leptos::logging::log!("{}", v1526);
                let v1633: bool = if (v1518) == false {
                    let v1530: std::string::String = Dice_ui::method51(v1522);
                    if v1530 == "" {
                        let v1535: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v1506.l0.clone());
                        let v1537: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v1535);
                        let v1540: std::string::String =
                            leptos::prelude::ArcRwSignal::get(&v1537.l2.clone());
                        let v1542: string = fable_library_rust::String_::fromString(v1540);
                        let v1543: string = append(
                            (append(
                                string("content.render () / effect 1 / url_hash: "),
                                (v1542.clone()),
                            )),
                            string(""),
                        );
                        let v1545: bool = true;
                        leptos::logging::log!("{}", v1543);
                        if contains(v1542.clone(), string("#")) {
                            let v1554: &str = &*v1542;
                            v1497(v1554, Default::default());
                            ()
                        }
                    }
                    {
                        let v1576: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_2.1.clone(), true); //;
                        true
                    }
                } else {
                    let v1579: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v1506.l0.clone());
                    let v1581: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v1579);
                    let v1587: &str = &*v1525;
                    let v1611: std::string::String = String::from(v1587);
                    let v1632: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v1581.l2.clone(), v1611); //;
                    false
                };
                let v1635: bool = true; /*;
                                        let v1637: bool = */
            }); //;
            let v1639: Func0<()> = _func0_from_v1514;
            let v1641: bool = true;
            leptos::prelude::Effect::new(move |_| v1639());
            let v1644: bool = true;
            let _func0_from_v1642 = Func0::from(move || {
                //;
                let v1646: leptos::prelude::Memo<std::string::String> = v1495.hash;
                let v1649: std::string::String =
                    Dice_ui::method52(leptos::prelude::Memo::get(&v1646));
                let v1651: Option<&str> = v1649.strip_prefix('#');
                let v1652: string = string("r#\"\"#");
                let v1653: &str = r#""#;
                let v1655: &str = v1651.unwrap_or(v1653);
                let v1657: Result<leptos_router::location::Url, std::string::String> =
                    leptos_router::location::Url::try_from(v1655);
                let v1658 = Dice_ui::method53();
                let v1659 = Dice_ui::method54();
                let v1660: Dice_ui::US20 = match &v1657 {
                    Err(v1657_1_0) => v1659(v1657_1_0.clone()),
                    Ok(v1657_0_0) => v1658(v1657_0_0.clone()),
                };
                let v1667: std::string::String = format!("{:#?}", v1660.clone());
                let v1691: string = append(
                    (append(
                        string("content.render () / effect 2 / hash_url: "),
                        (fable_library_rust::String_::fromString(v1667)),
                    )),
                    string(""),
                );
                let v1693: bool = true;
                leptos::logging::log!("{}", v1691);
                let v1805: bool = match &v1660 {
                    Dice_ui::US20::US20_0(v1660_0_0) => {
                        let v1694: leptos_router::location::Url = v1660_0_0.clone();
                        let v1696: std::string::String = v1694.clone().pathname;
                        let v1708: Dice_ui::US21 = if startsWith3(
                            fable_library_rust::String_::fromString(v1696),
                            string("/dice"),
                            false,
                        ) {
                            Dice_ui::US21::US21_0(Dice_ui::US18::US18_1(Dice_ui::US19::US19_0))
                        } else {
                            Dice_ui::US21::US21_1
                        };
                        let v1725: Dice_ui::US21 = match &v1708 {
                            Dice_ui::US21::US21_0(v1708_0_0) => Dice_ui::US21::US21_0(
                                match &v1708 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1712: std::string::String = v1694.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1712),
                                    string("/lists"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_2)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1742: Dice_ui::US21 = match &v1725 {
                            Dice_ui::US21::US21_0(v1725_0_0) => Dice_ui::US21::US21_0(
                                match &v1725 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1729: std::string::String = v1694.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1729),
                                    string("/transactions"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_3)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1759: Dice_ui::US21 = match &v1742 {
                            Dice_ui::US21::US21_0(v1742_0_0) => Dice_ui::US21::US21_0(
                                match &v1742 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1746: std::string::String = v1694.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1746),
                                    string("/settings"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_4)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v1764: Dice_ui::US18 = match &v1759 {
                            Dice_ui::US21::US21_0(v1759_0_0) => match &v1759 {
                                Dice_ui::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => Dice_ui::US18::US18_1(Dice_ui::US19::US19_0),
                        };
                        let v1771: std::string::String = format!("{:#?}", v1764.clone());
                        let v1795: string = append(
                            (append(
                                string("content.render () / effect 2 / new_tab: "),
                                (fable_library_rust::String_::fromString(v1771)),
                            )),
                            string(""),
                        );
                        let v1797: bool = true;
                        leptos::logging::log!("{}", v1795);
                        let v1799: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_1.1.clone(), v1764); //;
                        true
                    }
                    Dice_ui::US20::US20_1(v1660_1_0) => {
                        let v1801: string = append(
                            (append(
                                string("content.render () / effect 2 / hash_url error: "),
                                (toString(v1660_1_0.clone())),
                            )),
                            string(""),
                        );
                        let v1803: bool = true;
                        leptos::logging::log!("{}", v1801);
                        false
                    }
                };
                let v1807: bool = true; /*;
                                        let v1809: bool = */
            }); //;
            let v1811: Func0<()> = _func0_from_v1642;
            let v1813: bool = true;
            leptos::prelude::Effect::new(move |_| v1811());
            let v1815: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v1816: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v1817: string = append(
                (append((append(string(" "), (v1816))), string(""))),
                string(""),
            );
            let v1819: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v1821: Dice_ui::US18 = leptos::prelude::ReadSignal::get(&v1509.clone());
            let v4837: Dice_ui::US22 = match &v1821 {
                Dice_ui::US18::US18_1(v1821_1_0) => {
                    let v1825: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v1827: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v1829: LrcPtr<Dice_ui::Heap2> = v1827.unwrap();
                    let v1832: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v1835: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1829 = v1829.clone();
                                move || Dice_ui::closure44(v1829.clone(), ())
                            })()
                        });
                    let v1838: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1835 = v1835.clone();
                            move || Dice_ui::closure46(v1835.clone(), ())
                        })()
                    });
                    let v1841: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1829 = v1829.clone();
                            let v1835 = v1835.clone();
                            move || Dice_ui::closure48(v1829.clone(), v1835.clone(), ())
                        })()
                    });
                    let v1844: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1841 = v1841.clone();
                            move || Dice_ui::closure51(v1841.clone(), ())
                        })()
                    });
                    let v1847: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1841 = v1841.clone();
                                move || Dice_ui::closure55(v1841.clone(), ())
                            })()
                        });
                    let v1849: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v1844,
                        Func1::new(move |v_7: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_7)
                        }),
                    );
                    let v1855: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v1849.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v1857: bool = true;
                    leptos::logging::log!("{}", v1855);
                    let v1860: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1847 = v1847.clone();
                            let v1849 = v1849.clone();
                            move || Dice_ui::closure90(v1847.clone(), v1849.clone(), ())
                        })()
                    });
                    let v1863: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1860 = v1860.clone();
                            move || Dice_ui::closure107(v1860.clone(), ())
                        })()
                    });
                    let v1868: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method159(
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1863 = v1863.clone();
                                move || Dice_ui::closure115(v1863.clone(), ())
                            })()
                        }),
                        Func1::new(move |v_8: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure119((), v_8)
                        }),
                    );
                    let v1874: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v1868.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v1876: bool = true;
                    leptos::logging::log!("{}", v1874);
                    let v1879: bool = true;
                    let _func1_from_v1877 = Func1::from(move |value| {
                        //;
                        let v1885: string = append(
                            (append(
                                string("dice_view.render (2) / set_max_action / value: "),
                                sprintf!("{:?}", value),
                            )),
                            string(""),
                        );
                        let v1887: bool = true;
                        leptos::logging::log!("{}", v1885);
                        let v1889: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v1891: bool = */
                            async move {
                                /*;
                                let v1893: bool = */
 //;
                                let v1899: &str = &*string("2.0");
                                let v1923: std::string::String = String::from(v1899);
                                let v1948: &str = &*string("dontcare");
                                let v1972: std::string::String = String::from(v1948);
                                let v1997: &str = &*string("EXPERIMENTAL_tx_status");
                                let v2021: std::string::String = String::from(v1997);
                                let v2046: &str =
                                    &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                                let v2070: std::string::String = String::from(v2046);
                                let v2095: &str = &*string("bowen");
                                let v2139: Array<std::string::String> =
                                    new_array(&[v2070, String::from(v2095)]);
                                let v2141: Vec<std::string::String> = v2139.to_vec();
                                let v2143: crate::model::near::rpc::RpcInput =
                                    crate::model::near::rpc::RpcInput {
                                        jsonrpc: v1923,
                                        id: v1972,
                                        method: v2021,
                                        params: v2141,
                                    };
                                let v2144: string = Dice_ui::method167();
                                let v2149: &str = &*v2144;
                                let v2193: std::string::String =
                                    Dice_ui::method92(String::from(v2149));
                                let v2195: reqwest_wasm::RequestBuilder =
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v2193);
                                let v2198: reqwest_wasm::RequestBuilder = Dice_ui::method94(
                                    reqwest_wasm::RequestBuilder::json(v2195, &v2143),
                                );
                                let v2200: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                reqwest_wasm::Response,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::RequestBuilder::send(v2198));
                                let v2202: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                    v2200.await;
                                let v2203 = Dice_ui::method95();
                                let v2208: Result<reqwest_wasm::Response, std::string::String> =
                                    v2202.map_err(|x| v2203(x));
                                let v2219: reqwest_wasm::Response = v2208?;
                                let v2221: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                std::string::String,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::Response::text(v2219));
                                let v2223: Result<std::string::String, reqwest_wasm::Error> =
                                    v2221.await;
                                let v2224 = Dice_ui::method95();
                                let v2229: Result<std::string::String, std::string::String> =
                                    v2223.map_err(|x| v2224(x));
                                let v2242: Result<Dice_ui::US14, std::string::String> =
                                    Ok::<Dice_ui::US14, std::string::String>(
                                        Dice_ui::US14::US14_0(v2229?),
                                    );
                                let v2248: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result1 / result: "),
                                                            sprintf!("{:?}",
                                                                     v2242.clone()))),
                                                    string("")));
                                let v2250: bool = true;
                                leptos::logging::log!("{}", v2248);
                                let v2251 = Dice_ui::method168();
                                let v2252 = Dice_ui::method169();
                                let v2253: Dice_ui::US57 = match &v2242 {
                                    Err(v2242_1_0) => v2252(v2242_1_0.clone()),
                                    Ok(v2242_0_0) => v2251(v2242_0_0.clone()),
                                };
                                let v2556: Dice_ui::US58 = if let Dice_ui::US57::US57_0(v2253_0_0) =
                                    &v2253
                                {
                                    let v2254: Dice_ui::US14 = v2253_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v2254_0_0) = &v2254 {
                                        let v2258: string = Dice_ui::method41(
                                            fable_library_rust::String_::fromString(
                                                v2254_0_0.clone(),
                                            ),
                                        );
                                        let v2263: &str = &*v2258;
                                        let v2284: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            serde_json::Error,
                                        > = serde_json::from_str(&v2263);
                                        let v2285 = Dice_ui::method42();
                                        let v2297: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            std::string::String,
                                        > = v2284.map_err(|x| v2285(x));
                                        let v2300 = Dice_ui::method170();
                                        let v2301 = Dice_ui::method171();
                                        let v2302: Dice_ui::US60 = match &v2297 {
                                            Err(v2297_1_0) => v2301(v2297_1_0.clone()),
                                            Ok(v2297_0_0) => v2300(v2297_0_0.clone()),
                                        };
                                        let v2540: Dice_ui::US61 = match &v2302 {
                                            Dice_ui::US60::US60_0(v2302_0_0) => {
                                                let v2303: crate::model::near::rpc::RpcResponse =
                                                    v2302_0_0.clone();
                                                let v2305: std::string::String =
                                                    v2303.clone().jsonrpc;
                                                let v2307: Option<
                                                    crate::model::near::rpc::TransactionStatus,
                                                > = v2303.clone().result;
                                                let v2309: Option<(
                                                    Array<(
                                                        std::string::String,
                                                        Array<
                                                            std::collections::HashMap<
                                                                std::string::String,
                                                                (
                                                                    std::string::String,
                                                                    Option<std::string::String>,
                                                                    Option<f64>,
                                                                    Option<std::string::String>,
                                                                ),
                                                            >,
                                                        >,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        Array<std::string::String>,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        u64,
                                                        Array<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        u8,
                                                        Array<std::string::String>,
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            std::string::String,
                                                        >,
                                                        Option<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                    )>,
                                                )> = map(Dice_ui::method150(), v2307);
                                                let v2493: Option<
                                                    crate::model::near::rpc::RpcError,
                                                > = v2303.clone().error;
                                                Dice_ui::US61::US61_0(
                                                    v2305,
                                                    v2309,
                                                    map(Dice_ui::method157(), v2493),
                                                    v2303.id,
                                                )
                                            }
                                            Dice_ui::US60::US60_1(v2302_1_0) => {
                                                Dice_ui::US61::US61_1(v2302_1_0.clone())
                                            }
                                        };
                                        match &v2540 {
                                            Dice_ui::US61::US61_0(
                                                v2540_0_0,
                                                v2540_0_1,
                                                v2540_0_2,
                                                v2540_0_3,
                                            ) => Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                                v2540_0_0.clone(),
                                                v2540_0_1.clone(),
                                                v2540_0_2.clone(),
                                                v2540_0_3.clone(),
                                            )),
                                            Dice_ui::US61::US61_1(v2540_1_0) => {
                                                Dice_ui::US58::US58_1(v2540_1_0.clone())
                                            }
                                        }
                                    } else {
                                        Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                    }
                                } else {
                                    Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                };
                                let v2562: Result<Dice_ui::US59, std::string::String> = match &v2556
                                {
                                    Dice_ui::US58::US58_0(v2556_0_0) => {
                                        Ok::<Dice_ui::US59, std::string::String>(v2556_0_0.clone())
                                    }
                                    Dice_ui::US58::US58_1(v2556_1_0) => {
                                        Err::<Dice_ui::US59, std::string::String>(v2556_1_0.clone())
                                    }
                                };
                                let v2568: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result2 / result: "),
                                                            sprintf!("{:?}",
                                                                     v2562.clone()))),
                                                    string("")));
                                let v2570: bool = true;
                                leptos::logging::log!("{}", v2568);
                                let v2571: string = string("}");
                                let v2578: bool = true;
                                let _fix_closure_v2573 = v2562;
                                let v2583: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v2573 "), (v2571))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v2584: bool = true;
                                _fix_closure_v2573
                            },
                        ); // rust.fix_closure';
                        let v2586 = __future_init;
                        let v2588: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Dice_ui::US59, std::string::String>,
                                >,
                            >,
                        > = v2586;
                        let v2591: bool = true;
                        v2588 /*;
                              let v2593: bool = */
                    }); //;
                    let v2595: Func1<
                        LrcPtr<Dice_ui::Heap6>,
                        std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Dice_ui::US59, std::string::String>,
                                >,
                            >,
                        >,
                    > = _func1_from_v1877;
                    let v2598: leptos::prelude::ArcAction<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US59, std::string::String>,
                    > = leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap6>| {
                        Func1::new({
                            let v2595 = v2595.clone();
                            move |v_9: LrcPtr<Dice_ui::Heap6>| {
                                Dice_ui::closure141(v2595.clone(), v_9)
                            }
                        })(value.clone())
                    });
                    let v2601: leptos::prelude::ArcMemo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2598 = v2598.clone();
                            move || Dice_ui::closure142(v2598.clone(), ())
                        })()
                    });
                    let v2604: leptos::prelude::ArcMemo<Option<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2601 = v2601.clone();
                                move || Dice_ui::closure147(v2601.clone(), ())
                            })()
                        });
                    let v2607: leptos::prelude::ArcMemo<Dice_ui::US31> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v1829 = v1829.clone();
                                move || Dice_ui::closure152(v1829.clone(), ())
                            })()
                        });
                    let v2610: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v1829 = v1829.clone();
                            move || Dice_ui::closure153(v1829.clone(), ())
                        })()
                    });
                    let v2613: leptos::prelude::ArcMemo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2610 = v2610.clone();
                            move || Dice_ui::closure158(v2610.clone(), ())
                        })()
                    });
                    let v2614: string = string("vec![]");
                    let v2615: Vec<leptos::prelude::AnyView> = vec![];
                    let v2617: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2615);
                    let v2619: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v2621() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v2622 = {
                        let clo = Func0::from(v2621);
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    fn v2624() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v2625 = {
                        let clo_1 = Func0::from(v2624);
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v2627: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v2631: string = string("vec![v2617]");
                    let v2632: Vec<leptos::prelude::AnyView> = vec![v2617];
                    let v2634: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2632);
                    let v2636: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2634);
                    let v2639: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2627))),
                                        string(">move || { v2636 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2641: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v2636 }</div> };
                    let v2643: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2641);
                    let v2644: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2622(())");
                    let v2647: string = append(
                        (append(
                            string(" open=move || v2625(())"),
                            (append(
                                (append((append(string(" "), (v2644))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v2650 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure163((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v2653 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure164((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v2654: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v2653(()) + \" \" + &v2650(())");
                    let v2655: string = append(
                        (append((append(string(" "), (v2654))), string(""))),
                        string(""),
                    );
                    let v2657: string = string(" class=\"flex items-center gap-2\"");
                    let v2660: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v2661: string = (Dice_ui::method187())();
                    let v2666: &str = &*v2661;
                    let v2690: std::string::String = String::from(v2666);
                    let v2711: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v2690),
                    );
                    let v2715: string = string("vec![v2711]");
                    let v2716: Vec<leptos::prelude::AnyView> = vec![v2711];
                    let v2718: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2716);
                    let v2720: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2718);
                    let v2723: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v2660))),
                                        string(">move || { v2720 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2725: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v2720 }</span> };
                    let v2727: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2725);
                    let v2731: string = string("vec![v2727]");
                    let v2732: Vec<leptos::prelude::AnyView> = vec![v2727];
                    let v2734: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2732);
                    let v2736: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2734);
                    let v2738: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2657))),
                                        string(">move || { v2736 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2740: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v2736 }</div> };
                    let v2742: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2740);
                    let v2744: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v2746() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v2747 = {
                        let clo_4 = Func0::from(v2746);
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v2755: string =
                            string(" class=move || \" \".to_owned() + &v2747(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v2757: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v2761: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v2757))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v2762: string = string("vec![]");
                    let v2763: Vec<leptos::prelude::AnyView> = vec![];
                    let v2765: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2763);
                    let v2767: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2765);
                    let v2770: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v2761))),
                                        string(">move || { v2767 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2772: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v2767 }</path> };
                    let v2774: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2772);
                    let v2778: string = string("vec![v2774]");
                    let v2779: Vec<leptos::prelude::AnyView> = vec![v2774];
                    let v2781: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2779);
                    let v2783: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2781);
                    let v2786: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v2755))),
                                        string(">move || { v2783 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2788: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v2747(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v2783 }</svg> };
                    let v2790: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2788);
                    let v2794: string = string("vec![v2790]");
                    let v2795: Vec<leptos::prelude::AnyView> = vec![v2790];
                    let v2797: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2795);
                    let v2799: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2797);
                    let v2801: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v2744))),
                                        string(">move || { v2799 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2803: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v2799 }</span> };
                    let v2805: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2803);
                    let v2813: string = string("vec![v2742, v2805]");
                    let v2814: Vec<leptos::prelude::AnyView> = vec![v2742, v2805];
                    let v2816: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2814);
                    let v2818: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2816);
                    let v2821: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v2655))),
                                        string(">move || { v2818 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2823: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v2653(()) + " " + &v2650(())>move || { v2818 }</summary> };
                    let v2825: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2823);
                    let v2827: string = string(" class=\"flex flex-1 flex-col\"");
                    let v2831: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v1829 = v1829.clone();
                                let v2598 = v2598.clone();
                                let v2604 = v2604.clone();
                                let v2607 = v2607.clone();
                                let v2613 = v2613.clone();
                                move || {
                                    Dice_ui::closure167(
                                        v1829.clone(),
                                        v2598.clone(),
                                        v2604.clone(),
                                        v2607.clone(),
                                        v2613.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v2833: leptos::prelude::Fragment = (move || v2831())();
                    let v2835: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2833);
                    let v2837: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2827))),
                                        string(">move || { v2835 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2839: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v2835 }</div> };
                    let v2841: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2839);
                    let v2848: string = string("vec![v2825, v2841]");
                    let v2849: Vec<leptos::prelude::AnyView> = vec![v2825, v2841];
                    let v2851: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2849);
                    let v2853: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2851);
                    let v2856: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v2647))),
                                        string(">move || { v2853 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2858: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v2625(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v2622(())>move || { v2853 }</details> };
                    let v2860: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2858);
                    let v2867: string = string("vec![v2643, v2860]");
                    let v2868: Vec<leptos::prelude::AnyView> = vec![v2643, v2860];
                    let v2870: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2868);
                    let v2872: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2870);
                    let v2874: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2619))),
                                        string(">move || { v2872 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2876: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v2872 }</div> };
                    let v2878: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2876);
                    let v2879: string = string("vec![]");
                    let v2880: Vec<leptos::prelude::AnyView> = vec![];
                    let v2882: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2880);
                    let v2884: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v2886 = {
                        let clo_5 = Func0::from(v2621);
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v2888 = {
                        let clo_6 = Func0::from(v2624);
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v2890: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v2894: string = string("vec![v2882]");
                    let v2895: Vec<leptos::prelude::AnyView> = vec![v2882];
                    let v2897: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2895);
                    let v2899: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2897);
                    let v2901: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2890))),
                                        string(">move || { v2899 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2903: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v2899 }</div> };
                    let v2905: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2903);
                    let v2906: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v2886(())");
                    let v2909: string = append(
                        (append(
                            string(" open=move || v2888(())"),
                            (append(
                                (append((append(string(" "), (v2906))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v2912 = {
                        let clo_7 = Func0::new(move || Dice_ui::closure183((), ()));
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v2915 = {
                        let clo_8 = Func0::new(move || Dice_ui::closure184((), ()));
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v2916: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v2915(()) + \" \" + &v2912(())");
                    let v2917: string = append(
                        (append((append(string(" "), (v2916))), string(""))),
                        string(""),
                    );
                    let v2919: string = string(" class=\"flex items-center gap-2\"");
                    let v2922: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v2923: string = (Dice_ui::method198())();
                    let v2928: &str = &*v2923;
                    let v2952: std::string::String = String::from(v2928);
                    let v2973: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v2952),
                    );
                    let v2977: string = string("vec![v2973]");
                    let v2978: Vec<leptos::prelude::AnyView> = vec![v2973];
                    let v2980: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2978);
                    let v2982: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2980);
                    let v2984: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v2922))),
                                        string(">move || { v2982 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v2986: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v2982 }</span> };
                    let v2988: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v2986);
                    let v2992: string = string("vec![v2988]");
                    let v2993: Vec<leptos::prelude::AnyView> = vec![v2988];
                    let v2995: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v2993);
                    let v2997: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2995);
                    let v2999: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2919))),
                                        string(">move || { v2997 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3001: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v2997 }</div> };
                    let v3003: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3001);
                    let v3005: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v3007 = {
                        let clo_9 = Func0::from(v2746);
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v3015: string =
                            string(" class=move || \" \".to_owned() + &v3007(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v3017: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v3021: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3017))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3022: string = string("vec![]");
                    let v3023: Vec<leptos::prelude::AnyView> = vec![];
                    let v3025: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3023);
                    let v3027: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3025);
                    let v3029: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3021))),
                                        string(">move || { v3027 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3031: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3027 }</path> };
                    let v3033: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3031);
                    let v3037: string = string("vec![v3033]");
                    let v3038: Vec<leptos::prelude::AnyView> = vec![v3033];
                    let v3040: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3038);
                    let v3042: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3040);
                    let v3044: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3015))),
                                        string(">move || { v3042 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3046: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3007(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3042 }</svg> };
                    let v3048: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3046);
                    let v3052: string = string("vec![v3048]");
                    let v3053: Vec<leptos::prelude::AnyView> = vec![v3048];
                    let v3055: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3053);
                    let v3057: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3055);
                    let v3059: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3005))),
                                        string(">move || { v3057 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3061: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3057 }</span> };
                    let v3063: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3061);
                    let v3070: string = string("vec![v3003, v3063]");
                    let v3071: Vec<leptos::prelude::AnyView> = vec![v3003, v3063];
                    let v3073: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3071);
                    let v3075: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3073);
                    let v3077: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v2917))),
                                        string(">move || { v3075 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3079: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v2915(()) + " " + &v2912(())>move || { v3075 }</summary> };
                    let v3081: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3079);
                    let v3083: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3087: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v1841 = v1841.clone();
                                let v1860 = v1860.clone();
                                let v1868 = v1868.clone();
                                move || {
                                    Dice_ui::closure186(
                                        v1868.clone(),
                                        v1860.clone(),
                                        v1841.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3089: leptos::prelude::Fragment = (move || v3087())();
                    let v3091: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3089);
                    let v3093: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3083))),
                                        string(">move || { v3091 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3095: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3091 }</div> };
                    let v3097: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3095);
                    let v3104: string = string("vec![v3081, v3097]");
                    let v3105: Vec<leptos::prelude::AnyView> = vec![v3081, v3097];
                    let v3107: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3105);
                    let v3109: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3107);
                    let v3111: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v2909))),
                                        string(">move || { v3109 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3113: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v2888(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v2886(())>move || { v3109 }</details> };
                    let v3115: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3113);
                    let v3122: string = string("vec![v2905, v3115]");
                    let v3123: Vec<leptos::prelude::AnyView> = vec![v2905, v3115];
                    let v3125: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3123);
                    let v3127: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3125);
                    let v3129: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v2884))),
                                        string(">move || { v3127 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3131: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3127 }</div> };
                    let v3133: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3131);
                    let v3140: string = string("vec![v2878, v3133]");
                    let v3141: Vec<leptos::prelude::AnyView> = vec![v2878, v3133];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3141))
                }
                Dice_ui::US18::US18_2 => {
                    let v3147: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v3149: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3151: LrcPtr<Dice_ui::Heap2> = v3149.unwrap();
                    let v3157: &str = &*string("???");
                    let v3181: std::string::String = String::from(v3157);
                    let v3202: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3181),
                    );
                    let v3206: string = string("vec![v3202]");
                    let v3207: Vec<leptos::prelude::AnyView> = vec![v3202];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3207))
                }
                Dice_ui::US18::US18_4 => {
                    let v3910: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v3912: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3914: LrcPtr<Dice_ui::Heap2> = v3912.unwrap();
                    let v3917: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3914 = v3914.clone();
                            move || Dice_ui::closure192(v3914.clone(), ())
                        })()
                    });
                    let patternInput_3: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v3920: leptos::prelude::WriteSignal<i32> = patternInput_3.1.clone();
                    let v3923: leptos::prelude::ArcMemo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let patternInput_3 = patternInput_3.clone();
                            let v3917 = v3917.clone();
                            move || Dice_ui::closure195(v3917.clone(), patternInput_3.0.clone(), ())
                        })()
                    });
                    let v3926: leptos::prelude::ArcMemo<i32> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3923 = v3923.clone();
                                move || Dice_ui::closure198(v3923.clone(), ())
                            })()
                        });
                    let v3929: bool = true;
                    let _func0_from_v3927 = Func0::from(move || {
                        //;
                        let v3932: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3914.l0.clone());
                        let v3934: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v3932);
                        let v3937: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v3934.l3.clone(),
                            |x: &mut /*;
                             let v3938: */
                             LrcPtr<Dice_ui::Heap0> /* = getZero();
                                                    let v3943: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3917 = v3917.clone();
                                    move |v_10: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure199(v3917.clone(), v_10)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v3945: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v3920.clone(),
                            |x: &mut /*;
                             let v3946: */
                             i32 /* = getZero();
                                 let v3951: bool =
                                     */| {
                                *x = Func1::new(move |v_11: i32| Dice_ui::closure201((), v_11))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v3953: bool = true; /*;
                                                let v3955: bool = */
                    }); //;
                    let v3957: Func0<()> = _func0_from_v3927;
                    let v3960 = {
                        let clo_10 = Func0::new(move || Dice_ui::closure202((), ()));
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v3972: string =
                            string(" class=move || \" \".to_owned() + &v3960(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v3978: string = string(
                        " d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v3979: string = string("vec![]");
                    let v3980: Vec<leptos::prelude::AnyView> = vec![];
                    let v3982: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3980);
                    let v3984: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3982);
                    let v3987: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3978))),
                                        string(">move || { v3984 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3989: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v3984 }</path> };
                    let v3991: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3989);
                    let v3995: string = string("vec![v3991]");
                    let v3996: Vec<leptos::prelude::AnyView> = vec![v3991];
                    let v3998: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3996);
                    let v4000: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3998);
                    let v4003: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3972))),
                                        string(">move || { v4000 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4005: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3960(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4000 }</svg> };
                    let v4010 = {
                        let clo_11 = Func0::new(move || Dice_ui::closure203((), ()));
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v4011: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v4010(())");
                    let v4014: string = append(
                        (append(
                            string(" aria-label=\"Add\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v3957()"),
                                    (append(
                                        (append((append(string(" "), (v4011))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4016: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4005);
                    let v4020: string = string("vec![v4016]");
                    let v4021: Vec<leptos::prelude::AnyView> = vec![v4016];
                    let v4023: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4021);
                    let v4025: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4023);
                    let v4028: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v4014))),
                                        string(">move || { v4025 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4030: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v3957() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v4010(())>move || { v4025 }</button> };
                    let v4032: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4030);
                    let v4033: string = string("vec![]");
                    let v4034: Vec<leptos::prelude::AnyView> = vec![];
                    let v4036: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4034);
                    let v4038: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v4040() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v4041 = {
                        let clo_12 = Func0::from(v4040);
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    fn v4043() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v4044 = {
                        let clo_13 = Func0::from(v4043);
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v4046: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4050: string = string("vec![v4032]");
                    let v4051: Vec<leptos::prelude::AnyView> = vec![v4032];
                    let v4053: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4051);
                    let v4055: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4053);
                    let v4058: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4046))),
                                        string(">move || { v4055 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4060: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4055 }</div> };
                    let v4062: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4060);
                    let v4063: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4041(())");
                    let v4066: string = append(
                        (append(
                            string(" open=move || v4044(())"),
                            (append(
                                (append((append(string(" "), (v4063))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4069 = {
                        let clo_14 = Func0::new(move || Dice_ui::closure204((), ()));
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v4072 = {
                        let clo_15 = Func0::new({
                            let v4032 = v4032.clone();
                            move || Dice_ui::closure205(v4032.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v4073: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4072(()) + \" \" + &v4069(())");
                    let v4074: string = append(
                        (append((append(string(" "), (v4073))), string(""))),
                        string(""),
                    );
                    let v4076: string = string(" class=\"flex items-center gap-2\"");
                    let v4079: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4080: string = (Dice_ui::method214(v4032.clone()))();
                    let v4085: &str = &*v4080;
                    let v4109: std::string::String = String::from(v4085);
                    let v4130: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4109),
                    );
                    let v4134: string = string("vec![v4130]");
                    let v4135: Vec<leptos::prelude::AnyView> = vec![v4130];
                    let v4137: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4135);
                    let v4139: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4137);
                    let v4142: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4079))),
                                        string(">move || { v4139 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4144: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4139 }</span> };
                    let v4146: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4144);
                    let v4150: string = string("vec![v4146]");
                    let v4151: Vec<leptos::prelude::AnyView> = vec![v4146];
                    let v4153: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4151);
                    let v4155: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4153);
                    let v4157: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4076))),
                                        string(">move || { v4155 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4159: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4155 }</div> };
                    let v4161: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4159);
                    let v4163: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v4165() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v4166 = {
                        let clo_16 = Func0::from(v4165);
                        Func1::new({
                            let clo_16 = clo_16.clone();
                            move |arg_16: ()| clo_16()
                        })
                    };
                    let v4174: string =
                            string(" class=move || \" \".to_owned() + &v4166(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4176: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v4180: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4176))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4181: string = string("vec![]");
                    let v4182: Vec<leptos::prelude::AnyView> = vec![];
                    let v4184: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4182);
                    let v4186: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4184);
                    let v4188: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4180))),
                                        string(">move || { v4186 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4190: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4186 }</path> };
                    let v4192: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4190);
                    let v4196: string = string("vec![v4192]");
                    let v4197: Vec<leptos::prelude::AnyView> = vec![v4192];
                    let v4199: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4197);
                    let v4201: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4199);
                    let v4203: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4174))),
                                        string(">move || { v4201 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4205: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4166(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4201 }</svg> };
                    let v4207: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4205);
                    let v4211: string = string("vec![v4207]");
                    let v4212: Vec<leptos::prelude::AnyView> = vec![v4207];
                    let v4214: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4212);
                    let v4216: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4214);
                    let v4218: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4163))),
                                        string(">move || { v4216 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4220: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4216 }</span> };
                    let v4222: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4220);
                    let v4230: string = string("vec![v4161, v4222]");
                    let v4231: Vec<leptos::prelude::AnyView> = vec![v4161, v4222];
                    let v4233: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4231);
                    let v4235: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4233);
                    let v4238: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4074))),
                                        string(">move || { v4235 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4240: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4072(()) + " " + &v4069(())>move || { v4235 }</summary> };
                    let v4242: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4240);
                    let v4244: string = string(" class=\"flex flex-1 flex-col\"");
                    let v4248: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v3914 = v3914.clone();
                                let v3917 = v3917.clone();
                                let v3920 = v3920.clone();
                                let v3923 = v3923.clone();
                                let v3926 = v3926.clone();
                                move || {
                                    Dice_ui::closure207(
                                        v3914.clone(),
                                        v3923.clone(),
                                        v3926.clone(),
                                        v3917.clone(),
                                        v3920.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v4250: leptos::prelude::Fragment = (move || v4248())();
                    let v4252: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4250);
                    let v4254: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4244))),
                                        string(">move || { v4252 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4256: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4252 }</div> };
                    let v4258: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4256);
                    let v4265: string = string("vec![v4242, v4258]");
                    let v4266: Vec<leptos::prelude::AnyView> = vec![v4242, v4258];
                    let v4268: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4266);
                    let v4270: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4268);
                    let v4273: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4066))),
                                        string(">move || { v4270 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4275: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4044(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4041(())>move || { v4270 }</details> };
                    let v4277: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4275);
                    let v4284: string = string("vec![v4062, v4277]");
                    let v4285: Vec<leptos::prelude::AnyView> = vec![v4062, v4277];
                    let v4287: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4285);
                    let v4289: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4287);
                    let v4291: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4038))),
                                        string(">move || { v4289 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4293: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4289 }</div> };
                    let v4295: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4293);
                    let v4296: string = string("vec![]");
                    let v4297: Vec<leptos::prelude::AnyView> = vec![];
                    let v4299: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4297);
                    let v4301: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v4303 = {
                        let clo_17 = Func0::from(v4040);
                        Func1::new({
                            let clo_17 = clo_17.clone();
                            move |arg_17: ()| clo_17()
                        })
                    };
                    let v4305 = {
                        let clo_18 = Func0::from(v4043);
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v4307: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4311: string = string("vec![v4299]");
                    let v4312: Vec<leptos::prelude::AnyView> = vec![v4299];
                    let v4314: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4312);
                    let v4316: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4314);
                    let v4318: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4307))),
                                        string(">move || { v4316 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4320: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4316 }</div> };
                    let v4322: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4320);
                    let v4323: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4303(())");
                    let v4326: string = append(
                        (append(
                            string(" open=move || v4305(())"),
                            (append(
                                (append((append(string(" "), (v4323))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4329 = {
                        let clo_19 = Func0::new(move || Dice_ui::closure223((), ()));
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v4332 = {
                        let clo_20 = Func0::new(move || Dice_ui::closure224((), ()));
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v4333: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4332(()) + \" \" + &v4329(())");
                    let v4334: string = append(
                        (append((append(string(" "), (v4333))), string(""))),
                        string(""),
                    );
                    let v4336: string = string(" class=\"flex items-center gap-2\"");
                    let v4339: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4340: string = (Dice_ui::method228())();
                    let v4345: &str = &*v4340;
                    let v4369: std::string::String = String::from(v4345);
                    let v4390: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4369),
                    );
                    let v4394: string = string("vec![v4390]");
                    let v4395: Vec<leptos::prelude::AnyView> = vec![v4390];
                    let v4397: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4395);
                    let v4399: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4397);
                    let v4401: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4339))),
                                        string(">move || { v4399 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4403: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4399 }</span> };
                    let v4405: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4403);
                    let v4409: string = string("vec![v4405]");
                    let v4410: Vec<leptos::prelude::AnyView> = vec![v4405];
                    let v4412: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4410);
                    let v4414: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4412);
                    let v4416: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4336))),
                                        string(">move || { v4414 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4418: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4414 }</div> };
                    let v4420: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4418);
                    let v4422: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v4424 = {
                        let clo_21 = Func0::from(v4165);
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v4432: string =
                            string(" class=move || \" \".to_owned() + &v4424(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4434: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v4438: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4434))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4439: string = string("vec![]");
                    let v4440: Vec<leptos::prelude::AnyView> = vec![];
                    let v4442: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4440);
                    let v4444: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4442);
                    let v4446: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4438))),
                                        string(">move || { v4444 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4448: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4444 }</path> };
                    let v4450: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4448);
                    let v4454: string = string("vec![v4450]");
                    let v4455: Vec<leptos::prelude::AnyView> = vec![v4450];
                    let v4457: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4455);
                    let v4459: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4457);
                    let v4461: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4432))),
                                        string(">move || { v4459 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4463: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4424(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4459 }</svg> };
                    let v4465: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4463);
                    let v4469: string = string("vec![v4465]");
                    let v4470: Vec<leptos::prelude::AnyView> = vec![v4465];
                    let v4472: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4470);
                    let v4474: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4472);
                    let v4476: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4422))),
                                        string(">move || { v4474 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4478: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4474 }</span> };
                    let v4480: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4478);
                    let v4487: string = string("vec![v4420, v4480]");
                    let v4488: Vec<leptos::prelude::AnyView> = vec![v4420, v4480];
                    let v4490: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4488);
                    let v4492: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4490);
                    let v4494: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4334))),
                                        string(">move || { v4492 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4496: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4332(()) + " " + &v4329(())>move || { v4492 }</summary> };
                    let v4498: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4496);
                    let v4500: string = string(" class=\"flex flex-1 flex-col\"");
                    let v4504: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v3914 = v3914.clone();
                                move || Dice_ui::closure226(v3914.clone(), ())
                            })()
                        }));
                    let v4506: leptos::prelude::Fragment = (move || v4504())();
                    let v4508: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4506);
                    let v4510: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4500))),
                                        string(">move || { v4508 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4512: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4508 }</div> };
                    let v4514: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4512);
                    let v4521: string = string("vec![v4498, v4514]");
                    let v4522: Vec<leptos::prelude::AnyView> = vec![v4498, v4514];
                    let v4524: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4522);
                    let v4526: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4524);
                    let v4528: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4326))),
                                        string(">move || { v4526 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4530: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4305(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4303(())>move || { v4526 }</details> };
                    let v4532: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4530);
                    let v4539: string = string("vec![v4322, v4532]");
                    let v4540: Vec<leptos::prelude::AnyView> = vec![v4322, v4532];
                    let v4542: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4540);
                    let v4544: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4542);
                    let v4546: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4301))),
                                        string(">move || { v4544 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4548: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4544 }</div> };
                    let v4550: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4548);
                    let v4553: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v3914.l0.clone());
                    let v4555: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v4553);
                    let v4818: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                        &v4555.l1.clone(),
                    ) {
                        let v4559: string = string("vec![]");
                        let v4560: Vec<leptos::prelude::AnyView> = vec![];
                        let v4562: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4560);
                        let v4564: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v4566 = {
                            let clo_22 = Func0::from(v4040);
                            Func1::new({
                                let clo_22 = clo_22.clone();
                                move |arg_22: ()| clo_22()
                            })
                        };
                        let v4568 = {
                            let clo_23 = Func0::from(v4043);
                            Func1::new({
                                let clo_23 = clo_23.clone();
                                move |arg_23: ()| clo_23()
                            })
                        };
                        let v4570: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v4574: string = string("vec![v4562]");
                        let v4575: Vec<leptos::prelude::AnyView> = vec![v4562];
                        let v4577: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4575);
                        let v4579: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4577);
                        let v4581: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4570))),
                                            string(">move || { v4579 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4583: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4579 }</div> };
                        let v4585: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4583);
                        let v4586: string =
                                    string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4566(())");
                        let v4589: string = append(
                            (append(
                                string(" open=move || v4568(())"),
                                (append(
                                    (append((append(string(" "), (v4586))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4592 = {
                            let clo_24 = Func0::new(move || Dice_ui::closure243((), ()));
                            Func1::new({
                                let clo_24 = clo_24.clone();
                                move |arg_24: ()| clo_24()
                            })
                        };
                        let v4595 = {
                            let clo_25 = Func0::new(move || Dice_ui::closure244((), ()));
                            Func1::new({
                                let clo_25 = clo_25.clone();
                                move |arg_25: ()| clo_25()
                            })
                        };
                        let v4596: string =
                                    string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4595(()) + \" \" + &v4592(())");
                        let v4597: string = append(
                            (append((append(string(" "), (v4596))), string(""))),
                            string(""),
                        );
                        let v4599: string = string(" class=\"flex items-center gap-2\"");
                        let v4602: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v4603: string = (Dice_ui::method237())();
                        let v4608: &str = &*v4603;
                        let v4632: std::string::String = String::from(v4608);
                        let v4653: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4632),
                        );
                        let v4657: string = string("vec![v4653]");
                        let v4658: Vec<leptos::prelude::AnyView> = vec![v4653];
                        let v4660: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4658);
                        let v4662: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4660);
                        let v4664: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4602))),
                                            string(">move || { v4662 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4666: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4662 }</span> };
                        let v4668: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4666);
                        let v4672: string = string("vec![v4668]");
                        let v4673: Vec<leptos::prelude::AnyView> = vec![v4668];
                        let v4675: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4673);
                        let v4677: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4675);
                        let v4679: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4599))),
                                            string(">move || { v4677 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4681: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4677 }</div> };
                        let v4683: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4681);
                        let v4685: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        let v4687 = {
                            let clo_26 = Func0::from(v4165);
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v4695: string =
                                    string(" class=move || \" \".to_owned() + &v4687(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v4697: string =
                                    string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v4701: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v4697))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4702: string = string("vec![]");
                        let v4703: Vec<leptos::prelude::AnyView> = vec![];
                        let v4705: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4703);
                        let v4707: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4705);
                        let v4709: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4701))),
                                            string(">move || { v4707 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4711: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4707 }</path> };
                        let v4713: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4711);
                        let v4717: string = string("vec![v4713]");
                        let v4718: Vec<leptos::prelude::AnyView> = vec![v4713];
                        let v4720: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4718);
                        let v4722: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4720);
                        let v4724: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4695))),
                                            string(">move || { v4722 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4726: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4687(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4722 }</svg> };
                        let v4728: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4726);
                        let v4732: string = string("vec![v4728]");
                        let v4733: Vec<leptos::prelude::AnyView> = vec![v4728];
                        let v4735: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4733);
                        let v4737: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4735);
                        let v4739: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4685))),
                                            string(">move || { v4737 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4741: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4737 }</span> };
                        let v4743: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4741);
                        let v4750: string = string("vec![v4683, v4743]");
                        let v4751: Vec<leptos::prelude::AnyView> = vec![v4683, v4743];
                        let v4753: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4751);
                        let v4755: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4753);
                        let v4757: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v4597))),
                                            string(">move || { v4755 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4759: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4595(()) + " " + &v4592(())>move || { v4755 }</summary> };
                        let v4761: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4759);
                        let v4763: string = string(" class=\"flex flex-1 flex-col\"");
                        let v4767: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new(move || Dice_ui::closure246((), ()))()
                            }));
                        let v4769: leptos::prelude::Fragment = (move || v4767())();
                        let v4771: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4769);
                        let v4773: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4763))),
                                            string(">move || { v4771 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4775: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4771 }</div> };
                        let v4777: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4775);
                        let v4784: string = string("vec![v4761, v4777]");
                        let v4785: Vec<leptos::prelude::AnyView> = vec![v4761, v4777];
                        let v4787: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4785);
                        let v4789: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4787);
                        let v4791: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v4589))),
                                            string(">move || { v4789 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4793: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v4568(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4566(())>move || { v4789 }</details> };
                        let v4795: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4793);
                        let v4802: string = string("vec![v4585, v4795]");
                        let v4803: Vec<leptos::prelude::AnyView> = vec![v4585, v4795];
                        let v4805: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4803);
                        let v4807: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4805);
                        let v4809: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4564))),
                                            string(">move || { v4807 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4811: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4807 }</div> };
                        leptos::prelude::IntoAny::into_any(v4811)
                    } else {
                        let v4814: string = string("vec![]");
                        let v4815: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::IntoAny::into_any(v4815)
                    };
                    let v4828: string = string("vec![v4295, v4550, v4818]");
                    let v4829: Vec<leptos::prelude::AnyView> = vec![v4295, v4550, v4818];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v4829))
                }
                Dice_ui::US18::US18_3 => {
                    let v3213: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v3215: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3217: LrcPtr<Dice_ui::Heap2> = v3215.unwrap();
                    let v3220: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v3223: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3217 = v3217.clone();
                                move || Dice_ui::closure44(v3217.clone(), ())
                            })()
                        });
                    let v3226: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3223 = v3223.clone();
                            move || Dice_ui::closure46(v3223.clone(), ())
                        })()
                    });
                    let v3229: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3217 = v3217.clone();
                            let v3223 = v3223.clone();
                            move || Dice_ui::closure48(v3217.clone(), v3223.clone(), ())
                        })()
                    });
                    let v3232: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3229 = v3229.clone();
                            move || Dice_ui::closure51(v3229.clone(), ())
                        })()
                    });
                    let v3235: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3229 = v3229.clone();
                                move || Dice_ui::closure55(v3229.clone(), ())
                            })()
                        });
                    let v3237: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v3232,
                        Func1::new(move |v_12: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_12)
                        }),
                    );
                    let v3243: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v3237.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v3245: bool = true;
                    leptos::logging::log!("{}", v3243);
                    let v3248: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3235 = v3235.clone();
                            let v3237 = v3237.clone();
                            move || Dice_ui::closure90(v3235.clone(), v3237.clone(), ())
                        })()
                    });
                    let v3251: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3248 = v3248.clone();
                            move || Dice_ui::closure107(v3248.clone(), ())
                        })()
                    });
                    let v3262: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method159(
                                        leptos::prelude::ArcMemo::new(move |_| {
                                            Func0::new({
                                                let v3251 = v3251.clone();
                                                move || Dice_ui::closure115(v3251.clone(), ())
                                            })()
                                        }),
                                        Func1::new(
                                            move |v_13: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure119((), v_13)
                                            }
                                        )
                                    )
                                ),
                            )),
                            string(""),
                        ),
                    );
                    let v3264: bool = true;
                    leptos::logging::log!("{}", v3262);
                    let patternInput_4: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v3266: leptos::prelude::ReadSignal<bool> = patternInput_4.0.clone();
                    let v3268 = Func0::new({
                        let patternInput_4 = patternInput_4.clone();
                        move || Dice_ui::closure254(patternInput_4.1.clone(), ())
                    });
                    {
                        let v3272 = {
                            let clo_27 = Func0::new(move || Dice_ui::closure255((), ()));
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v3284: string =
                                string(" class=move || \" \".to_owned() + &v3272(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3287: string =
                                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
                        let v3290: string = append(
                            (append(
                                (append(string(" "), (v3287))),
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                            )),
                            string(""),
                        );
                        let v3291: string = string("vec![]");
                        let v3292: Vec<leptos::prelude::AnyView> = vec![];
                        let v3294: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3292);
                        let v3296: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3294);
                        let v3299: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3290))),
                                            string(">move || { v3296 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3301: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v3296 }</path> };
                        let v3303: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3301);
                        let v3309: string =
                                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v3310: string = string("vec![]");
                        let v3311: Vec<leptos::prelude::AnyView> = vec![];
                        let v3313: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3311);
                        let v3315: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3313);
                        let v3317: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3309))),
                                            string(">move || { v3315 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3319: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v3315 }</path> };
                        let v3321: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3319);
                        let v3329: string = string("vec![v3303, v3321]");
                        let v3330: Vec<leptos::prelude::AnyView> = vec![v3303, v3321];
                        let v3332: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3330);
                        let v3334: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3332);
                        let v3337: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3284))),
                                            string(">move || { v3334 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3339: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3272(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3334 }</svg> };
                        let v3344 = {
                            let clo_28 = Func0::new({
                                let v3266 = v3266.clone();
                                move || Dice_ui::closure256(v3266.clone(), ())
                            });
                            Func1::new({
                                let clo_28 = clo_28.clone();
                                move |arg_28: ()| clo_28()
                            })
                        };
                        let v3345: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v3344(())");
                        let v3348: string = append(
                            (append(
                                string(" aria-label=\"Settings\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v3268()"),
                                        (append(
                                            (append((append(string(" "), (v3345))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3350: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3339);
                        let v3354: string = string("vec![v3350]");
                        let v3355: Vec<leptos::prelude::AnyView> = vec![v3350];
                        let v3357: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3355);
                        let v3359: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3357);
                        let v3362: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v3348))),
                                            string(">move || { v3359 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3364: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v3268() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v3344(())>move || { v3359 }</button> };
                        let v3366: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3364);
                        let v3367: string = string("vec![]");
                        let v3368: Vec<leptos::prelude::AnyView> = vec![];
                        let v3370: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3368);
                        let v3372: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v3374() -> string {
                            Dice_ui::closure161((), ())
                        }
                        let v3375 = {
                            let clo_29 = Func0::from(v3374);
                            Func1::new({
                                let clo_29 = clo_29.clone();
                                move |arg_29: ()| clo_29()
                            })
                        };
                        fn v3377() -> bool {
                            Dice_ui::closure162((), ())
                        }
                        let v3378 = {
                            let clo_30 = Func0::from(v3377);
                            Func1::new({
                                let clo_30 = clo_30.clone();
                                move |arg_30: ()| clo_30()
                            })
                        };
                        let v3380: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v3384: string = string("vec![v3366]");
                        let v3385: Vec<leptos::prelude::AnyView> = vec![v3366];
                        let v3387: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3385);
                        let v3389: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3387);
                        let v3392: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3380))),
                                            string(">move || { v3389 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3394: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3389 }</div> };
                        let v3396: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3394);
                        let v3397: string =
                                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3375(())");
                        let v3400: string = append(
                            (append(
                                string(" open=move || v3378(())"),
                                (append(
                                    (append((append(string(" "), (v3397))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3403 = {
                            let clo_31 = Func0::new(move || Dice_ui::closure257((), ()));
                            Func1::new({
                                let clo_31 = clo_31.clone();
                                move |arg_31: ()| clo_31()
                            })
                        };
                        let v3406 = {
                            let clo_32 = Func0::new({
                                let v3366 = v3366.clone();
                                move || Dice_ui::closure258(v3366.clone(), ())
                            });
                            Func1::new({
                                let clo_32 = clo_32.clone();
                                move |arg_32: ()| clo_32()
                            })
                        };
                        let v3407: string =
                                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3406(()) + \" \" + &v3403(())");
                        let v3408: string = append(
                            (append((append(string(" "), (v3407))), string(""))),
                            string(""),
                        );
                        let v3410: string = string(" class=\"flex items-center gap-2\"");
                        let v3413: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v3414: string = (Dice_ui::method243(v3366.clone()))();
                        let v3419: &str = &*v3414;
                        let v3443: std::string::String = String::from(v3419);
                        let v3464: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v3443),
                        );
                        let v3468: string = string("vec![v3464]");
                        let v3469: Vec<leptos::prelude::AnyView> = vec![v3464];
                        let v3471: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3469);
                        let v3473: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3471);
                        let v3476: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3413))),
                                            string(">move || { v3473 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3478: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3473 }</span> };
                        let v3480: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3478);
                        let v3484: string = string("vec![v3480]");
                        let v3485: Vec<leptos::prelude::AnyView> = vec![v3480];
                        let v3487: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3485);
                        let v3489: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3487);
                        let v3491: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3410))),
                                            string(">move || { v3489 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3493: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3489 }</div> };
                        let v3495: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3493);
                        let v3497: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v3499() -> string {
                            Dice_ui::closure166((), ())
                        }
                        let v3500 = {
                            let clo_33 = Func0::from(v3499);
                            Func1::new({
                                let clo_33 = clo_33.clone();
                                move |arg_33: ()| clo_33()
                            })
                        };
                        let v3508: string =
                                string(" class=move || \" \".to_owned() + &v3500(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3510: string =
                                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v3514: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v3510))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3515: string = string("vec![]");
                        let v3516: Vec<leptos::prelude::AnyView> = vec![];
                        let v3518: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3516);
                        let v3520: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3518);
                        let v3522: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3514))),
                                            string(">move || { v3520 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3524: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3520 }</path> };
                        let v3526: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3524);
                        let v3530: string = string("vec![v3526]");
                        let v3531: Vec<leptos::prelude::AnyView> = vec![v3526];
                        let v3533: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3531);
                        let v3535: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3533);
                        let v3537: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3508))),
                                            string(">move || { v3535 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3539: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3500(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3535 }</svg> };
                        let v3541: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3539);
                        let v3545: string = string("vec![v3541]");
                        let v3546: Vec<leptos::prelude::AnyView> = vec![v3541];
                        let v3548: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3546);
                        let v3550: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3548);
                        let v3552: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3497))),
                                            string(">move || { v3550 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3554: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3550 }</span> };
                        let v3556: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3554);
                        let v3563: string = string("vec![v3495, v3556]");
                        let v3564: Vec<leptos::prelude::AnyView> = vec![v3495, v3556];
                        let v3566: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3564);
                        let v3568: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3566);
                        let v3571: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v3408))),
                                            string(">move || { v3568 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3573: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3406(()) + " " + &v3403(())>move || { v3568 }</summary> };
                        let v3575: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3573);
                        let v3577: string = string(" class=\"flex flex-1 flex-col\"");
                        let v3581: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new({
                                    let v3217 = v3217.clone();
                                    let v3229 = v3229.clone();
                                    let v3248 = v3248.clone();
                                    let v3266 = v3266.clone();
                                    move || {
                                        Dice_ui::closure260(
                                            v3217.clone(),
                                            v3248.clone(),
                                            v3229.clone(),
                                            v3266.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v3583: leptos::prelude::Fragment = (move || v3581())();
                        let v3585: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3583);
                        let v3587: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3577))),
                                            string(">move || { v3585 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3589: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3585 }</div> };
                        let v3591: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3589);
                        let v3598: string = string("vec![v3575, v3591]");
                        let v3599: Vec<leptos::prelude::AnyView> = vec![v3575, v3591];
                        let v3601: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3599);
                        let v3603: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3601);
                        let v3606: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v3400))),
                                            string(">move || { v3603 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3608: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v3378(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3375(())>move || { v3603 }</details> };
                        let v3610: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3608);
                        let v3617: string = string("vec![v3396, v3610]");
                        let v3618: Vec<leptos::prelude::AnyView> = vec![v3396, v3610];
                        let v3620: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3618);
                        let v3622: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3620);
                        let v3624: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3372))),
                                            string(">move || { v3622 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3626: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3622 }</div> };
                        let v3628: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3626);
                        let v3631: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3217.l0.clone());
                        let v3633: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v3631);
                        let v3896: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                            &v3633.l1.clone(),
                        ) {
                            let v3637: string = string("vec![]");
                            let v3638: Vec<leptos::prelude::AnyView> = vec![];
                            let v3640: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3638);
                            let v3642: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v3644 = {
                                let clo_34 = Func0::from(v3374);
                                Func1::new({
                                    let clo_34 = clo_34.clone();
                                    move |arg_34: ()| clo_34()
                                })
                            };
                            let v3646 = {
                                let clo_35 = Func0::from(v3377);
                                Func1::new({
                                    let clo_35 = clo_35.clone();
                                    move |arg_35: ()| clo_35()
                                })
                            };
                            let v3648: string =
                                string(" class=\"[position:absolute] [right:0] [top:0]\"");
                            let v3652: string = string("vec![v3640]");
                            let v3653: Vec<leptos::prelude::AnyView> = vec![v3640];
                            let v3655: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3653);
                            let v3657: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3655);
                            let v3659: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3648))),
                                                string(">move || { v3657 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3661: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3657 }</div> };
                            let v3663: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3661);
                            let v3664: string =
                                        string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3644(())");
                            let v3667: string = append(
                                (append(
                                    string(" open=move || v3646(())"),
                                    (append(
                                        (append((append(string(" "), (v3664))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v3670 = {
                                let clo_36 = Func0::new(move || Dice_ui::closure337((), ()));
                                Func1::new({
                                    let clo_36 = clo_36.clone();
                                    move |arg_36: ()| clo_36()
                                })
                            };
                            let v3673 = {
                                let clo_37 = Func0::new(move || Dice_ui::closure338((), ()));
                                Func1::new({
                                    let clo_37 = clo_37.clone();
                                    move |arg_37: ()| clo_37()
                                })
                            };
                            let v3674: string =
                                        string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3673(()) + \" \" + &v3670(())");
                            let v3675: string = append(
                                (append((append(string(" "), (v3674))), string(""))),
                                string(""),
                            );
                            let v3677: string = string(" class=\"flex items-center gap-2\"");
                            let v3680: string =
                                        string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
                            let v3681: string = (Dice_ui::method282())();
                            let v3686: &str = &*v3681;
                            let v3710: std::string::String = String::from(v3686);
                            let v3731: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v3710),
                                );
                            let v3735: string = string("vec![v3731]");
                            let v3736: Vec<leptos::prelude::AnyView> = vec![v3731];
                            let v3738: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3736);
                            let v3740: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3738);
                            let v3742: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v3680))),
                                                string(">move || { v3740 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3744: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3740 }</span> };
                            let v3746: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3744);
                            let v3750: string = string("vec![v3746]");
                            let v3751: Vec<leptos::prelude::AnyView> = vec![v3746];
                            let v3753: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3751);
                            let v3755: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3753);
                            let v3757: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3677))),
                                                string(">move || { v3755 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3759: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3755 }</div> };
                            let v3761: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3759);
                            let v3763: string =
                                string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                            let v3765 = {
                                let clo_38 = Func0::from(v3499);
                                Func1::new({
                                    let clo_38 = clo_38.clone();
                                    move |arg_38: ()| clo_38()
                                })
                            };
                            let v3773: string =
                                        string(" class=move || \" \".to_owned() + &v3765(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v3775: string =
                                        string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                            let v3779: string = append(
                                (append(
                                    string(" clip-rule=\"evenodd\""),
                                    (append(
                                        (append(
                                            (append(string(" "), (v3775))),
                                            string(" fill-rule=\"evenodd\""),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v3780: string = string("vec![]");
                            let v3781: Vec<leptos::prelude::AnyView> = vec![];
                            let v3783: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3781);
                            let v3785: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3783);
                            let v3787: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v3779))),
                                                string(">move || { v3785 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3789: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3785 }</path> };
                            let v3791: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3789);
                            let v3795: string = string("vec![v3791]");
                            let v3796: Vec<leptos::prelude::AnyView> = vec![v3791];
                            let v3798: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3796);
                            let v3800: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3798);
                            let v3802: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3773))),
                                                string(">move || { v3800 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3804: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3765(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3800 }</svg> };
                            let v3806: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3804);
                            let v3810: string = string("vec![v3806]");
                            let v3811: Vec<leptos::prelude::AnyView> = vec![v3806];
                            let v3813: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3811);
                            let v3815: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3813);
                            let v3817: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v3763))),
                                                string(">move || { v3815 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3819: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3815 }</span> };
                            let v3821: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3819);
                            let v3828: string = string("vec![v3761, v3821]");
                            let v3829: Vec<leptos::prelude::AnyView> = vec![v3761, v3821];
                            let v3831: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3829);
                            let v3833: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3831);
                            let v3835: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<summary "), (v3675))),
                                                string(">move || { v3833 }</"),
                                            )),
                                            string("summary"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3837: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3673(()) + " " + &v3670(())>move || { v3833 }</summary> };
                            let v3839: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3837);
                            let v3841: string = string(" class=\"flex flex-1 flex-col\"");
                            let v3845: Func0<leptos::prelude::Fragment> =
                                Dice_ui::method195(Func0::new(move || {
                                    Func0::new({
                                        let v3248 = v3248.clone();
                                        move || Dice_ui::closure340(v3248.clone(), ())
                                    })()
                                }));
                            let v3847: leptos::prelude::Fragment = (move || v3845())();
                            let v3849: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3847);
                            let v3851: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3841))),
                                                string(">move || { v3849 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3853: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3849 }</div> };
                            let v3855: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3853);
                            let v3862: string = string("vec![v3839, v3855]");
                            let v3863: Vec<leptos::prelude::AnyView> = vec![v3839, v3855];
                            let v3865: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3863);
                            let v3867: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3865);
                            let v3869: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<details "), (v3667))),
                                                string(">move || { v3867 }</"),
                                            )),
                                            string("details"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3871: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Details, _, _>,
                            > = leptos::prelude::view! { <details  open=move || v3646(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3644(())>move || { v3867 }</details> };
                            let v3873: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3871);
                            let v3880: string = string("vec![v3663, v3873]");
                            let v3881: Vec<leptos::prelude::AnyView> = vec![v3663, v3873];
                            let v3883: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3881);
                            let v3885: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3883);
                            let v3887: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3642))),
                                                string(">move || { v3885 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3889: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3885 }</div> };
                            leptos::prelude::IntoAny::into_any(v3889)
                        } else {
                            let v3892: string = string("vec![]");
                            let v3893: Vec<leptos::prelude::AnyView> = vec![];
                            leptos::prelude::IntoAny::into_any(v3893)
                        };
                        let v3903: string = string("vec![v3628, v3896]");
                        let v3904: Vec<leptos::prelude::AnyView> = vec![v3628, v3896];
                        Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3904))
                    }
                }
                _ => Dice_ui::US22::US22_1,
            };
            let v4855: leptos::prelude::AnyView = match &v4837 {
                Dice_ui::US22::US22_0(v4837_0_0) => {
                    let v4840: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v4842: leptos::prelude::AnyView = leptos::prelude::AnyView::from(
                        match &v4837 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v4845: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4840))),
                                        string(">move || { v4842 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4847: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v4842 }</div> };
                    leptos::prelude::IntoAny::into_any(v4847)
                }
                _ => {
                    let v4850: string = string("vec![]");
                    let v4851: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v4851)
                }
            };
            let v4859: string = string("vec![v4855]");
            let v4860: Vec<leptos::prelude::AnyView> = vec![v4855];
            let v4862: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4860);
            let v4864: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4862);
            let v4867: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<main "), (v1819))),
                                string(">move || { v4864 }</"),
                            )),
                            string("main"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v4869: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v4864 }</main> };
            let v4871: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4869);
            let v4873: string = string(" class=\"flex\"");
            let v4876: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v4878: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v4881: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v4878 = v4878.clone();
                        move || Dice_ui::closure41(v4878.clone(), ())
                    })()
                });
            let v4883: string = string(" class=\"hidden\"");
            let v4887: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v4893: &str = &*string("Tab");
            let v4917: std::string::String = String::from(v4893);
            let v4938: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v4917));
            let v4942: string = string("vec![v4938]");
            let v4943: Vec<leptos::prelude::AnyView> = vec![v4938];
            let v4945: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4943);
            let v4947: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4945);
            let v4950: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v4887))),
                                string(">move || { v4947 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v4952: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v4947 }</label> };
            let v4954: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4952);
            let v4958: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v4959 = Dice_ui::method285(v1509.clone());
            let v4961: string = string(" selected=v4959()");
            let v4967: &str = &*string("Settings");
            let v4991: std::string::String = String::from(v4967);
            let v5012: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v4991));
            let v5016: string = string("vec![v5012]");
            let v5017: Vec<leptos::prelude::AnyView> = vec![v5012];
            let v5019: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5017);
            let v5021: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5019);
            let v5024: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v4961))),
                                string(">move || { v5021 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5026: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v4959()>move || { v5021 }</option> };
            let v5028: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5026);
            let v5029 = Dice_ui::method286(v1509.clone());
            let v5031: string = string(" selected=v5029()");
            let v5037: &str = &*string("Transactions");
            let v5061: std::string::String = String::from(v5037);
            let v5082: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5061));
            let v5086: string = string("vec![v5082]");
            let v5087: Vec<leptos::prelude::AnyView> = vec![v5082];
            let v5089: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5087);
            let v5091: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5089);
            let v5093: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5031))),
                                string(">move || { v5091 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5095: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5029()>move || { v5091 }</option> };
            let v5097: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5095);
            let v5098 = Dice_ui::method287(v1509.clone());
            let v5100: string = string(" selected=v5098()");
            let v5106: &str = &*string("Lists");
            let v5130: std::string::String = String::from(v5106);
            let v5151: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5130));
            let v5155: string = string("vec![v5151]");
            let v5156: Vec<leptos::prelude::AnyView> = vec![v5151];
            let v5158: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5156);
            let v5160: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5158);
            let v5162: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5100))),
                                string(">move || { v5160 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5164: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5098()>move || { v5160 }</option> };
            let v5166: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5164);
            let v5167 = Dice_ui::method288(v1509.clone());
            let v5169: string = string(" selected=v5167()");
            let v5175: &str = &*string("Dice");
            let v5199: std::string::String = String::from(v5175);
            let v5220: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5199));
            let v5224: string = string("vec![v5220]");
            let v5225: Vec<leptos::prelude::AnyView> = vec![v5220];
            let v5227: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5225);
            let v5229: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5227);
            let v5231: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5169))),
                                string(">move || { v5229 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5233: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5167()>move || { v5229 }</option> };
            let v5235: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5233);
            let v5249: string = string("vec![v5235, v5166, v5097, v5028]");
            let v5250: Vec<leptos::prelude::AnyView> = vec![v5235, v5166, v5097, v5028];
            let v5252: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5250);
            let v5254: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5252);
            let v5257: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<select "), (v4958))),
                                string(">move || { v5254 }</"),
                            )),
                            string("select"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5259: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Select, _, _>,
            > = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v5254 }</select> };
            let v5261: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5259);
            let v5268: string = string("vec![v4954, v5261]");
            let v5269: Vec<leptos::prelude::AnyView> = vec![v4954, v5261];
            let v5271: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5269);
            let v5273: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5271);
            let v5276: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v4883))),
                                string(">move || { v5273 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5278: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v5273 }</div> };
            let v5280: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v5282: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v5283: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v5286: string = append(
                (append(
                    string(" aria-label=\"Tabs\""),
                    (append(
                        (append((append(string(" "), (v5283))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            fn v5288() -> string {
                Dice_ui::closure348((), ())
            }
            let v5289 = {
                let clo_39 = Func0::from(v5288);
                Func1::new({
                    let clo_39 = clo_39.clone();
                    move |arg_39: ()| clo_39()
                })
            };
            let v5301: string =
                string(" class=move || \" \".to_owned() + &v5289(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v5304: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v5307: string = append(
                (append(
                    (append(string(" "), (v5304))),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                )),
                string(""),
            );
            let v5308: string = string("vec![]");
            let v5309: Vec<leptos::prelude::AnyView> = vec![];
            let v5311: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5309);
            let v5313: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5311);
            let v5316: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v5307))),
                                string(">move || { v5313 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5318: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v5313 }</path> };
            let v5320: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5318);
            let v5326: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v5327: string = string("vec![]");
            let v5328: Vec<leptos::prelude::AnyView> = vec![];
            let v5330: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5328);
            let v5332: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5330);
            let v5334: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v5326))),
                                string(">move || { v5332 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5336: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v5332 }</path> };
            let v5338: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5336);
            let v5345: string = string("vec![v5320, v5338]");
            let v5346: Vec<leptos::prelude::AnyView> = vec![v5320, v5338];
            let v5348: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5346);
            let v5350: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5348);
            let v5353: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v5301))),
                                string(">move || { v5350 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5355: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5289(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5350 }</svg> };
            let v5357: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5355);
            let v5361: string = string("vec![v5357]");
            let v5362: Vec<leptos::prelude::AnyView> = vec![v5357];
            let v5364: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5362);
            let v5365 = Func0::new({
                let v4881 = v4881.clone();
                move || Dice_ui::closure349(v4881.clone(), ())
            });
            {
                let v5369 = {
                    let clo_40 = Func0::new({
                        let v1509 = v1509.clone();
                        move || Dice_ui::closure350(v1509.clone(), ())
                    });
                    Func1::new({
                        let clo_40 = clo_40.clone();
                        move |arg_40: ()| clo_40()
                    })
                };
                let v5372 = {
                    let clo_41 = Func0::new({
                        let v1509 = v1509.clone();
                        move || Dice_ui::closure351(v1509.clone(), ())
                    });
                    Func1::new({
                        let clo_41 = clo_41.clone();
                        move |arg_41: ()| clo_41()
                    })
                };
                let v5374: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5372(())");
                let v5378: string = append(
                    (append(
                        string(" aria-current=move || if v5369(()) { \"page\" } else { \"\" }"),
                        (append(
                            (append(
                                (append(string(" "), (v5374))),
                                string(" href=move || v5365()"),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v5380: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5364);
                let v5385: &str = &*string("Settings");
                let v5409: std::string::String = String::from(v5385);
                let v5430: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5409));
                let v5437: string = string("vec![v5380, v5430]");
                let v5438: Vec<leptos::prelude::AnyView> = vec![v5380, v5430];
                let v5440: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5438);
                let v5442: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5440);
                let v5445: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<a "), (v5378))),
                                    string(">move || { v5442 }</"),
                                )),
                                string("a"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v5447: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v5369(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5372(()) href=move || v5365()>move || { v5442 }</a> };
                let v5449: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5447);
                let v5451 = {
                    let clo_42 = Func0::from(v5288);
                    Func1::new({
                        let clo_42 = clo_42.clone();
                        move |arg_42: ()| clo_42()
                    })
                };
                let v5465: string =
                    string(" class=move || \"text-gray-700 \".to_owned() + &v5451(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v5471: string =
                    string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v5472: string = string("vec![]");
                let v5473: Vec<leptos::prelude::AnyView> = vec![];
                let v5475: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5473);
                let v5477: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5475);
                let v5479: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v5471))),
                                    string(">move || { v5477 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v5481: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v5477 }</path> };
                let v5483: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5481);
                let v5487: string = string("vec![v5483]");
                let v5488: Vec<leptos::prelude::AnyView> = vec![v5483];
                let v5490: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5488);
                let v5492: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5490);
                let v5494: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v5465))),
                                    string(">move || { v5492 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v5496: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v5451(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5492 }</svg> };
                let v5498: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5496);
                let v5502: string = string("vec![v5498]");
                let v5503: Vec<leptos::prelude::AnyView> = vec![v5498];
                let v5505: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5503);
                let v5506 = Func0::new({
                    let v4881 = v4881.clone();
                    move || Dice_ui::closure352(v4881.clone(), ())
                });
                {
                    let v5510 = {
                        let clo_43 = Func0::new({
                            let v1509 = v1509.clone();
                            move || Dice_ui::closure353(v1509.clone(), ())
                        });
                        Func1::new({
                            let clo_43 = clo_43.clone();
                            move |arg_43: ()| clo_43()
                        })
                    };
                    let v5513 = {
                        let clo_44 = Func0::new({
                            let v1509 = v1509.clone();
                            move || Dice_ui::closure354(v1509.clone(), ())
                        });
                        Func1::new({
                            let clo_44 = clo_44.clone();
                            move |arg_44: ()| clo_44()
                        })
                    };
                    let v5515: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5513(())");
                    let v5519: string = append(
                        (append(
                            string(" aria-current=move || if v5510(()) { \"page\" } else { \"\" }"),
                            (append(
                                (append(
                                    (append(string(" "), (v5515))),
                                    string(" href=move || v5506()"),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5521: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5505);
                    let v5526: &str = &*string("Transactions");
                    let v5550: std::string::String = String::from(v5526);
                    let v5571: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v5550),
                    );
                    let v5578: string = string("vec![v5521, v5571]");
                    let v5579: Vec<leptos::prelude::AnyView> = vec![v5521, v5571];
                    let v5581: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5579);
                    let v5583: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5581);
                    let v5585: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<a "), (v5519))),
                                        string(">move || { v5583 }</"),
                                    )),
                                    string("a"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5587: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v5510(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5513(()) href=move || v5506()>move || { v5583 }</a> };
                    let v5589: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5587);
                    let v5591 = {
                        let clo_45 = Func0::from(v5288);
                        Func1::new({
                            let clo_45 = clo_45.clone();
                            move |arg_45: ()| clo_45()
                        })
                    };
                    let v5605: string =
                        string(" class=move || \"text-gray-700 \".to_owned() + &v5591(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v5611: string =
                        string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v5612: string = string("vec![]");
                    let v5613: Vec<leptos::prelude::AnyView> = vec![];
                    let v5615: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5613);
                    let v5617: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5615);
                    let v5619: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v5611))),
                                        string(">move || { v5617 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5621: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v5617 }</path> };
                    let v5623: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5621);
                    let v5631: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
                    let v5632: string = string("vec![]");
                    let v5633: Vec<leptos::prelude::AnyView> = vec![];
                    let v5635: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5633);
                    let v5637: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5635);
                    let v5640: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v5631))),
                                        string(">move || { v5637 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5642: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v5637 }</circle> };
                    let v5644: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5642);
                    let v5652: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
                    let v5653: string = string("vec![]");
                    let v5654: Vec<leptos::prelude::AnyView> = vec![];
                    let v5656: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5654);
                    let v5658: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5656);
                    let v5660: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v5652))),
                                        string(">move || { v5658 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5662: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v5658 }</circle> };
                    let v5664: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5662);
                    let v5672: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
                    let v5673: string = string("vec![]");
                    let v5674: Vec<leptos::prelude::AnyView> = vec![];
                    let v5676: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5674);
                    let v5678: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5676);
                    let v5680: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v5672))),
                                        string(">move || { v5678 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5682: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v5678 }</circle> };
                    let v5684: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5682);
                    let v5697: string = string("vec![v5623, v5644, v5664, v5684]");
                    let v5698: Vec<leptos::prelude::AnyView> = vec![v5623, v5644, v5664, v5684];
                    let v5700: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5698);
                    let v5702: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5700);
                    let v5704: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v5605))),
                                        string(">move || { v5702 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5706: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v5591(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5702 }</svg> };
                    let v5708: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5706);
                    let v5712: string = string("vec![v5708]");
                    let v5713: Vec<leptos::prelude::AnyView> = vec![v5708];
                    let v5715: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5713);
                    let v5716 = Func0::new({
                        let v4881 = v4881.clone();
                        move || Dice_ui::closure355(v4881.clone(), ())
                    });
                    {
                        let v5720 = {
                            let clo_46 = Func0::new({
                                let v1509 = v1509.clone();
                                move || Dice_ui::closure356(v1509.clone(), ())
                            });
                            Func1::new({
                                let clo_46 = clo_46.clone();
                                move |arg_46: ()| clo_46()
                            })
                        };
                        let v5723 = {
                            let clo_47 = Func0::new({
                                let v1509 = v1509.clone();
                                move || Dice_ui::closure357(v1509.clone(), ())
                            });
                            Func1::new({
                                let clo_47 = clo_47.clone();
                                move |arg_47: ()| clo_47()
                            })
                        };
                        let v5725: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5723(())");
                        let v5729: string = append(
                            (append(
                                string(
                                    " aria-current=move || if v5720(()) { \"page\" } else { \"\" }",
                                ),
                                (append(
                                    (append(
                                        (append(string(" "), (v5725))),
                                        string(" href=move || v5716()"),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5731: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5715);
                        let v5736: &str = &*string("Lists");
                        let v5760: std::string::String = String::from(v5736);
                        let v5781: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v5760),
                        );
                        let v5788: string = string("vec![v5731, v5781]");
                        let v5789: Vec<leptos::prelude::AnyView> = vec![v5731, v5781];
                        let v5791: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5789);
                        let v5793: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5791);
                        let v5795: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<a "), (v5729))),
                                            string(">move || { v5793 }</"),
                                        )),
                                        string("a"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5797: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v5720(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5723(()) href=move || v5716()>move || { v5793 }</a> };
                        let v5799: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5797);
                        let v5801 = {
                            let clo_48 = Func0::from(v5288);
                            Func1::new({
                                let clo_48 = clo_48.clone();
                                move |arg_48: ()| clo_48()
                            })
                        };
                        let v5813: string =
                            string(" class=move || \" \".to_owned() + &v5801(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v5827: string =
                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
                        let v5828: string = string("vec![]");
                        let v5829: Vec<leptos::prelude::AnyView> = vec![];
                        let v5831: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5829);
                        let v5833: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5831);
                        let v5836: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v5827))),
                                            string(">move || { v5833 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5838: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v5833 }</rect> };
                        let v5840: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5838);
                        let v5848: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
                        let v5849: string = string("vec![]");
                        let v5850: Vec<leptos::prelude::AnyView> = vec![];
                        let v5852: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5850);
                        let v5854: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5852);
                        let v5856: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5848))),
                                            string(">move || { v5854 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5858: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v5854 }</circle> };
                        let v5860: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5858);
                        let v5868: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
                        let v5869: string = string("vec![]");
                        let v5870: Vec<leptos::prelude::AnyView> = vec![];
                        let v5872: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5870);
                        let v5874: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5872);
                        let v5876: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5868))),
                                            string(">move || { v5874 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5878: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v5874 }</circle> };
                        let v5880: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5878);
                        let v5888: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
                        let v5889: string = string("vec![]");
                        let v5890: Vec<leptos::prelude::AnyView> = vec![];
                        let v5892: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5890);
                        let v5894: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5892);
                        let v5896: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5888))),
                                            string(">move || { v5894 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5898: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v5894 }</circle> };
                        let v5900: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5898);
                        let v5908: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
                        let v5909: string = string("vec![]");
                        let v5910: Vec<leptos::prelude::AnyView> = vec![];
                        let v5912: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5910);
                        let v5914: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5912);
                        let v5916: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5908))),
                                            string(">move || { v5914 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5918: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v5914 }</circle> };
                        let v5920: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5918);
                        let v5928: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
                        let v5929: string = string("vec![]");
                        let v5930: Vec<leptos::prelude::AnyView> = vec![];
                        let v5932: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5930);
                        let v5934: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5932);
                        let v5936: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v5928))),
                                            string(">move || { v5934 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5938: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v5934 }</circle> };
                        let v5940: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5938);
                        let v5959: string =
                            string("vec![v5840, v5860, v5880, v5900, v5920, v5940]");
                        let v5960: Vec<leptos::prelude::AnyView> =
                            vec![v5840, v5860, v5880, v5900, v5920, v5940];
                        let v5962: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5960);
                        let v5964: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5962);
                        let v5966: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v5813))),
                                            string(">move || { v5964 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5968: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5801(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v5964 }</svg> };
                        let v5970: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5968);
                        let v5974: string = string("vec![v5970]");
                        let v5975: Vec<leptos::prelude::AnyView> = vec![v5970];
                        let v5977: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5975);
                        let v5978 = Func0::new({
                            let v4881 = v4881.clone();
                            move || Dice_ui::closure358(v4881.clone(), ())
                        });
                        {
                            let v5982 = {
                                let clo_49 = Func0::new({
                                    let v1509 = v1509.clone();
                                    move || Dice_ui::closure359(v1509.clone(), ())
                                });
                                Func1::new({
                                    let clo_49 = clo_49.clone();
                                    move |arg_49: ()| clo_49()
                                })
                            };
                            let v5985 = {
                                let clo_50 = Func0::new({
                                    let v1509 = v1509.clone();
                                    move || Dice_ui::closure360(v1509.clone(), ())
                                });
                                Func1::new({
                                    let clo_50 = clo_50.clone();
                                    move |arg_50: ()| clo_50()
                                })
                            };
                            let v5987: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v5985(())");
                            let v5991: string =
                                append((append(string(" aria-current=move || if v5982(()) { \"page\" } else { \"\" }"),
                                               (append((append((append(string(" "),
                                                                       (v5987))),
                                                               string(" href=move || v5978()"))),
                                                       string(""))))),
                                       string(""));
                            let v5993: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v5977);
                            let v5998: &str = &*string("Dice");
                            let v6022: std::string::String = String::from(v5998);
                            let v6043: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v6022),
                                );
                            let v6050: string = string("vec![v5993, v6043]");
                            let v6051: Vec<leptos::prelude::AnyView> = vec![v5993, v6043];
                            let v6053: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6051);
                            let v6055: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6053);
                            let v6057: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<a "), (v5991))),
                                                string(">move || { v6055 }</"),
                                            )),
                                            string("a"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6059: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v5982(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v5985(()) href=move || v5978()>move || { v6055 }</a> };
                            let v6061: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6059);
                            let v6074: string = string("vec![v6061, v5799, v5589, v5449]");
                            let v6075: Vec<leptos::prelude::AnyView> =
                                vec![v6061, v5799, v5589, v5449];
                            let v6077: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6075);
                            let v6079: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6077);
                            let v6082: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<nav "), (v5286))),
                                                string(">move || { v6079 }</"),
                                            )),
                                            string("nav"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6084: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Nav, _, _>,
                            > = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v6079 }</nav> };
                            let v6086: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6084);
                            let v6090: string = string("vec![v6086]");
                            let v6091: Vec<leptos::prelude::AnyView> = vec![v6086];
                            let v6093: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6091);
                            let v6095: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6093);
                            let v6097: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5282))),
                                                string(">move || { v6095 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6099: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v6095 }</div> };
                            let v6101: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6099);
                            let v6105: string = string("vec![v6101]");
                            let v6106: Vec<leptos::prelude::AnyView> = vec![v6101];
                            let v6108: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6106);
                            let v6110: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6108);
                            let v6112: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5280))),
                                                string(">move || { v6110 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6114: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v6110 }</div> };
                            let v6116: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6114);
                            let v6118: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v5278);
                            let v6125: string = string("vec![v6118, v6116]");
                            let v6126: Vec<leptos::prelude::AnyView> = vec![v6118, v6116];
                            let v6128: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6126);
                            let v6130: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6128);
                            let v6132: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4873))),
                                                string(">move || { v6130 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6134: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex">move || { v6130 }</div> };
                            let v6136: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6134);
                            let v6143: string = string("vec![v4871, v6136]");
                            let v6144: Vec<leptos::prelude::AnyView> = vec![v4871, v6136];
                            let v6146: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6144);
                            let v6148: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6146);
                            let v6150: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1817))),
                                                string(">move || { v6148 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6152: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v6148 }</div> };
                            let v6154: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6152);
                            let v6158: string = string("vec![v6154]");
                            let v6159: Vec<leptos::prelude::AnyView> = vec![v6154];
                            let v6161: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6159);
                            let v6163: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6161);
                            let v6165: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1815))),
                                                string(">move || { v6163 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6167: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v6163 }</div> };
                            let v6169: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6167);
                            let v6173: string = string("vec![v6169]");
                            let v6174: Vec<leptos::prelude::AnyView> = vec![v6169];
                            let v6176: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6174);
                            let v6178: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6176);
                            let v6180: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1490))),
                                                string(">move || { v6178 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            leptos::prelude::view! { <div  class:dark={move || v1486()} class="flex flex-1">move || { v6178 }</div> }
                        }
                    }
                }
            }
        }
        pub fn method5(
        ) -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method289(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure361(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method290(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure361(v0_1.clone(), ())
            })
        }
        pub fn closure362(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            leptos::prelude::Fragment::new(v2)
        }
        pub fn closure363(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method291(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure363(v0_1.clone(), ())
            })
        }
        pub fn closure364(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method292(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure364(v0_1.clone(), ())
            })
        }
        pub fn closure365(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method293(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure365(v0_1.clone(), ())
            })
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method5();
            let v6: &str = &*string("");
            let v50: std::string::String = Dice_ui::method289(String::from(v6));
            let v51 = Dice_ui::method290(v0_1.clone());
            let v61: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router::path!(v50) /> })");
            let v62: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v51() path=leptos_router::path!(v50) /> },
                );
            let v68: &str = &*string("/");
            let v112: std::string::String = Dice_ui::method289(String::from(v68));
            let v113 = Dice_ui::method291(v0_1.clone());
            let v121: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router::path!(v112) /> })");
            let v122: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v113() path=leptos_router::path!(v112) /> },
                );
            let v128: &str = &*string("/*");
            let v172: std::string::String = Dice_ui::method289(String::from(v128));
            let v173 = Dice_ui::method292(v0_1.clone());
            let v181: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router::path!(v172) /> })");
            let v182: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v173() path=leptos_router::path!(v172) /> },
                );
            let v188: &str = &*string("*");
            let v232: std::string::String = Dice_ui::method289(String::from(v188));
            let v233 = Dice_ui::method293(v0_1);
            let v241: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router::path!(v232) /> })");
            let v242: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v54()) view= move || v233() path=leptos_router::path!(v232) /> },
                );
            let v256: string = string("vec![v62, v122, v182, v242]");
            vec![v62, v122, v182, v242]
        }
        pub fn method4() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method294(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method294(Dice_ui::method4());
            let v7: &str = &*string("leptos.routes / fallback");
            let v31: std::string::String = String::from(v7);
            let v52: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v31));
            let v60: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> })");
            let v61 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v52 /> },
            );
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            leptos::prelude::Fragment::new(v68)
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v8: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v14: &str = &*string("");
            let v38: std::string::String = String::from(v14);
            let v59: leptos::prelude::ArcRwSignal<std::string::String> =
                leptos::prelude::ArcRwSignal::new(v38);
            let v65: &str = &*string("i574n.near");
            let v89: std::string::String = String::from(v65);
            let v115: &str = &*string("luckier.near");
            let v160: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v89)),
                LrcPtr::new((true, String::from(v115))),
            ]);
            let v165: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v160.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v168: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v59,
                l3: leptos::prelude::ArcRwSignal::new(v165),
            });
            let v170: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::ArcRwSignal::new(v168);
            let v172: std::collections::HashMap<
                std::string::String,
                leptos::prelude::ArcRwSignal<bool>,
            > = std::collections::HashMap::new();
            let v175: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v170,
                l1: leptos::prelude::ArcRwSignal::new(v172),
            });
            let v177: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v175);
            let v183: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> })");
            let v184 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v178()) /> },
            );
            leptos::prelude::IntoAny::into_any(v184)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure366(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method295() -> Func0<()> {
            Func0::new(move || Dice_ui::closure366((), ()))
        }
        pub fn method296(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(
                (append(string("main / args: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v21: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v28: string = append(
                    (append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v21.clone()),
                    )),
                    string(""),
                );
                let v30: bool = true;
                leptos::logging::log!("{}", v28);
                if let Dice_ui::US0::US0_0(v21_0_0) = &v21 {
                    let v32: string = Dice_ui::method1();
                    let v37: &str = &*v32;
                    let v57: web_sys::HtmlElement = Dice_ui::method2(v21_0_0.clone());
                    v57.set_inner_html(v37);
                    Dice_ui::method3()
                } else {
                    let v59 = Dice_ui::method295();
                    let v62: Box<dyn Fn()> = Dice_ui::method296(Box::new(move || v59()));
                    let v64: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v62);
                    let v66: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v64);
                    let v68: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v66);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v68)
                        .unwrap();
                    v64.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_9c940d83::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/async__wasm.rs"]
mod module_763b9e6c;
pub use module_763b9e6c::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/common_wasm.rs"]
mod module_18f1c018;
pub use module_18f1c018::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/crypto_wasm.rs"]
mod module_c0301e36;
pub use module_c0301e36::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/date_time_wasm.rs"]
mod module_e5abed0b;
pub use module_e5abed0b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/file_system_wasm.rs"]
mod module_336d1dc9;
pub use module_336d1dc9::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/lib_wasm.rs"]
mod module_12dde172;
pub use module_12dde172::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/networking_wasm.rs"]
mod module_7e35832b;
pub use module_7e35832b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/platform_wasm.rs"]
mod module_afd02cca;
pub use module_afd02cca::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/runtime_wasm.rs"]
mod module_a3c64389;
pub use module_a3c64389::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/sm_wasm.rs"]
mod module_8f227ecb;
pub use module_8f227ecb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/threading_wasm.rs"]
mod module_e08c16fb;
pub use module_e08c16fb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/trace_wasm.rs"]
mod module_702ddcb4;
pub use module_702ddcb4::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_eb7e4788;
pub use module_eb7e4788::*;
pub mod Polyglot {
    // pub use crate::module_eb7e4788::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
