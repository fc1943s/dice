#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unreachable_code)]
#![allow(unused_attributes)]
#![allow(unused_imports)]
#![allow(unused_macros)]
#![allow(unused_parens)]
#![allow(unused_variables)]
#![allow(unused_assignments)]
use fable_library_rust::NativeArray_::array_from;
use fable_library_rust::String_::fromString;
mod module_9c940d83 {
    pub mod Dice_ui {
        use super::*;
        use fable_library_rust::Array_::tryItem;
        use fable_library_rust::Convert_::toInt32;
        use fable_library_rust::Convert_::toInt64;
        use fable_library_rust::List_::foldBack;
        use fable_library_rust::List_::ofArray as ofArray_1;
        use fable_library_rust::List_::List;
        use fable_library_rust::NativeArray_::get_Count;
        use fable_library_rust::NativeArray_::new_array;
        use fable_library_rust::NativeArray_::new_empty;
        use fable_library_rust::NativeArray_::new_init;
        use fable_library_rust::NativeArray_::Array;
        use fable_library_rust::Native_::getNull;
        use fable_library_rust::Native_::on_startup;
        use fable_library_rust::Native_::Any;
        use fable_library_rust::Native_::Func0;
        use fable_library_rust::Native_::Func1;
        use fable_library_rust::Native_::Func2;
        use fable_library_rust::Native_::LrcPtr;
        use fable_library_rust::Native_::MutCell;
        use fable_library_rust::Native_::OnceInit;
        use fable_library_rust::Option_::defaultValue;
        use fable_library_rust::Option_::map;
        use fable_library_rust::Seq_::delay;
        use fable_library_rust::Seq_::ofArray;
        use fable_library_rust::Seq_::ofList;
        use fable_library_rust::Seq_::toArray;
        use fable_library_rust::String_::append;
        use fable_library_rust::String_::concat;
        use fable_library_rust::String_::contains;
        use fable_library_rust::String_::getSlice;
        use fable_library_rust::String_::join;
        use fable_library_rust::String_::length;
        use fable_library_rust::String_::ofBoolean;
        use fable_library_rust::String_::replace;
        use fable_library_rust::String_::split;
        use fable_library_rust::String_::sprintf;
        use fable_library_rust::String_::startsWith3;
        use fable_library_rust::String_::string;
        use fable_library_rust::String_::toString;
        use fable_library_rust::System::Collections::Generic::IEnumerable_1;
        on_startup!();
        use leptos::prelude::*;
        //,);
        on_startup!();
        use leptos::prelude::ElementChild;
        //,);
        on_startup!();
        use leptos::prelude::ClassAttribute;
        //,);
        #[derive(Clone, Debug)]
        pub enum US0 {
            US0_0(web_sys::HtmlElement),
            US0_1,
        }
        impl core::fmt::Display for US0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            Hash,
            PartialEq,
            PartialOrd,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub enum US1 {
            #[default]
            US1_0,
            US1_1,
        }
        impl core::fmt::Display for US1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            Default,
        )]
        pub struct Heap0 {
            pub l0: Vec<LrcPtr<(bool, std::string::String)>>,
            pub l1: Option<std::string::String>,
            pub l2: i32,
            pub l3: i32,
            pub l4: Dice_ui::US1,
        }
        impl core::fmt::Display for Heap0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap1 {
            pub l0: leptos::prelude::ArcRwSignal<bool>,
            pub l1: leptos::prelude::ArcRwSignal<bool>,
            pub l2: leptos::prelude::ArcRwSignal<std::string::String>,
            pub l3: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>,
        }
        impl core::fmt::Display for Heap1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, serde::Serialize)]
        pub struct Heap2 {
            pub l0: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>,
            pub l1: leptos::prelude::ArcRwSignal<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            >,
        }
        impl core::fmt::Display for Heap2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US2 {
            US2_0(std::sync::Arc<rexie::Rexie>),
            US2_1,
        }
        impl core::fmt::Display for US2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
        )]
        pub struct Heap3 {
            pub l0: bool,
            pub l1: bool,
            pub l2: std::string::String,
            pub l3: LrcPtr<Dice_ui::Heap0>,
        }
        impl core::fmt::Display for Heap3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US3 {
            US3_0(Option<LrcPtr<Dice_ui::Heap3>>),
            US3_1,
        }
        impl core::fmt::Display for US3 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US4 {
            US4_0(wasm_bindgen::JsValue),
            US4_1,
        }
        impl core::fmt::Display for US4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US5 {
            US5_0(serde_json::Value),
            US5_1,
        }
        impl core::fmt::Display for US5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US6 {
            US6_0(Option<Option<LrcPtr<Dice_ui::Heap3>>>),
            US6_1(std::string::String),
        }
        impl core::fmt::Display for US6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US8 {
            US8_0(LrcPtr<Dice_ui::Heap3>),
            US8_1,
        }
        impl core::fmt::Display for US8 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US7 {
            US7_0(Dice_ui::US8),
            US7_1,
        }
        impl core::fmt::Display for US7 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US9 {
            US9_0(Option<web_sys::Storage>),
            US9_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US9 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US11 {
            US11_0(web_sys::Storage),
            US11_1,
        }
        impl core::fmt::Display for US11 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US10 {
            US10_0(Dice_ui::US11),
            US10_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US10 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US12 {
            US12_0(Option<std::string::String>),
            US12_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US12 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US14 {
            US14_0(std::string::String),
            US14_1,
        }
        impl core::fmt::Display for US14 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US13 {
            US13_0(Dice_ui::US14),
            US13_1(wasm_bindgen::JsValue),
        }
        impl core::fmt::Display for US13 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US15 {
            US15_0(Dice_ui::US14),
            US15_1,
        }
        impl core::fmt::Display for US15 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US16 {
            US16_0(leptos::prelude::ArcRwSignal<bool>),
            US16_1,
        }
        impl core::fmt::Display for US16 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US17 {
            US17_0(bool),
            US17_1,
        }
        impl core::fmt::Display for US17 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US19 {
            US19_0,
        }
        impl core::fmt::Display for US19 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US18 {
            US18_0,
            US18_1(Dice_ui::US19),
            US18_2,
            US18_3,
            US18_4,
        }
        impl core::fmt::Display for US18 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US20 {
            US20_0(leptos_router::location::Url),
            US20_1(std::string::String),
        }
        impl core::fmt::Display for US20 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US21 {
            US21_0(Dice_ui::US18),
            US21_1,
        }
        impl core::fmt::Display for US21 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US22 {
            US22_0(leptos::prelude::Fragment),
            US22_1,
        }
        impl core::fmt::Display for US22 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US23 {
            US23_0,
            US23_1,
        }
        impl core::fmt::Display for US23 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut0 {
            pub l0: MutCell<i32>,
        }
        impl core::fmt::Display for Mut0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH0 {
            UH0_0,
            UH0_1(
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
                LrcPtr<Dice_ui::UH0>,
            ),
        }
        impl core::fmt::Display for UH0 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum UH1 {
            UH1_0,
            UH1_1(Vec<string>, LrcPtr<Dice_ui::UH1>),
        }
        impl core::fmt::Display for UH1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(
            Clone,
            Debug,
            serde::Serialize,
            serde::Deserialize,
            borsh::BorshSerialize,
            borsh::BorshDeserialize,
            PartialEq,
            PartialOrd,
            Hash,
            Eq,
        )]
        pub struct Heap4 {
            pub l0: std::string::String,
        }
        impl core::fmt::Display for Heap4 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US24 {
            US24_0(Vec<Option<LrcPtr<Dice_ui::Heap4>>>),
            US24_1(std::string::String),
        }
        impl core::fmt::Display for US24 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US25 {
            US25_0(LrcPtr<Dice_ui::Heap4>),
            US25_1,
        }
        impl core::fmt::Display for US25 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US26 {
            US26_0(Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>),
            US26_1,
        }
        impl core::fmt::Display for US26 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US28 {
            US28_0(Vec<Dice_ui::US25>),
            US28_1(std::string::String),
        }
        impl core::fmt::Display for US28 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US27 {
            US27_0(Dice_ui::US28),
            US27_1,
        }
        impl core::fmt::Display for US27 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US31 {
            US31_0(string),
            US31_1,
        }
        impl core::fmt::Display for US31 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US30 {
            US30_0(Dice_ui::US31),
            US30_1(std::string::String),
        }
        impl core::fmt::Display for US30 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US29 {
            US29_0(Dice_ui::US30),
            US29_1,
        }
        impl core::fmt::Display for US29 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US32 {
            US32_0(Dice_ui::US25),
            US32_1,
        }
        impl core::fmt::Display for US32 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US33 {
            US33_0(Option<string>),
            US33_1(std::string::String),
        }
        impl core::fmt::Display for US33 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US34 {
            US34_0(Vec<()>),
            US34_1(std::string::String),
        }
        impl core::fmt::Display for US34 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US36 {
            US36_0(Array<Dice_ui::US25>),
            US36_1(std::string::String),
        }
        impl core::fmt::Display for US36 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US35 {
            US35_0(Dice_ui::US36),
            US35_1,
        }
        impl core::fmt::Display for US35 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US37 {
            US37_0(Result<Vec<Option<string>>, std::string::String>),
            US37_1,
        }
        impl core::fmt::Display for US37 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US39 {
            US39_0(Vec<Option<string>>),
            US39_1(std::string::String),
        }
        impl core::fmt::Display for US39 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US38 {
            US38_0(Dice_ui::US39),
            US38_1,
        }
        impl core::fmt::Display for US38 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US41 {
            US41_0(Vec<Dice_ui::US31>),
            US41_1(std::string::String),
        }
        impl core::fmt::Display for US41 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US40 {
            US40_0(Dice_ui::US41),
            US40_1,
        }
        impl core::fmt::Display for US40 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US42 {
            US42_0(Dice_ui::US31),
            US42_1,
        }
        impl core::fmt::Display for US42 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, PartialEq)]
        pub struct Heap5 {
            pub l0: std::string::String,
            pub l1: std::string::String,
            pub l2: std::string::String,
            pub l3: std::string::String,
            pub l4: std::string::String,
            pub l5: std::string::String,
            pub l6: u32,
            pub l7: Array<(std::string::String, Option<std::string::String>)>,
            pub l8: f64,
            pub l9: bool,
            pub l10: f64,
            pub l11: Array<std::string::String>,
        }
        impl core::fmt::Display for Heap5 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US43 {
            US43_0(
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
            ),
            US43_1(std::string::String),
        }
        impl core::fmt::Display for US43 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US45 {
            US45_0(
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            ),
            US45_1,
        }
        impl core::fmt::Display for US45 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US44 {
            US44_0(Dice_ui::US45),
            US44_1(std::string::String),
        }
        impl core::fmt::Display for US44 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US47 {
            US47_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US47_1,
        }
        impl core::fmt::Display for US47 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US46 {
            US46_0(Dice_ui::US47),
            US46_1(std::string::String),
        }
        impl core::fmt::Display for US46 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US49 {
            US49_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US49_1,
        }
        impl core::fmt::Display for US49 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US48 {
            US48_0(Dice_ui::US49),
            US48_1(std::string::String),
        }
        impl core::fmt::Display for US48 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US50 {
            US50_0(Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US50_1(std::string::String),
        }
        impl core::fmt::Display for US50 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum UH2 {
            UH2_0,
            UH2_1(
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
                LrcPtr<Dice_ui::UH2>,
            ),
        }
        impl core::fmt::Display for UH2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut1 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<LrcPtr<Dice_ui::UH2>>,
        }
        impl core::fmt::Display for Mut1 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US51 {
            US51_0(Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US51_1(std::string::String),
        }
        impl core::fmt::Display for US51 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US52 {
            US52_0(Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>),
            US52_1(std::string::String),
        }
        impl core::fmt::Display for US52 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US53 {
            US53_0(Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>),
            US53_1(std::string::String),
        }
        impl core::fmt::Display for US53 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US55 {
            US55_0(Array<(string, Dice_ui::US23, string, bool, bool)>),
            US55_1,
        }
        impl core::fmt::Display for US55 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US54 {
            US54_0(Dice_ui::US55),
            US54_1(std::string::String),
        }
        impl core::fmt::Display for US54 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US56 {
            US56_0(Option<Array<(string, Dice_ui::US23, string, bool, bool)>>),
            US56_1(std::string::String),
        }
        impl core::fmt::Display for US56 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Heap6 {
            pub l0: i32,
        }
        impl core::fmt::Display for Heap6 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US57 {
            US57_0(Dice_ui::US14),
            US57_1(std::string::String),
        }
        impl core::fmt::Display for US57 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US59 {
            US59_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US59_1,
        }
        impl core::fmt::Display for US59 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US58 {
            US58_0(Dice_ui::US59),
            US58_1(std::string::String),
        }
        impl core::fmt::Display for US58 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US60 {
            US60_0(crate::model::near::rpc::RpcResponse),
            US60_1(std::string::String),
        }
        impl core::fmt::Display for US60 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US61 {
            US61_0(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            US61_1(std::string::String),
        }
        impl core::fmt::Display for US61 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US62 {
            US62_0(Dice_ui::US58),
            US62_1,
        }
        impl core::fmt::Display for US62 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US63 {
            US63_0(
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
            ),
            US63_1(std::string::String),
        }
        impl core::fmt::Display for US63 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US64 {
            US64_0(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            US64_1,
        }
        impl core::fmt::Display for US64 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US65 {
            US65_0(leptos::prelude::ArcMemo<Dice_ui::US31>),
            US65_1,
        }
        impl core::fmt::Display for US65 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US66 {
            US66_0(
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            ),
            US66_1,
        }
        impl core::fmt::Display for US66 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US67 {
            US67_0(Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>),
            US67_1,
        }
        impl core::fmt::Display for US67 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US68 {
            US68_0(chrono::DateTime<chrono::Utc>),
            US68_1,
        }
        impl core::fmt::Display for US68 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub enum US69 {
            US69_0(string),
            US69_1(string),
        }
        impl core::fmt::Display for US69 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug, Hash, PartialEq, PartialOrd)]
        pub struct Mut2 {
            pub l0: MutCell<i32>,
            pub l1: MutCell<Dice_ui::US31>,
        }
        impl core::fmt::Display for Mut2 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        #[derive(Clone, Debug)]
        pub enum US70 {
            US70_0(std::string::String),
            US70_1(std::string::String),
        }
        impl core::fmt::Display for US70 {
            fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
                write!(f, "{}", core::any::type_name::<Self>())
            }
        }
        pub fn closure1(unitVar: (), v0_1: web_sys::HtmlElement) -> Dice_ui::US0 {
            Dice_ui::US0::US0_0(v0_1)
        }
        pub fn method0() -> Func1<web_sys::HtmlElement, Dice_ui::US0> {
            Func1::new(move |v: web_sys::HtmlElement| Dice_ui::closure1((), v))
        }
        pub fn method1() -> string {
            string("")
        }
        pub fn method2(v0_1: web_sys::HtmlElement) -> web_sys::HtmlElement {
            v0_1
        }
        pub fn closure6(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method6() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure6((), v))
        }
        pub fn closure7(unitVar: (), v0_1: rexie::Rexie) -> rexie::Rexie {
            v0_1
        }
        pub fn method7() -> Func1<rexie::Rexie, rexie::Rexie> {
            Func1::new(move |v: rexie::Rexie| Dice_ui::closure7((), v))
        }
        pub fn method8(v0_1: i64, v1: string) -> string {
            let v2: i64 = length(v1.clone()) as i64;
            if (v2) <= (v0_1) {
                v1.clone()
            } else {
                let v9: f64 = (v0_1 as f64) / 2.0_f64;
                let v14: i64 = v9.ceil() as i64;
                let v21: i64 = v9.floor() as i64;
                join(
                    string(""),
                    toArray(ofArray(new_array(&[
                        getSlice(v1.clone(), Some(0_i64 as i32), Some(((v14) - 1_i64) as i32)),
                        string("..."),
                        getSlice(v1, Some(((v2) - (v21)) as i32), Some(((v2) - 1_i64) as i32)),
                    ]))),
                )
            }
        }
        pub fn closure8(unitVar: (), unitVar_1: ()) {} //;
        #[derive(
            //;
            Debug, //;
            Clone, //;
        )] //;
        pub struct PartialEqWrapper<T>(T); /*;
                                            */
        impl PartialEq
            for PartialEqWrapper<
                /*;
                {
                    let v8: */
                std::sync::Arc<rexie::Rexie>, /* = fable_library_rust::Native_::getZero();
                                               */
            >
        {
            //;
            fn eq(&self, other: &Self) -> bool {
                //;
                {
                    let v14: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = self;
                    let v16: &PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = other;
                    let v18: &std::sync::Arc<rexie::Rexie> = &v16.0;
                    let v20: &std::sync::Arc<rexie::Rexie> = &v14.0;
                    let v22: bool = std::sync::Arc::ptr_eq(v20, v18);
                    v22 //;
                }
            }
        }
        fn _main() {
            {
                {
                    //;
                    ()
                }
            }
        }
        pub fn closure9(unitVar: (), v0_1: std::sync::Arc<rexie::Rexie>) -> Dice_ui::US2 {
            Dice_ui::US2::US2_0(v0_1)
        }
        pub fn method9() -> Func1<std::sync::Arc<rexie::Rexie>, Dice_ui::US2> {
            Func1::new(move |v: std::sync::Arc<rexie::Rexie>| Dice_ui::closure9((), v))
        }
        pub fn method10(
            v0_1: Func1<string, std::string::String>,
        ) -> Func1<string, std::string::String> {
            v0_1
        }
        pub fn closure10(
            v0_1: Func1<string, std::string::String>,
            v1: string,
        ) -> std::string::String {
            let v2: Func1<string, std::string::String> = Dice_ui::method10(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method11(v0_1: std::sync::Arc<rexie::Rexie>) -> std::sync::Arc<rexie::Rexie> {
            v0_1
        }
        pub fn closure11(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method12() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure11((), v))
        }
        pub fn method13() -> string {
            string("store")
        }
        pub fn closure12(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method14() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure12((), v))
        }
        pub fn method15() -> string {
            string("core-state-heap")
        }
        pub fn closure13(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method16() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure13((), v))
        }
        pub fn closure14(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US4 {
            Dice_ui::US4::US4_0(v0_1)
        }
        pub fn method17() -> Func1<wasm_bindgen::JsValue, Dice_ui::US4> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure14((), v))
        }
        pub fn method18(v0_1: wasm_bindgen::JsValue) -> wasm_bindgen::JsValue {
            v0_1
        }
        pub fn closure15(unitVar: (), v0_1: serde_wasm_bindgen::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method19() -> Func1<serde_wasm_bindgen::Error, std::string::String> {
            Func1::new(move |v: serde_wasm_bindgen::Error| Dice_ui::closure15((), v))
        }
        pub fn closure16(unitVar: (), v0_1: serde_json::Value) -> Dice_ui::US5 {
            Dice_ui::US5::US5_0(v0_1)
        }
        pub fn method20() -> Func1<serde_json::Value, Dice_ui::US5> {
            Func1::new(move |v: serde_json::Value| Dice_ui::closure16((), v))
        }
        pub fn method21(v0_1: serde_json::Value) -> serde_json::Value {
            v0_1
        }
        pub fn closure17(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method22() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure17((), v))
        }
        pub fn closure18(unitVar: (), v0_1: borsh::io::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method23() -> Func1<borsh::io::Error, std::string::String> {
            Func1::new(move |v: borsh::io::Error| Dice_ui::closure18((), v))
        }
        pub fn closure19(
            unitVar: (),
            v0_1: Option<Option<LrcPtr<Dice_ui::Heap3>>>,
        ) -> Dice_ui::US6 {
            Dice_ui::US6::US6_0(v0_1)
        }
        pub fn method24() -> Func1<Option<Option<LrcPtr<Dice_ui::Heap3>>>, Dice_ui::US6> {
            Func1::new(move |v: Option<Option<LrcPtr<Dice_ui::Heap3>>>| Dice_ui::closure19((), v))
        }
        pub fn closure20(unitVar: (), v0_1: std::string::String) -> Dice_ui::US6 {
            Dice_ui::US6::US6_1(v0_1)
        }
        pub fn method25() -> Func1<std::string::String, Dice_ui::US6> {
            Func1::new(move |v: std::string::String| Dice_ui::closure20((), v))
        }
        pub fn closure21(unitVar: (), v0_1: Option<LrcPtr<Dice_ui::Heap3>>) -> Dice_ui::US3 {
            Dice_ui::US3::US3_0(v0_1)
        }
        pub fn method26() -> Func1<Option<LrcPtr<Dice_ui::Heap3>>, Dice_ui::US3> {
            Func1::new(move |v: Option<LrcPtr<Dice_ui::Heap3>>| Dice_ui::closure21((), v))
        }
        pub fn closure22(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap3>) -> Dice_ui::US8 {
            Dice_ui::US8::US8_0(v0_1)
        }
        pub fn method27() -> Func1<LrcPtr<Dice_ui::Heap3>, Dice_ui::US8> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure22((), v))
        }
        pub fn method28() -> web_sys::Window {
            leptos::prelude::window()
        }
        pub fn method29(
            v0_1: web_sys::Window,
        ) -> Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> {
            v0_1.local_storage()
        }
        pub fn closure23(unitVar: (), v0_1: Option<web_sys::Storage>) -> Dice_ui::US9 {
            Dice_ui::US9::US9_0(v0_1)
        }
        pub fn method30() -> Func1<Option<web_sys::Storage>, Dice_ui::US9> {
            Func1::new(move |v: Option<web_sys::Storage>| Dice_ui::closure23((), v))
        }
        pub fn closure24(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US9 {
            Dice_ui::US9::US9_1(v0_1)
        }
        pub fn method31() -> Func1<wasm_bindgen::JsValue, Dice_ui::US9> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure24((), v))
        }
        pub fn closure25(unitVar: (), v0_1: web_sys::Storage) -> Dice_ui::US11 {
            Dice_ui::US11::US11_0(v0_1)
        }
        pub fn method32() -> Func1<web_sys::Storage, Dice_ui::US11> {
            Func1::new(move |v: web_sys::Storage| Dice_ui::closure25((), v))
        }
        pub fn closure26(unitVar: (), v0_1: Dice_ui::US8) -> Dice_ui::US7 {
            Dice_ui::US7::US7_0(v0_1)
        }
        pub fn method33() -> Func1<Dice_ui::US8, Dice_ui::US7> {
            Func1::new(move |v: Dice_ui::US8| Dice_ui::closure26((), v))
        }
        pub fn method34(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method35() -> string {
            string("core-state-heap")
        }
        pub fn closure27(unitVar: (), v0_1: Option<std::string::String>) -> Dice_ui::US12 {
            Dice_ui::US12::US12_0(v0_1)
        }
        pub fn method36() -> Func1<Option<std::string::String>, Dice_ui::US12> {
            Func1::new(move |v: Option<std::string::String>| Dice_ui::closure27((), v))
        }
        pub fn closure28(unitVar: (), v0_1: wasm_bindgen::JsValue) -> Dice_ui::US12 {
            Dice_ui::US12::US12_1(v0_1)
        }
        pub fn method37() -> Func1<wasm_bindgen::JsValue, Dice_ui::US12> {
            Func1::new(move |v: wasm_bindgen::JsValue| Dice_ui::closure28((), v))
        }
        pub fn method38(v0_1: Option<std::string::String>) -> Option<std::string::String> {
            v0_1
        }
        pub fn closure29(unitVar: (), v0_1: std::string::String) -> Dice_ui::US14 {
            Dice_ui::US14::US14_0(v0_1)
        }
        pub fn method39() -> Func1<std::string::String, Dice_ui::US14> {
            Func1::new(move |v: std::string::String| Dice_ui::closure29((), v))
        }
        pub fn method41(v0_1: string) -> string {
            v0_1
        }
        pub fn closure31(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method42() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure31((), v))
        }
        pub fn closure30(unitVar: (), v0_1: std::string::String) -> Dice_ui::US8 {
            let v3: string = Dice_ui::method41(fable_library_rust::String_::fromString(v0_1));
            let v12: &str = &*v3;
            let v38: Result<LrcPtr<Dice_ui::Heap3>, serde_json::Error> = serde_json::from_str(&v12);
            let v39 = Dice_ui::method42();
            let v45: Result<LrcPtr<Dice_ui::Heap3>, std::string::String> = v38.map_err(|x| v39(x));
            let v60: Option<LrcPtr<Dice_ui::Heap3>> = v45.ok();
            defaultValue(Dice_ui::US8::US8_1, map(Dice_ui::method27(), v60))
        }
        pub fn method40() -> Func1<std::string::String, Dice_ui::US8> {
            Func1::new(move |v: std::string::String| Dice_ui::closure30((), v))
        }
        pub fn closure32(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (7) / effect core_state_heap / dark_mode signal_update"));
            v0_1.l0
        }
        pub fn closure33(v0_1: LrcPtr<Dice_ui::Heap3>, v1: bool) -> bool {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (8) / effect core_state_heap / debug signal_update"));
            v0_1.l1
        }
        pub fn closure34(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: std::string::String,
        ) -> std::string::String {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (9) / effect core_state_heap / url_hash signal_update"));
            v0_1.l2.clone()
        }
        pub fn closure35(
            v0_1: LrcPtr<Dice_ui::Heap3>,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (10) / effect core_state_heap / data signal_update"));
            v0_1.l3.clone()
        }
        pub fn closure36(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>
        {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_core_database (11) / loading new_arc_memo")
            );
            let v6: std::pin::Pin<
                Box<
                    leptos::prelude::ArcRwSignal<
                        std::collections::HashMap<
                            std::string::String,
                            leptos::prelude::ArcRwSignal<bool>,
                        >,
                    >,
                >,
            > = Box::pin(v0_1.l1.clone());
            leptos::prelude::ArcRwSignal::get_untracked(&v6)
        }
        pub fn method43() -> string {
            string("core-state-heap")
        }
        pub fn method44(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
        ) -> Func1<LrcPtr<Dice_ui::Heap3>, std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>>
        {
            v0_1
        }
        pub fn closure37(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            >,
            v1: LrcPtr<Dice_ui::Heap3>,
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = Dice_ui::method44(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method45(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure38(unitVar: (), v0_1: leptos::prelude::ArcRwSignal<bool>) -> Dice_ui::US16 {
            Dice_ui::US16::US16_0(v0_1)
        }
        pub fn method46() -> Func1<leptos::prelude::ArcRwSignal<bool>, Dice_ui::US16> {
            Func1::new(move |v: leptos::prelude::ArcRwSignal<bool>| Dice_ui::closure38((), v))
        }
        pub fn closure39(unitVar: (), v0_1: bool) -> bool {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (17) / effect new_core_state_heap / set_loaded |> signal_update true"));
            true
        }
        pub fn method47(v0_1: web_sys::Storage) -> web_sys::Storage {
            v0_1
        }
        pub fn method48() -> string {
            string("core-state-heap")
        }
        pub fn method49(v0_1: LrcPtr<Dice_ui::Heap3>) -> LrcPtr<Dice_ui::Heap3> {
            v0_1
        }
        pub fn closure40(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method50(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure40(v0_1.clone(), ())
            })
        }
        pub fn closure41(v0_1: leptos_router::location::Location, unitVar: ()) -> string {
            let v2: leptos::prelude::Memo<std::string::String> = v0_1.clone().pathname;
            let v4: std::string::String = leptos::prelude::Memo::get(&v2);
            let v6: string = fable_library_rust::String_::fromString(v4);
            let v8: leptos::prelude::Memo<std::string::String> = v0_1.search;
            let v10: std::string::String = leptos::prelude::Memo::get(&v8);
            let v12: string = fable_library_rust::String_::fromString(v10);
            append(
                (v6),
                (if (v12.clone()) == string("") {
                    string("")
                } else {
                    concat(new_array(&[string("?"), v12]))
                }),
            )
        }
        pub fn method51(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method52(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure42(unitVar: (), v0_1: leptos_router::location::Url) -> Dice_ui::US20 {
            Dice_ui::US20::US20_0(v0_1)
        }
        pub fn method53() -> Func1<leptos_router::location::Url, Dice_ui::US20> {
            Func1::new(move |v: leptos_router::location::Url| Dice_ui::closure42((), v))
        }
        pub fn closure43(unitVar: (), v0_1: std::string::String) -> Dice_ui::US20 {
            Dice_ui::US20::US20_1(v0_1)
        }
        pub fn method54() -> Func1<std::string::String, Dice_ui::US20> {
            Func1::new(move |v: std::string::String| Dice_ui::closure43((), v))
        }
        pub fn closure45(unitVar: (), _arg: (bool, std::string::String)) -> bool {
            _arg.0.clone()
        }
        pub fn method55() -> Func1<(bool, std::string::String), bool> {
            Func1::new(move |arg10_0040: (bool, std::string::String)| {
                Dice_ui::closure45((), arg10_0040)
            })
        }
        pub fn method56(
            v0_1: Vec<(bool, std::string::String)>,
        ) -> Vec<(bool, std::string::String)> {
            v0_1
        }
        pub fn closure44(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Vec<string> {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v5.l3.clone());
            let v10: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v8);
            let v13: bool = true;
            let _vec_map: Vec<_> = v10
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    //;
                    let v15: LrcPtr<(bool, std::string::String)> = x;
                    let v25: bool = true;
                    v15.0.clone()
                })
                .collect::<Vec<_>>();
            let v27: Vec<(bool, std::string::String)> = _vec_map;
            let v28 = Dice_ui::method55();
            let v29: Vec<(bool, std::string::String)> = Dice_ui::method56(v27);
            let v31: Vec<(bool, std::string::String)> = v29
                .into_iter()
                .filter(|x| v28(x.clone().clone()))
                .collect::<Vec<_>>();
            let v33: bool = true;
            let _vec_map: Vec<_> = v31
                .into_iter()
                .map(|x| {
                    //;
                    let patternInput: (bool, std::string::String) = x;
                    let v38: bool = true;
                    patternInput.1.clone()
                })
                .collect::<Vec<_>>();
            let v40: Vec<std::string::String> = _vec_map;
            let v42: bool = true;
            let _vec_map: Vec<_> = v40
                .into_iter()
                .map(|x| {
                    //;
                    let v44: std::string::String = x;
                    let v46: string = fable_library_rust::String_::fromString(v44);
                    let v48: bool = true;
                    v46
                })
                .collect::<Vec<_>>();
            let v50: Vec<string> = _vec_map;
            let v57: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("use_transactions.render (2) / accounts new_arc_memo / result: "),
                        sprintf!("{:?}", v50.clone()),
                    )),
                    string(""),
                ),
            );
            let v59: bool = true;
            leptos::logging::log!("{}", v57);
            v50
        }
        pub fn method57(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure47(
            v0_1: Func1<string, (string, Dice_ui::US23, string, bool, bool)>,
            v1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<string, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method57(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn closure46(
            v0_1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Array<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<string> = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v8: string = append(
                    (append(string("https://api3.nearblocks.io/v1/account/"), (value))),
                    string(""),
                );
                let v13: bool = true;
                (v8, Dice_ui::US23::US23_0, string(""), false, true) /*;
                                                                     let v15: bool = */
            }); //;
            let v17: Func1<string, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v3;
            let v20: Vec<(string, Dice_ui::US23, string, bool, bool)> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v17 = v17.clone();
                        move |v: string| Dice_ui::closure47(v17.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v22: Array<(string, Dice_ui::US23, string, bool, bool)> =
                fable_library_rust::NativeArray_::array_from(v20.clone());
            let v29: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (3) / accounts_metadata new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v22.clone()))),
                                        string("")));
            let v31: bool = true;
            leptos::logging::log!("{}", v29);
            v22
        }
        pub fn method59(v0_1: i32, v1: LrcPtr<Dice_ui::Mut0>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn method58(v0_1: LrcPtr<Dice_ui::Heap0>) -> Vec<i32> {
            let v1: i32 = v0_1.l3;
            let v2: Array<i32> = new_init(&0_i32, v1);
            let v3: LrcPtr<Dice_ui::Mut0> = LrcPtr::new(Dice_ui::Mut0 {
                l0: MutCell::new(0_i32),
            });
            while Dice_ui::method59(v1, v3.clone()) {
                let v5: i32 = v3.l0.get().clone();
                v2.get_mut()[v5 as usize] = v5;
                {
                    let v6: i32 = (v5) + 1_i32;
                    v3.l0.set(v6);
                    ()
                }
            }
            v2.clone().to_vec()
        }
        pub fn method60(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<i32, (string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn closure49(
            v0_1: Func1<i32, (string, Dice_ui::US23, string, bool, bool)>,
            v1: i32,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            let v2: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> =
                Dice_ui::method60(v0_1);
            let patternInput: (string, Dice_ui::US23, string, bool, bool) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
            )
        }
        pub fn method61(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
        ) -> Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            v0_1
        }
        pub fn closure50(
            v0_1: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            v1: string,
        ) -> (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) {
            let v2: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                Dice_ui::method61(v0_1);
            let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure48(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<Vec<string>>,
            unitVar: (),
        ) -> Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v6.l3.clone());
            let v11: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v9);
            let v13: Vec<string> = leptos::prelude::ArcMemo::get(&v1);
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: string = value;
                let v19: Vec<i32> = Dice_ui::method58(v11);
                let v22: bool = true;
                let _func1_from_v20 = Func1::from(move |value| {
                    //;
                    let v26: string = append(
                        (append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            string("https://api3.nearblocks.io/v1/account/"),
                                            (v18.clone()),
                                        )),
                                        string("/txns?&order=desc&page="),
                                    )),
                                    (toString((value) + 1_i32)),
                                )),
                                string("&per_page="),
                            )),
                            (toString(25_i32)),
                        )),
                        string(""),
                    );
                    let v31: bool = true;
                    (v26, Dice_ui::US23::US23_0, string(""), false, true) /*;
                                                                          let v33: bool = */
                }); //;
                let v35: Func1<i32, (string, Dice_ui::US23, string, bool, bool)> = _func1_from_v20;
                let v38: Vec<(string, Dice_ui::US23, string, bool, bool)> = v19
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v35 = v35.clone();
                            move |v: i32| Dice_ui::closure49(v35.clone(), v)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v41: bool = true;
                (v18, v38) /*;
                           let v43: bool = */
            }); //;
            let v45: Func1<string, (string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                _func1_from_v14;
            let v48: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v45 = v45.clone();
                        move |v_1: string| Dice_ui::closure50(v45.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v55: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("use_transactions.render (4) / accounts_requests new_arc_memo / result: "),
                                                sprintf!("{:?}",
                                                         v48.clone()))),
                                        string("")));
            let v57: bool = true;
            leptos::logging::log!("{}", v55);
            v48
        }
        pub fn method62(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
        ) -> Func1<
            (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
        > {
            v0_1
        }
        pub fn closure52(
            v0_1: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            >,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v3: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = Dice_ui::method62(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure54(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
            v1: LrcPtr<Dice_ui::UH0>,
        ) -> LrcPtr<Dice_ui::UH0> {
            LrcPtr::new(Dice_ui::UH0::UH0_1(v0_1, v1))
        }
        pub fn closure53(
            unitVar: (),
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH0>| Dice_ui::closure54(v0_1.clone(), v)
            })
        }
        pub fn method63() -> Func1<
            Vec<(string, Dice_ui::US23, string, bool, bool)>,
            Func1<LrcPtr<Dice_ui::UH0>, LrcPtr<Dice_ui::UH0>>,
        > {
            Func1::new(move |v: Vec<(string, Dice_ui::US23, string, bool, bool)>| {
                Dice_ui::closure53((), v)
            })
        }
        pub fn method65(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method66(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method64(
            v0_1: LrcPtr<Dice_ui::UH0>,
            v1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH0>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                MutCell::new(v1.clone());
            '_method64: loop {
                break '_method64 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH0::UH0_0 => v1.get().clone(),
                    Dice_ui::UH0::UH0_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method65(
                                match v0_1.get().clone().as_ref() {
                                    Dice_ui::UH0::UH0_1(x, _) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            );
                        let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method66(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH0> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH0::UH0_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<(string, Dice_ui::US23, string, bool, bool)> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method64;
                        }
                    }
                });
            }
        }
        pub fn closure51(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                patternInput.1.clone() /*;
                                       let v13: bool = */
            }); //;
            let v15: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<(string, Dice_ui::US23, string, bool, bool)>,
            > = _func1_from_v3;
            let v18: Vec<Vec<(string, Dice_ui::US23, string, bool, bool)>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v15 = v15.clone();
                        move |arg10_0040: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure52(v15.clone(), arg10_0040)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v21: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                new_empty::<(string, Dice_ui::US23, string, bool, bool)>().to_vec();
            let v25: List<Vec<(string, Dice_ui::US23, string, bool, bool)>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v18.clone()));
            let v67: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method64(
                foldBack(
                    Func2::new(
                        move |b0: Vec<(string, Dice_ui::US23, string, bool, bool)>,
                              b1: LrcPtr<Dice_ui::UH0>| {
                            (Dice_ui::method63())(b0)(b1)
                        },
                    ),
                    v25,
                    LrcPtr::new(Dice_ui::UH0::UH0_0),
                ),
                v21,
            );
            let v74: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (5) / txns_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v67.clone()),
                    )),
                    string(""),
                ),
            );
            let v76: bool = true;
            leptos::logging::log!("{}", v74);
            v67
        }
        pub fn method67(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
        ) -> Func1<(string, Dice_ui::US23, string, bool, bool), string> {
            v0_1
        }
        pub fn closure56(
            v0_1: Func1<(string, Dice_ui::US23, string, bool, bool), string>,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> string {
            let v6: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                Dice_ui::method67(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method68(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
        ) -> Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>
        {
            v0_1
        }
        pub fn closure57(
            v0_1: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>>,
            _arg: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
        ) -> Vec<string> {
            let v3: Func1<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>), Vec<string>> =
                Dice_ui::method68(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure59(v0_1: Vec<string>, v1: LrcPtr<Dice_ui::UH1>) -> LrcPtr<Dice_ui::UH1> {
            LrcPtr::new(Dice_ui::UH1::UH1_1(v0_1, v1))
        }
        pub fn closure58(
            unitVar: (),
            v0_1: Vec<string>,
        ) -> Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: LrcPtr<Dice_ui::UH1>| Dice_ui::closure59(v0_1.clone(), v)
            })
        }
        pub fn method69() -> Func1<Vec<string>, Func1<LrcPtr<Dice_ui::UH1>, LrcPtr<Dice_ui::UH1>>> {
            Func1::new(move |v: Vec<string>| Dice_ui::closure58((), v))
        }
        pub fn method71(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method72(v0_1: Vec<string>) -> Vec<string> {
            v0_1
        }
        pub fn method70(v0_1: LrcPtr<Dice_ui::UH1>, v1: Vec<string>) -> Vec<string> {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH1>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Vec<string>> = MutCell::new(v1.clone());
            '_method70: loop {
                break '_method70 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH1::UH1_0 => v1.get().clone(),
                    Dice_ui::UH1::UH1_1(v0_1_1_0, v0_1_1_1) => {
                        let v4: Vec<string> = Dice_ui::method71(
                            match v0_1.get().clone().as_ref() {
                                Dice_ui::UH1::UH1_1(x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        );
                        let v5: Vec<string> = Dice_ui::method72(v1.get().clone());
                        let v7: bool = true;
                        let mut v5 = v5;
                        let v9: bool = true;
                        v5.extend(v4);
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH1> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH1::UH1_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Vec<string> = v5;
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method70;
                        }
                    }
                });
            }
        }
        pub fn closure55(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> Array<string> {
            let v2: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let patternInput: (string, Vec<(string, Dice_ui::US23, string, bool, bool)>) =
                    value;
                let v11: bool = true;
                let _func1_from_v9 = Func1::from(move |value| {
                    //;
                    let patternInput_1: (string, Dice_ui::US23, string, bool, bool) = value;
                    let v20: bool = true;
                    patternInput.0.clone() /*;
                                           let v22: bool = */
                }); //;
                let v24: Func1<(string, Dice_ui::US23, string, bool, bool), string> =
                    _func1_from_v9;
                let v27: Vec<string> = patternInput
                    .1
                    .clone()
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v24 = v24.clone();
                            move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                                Dice_ui::closure56(v24.clone(), arg10_0040)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v30: bool = true;
                v27 /*;
                    let v32: bool = */
            }); //;
            let v34: Func1<
                (string, Vec<(string, Dice_ui::US23, string, bool, bool)>),
                Vec<string>,
            > = _func1_from_v3;
            let v37: Vec<Vec<string>> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v34 = v34.clone();
                        move |arg10_0040_1: (
                            string,
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                        )| Dice_ui::closure57(v34.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v40: Vec<string> = new_empty::<string>().to_vec();
            let v44: List<Vec<string>> =
                ofArray_1(fable_library_rust::NativeArray_::array_from(v37.clone()));
            let v86: Vec<string> = Dice_ui::method70(
                foldBack(
                    Func2::new(move |b0: Vec<string>, b1: LrcPtr<Dice_ui::UH1>| {
                        (Dice_ui::method69())(b0)(b1)
                    }),
                    v44,
                    LrcPtr::new(Dice_ui::UH1::UH1_0),
                ),
                v40,
            );
            let v88: Array<string> = fable_library_rust::NativeArray_::array_from(v86.clone());
            let v95: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (6) / urls_accounts new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v88.clone()),
                    )),
                    string(""),
                ),
            );
            let v97: bool = true;
            leptos::logging::log!("{}", v95);
            v88
        }
        pub fn method73(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Action,
            (std::string::String, Option<std::string::String>),
        > {
            v0_1
        }
        pub fn closure61(
            v0_1: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            >,
            v1: crate::model::near::nearblocks::Action,
        ) -> (std::string::String, Option<std::string::String>) {
            let v2: Func1<
                crate::model::near::nearblocks::Action,
                (std::string::String, Option<std::string::String>),
            > = Dice_ui::method73(v0_1);
            let patternInput: (std::string::String, Option<std::string::String>) =
                (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method74(
            v0_1: Array<(std::string::String, Option<std::string::String>)>,
        ) -> Array<(std::string::String, Option<std::string::String>)> {
            v0_1
        }
        pub fn closure62(
            unitVar: (),
            v0_1: Vec<std::string::String>,
        ) -> Array<std::string::String> {
            fable_library_rust::NativeArray_::array_from(v0_1.clone())
        }
        pub fn method75() -> Func1<Vec<std::string::String>, Array<std::string::String>> {
            Func1::new(move |v: Vec<std::string::String>| Dice_ui::closure62((), v))
        }
        pub fn method76(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Txn,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure63(
            v0_1: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1: crate::model::near::nearblocks::Txn,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method76(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
            )
        }
        pub fn method77(
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            v0_1
        }
        pub fn closure60(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Array<(
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        )> {
            let v2: Vec<crate::model::near::nearblocks::Txn> = v0_1.txns;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::nearblocks::Txn = value;
                let v9: std::string::String = v7.clone().receipt_id;
                let v11: std::string::String = v7.clone().predecessor_account_id;
                let v13: std::string::String = v7.clone().receiver_account_id;
                let v15: std::string::String = v7.clone().transaction_hash;
                let v17: std::string::String = v7.clone().included_in_block_hash;
                let v19: std::string::String = v7.clone().block_timestamp;
                let v21: crate::model::near::nearblocks::Block = v7.clone().block;
                let v23: u32 = v21.block_height;
                let v25: Vec<crate::model::near::nearblocks::Action> = v7.clone().actions;
                let v28: bool = true;
                let _func1_from_v26 = Func1::from(move |value| {
                    //;
                    let v30: crate::model::near::nearblocks::Action = value;
                    let v32: std::string::String = v30.clone().action;
                    let v34: Option<std::string::String> = v30.method;
                    let v37: bool = true;
                    (v32, v34) /*;
                               let v39: bool = */
                }); //;
                let v41: Func1<
                    crate::model::near::nearblocks::Action,
                    (std::string::String, Option<std::string::String>),
                > = _func1_from_v26;
                let v44: Vec<(std::string::String, Option<std::string::String>)> = v25
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v41 = v41.clone();
                            move |v: crate::model::near::nearblocks::Action| {
                                Dice_ui::closure61(v41.clone(), v)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v47: Array<(std::string::String, Option<std::string::String>)> =
                    Dice_ui::method74(fable_library_rust::NativeArray_::array_from(v44.clone()));
                let v49: crate::model::near::nearblocks::ActionsAgg = v7.clone().actions_agg;
                let v51: f64 = v49.deposit;
                let v53: crate::model::near::nearblocks::Outcomes = v7.clone().outcomes;
                let v55: bool = v53.status;
                let v57: crate::model::near::nearblocks::OutcomesAgg = v7.clone().outcomes_agg;
                let v59: f64 = v57.transaction_fee;
                let v61: Option<Vec<std::string::String>> = v7.logs;
                let v80: Array<std::string::String> = defaultValue(
                    new_empty::<std::string::String>(),
                    map(Dice_ui::method75(), v61),
                );
                let v85: bool = true;
                (v9, v11, v13, v15, v17, v19, v23, v47, v51, v55, v59, v80) /*;
                                                                            let v87: bool = */
            }); //;
            let v89: Func1<
                crate::model::near::nearblocks::Txn,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = _func1_from_v3;
            let v92: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v89 = v89.clone();
                        move |v_1: crate::model::near::nearblocks::Txn| {
                            Dice_ui::closure63(v89.clone(), v_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            Dice_ui::method77(fable_library_rust::NativeArray_::array_from(v92.clone()))
        }
        pub fn closure64(
            v0_1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            unitVar: (),
        ) -> Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> {
            let v3: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (2) / database_memo"));
            let v5: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone());
            let v7: bool = true;
            let _optionm_map_ = v5.map(|x| {
                //;
                let v9: std::sync::Arc<rexie::Rexie> = x;
                let v12: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = PartialEqWrapper(v9);
                let v14: bool = true;
                v12
            });
            _optionm_map_
        }
        pub fn method79(v0_1: string) -> string {
            v0_1
        }
        pub fn method80(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure65(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<
                dyn std::future::Future<
                    Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                >,
            >,
        > {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            > = Dice_ui::method80(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method81(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<
                    dyn std::future::Future<
                        Output = Result<Option<LrcPtr<Dice_ui::Heap4>>, std::string::String>,
                    >,
                >,
            >,
        > {
            v0_1
        }
        pub fn closure66(
            v0_1: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("state_core.use_requests (5) / state_data_func")
            );
            let v5: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                Dice_ui::method29(Dice_ui::method28());
            let v6 = Dice_ui::method30();
            let v7 = Dice_ui::method31();
            let v9: Dice_ui::US9 = match &v5 {
                Err(v5_1_0) => v7(v5_1_0.clone()),
                Ok(v5_0_0) => v6(v5_0_0.clone()),
            };
            let v39: Dice_ui::US10 = match &v9 {
                Dice_ui::US9::US9_0(v9_0_0) => Dice_ui::US10::US10_0(defaultValue(
                    Dice_ui::US11::US11_1,
                    map(Dice_ui::method32(), v9_0_0.clone()),
                )),
                Dice_ui::US9::US9_1(v9_1_0) => Dice_ui::US10::US10_1(v9_1_0.clone()),
            };
            let v47: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                if let Dice_ui::US10::US10_0(v39_0_0) = &v39 {
                    if let Dice_ui::US11::US11_0(v39_0_0) = &v39_0_0 {
                        Option::map(leptos::prelude::ArcLocalResource::get(&v0_1), |x| x.clone())
                    } else {
                        None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                    }
                } else {
                    None::<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>
                };
            let v54: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (6) / state_data_func func0 / result: "),
                        sprintf!("{:?}", v47.clone()),
                    )),
                    string(""),
                ),
            );
            let v56: bool = true;
            leptos::logging::log!("{}", v54);
            v47
        }
        pub fn closure67(
            unitVar: (),
            v0_1: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
        ) -> Dice_ui::US26 {
            Dice_ui::US26::US26_0(v0_1)
        }
        pub fn method82(
        ) -> Func1<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>, Dice_ui::US26>
        {
            Func1::new(
                move |v: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>| {
                    Dice_ui::closure67((), v)
                },
            )
        }
        pub fn closure68(unitVar: (), v0_1: Vec<Option<LrcPtr<Dice_ui::Heap4>>>) -> Dice_ui::US24 {
            Dice_ui::US24::US24_0(v0_1)
        }
        pub fn method83() -> Func1<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, Dice_ui::US24> {
            Func1::new(move |v: Vec<Option<LrcPtr<Dice_ui::Heap4>>>| Dice_ui::closure68((), v))
        }
        pub fn closure69(unitVar: (), v0_1: std::string::String) -> Dice_ui::US24 {
            Dice_ui::US24::US24_1(v0_1)
        }
        pub fn method84() -> Func1<std::string::String, Dice_ui::US24> {
            Func1::new(move |v: std::string::String| Dice_ui::closure69((), v))
        }
        pub fn closure70(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap4>) -> Dice_ui::US25 {
            Dice_ui::US25::US25_0(v0_1)
        }
        pub fn method85() -> Func1<LrcPtr<Dice_ui::Heap4>, Dice_ui::US25> {
            Func1::new(move |v: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure70((), v))
        }
        pub fn closure73(unitVar: (), v0_1: Dice_ui::US25) -> Dice_ui::US32 {
            Dice_ui::US32::US32_0(v0_1)
        }
        pub fn method87() -> Func1<Dice_ui::US25, Dice_ui::US32> {
            Func1::new(move |v: Dice_ui::US25| Dice_ui::closure73((), v))
        }
        pub fn method88(v0_1: Dice_ui::US23) -> Dice_ui::US23 {
            v0_1
        }
        pub fn method89(v0_1: string) -> string {
            v0_1
        }
        pub fn method90(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method91(v0_1: string) -> string {
            v0_1
        }
        pub fn method92(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn method93(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn method94(v0_1: reqwest_wasm::RequestBuilder) -> reqwest_wasm::RequestBuilder {
            v0_1
        }
        pub fn closure74(unitVar: (), v0_1: reqwest_wasm::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method95() -> Func1<reqwest_wasm::Error, std::string::String> {
            Func1::new(move |v: reqwest_wasm::Error| Dice_ui::closure74((), v))
        }
        pub fn closure72(
            v0_1: Dice_ui::US27,
            v1: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
        > {
            let v6: bool = _arg.4.clone();
            let v5: bool = _arg.3.clone();
            let v3: Dice_ui::US23 = _arg.1.clone();
            let v2: string = _arg.0.clone();
            let v8: bool = true;
            let __future_init = Box::pin(
                /*;
                let v10: bool = */
                async move {
                    /*;
                    let v12: bool = */
                    ();
                    let v63: Dice_ui::US29 = match &v0_1 {
                        Dice_ui::US27::US27_0(v0_1_0_0) => {
                            let v13: Dice_ui::US28 = match &v0_1 {
                                Dice_ui::US27::US27_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            Dice_ui::US29::US29_0(match &v13 {
                                Dice_ui::US28::US28_0(v13_0_0) => {
                                    let v17: Option<Dice_ui::US25> = tryItem(
                                        v1,
                                        fable_library_rust::NativeArray_::array_from(
                                            v13_0_0.clone().clone(),
                                        ),
                                    );
                                    let v36: Dice_ui::US32 = defaultValue(
                                        Dice_ui::US32::US32_1,
                                        map(Dice_ui::method87(), v17),
                                    );
                                    let v46: Dice_ui::US25 =
                                        if let Dice_ui::US32::US32_0(v36_0_0) = &v36 {
                                            let v40: Dice_ui::US25 = v36_0_0.clone();
                                            if let Dice_ui::US25::US25_0(v40_0_0) = &v40 {
                                                Dice_ui::US25::US25_0(v40_0_0.clone())
                                            } else {
                                                Dice_ui::US25::US25_1
                                            }
                                        } else {
                                            Dice_ui::US25::US25_1
                                        };
                                    Dice_ui::US30::US30_0(match &v46 {
                                        Dice_ui::US25::US25_0(v46_0_0) => Dice_ui::US31::US31_0(
                                            fable_library_rust::String_::fromString(
                                                (match &v46 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                })
                                                .l0
                                                .clone(),
                                            ),
                                        ),
                                        _ => Dice_ui::US31::US31_1,
                                    })
                                }
                                Dice_ui::US28::US28_1(v13_1_0) => {
                                    Dice_ui::US30::US30_1(v13_1_0.clone())
                                }
                            })
                        }
                        _ => Dice_ui::US29::US29_1,
                    };
                    let v69: string =
                        Dice_ui::method8(400_i64, sprintf!("{:?}", (v3.clone(), v5, v6)));
                    let v75: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v0_1.clone()));
                    let v81: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v63.clone()));
                    let v106: bool = if v6 {
                        true
                    } else {
                        if let Dice_ui::US27::US27_0(v0_1_0_0) = &v0_1 {
                            let v82: Dice_ui::US28 = v0_1_0_0.clone();
                            if let Dice_ui::US28::US28_0(v82_0_0) = &v82 {
                                if (get_Count(fable_library_rust::NativeArray_::array_from(
                                    v82_0_0.clone().clone(),
                                ))) == 0_i32
                                {
                                    false
                                } else {
                                    if let Dice_ui::US29::US29_0(v63_0_0) = &v63 {
                                        let v88: Dice_ui::US30 = v63_0_0.clone();
                                        if let Dice_ui::US30::US30_0(v88_0_0) = &v88 {
                                            if let Dice_ui::US31::US31_1 = &v88_0_0 {
                                                true
                                            } else {
                                                false
                                            }
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                }
                            } else {
                                if let Dice_ui::US29::US29_0(v63_0_0) = &v63 {
                                    let v94: Dice_ui::US30 = v63_0_0.clone();
                                    if let Dice_ui::US30::US30_0(v94_0_0) = &v94 {
                                        if let Dice_ui::US31::US31_1 = &v94_0_0 {
                                            true
                                        } else {
                                            false
                                        }
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            }
                        } else {
                            if let Dice_ui::US29::US29_0(v63_0_0) = &v63 {
                                let v100: Dice_ui::US30 = v63_0_0.clone();
                                if let Dice_ui::US30::US30_0(v100_0_0) = &v100 {
                                    if let Dice_ui::US31::US31_1 = &v100_0_0 {
                                        true
                                    } else {
                                        false
                                    }
                                } else {
                                    false
                                }
                            } else {
                                false
                            }
                        }
                    };
                    let v107: string =
                append((append((append((append((append((append((append((append(string("state_core.use_requests (9) / result memo / state_data: "),
                                                                               (v75))),
                                                                       string(" / state_data\': "))),
                                                               (v81))),
                                                       string(" / request: "))),
                                               (v69))),
                                       string(" / should_fetch: "))),
                               (ofBoolean(v106)))), string(""));
                    let v109: bool = true;
                    leptos::logging::log!("{}", v107);
                    let v520: Dice_ui::US33 = if (v106) == false {
                        Dice_ui::US33::US33_0(None::<string>)
                    } else {
                        let v113: Dice_ui::US23 = Dice_ui::method88(v3);
                        let v255: reqwest_wasm::RequestBuilder = match &v113 {
                            Dice_ui::US23::US23_1 => {
                                let v184: string = Dice_ui::method91(v2.clone());
                                let v193: &str = &*v184;
                                let v251: std::string::String =
                                    Dice_ui::method92(String::from(v193));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .post(v251)
                            }
                            _ => {
                                let v114: string = Dice_ui::method89(v2.clone());
                                let v123: &str = &*v114;
                                let v181: std::string::String =
                                    Dice_ui::method90(String::from(v123));
                                reqwest_wasm::Client::builder()
                                    .build()
                                    .map_err(|err| err.to_string())?
                                    .get(v181)
                            }
                        };
                        let v264: &str = &*_arg.2.clone();
                        let v297: std::string::String = String::from(v264);
                        let v323: reqwest_wasm::RequestBuilder =
                            reqwest_wasm::RequestBuilder::body(v255, v297);
                        let v468: reqwest_wasm::RequestBuilder =
                            Dice_ui::method94(if (v5) == false {
                                v323
                            } else {
                                let v328: std::string::String =
                                    reqwest_wasm::header::CONTENT_TYPE.to_string();
                                let v330: string = fable_library_rust::String_::fromString(v328);
                                let v331: reqwest_wasm::RequestBuilder = Dice_ui::method93(v323);
                                let v340: &str = &*v330;
                                let v373: std::string::String = String::from(v340);
                                let v407: &str = &*string("application/json");
                                let v440: std::string::String = String::from(v407);
                                reqwest_wasm::RequestBuilder::header(v331, v373, v440)
                            });
                        let v470: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<reqwest_wasm::Response, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::RequestBuilder::send(v468));
                        let v472: Result<reqwest_wasm::Response, reqwest_wasm::Error> = v470.await;
                        let v473 = Dice_ui::method95();
                        let v479: Result<reqwest_wasm::Response, std::string::String> =
                            v472.map_err(|x| v473(x));
                        let v490: reqwest_wasm::Response = v479?;
                        let v492: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<std::string::String, reqwest_wasm::Error>,
                                >,
                            >,
                        > = Box::pin(reqwest_wasm::Response::text(v490));
                        let v494: Result<std::string::String, reqwest_wasm::Error> = v492.await;
                        let v495 = Dice_ui::method95();
                        let v501: Result<std::string::String, std::string::String> =
                            v494.map_err(|x| v495(x));
                        let v512: std::string::String = v501?;
                        Dice_ui::US33::US33_0(Some(fable_library_rust::String_::fromString(v512)))
                    };
                    let v532: Result<Option<string>, std::string::String> = match &v520 {
                        Dice_ui::US33::US33_0(v520_0_0) => {
                            Ok::<Option<string>, std::string::String>(v520_0_0.clone())
                        }
                        Dice_ui::US33::US33_1(v520_1_0) => {
                            Err::<Option<string>, std::string::String>(v520_1_0.clone())
                        }
                    };
                    let v535: string = string("}");
                    let v542: bool = true;
                    let _fix_closure_v537 = v532;
                    let v547: string = append(
                        (append(
                            (append(
                                (append(string("true; _fix_closure_v537 "), (v535))),
                                string("); "),
                            )),
                            string(""),
                        )),
                        string(" // rust.fix_closure\'"),
                    );
                    let v548: bool = true;
                    _fix_closure_v537
                },
            ); // rust.fix_closure';
            let v550 = __future_init;
            v550
        }
        pub fn closure71(
            v0_1: Dice_ui::US27,
            v1: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure72(v0_1.clone(), v1, arg10_0040)
                }
            })
        }
        pub fn method86(
            v0_1: Dice_ui::US27,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure71(v0_1.clone(), v)
            })
        }
        pub fn method96(
            v0_1: Vec<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            v0_1
        }
        pub fn method97(
            v0_1: Vec<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Option<string>, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Option<string>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn method98(v0_1: string) -> string {
            v0_1
        }
        pub fn closure75(unitVar: (), v0_1: rexie::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method99() -> Func1<rexie::Error, std::string::String> {
            Func1::new(move |v: rexie::Error| Dice_ui::closure75((), v))
        }
        pub fn method100(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn closure76(
            v0_1: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>
        {
            let v6: Func1<
                (string, Dice_ui::US23, string, bool, bool),
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            > = Dice_ui::method100(v0_1);
            (move |x| v6(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
            ))
        }
        pub fn method101(
            v0_1: Vec<
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<(), std::string::String>>>,
                >,
            >,
        ) -> Vec<
            std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::string::String>>>>,
        > {
            v0_1
        }
        pub fn method102(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap4>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure77(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap4>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = Dice_ui::method102(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure79(
            unitVar: (),
            v0_1: Result<Vec<Option<string>>, std::string::String>,
        ) -> Dice_ui::US37 {
            Dice_ui::US37::US37_0(v0_1)
        }
        pub fn method103() -> Func1<Result<Vec<Option<string>>, std::string::String>, Dice_ui::US37>
        {
            Func1::new(move |v: Result<Vec<Option<string>>, std::string::String>| {
                Dice_ui::closure79((), v)
            })
        }
        pub fn closure80(unitVar: (), v0_1: Vec<Option<string>>) -> Dice_ui::US39 {
            Dice_ui::US39::US39_0(v0_1)
        }
        pub fn method104() -> Func1<Vec<Option<string>>, Dice_ui::US39> {
            Func1::new(move |v: Vec<Option<string>>| Dice_ui::closure80((), v))
        }
        pub fn closure81(unitVar: (), v0_1: std::string::String) -> Dice_ui::US39 {
            Dice_ui::US39::US39_1(v0_1)
        }
        pub fn method105() -> Func1<std::string::String, Dice_ui::US39> {
            Func1::new(move |v: std::string::String| Dice_ui::closure81((), v))
        }
        pub fn closure82(unitVar: (), v0_1: string) -> Dice_ui::US31 {
            Dice_ui::US31::US31_0(v0_1)
        }
        pub fn method106() -> Func1<string, Dice_ui::US31> {
            Func1::new(move |v: string| Dice_ui::closure82((), v))
        }
        pub fn closure85(unitVar: (), v0_1: Dice_ui::US31) -> Dice_ui::US42 {
            Dice_ui::US42::US42_0(v0_1)
        }
        pub fn method108() -> Func1<Dice_ui::US31, Dice_ui::US42> {
            Func1::new(move |v: Dice_ui::US31| Dice_ui::closure85((), v))
        }
        pub fn closure86(
            unitVar: (),
            v0_1: crate::model::near::nearblocks::Root,
        ) -> Option<crate::model::near::nearblocks::Root> {
            Some(v0_1)
        }
        pub fn method109(
        ) -> Func1<crate::model::near::nearblocks::Root, Option<crate::model::near::nearblocks::Root>>
        {
            Func1::new(move |v: crate::model::near::nearblocks::Root| Dice_ui::closure86((), v))
        }
        pub fn method110(
            v0_1: Result<crate::model::near::nearblocks::Root, std::string::String>,
        ) -> Result<crate::model::near::nearblocks::Root, std::string::String> {
            v0_1
        }
        pub fn closure84(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            let v56: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v29: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v39: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v29_0_0) = &v29 {
                                let v33: Dice_ui::US25 = v29_0_0.clone();
                                if let Dice_ui::US25::US25_0(v33_0_0) = &v33 {
                                    Dice_ui::US25::US25_0(v33_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v39 {
                                Dice_ui::US25::US25_0(v39_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v39 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v69: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v56.clone()))),
                )),
                string(""),
            );
            let v71: bool = true;
            leptos::logging::log!("{}", v69);
            let v78: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v80: bool = true;
            leptos::logging::log!("{}", v78);
            let v117: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v84: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v103: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v84));
                    if let Dice_ui::US42::US42_0(v103_0_0) = &v103 {
                        let v107: Dice_ui::US31 = v103_0_0.clone();
                        if let Dice_ui::US31::US31_0(v107_0_0) = &v107 {
                            Dice_ui::US31::US31_0(v107_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v117_0_0) = &v117 {
                let v119: string = Dice_ui::method41(v117_0_0.clone());
                let v128: &str = &*v119;
                let v154: Result<crate::model::near::nearblocks::Root, serde_json::Error> =
                    serde_json::from_str(&v128);
                let v155 = Dice_ui::method42();
                let v161: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    v154.map_err(|x| v155(x));
                let v171 = Dice_ui::method109();
                let v172: Result<crate::model::near::nearblocks::Root, std::string::String> =
                    Dice_ui::method110(v161);
                v172.map(|x| v171(x))
            } else {
                if let Dice_ui::US29::US29_0(v56_0_0) = &v56 {
                    let v175: Dice_ui::US30 = v56_0_0.clone();
                    if let Dice_ui::US30::US30_0(v175_0_0) = &v175 {
                        let v176: Dice_ui::US31 = v175_0_0.clone();
                        if let Dice_ui::US31::US31_0(v176_0_0) = &v176 {
                            let v178: string = Dice_ui::method41(v176_0_0.clone());
                            let v187: &str = &*v178;
                            let v213: Result<
                                crate::model::near::nearblocks::Root,
                                serde_json::Error,
                            > = serde_json::from_str(&v187);
                            let v214 = Dice_ui::method42();
                            let v220: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = v213.map_err(|x| v214(x));
                            let v230 = Dice_ui::method109();
                            let v231: Result<
                                crate::model::near::nearblocks::Root,
                                std::string::String,
                            > = Dice_ui::method110(v220);
                            v231.map(|x| v230(x))
                        } else {
                            let v238: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v117.clone(), v56.clone())),
                                )),
                                string(""),
                            );
                            let v240: bool = true;
                            leptos::logging::log!("{}", v238);
                            Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                                None::<crate::model::near::nearblocks::Root>,
                            )
                        }
                    } else {
                        let v251: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v117.clone(), v56.clone())),
                            )),
                            string(""),
                        );
                        let v253: bool = true;
                        leptos::logging::log!("{}", v251);
                        Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                            None::<crate::model::near::nearblocks::Root>,
                        )
                    }
                } else {
                    let v264: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v117.clone(), v56.clone())),
                        )),
                        string(""),
                    );
                    let v266: bool = true;
                    leptos::logging::log!("{}", v264);
                    Ok::<Option<crate::model::near::nearblocks::Root>, std::string::String>(
                        None::<crate::model::near::nearblocks::Root>,
                    )
                }
            }
        }
        pub fn closure83(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure84(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method107(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure83(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v33: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v85: Dice_ui::US35 = match &v33 {
                Dice_ui::US26::US26_0(v33_0_0) => {
                    let v37: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v33 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v38 = Dice_ui::method83();
                    let v39 = Dice_ui::method84();
                    let v41: Dice_ui::US24 = match &v37 {
                        Err(v37_1_0) => v39(v37_1_0.clone()),
                        Ok(v37_0_0) => v38(v37_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v41 {
                        Dice_ui::US24::US24_0(v41_0_0) => {
                            let v46: bool = true;
                            let _vec_map: Vec<_> = v41_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v48: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v67: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v48),
                                    );
                                    let v72: bool = true;
                                    v67
                                })
                                .collect::<Vec<_>>();
                            let v74: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v74.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v41_1_0) => Dice_ui::US36::US36_1(v41_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v92: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v85.clone()))),
                )),
                string(""),
            );
            let v94: bool = true;
            leptos::logging::log!("{}", v92);
            let v96: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v115: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v96));
            let v129: Dice_ui::US38 = match &v115 {
                Dice_ui::US37::US37_0(v115_0_0) => {
                    let v119: Result<Vec<Option<string>>, std::string::String> = match &v115 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v120 = Dice_ui::method104();
                    let v121 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v119 {
                        Err(v119_1_0) => v121(v119_1_0.clone()),
                        Ok(v119_0_0) => v120(v119_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v170: Dice_ui::US40 = match &v129 {
                Dice_ui::US38::US38_0(v129_0_0) => {
                    let v130: Dice_ui::US39 = match &v129 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v130 {
                        Dice_ui::US39::US39_0(v130_0_0) => {
                            let v133: bool = true;
                            let _vec_map: Vec<_> = v130_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v135: Option<string> = x;
                                    let v154: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v135),
                                    );
                                    let v159: bool = true;
                                    v154
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v130_1_0) => Dice_ui::US41::US41_1(v130_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v173: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v177: Dice_ui::US41 = match &v170 {
                Dice_ui::US40::US40_0(v170_0_0) => match &v170 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v173.clone()),
            };
            let v260: bool = match &v177 {
                Dice_ui::US41::US41_0(v177_0_0) => {
                    let v180: bool = true;
                    v177_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v182: Dice_ui::US31 = x;
                        let v253: bool = if let Dice_ui::US31::US31_0(v182_0_0) = &v182 {
                            let v192: &str = &*v182_0_0.clone();
                            let v250: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v192),
                            });
                            let v252: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v250.clone());
                            true
                        } else {
                            false
                        };
                        let v255: bool = true;
                        let v257: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v261 = Dice_ui::method107(v85, v177.clone());
            let v262: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v264: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v262
                .iter()
                .enumerate()
                .map(|(i, x)| v261(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v266: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v264.clone());
            let v273: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v266.clone()),
                    )),
                    string(""),
                ),
            );
            let v275: bool = true;
            leptos::logging::log!("{}", v273);
            v266
        }
        pub fn method112(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            crate::model::near::nearblocks::Root,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            v0_1
        }
        pub fn closure88(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: Option<crate::model::near::nearblocks::Root>,
        ) -> Option<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        > {
            map(Dice_ui::method112(v0_1), v1)
        }
        pub fn method111(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Func1<
            Option<crate::model::near::nearblocks::Root>,
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::nearblocks::Root>| {
                    Dice_ui::closure88(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method113(
            v0_1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<Option<crate::model::near::nearblocks::Root>, std::string::String> {
            v0_1
        }
        pub fn method114(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure89(
            v0_1: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
        ) -> Result<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = Dice_ui::method114(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure87(
            v0_1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v32: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v37: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v56: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v37));
            let v108: Dice_ui::US35 = match &v56 {
                Dice_ui::US26::US26_0(v56_0_0) => {
                    let v60: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v56 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v61 = Dice_ui::method83();
                    let v62 = Dice_ui::method84();
                    let v64: Dice_ui::US24 = match &v60 {
                        Err(v60_1_0) => v62(v60_1_0.clone()),
                        Ok(v60_0_0) => v61(v60_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v64 {
                        Dice_ui::US24::US24_0(v64_0_0) => {
                            let v69: bool = true;
                            let _vec_map: Vec<_> = v64_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v71: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v90: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v71),
                                    );
                                    let v95: bool = true;
                                    v90
                                })
                                .collect::<Vec<_>>();
                            let v97: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v97.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v64_1_0) => Dice_ui::US36::US36_1(v64_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v114: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v32));
            let v120: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v108));
            let v121: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v114))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v120))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v123: bool = true;
            leptos::logging::log!("{}", v121);
            let v125: Array<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v127: Vec<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
            > = v125.to_vec();
            let v130: bool = true;
            let _func1_from_v128 = Func1::from(move |value| {
                //;
                let v132: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = value;
                let v133 = Dice_ui::method111(v0_1);
                let v134: Result<
                    Option<crate::model::near::nearblocks::Root>,
                    std::string::String,
                > = Dice_ui::method113(v132);
                let v136: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = v134.map(|x| v133(x));
                let v139: bool = true;
                v136 /*;
                     let v141: bool = */
            }); //;
            let v143: Func1<
                Result<Option<crate::model::near::nearblocks::Root>, std::string::String>,
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = _func1_from_v128;
            let v146: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = v127
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v143 = v143.clone();
                        move |v: Result<
                            Option<crate::model::near::nearblocks::Root>,
                            std::string::String,
                        >| Dice_ui::closure89(v143.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v153: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v146.clone()),
                    )),
                    string(""),
                ),
            );
            let v155: bool = true;
            leptos::logging::log!("{}", v153);
            v146
        }
        pub fn method78(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::nearblocks::Root,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v63: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v64: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v66 = __future_init;
                        let v68: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v66;
                        let v70: Result<rexie::Rexie, std::string::String> = v68.await;
                        let v76: rexie::Rexie = v70.unwrap();
                        let v87: rexie::Rexie = (Dice_ui::method7())(v76);
                        let v89: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v87);
                        let v96: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v89.clone()))),
                                        string("")));
                        let v98: bool = true;
                        leptos::logging::log!("{}", v96);
                        let v99: string = string("}");
                        let v106: bool = true;
                        let _fix_closure_v101 = v89;
                        let v111: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v101 "), (v99))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v112: bool = true;
                        _fix_closure_v101
                    },
                ); // rust.fix_closure';
                let v114 = __future_init;
                let v116: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v114;
                let v118: bool = true;
                v116 /*;
                     let v120: bool = */
            }); //;
            let v122: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v124: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v122().await });
            let v127: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v124 = v124.clone();
                    move || Dice_ui::closure64(v124.clone(), ())
                })()
            });
            let v130: bool = true;
            let _func0_from_v128 = Func0::from(move || {
                //;
                let v132: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124.clone()), |x| {
                        x.clone()
                    });
                let v134: bool = true;
                let _optionm_map_ = v132.map(|x| {
                    //;
                    let v136: std::sync::Arc<rexie::Rexie> = x;
                    let v139: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v136);
                    let v141: bool = true;
                    v139
                });
                let v143: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v145: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v147: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v149: bool = */
                    async move {
                        /*;
                        let v151: bool = */
                        ();
                        let v153: string = sprintf!("{:?}", v143.clone());
                        let v162: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v145.clone()))))),
                                       string(" / database: "))), (v153))),
                       string(""));
                        let v164: bool = true;
                        leptos::logging::log!("{}", v162);
                        let v166: bool = true;
                        let _optionm_map_ = v143.map(|x| {
                            //;
                            let v168: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v170: std::sync::Arc<rexie::Rexie> = v168.0;
                            let v172: bool = true;
                            v170
                        });
                        let v174: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v193: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v174));
                        let v678: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v193_0_0) = &v193 {
                            let v200: bool = true;
                            let _func1_from_v198 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v207: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v208: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v207.clone()),
                                    )),
                                    string(""),
                                );
                                let v210: bool = true;
                                leptos::logging::log!("{}", v208);
                                let v212: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v214: bool = */
                                    async {
                                        /*;
                                        let v216: bool = */
                                        ();
                                        let v218: Array<string> = new_array(&[string("store")]);
                                        let v220: Vec<string> = v218.to_vec();
                                        let v223: bool = true;
                                        let _func1_from_v221 = Func1::from(move |value| {
                                            //;
                                            let v225: string = value;
                                            let v234: &str = &*v225;
                                            let v267: std::string::String = String::from(v234);
                                            let v294: bool = true;
                                            v267 /*;
                                                 let v296: bool = */
                                        }); //;
                                        let v298: Func1<string, std::string::String> =
                                            _func1_from_v221;
                                        let v301: Vec<std::string::String> = v220
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v298 = v298.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v298.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v302: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v193_0_0.clone());
                                        let v304: Result<rexie::Transaction, rexie::Error> = v302
                                            .transaction(&v301, rexie::TransactionMode::ReadOnly);
                                        let v305 = Dice_ui::method12();
                                        let v311: Result<rexie::Transaction, std::string::String> =
                                            v304.map_err(|x| v305(x));
                                        let v322: rexie::Transaction = v311?;
                                        let v323: string = Dice_ui::method13();
                                        let v332: &str = &*v323;
                                        let v358: Result<rexie::Store, rexie::Error> =
                                            v322.store(v332);
                                        let v359 = Dice_ui::method14();
                                        let v365: Result<rexie::Store, std::string::String> =
                                            v358.map_err(|x| v359(x));
                                        let v376: rexie::Store = v365?;
                                        let v377: string = Dice_ui::method79(v207);
                                        let v386: &str = &*v377;
                                        let v412: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v386);
                                        let v414: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v376, v412));
                                        let v416: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v414.await;
                                        let v417 = Dice_ui::method16();
                                        let v423: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v416.map_err(|x| v417(x));
                                        let v434: Option<wasm_bindgen::JsValue> = v423?;
                                        let v453: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v434),
                                        );
                                        let v561: Dice_ui::US25 = match &v453 {
                                            Dice_ui::US4::US4_0(v453_0_0) => {
                                                let v458: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v453 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v460: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v458);
                                                let v461 = Dice_ui::method19();
                                                let v467: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v460.map_err(|x| v461(x));
                                                let v478: Option<serde_json::Value> = v467?;
                                                let v497: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v478),
                                                );
                                                match &v497 {
                                                    Dice_ui::US5::US5_0(v497_0_0) => {
                                                        let v502: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v497 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v504: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v502);
                                                        let v505 = Dice_ui::method22();
                                                        let v511: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v504.map_err(|x| v505(x));
                                                        let v522: Vec<u8> = v511?;
                                                        let v524: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v522.clone());
                                                        let v526: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v524.clone()))))),
                                                   string(""));
                                                        let v528: bool = true;
                                                        leptos::logging::log!("{}", v526);
                                                        let v530: Vec<u8> = v524.to_vec();
                                                        let v532: &[u8] = v530.as_slice();
                                                        let v534: bool = true;
                                                        let mut v532 = v532;
                                                        let v536: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v532,
                                                        );
                                                        let v537 = Dice_ui::method23();
                                                        let v543: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v536.map_err(|x| v537(x));
                                                        Dice_ui::US25::US25_0(v543?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v569: Option<LrcPtr<Dice_ui::Heap4>> = match &v561 {
                                            Dice_ui::US25::US25_0(v561_0_0) => Some(
                                                match &v561 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v574: string = string("}");
                                        let v581: bool = true;
                                        let _fix_closure_v576 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v569
                                        );
                                        let v586: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v576 "),
                                                        (v574),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v587: bool = true;
                                        _fix_closure_v576
                                    },
                                ); // rust.fix_closure';
                                let v589 = __future_init;
                                let v591: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v589;
                                let v594: bool = true;
                                v591 /*;
                                     let v596: bool = */
                            }); //;
                            let v598: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v198;
                            let v602: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v145.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v598 = v598.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v598.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v604: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v602);
                            let v606: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v604.await;
                            Dice_ui::US24::US24_0(v606?)
                        } else {
                            let v619: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v619))
                        };
                        let v690: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v678 {
                                Dice_ui::US24::US24_0(v678_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v678_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v678_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v678_1_0.clone(),
                                    )
                                }
                            };
                        let v697: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v690.clone()))),
                                        string("")));
                        let v699: bool = true;
                        leptos::logging::log!("{}", v697);
                        let v700: string = string("}");
                        let v707: bool = true;
                        let _fix_closure_v702 = v690;
                        let v712: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v702 "), (v700))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v713: bool = true;
                        _fix_closure_v702
                    },
                ); // rust.fix_closure';
                let v715 = __future_init;
                let v717: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v715;
                let v719: bool = true;
                v717 /*;
                     let v721: bool = */
            }); //;
            let v723: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v128;
            let v725: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v723().await });
            let v728: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v725 = v725.clone();
                    move || Dice_ui::closure66(v725.clone(), ())
                })()
            });
            let v731: bool = true;
            let _func0_from_v729 = Func0::from(move || {
                //;
                let v733: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v735: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v728.clone());
                let v742: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v733.clone()))),
                    )),
                    string(""),
                );
                let v744: bool = true;
                leptos::logging::log!("{}", v742);
                let v746: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v748: bool = */
                    async move {
                        /*;
                        let v750: bool = */
                        ();
                        let v769: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v735));
                        let v819: Dice_ui::US27 = match &v769 {
                            Dice_ui::US26::US26_0(v769_0_0) => {
                                let v773: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v769 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v774 = Dice_ui::method83();
                                let v775 = Dice_ui::method84();
                                let v777: Dice_ui::US24 = match &v773 {
                                    Err(v773_1_0) => v775(v773_1_0.clone()),
                                    Ok(v773_0_0) => v774(v773_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v777 {
                                    Dice_ui::US24::US24_0(v777_0_0) => {
                                        let v782: bool = true;
                                        let _vec_map: Vec<_> = v777_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v784: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v803: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v784),
                                                );
                                                let v808: bool = true;
                                                v803
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v777_1_0) => {
                                        Dice_ui::US28::US28_1(v777_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v826: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v819.clone()))),
                            )),
                            string(""),
                        );
                        let v828: bool = true;
                        leptos::logging::log!("{}", v826);
                        let v829 = Dice_ui::method86(v819);
                        let v830: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v733);
                        let v833: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v830.iter()
                                .enumerate()
                                .map(|(i, x)| v829(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v835: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v833);
                        let v837: Result<Vec<Option<string>>, std::string::String> = v835.await;
                        let v839: Vec<Option<string>> = v837?;
                        let v844: string = string("}");
                        let v851: bool = true;
                        let _fix_closure_v846 =
                            Ok::<Vec<Option<string>>, std::string::String>(v839);
                        let v856: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v846 "), (v844))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v857: bool = true;
                        _fix_closure_v846
                    },
                ); // rust.fix_closure';
                let v859 = __future_init;
                let v861: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v859;
                let v863: bool = true;
                v861 /*;
                     let v865: bool = */
            }); //;
            let v867: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v729;
            let v869: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v867().await });
            let v872: bool = true;
            let _func1_from_v870 = Func1::from(move |value| {
                //;
                let v874: LrcPtr<Dice_ui::Heap4> = value;
                let v880: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v874.clone())) as i64)),
                    )),
                    string(""),
                );
                let v882: bool = true;
                leptos::logging::log!("{}", v880);
                let v884: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v886: bool = */
                    async move {
                        /*;
                        let v888: bool = */
                        ();
                        let v890: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v892: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v890);
                        let v894: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v127);
                        let v896: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v894);
                        let v898: bool = true;
                        let _optionm_map_ = v896.map(|x| {
                            //;
                            let v900: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v902: std::sync::Arc<rexie::Rexie> = v900.0;
                            let v904: bool = true;
                            v902
                        });
                        let v906: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v925: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v906));
                        let v1102: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v925_0_0) = &v925 {
                            let v932: bool = true;
                            let _func1_from_v930 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v934: string = patternInput_1.0.clone();
                                let v940: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v942: bool = */
                                    async move {
                                        /*;
                                        let v944: bool = */
                                        ();
                                        let v945: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v934.clone()))), string(""));
                                        let v947: bool = true;
                                        leptos::logging::log!("{}", v945);
                                        let v948: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v934))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v954: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v874.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v956: bool = true;
                                        leptos::logging::log!("{}", v954);
                                        let v958: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v960: bool = */
                                            async move {
                                                /*;
                                                let v962: bool = */
                                                ();
                                                let v964: bool = true;
                                                let mut data = Vec::new();
                                                let v966: bool = true;
                                                borsh::BorshSerialize::serialize(&v874, &mut data)
                                                    .unwrap();
                                                let v968: Vec<u8> = data;
                                                let v970: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v968).unwrap();
                                                let v971: string = Dice_ui::method98(v948);
                                                let v980: &str = &*v971;
                                                let v1006: rexie::Transaction =
                                                    v925_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v1008: rexie::Store = v1006.store("store")?;
                                                let v1010: bool = true;
                                                v1008.put(&v970, Some(&v980.into())).await?;
                                                let v1012: bool = true;
                                                v1006.done().await?;
                                                let v1017: string = string("}");
                                                let v1024: bool = true;
                                                let _fix_closure_v1019 = Ok::<(), rexie::Error>(());
                                                let v1029: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v1019 "),
                                                                (v1017),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1030: bool = true;
                                                _fix_closure_v1019
                                            },
                                        ); // rust.fix_closure';
                                        let v1032 = __future_init;
                                        let v1034: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v1032;
                                        let v1036: Result<(), rexie::Error> = v1034.await;
                                        let v1037 = Dice_ui::method99();
                                        let v1043: Result<(), std::string::String> =
                                            v1036.map_err(|x| v1037(x));
                                        let v1054: bool = true;
                                        v1043?;
                                        let v1059: string = string("}");
                                        let v1066: bool = true;
                                        let _fix_closure_v1061 = Ok::<(), std::string::String>(());
                                        let v1071: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1061 "),
                                                        (v1059),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1072: bool = true;
                                        _fix_closure_v1061
                                    },
                                ); // rust.fix_closure';
                                let v1074 = __future_init;
                                let v1076: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                > = v1074;
                                let v1079: bool = true;
                                v1076 /*;
                                      let v1081: bool = */
                            }); //;
                            let v1083: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v930;
                            let v1087: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v892.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1083 = v1083.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1083.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1089: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1087);
                            let v1091: Result<Vec<()>, std::string::String> = v1089.await;
                            Dice_ui::US34::US34_0(v1091?)
                        } else {
                            let v1097: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1114: Result<Vec<()>, std::string::String> = match &v1102 {
                            Dice_ui::US34::US34_0(v1102_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1102_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1102_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1102_1_0.clone())
                            }
                        };
                        let v1115: string = string("}");
                        let v1122: bool = true;
                        let _fix_closure_v1117 = v1114;
                        let v1127: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1117 "), (v1115))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1128: bool = true;
                        _fix_closure_v1117
                    },
                ); // rust.fix_closure';
                let v1130 = __future_init;
                let v1132: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1130;
                let v1135: bool = true;
                v1132 /*;
                      let v1137: bool = */
            }); //;
            let v1139: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v870;
            let v1142: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1139 = v1139.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1139.clone(), v_1)
                })(value.clone())
            });
            let v1145: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::nearblocks::Root>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1142 = v1142.clone();
                    let v728 = v728.clone();
                    let v869 = v869.clone();
                    move || {
                        Dice_ui::closure78(
                            v0_1.clone(),
                            v728.clone(),
                            v869.clone(),
                            v1142.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1145 = v1145.clone();
                    let v124 = v124.clone();
                    let v725 = v725.clone();
                    move || {
                        Dice_ui::closure87(
                            v1.clone(),
                            v124.clone(),
                            v725.clone(),
                            v1145.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn closure91(
            unitVar: (),
            v0_1: Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
        ) -> Dice_ui::US43 {
            Dice_ui::US43::US43_0(v0_1)
        }
        pub fn method115() -> Func1<
            Option<
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>,
            >,
            Dice_ui::US43,
        > {
            Func1::new(
                move |v: Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >| Dice_ui::closure91((), v),
            )
        }
        pub fn closure92(unitVar: (), v0_1: std::string::String) -> Dice_ui::US43 {
            Dice_ui::US43::US43_1(v0_1)
        }
        pub fn method116() -> Func1<std::string::String, Dice_ui::US43> {
            Func1::new(move |v: std::string::String| Dice_ui::closure92((), v))
        }
        pub fn method117(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
        ) -> Func1<
            Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
            Dice_ui::US43,
        > {
            v0_1
        }
        pub fn closure93(
            v0_1: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            >,
            v1: Result<
                Option<
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    )>,
                >,
                std::string::String,
            >,
        ) -> Dice_ui::US43 {
            let v2: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = Dice_ui::method117(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure94(
            unitVar: (),
            v0_1: Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
        ) -> Dice_ui::US45 {
            Dice_ui::US45::US45_0(v0_1)
        }
        pub fn method118() -> Func1<
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            )>,
            Dice_ui::US45,
        > {
            Func1::new(
                move |v: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                )>| Dice_ui::closure94((), v),
            )
        }
        pub fn method119(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
        ) -> Func1<Dice_ui::US43, Dice_ui::US44> {
            v0_1
        }
        pub fn closure95(
            v0_1: Func1<Dice_ui::US43, Dice_ui::US44>,
            v1: Dice_ui::US43,
        ) -> Dice_ui::US44 {
            let v2: Func1<Dice_ui::US43, Dice_ui::US44> = Dice_ui::method119(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure96(unitVar: (), v0_1: Dice_ui::US44) -> bool {
            if let Dice_ui::US44::US44_0(v0_1_0_0) = &v0_1 {
                if let Dice_ui::US45::US45_1 = &v0_1_0_0 {
                    true
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method120() -> Func1<Dice_ui::US44, bool> {
            Func1::new(move |v: Dice_ui::US44| Dice_ui::closure96((), v))
        }
        pub fn method121(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method123(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                usize,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            )>,
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure99(
            v0_1: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            >,
            v1_: usize,
            v1__1: (
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (
            usize,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
            u32,
            Array<(std::string::String, Option<std::string::String>)>,
            f64,
            bool,
            f64,
            Array<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    usize,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u32,
                        Array<(std::string::String, Option<std::string::String>)>,
                        f64,
                        bool,
                        f64,
                        Array<std::string::String>,
                    ),
                )>,
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
            > = Dice_ui::method123(v0_1);
            let patternInput: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
                patternInput.11.clone(),
                patternInput.12.clone(),
            )
        }
        pub fn method124(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
        ) -> Func1<
            (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
            (string, usize, LrcPtr<Dice_ui::Heap5>),
        > {
            v0_1
        }
        pub fn closure100(
            v0_1: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            >,
            _arg: (
                usize,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
                u32,
                Array<(std::string::String, Option<std::string::String>)>,
                f64,
                bool,
                f64,
                Array<std::string::String>,
            ),
        ) -> (string, usize, LrcPtr<Dice_ui::Heap5>) {
            let v14: Func1<
                (
                    usize,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u32,
                    Array<(std::string::String, Option<std::string::String>)>,
                    f64,
                    bool,
                    f64,
                    Array<std::string::String>,
                ),
                (string, usize, LrcPtr<Dice_ui::Heap5>),
            > = Dice_ui::method124(v0_1);
            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = (move |x| v14(x))((
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
                _arg.6.clone(),
                _arg.7.clone(),
                _arg.8.clone(),
                _arg.9.clone(),
                _arg.10.clone(),
                _arg.11.clone(),
                _arg.12.clone(),
            ));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure98(v0_1: Array<string>, v1: i32, v2: Dice_ui::US44) -> Dice_ui::US48 {
            let v3: string = v0_1[v1].clone();
            match &v2 {
                Dice_ui::US44::US44_0(v2_0_0) => {
                    let v4: Dice_ui::US45 = v2_0_0.clone();
                    Dice_ui::US48::US48_0(match &v4 {
                        Dice_ui::US45::US45_0(v4_0_0) => {
                            let v7: Vec<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = match &v4 {
                                Dice_ui::US45::US45_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone()
                            .to_vec();
                            let v9 = v7.into_iter();
                            let v11 = v9.enumerate().map(std::sync::Arc::new);
                            let v13: Vec<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                            > = v11.collect::<Vec<_>>();
                            let v16: bool = true;
                            let _func1_from_v14 = Func1::from(move |value| {
                                //;
                                let v18: LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )> = value;
                                let b: (
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = v18.1.clone();
                                let v73: bool = true;
                                (
                                    v18.0.clone(),
                                    b.0.clone(),
                                    b.1.clone(),
                                    b.2.clone(),
                                    b.3.clone(),
                                    b.4.clone(),
                                    b.5.clone(),
                                    b.6.clone(),
                                    b.7.clone(),
                                    b.8.clone(),
                                    b.9.clone(),
                                    b.10.clone(),
                                    b.11.clone(),
                                ) /*;
                                  let v75: bool = */
                            }); //;
                            let v77: Func1<
                                LrcPtr<(
                                    usize,
                                    (
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    ),
                                )>,
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                            > = _func1_from_v14;
                            let v80: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v13
                                .into_iter()
                                .map(|x| {
                                    Func1::new({
                                        let v77 = v77.clone();
                                        move |tupledArg: LrcPtr<(
                                            usize,
                                            (
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            ),
                                        )>| {
                                            Dice_ui::closure99(
                                                v77.clone(),
                                                tupledArg.0.clone(),
                                                tupledArg.1.clone(),
                                            )
                                        }
                                    })(x.clone())
                                })
                                .collect::<Vec<_>>();
                            let v82: Array<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = fable_library_rust::NativeArray_::array_from(v80.clone());
                            let v84: Vec<(
                                usize,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )> = v82.to_vec();
                            let v87: bool = true;
                            let _func1_from_v85 = Func1::from(move |value| {
                                //;
                                let patternInput: (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ) = value;
                                let v103: usize = v1 as usize;
                                let v106: LrcPtr<Dice_ui::Heap5> = LrcPtr::new(Dice_ui::Heap5 {
                                    l0: patternInput.1.clone(),
                                    l1: patternInput.2.clone(),
                                    l2: patternInput.3.clone(),
                                    l3: patternInput.4.clone(),
                                    l4: patternInput.5.clone(),
                                    l5: patternInput.6.clone(),
                                    l6: patternInput.7.clone(),
                                    l7: patternInput.8.clone(),
                                    l8: patternInput.9.clone(),
                                    l9: patternInput.10.clone(),
                                    l10: patternInput.11.clone(),
                                    l11: patternInput.12.clone(),
                                });
                                let v109: bool = true;
                                (v3.clone(), v103, v106) /*;
                                                         let v111: bool = */
                            }); //;
                            let v113: Func1<
                                (
                                    usize,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                ),
                                (string, usize, LrcPtr<Dice_ui::Heap5>),
                            > = _func1_from_v85;
                            Dice_ui::US49::US49_0(
                                v84.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v113 = v113.clone();
                                            move |arg10_0040_1: (
                                                usize,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u32,
                                                Array<(
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                )>,
                                                f64,
                                                bool,
                                                f64,
                                                Array<std::string::String>,
                                            )| {
                                                Dice_ui::closure100(v113.clone(), arg10_0040_1)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            )
                        }
                        _ => Dice_ui::US49::US49_1,
                    })
                }
                Dice_ui::US44::US44_1(v2_1_0) => Dice_ui::US48::US48_1(v2_1_0.clone()),
            }
        }
        pub fn closure97(v0_1: Array<string>, v1: i32) -> Func1<Dice_ui::US44, Dice_ui::US48> {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: Dice_ui::US44| Dice_ui::closure98(v0_1.clone(), v1, v)
            })
        }
        pub fn method122(v0_1: Array<string>) -> Func1<i32, Func1<Dice_ui::US44, Dice_ui::US48>> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure97(v0_1.clone(), v)
            })
        }
        pub fn method125(v0_1: Vec<Dice_ui::US44>) -> Vec<Dice_ui::US44> {
            v0_1
        }
        pub fn method126(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
        ) -> Func1<Dice_ui::US48, Dice_ui::US50> {
            v0_1
        }
        pub fn closure101(
            v0_1: Func1<Dice_ui::US48, Dice_ui::US50>,
            v1: Dice_ui::US48,
        ) -> Dice_ui::US50 {
            let v2: Func1<Dice_ui::US48, Dice_ui::US50> = Dice_ui::method126(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method127(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func1<
            Dice_ui::US50,
            Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
        > {
            v0_1
        }
        pub fn closure102(
            v0_1: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v1: Dice_ui::US50,
        ) -> Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v2: Func1<
                Dice_ui::US50,
                Result<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            > = Dice_ui::method127(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method128(v0_1: i32, v1: LrcPtr<Dice_ui::Mut1>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure103(
            unitVar: (),
            v0_1: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US50 {
            Dice_ui::US50::US50_0(v0_1)
        }
        pub fn method130(
        ) -> Func1<Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US50> {
            Func1::new(
                move |v: Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure103((), v)
                },
            )
        }
        pub fn closure104(unitVar: (), v0_1: std::string::String) -> Dice_ui::US50 {
            Dice_ui::US50::US50_1(v0_1)
        }
        pub fn method131() -> Func1<std::string::String, Dice_ui::US50> {
            Func1::new(move |v: std::string::String| Dice_ui::closure104((), v))
        }
        pub fn closure105(
            unitVar: (),
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US49 {
            Dice_ui::US49::US49_0(v0_1)
        }
        pub fn method132() -> Func1<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US49> {
            Func1::new(move |v: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure105((), v)
            })
        }
        pub fn method133(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method134(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method129(v0_1: LrcPtr<Dice_ui::UH2>, v1: Dice_ui::US51) -> Dice_ui::US51 {
            let v0_1: MutCell<LrcPtr<Dice_ui::UH2>> = MutCell::new(v0_1.clone());
            let v1: MutCell<Dice_ui::US51> = MutCell::new(v1.clone());
            '_method129: loop {
                break '_method129 (match v0_1.get().clone().as_ref() {
                    Dice_ui::UH2::UH2_0 => v1.get().clone(),
                    Dice_ui::UH2::UH2_1(v0_1_1_0, v0_1_1_1) => {
                        let v2: Result<
                            Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        > = match v0_1.get().clone().as_ref() {
                            Dice_ui::UH2::UH2_1(x, _) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v4 = Dice_ui::method130();
                        let v5 = Dice_ui::method131();
                        let v7: Dice_ui::US50 = match &v2 {
                            Err(v2_1_0) => v5(v2_1_0.clone()),
                            Ok(v2_0_0) => v4(v2_0_0.clone()),
                        };
                        let v37: Dice_ui::US48 = match &v7 {
                            Dice_ui::US50::US50_0(v7_0_0) => Dice_ui::US48::US48_0(defaultValue(
                                Dice_ui::US49::US49_1,
                                map(Dice_ui::method132(), v7_0_0.clone()),
                            )),
                            Dice_ui::US50::US50_1(v7_1_0) => Dice_ui::US48::US48_1(v7_1_0.clone()),
                        };
                        {
                            let v0_1_temp: LrcPtr<Dice_ui::UH2> = match v0_1.get().clone().as_ref()
                            {
                                Dice_ui::UH2::UH2_1(_, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone();
                            let v1_temp: Dice_ui::US51 = if let Dice_ui::US51::US51_0(v1_0_0) =
                                &v1.get().clone()
                            {
                                match &v37 {
                                    Dice_ui::US48::US48_0(v37_0_0) => {
                                        let v39: Dice_ui::US49 = v37_0_0.clone();
                                        if let Dice_ui::US49::US49_0(v39_0_0) = &v39 {
                                            let v41: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method133(v39_0_0.clone());
                                            let v42: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                                Dice_ui::method134(v1_0_0.clone());
                                            let v44: bool = true;
                                            let mut v42 = v42;
                                            let v46: bool = true;
                                            v42.extend(v41);
                                            Dice_ui::US51::US51_0(v42)
                                        } else {
                                            v1.get().clone()
                                        }
                                    }
                                    Dice_ui::US48::US48_1(v37_1_0) => {
                                        Dice_ui::US51::US51_1(v37_1_0.clone())
                                    }
                                }
                            } else {
                                if let Dice_ui::US48::US48_1(v37_1_0) = &v37 {
                                    Dice_ui::US51::US51_1(v37_1_0.clone())
                                } else {
                                    v1.get().clone()
                                }
                            };
                            v0_1.set(v0_1_temp);
                            v1.set(v1_temp);
                            continue '_method129;
                        }
                    }
                });
            }
        }
        pub fn method135(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure106(
            unitVar: (),
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> std::string::String {
            (_arg.2.clone()).l5.clone()
        }
        pub fn method136() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), std::string::String> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure106((), arg10_0040)
            })
        }
        pub fn method137(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn closure90(
            v0_1: leptos::prelude::ArcMemo<Array<string>>,
            v1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u32,
                                Array<(std::string::String, Option<std::string::String>)>,
                                f64,
                                bool,
                                f64,
                                Array<std::string::String>,
                            )>,
                        >,
                        std::string::String,
                    >,
                >,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>
        {
            let v3: Vec<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
            > = leptos::prelude::ArcMemo::get(&v1);
            let v6: bool = true;
            let _func1_from_v4 = Func1::from(move |value| {
                //;
                let v8: Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                > = value;
                let v9 = Dice_ui::method115();
                let v10 = Dice_ui::method116();
                let v12: Dice_ui::US43 = match &v8 {
                    Err(v8_1_0) => v10(v8_1_0.clone()),
                    Ok(v8_0_0) => v9(v8_0_0.clone()),
                };
                let v17: bool = true;
                v12 /*;
                    let v19: bool = */
            }); //;
            let v21: Func1<
                Result<
                    Option<
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u32,
                            Array<(std::string::String, Option<std::string::String>)>,
                            f64,
                            bool,
                            f64,
                            Array<std::string::String>,
                        )>,
                    >,
                    std::string::String,
                >,
                Dice_ui::US43,
            > = _func1_from_v4;
            let v24: Vec<Dice_ui::US43> = v3
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v21 = v21.clone();
                        move |v: Result<
                            Option<
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u32,
                                    Array<(std::string::String, Option<std::string::String>)>,
                                    f64,
                                    bool,
                                    f64,
                                    Array<std::string::String>,
                                )>,
                            >,
                            std::string::String,
                        >| Dice_ui::closure93(v21.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v27: bool = true;
            let _func1_from_v25 = Func1::from(move |value| {
                //;
                let v29: Dice_ui::US43 = value;
                let v57: Dice_ui::US44 = match &v29 {
                    Dice_ui::US43::US43_0(v29_0_0) => Dice_ui::US44::US44_0(defaultValue(
                        Dice_ui::US45::US45_1,
                        map(Dice_ui::method118(), v29_0_0.clone()),
                    )),
                    Dice_ui::US43::US43_1(v29_1_0) => Dice_ui::US44::US44_1(v29_1_0.clone()),
                };
                let v60: bool = true;
                v57 /*;
                    let v62: bool = */
            }); //;
            let v64: Func1<Dice_ui::US43, Dice_ui::US44> = _func1_from_v25;
            let v67: Vec<Dice_ui::US44> = v24
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v64 = v64.clone();
                        move |v_1: Dice_ui::US43| Dice_ui::closure95(v64.clone(), v_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v74: string = append(
                (append(
                    string("transactions.render (8) / txns move / root: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v67.clone()))),
                )),
                string(""),
            );
            let v76: bool = true;
            leptos::logging::log!("{}", v74);
            let v77 = Dice_ui::method120();
            let v78: Vec<Dice_ui::US44> = Dice_ui::method121(v67.clone());
            let v80: Vec<Dice_ui::US44> = v78
                .into_iter()
                .filter(|x| v77(x.clone().clone()))
                .collect::<Vec<_>>();
            let v87: bool = (get_Count(fable_library_rust::NativeArray_::array_from(v80.clone())))
                == (get_Count(fable_library_rust::NativeArray_::array_from(
                    v67.clone().clone(),
                )));
            let v208: Dice_ui::US46 = if v87 {
                Dice_ui::US46::US46_0(Dice_ui::US47::US47_1)
            } else {
                let v92 = Dice_ui::method122(leptos::prelude::ArcMemo::get(&v0_1));
                let v93: Vec<Dice_ui::US44> = Dice_ui::method125(v67);
                let v95: Vec<Dice_ui::US48> = v93
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v92(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>();
                let v98: bool = true;
                let _func1_from_v96 = Func1::from(move |value| {
                    //;
                    let v100: Dice_ui::US48 = value;
                    let v114: Dice_ui::US50 = match &v100 {
                        Dice_ui::US48::US48_0(v100_0_0) => {
                            let v101: Dice_ui::US49 = v100_0_0.clone();
                            Dice_ui::US50::US50_0(match &v101 {
                                Dice_ui::US49::US49_0(v101_0_0) => Some(
                                    match &v101 {
                                        Dice_ui::US49::US49_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            })
                        }
                        Dice_ui::US48::US48_1(v100_1_0) => Dice_ui::US50::US50_1(v100_1_0.clone()),
                    };
                    let v117: bool = true;
                    v114 /*;
                         let v119: bool = */
                }); //;
                let v121: Func1<Dice_ui::US48, Dice_ui::US50> = _func1_from_v96;
                let v124: Vec<Dice_ui::US50> = v95
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v121 = v121.clone();
                            move |v_2: Dice_ui::US48| Dice_ui::closure101(v121.clone(), v_2)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v127: bool = true;
                let _func1_from_v125 = Func1::from(move |value| {
                    //;
                    let v129: Dice_ui::US50 = value;
                    let v141: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = match &v129 {
                        Dice_ui::US50::US50_0(v129_0_0) => {
                            Ok::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v129_0_0.clone())
                        }
                        Dice_ui::US50::US50_1(v129_1_0) => {
                            Err::<
                                Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                                std::string::String,
                            >(v129_1_0.clone())
                        }
                    };
                    let v144: bool = true;
                    v141 /*;
                         let v146: bool = */
                }); //;
                let v148: Func1<
                    Dice_ui::US50,
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = _func1_from_v125;
                let v151: Vec<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = v124
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v148 = v148.clone();
                            move |v_3: Dice_ui::US50| Dice_ui::closure102(v148.clone(), v_3)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v154: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                    new_empty::<(string, usize, LrcPtr<Dice_ui::Heap5>)>().to_vec();
                let v156: Array<
                    Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    >,
                > = fable_library_rust::NativeArray_::array_from(v151.clone());
                let v157: i32 = get_Count(v156.clone());
                let v159: LrcPtr<Dice_ui::Mut1> = LrcPtr::new(Dice_ui::Mut1 {
                    l0: MutCell::new(0_i32),
                    l1: MutCell::new(LrcPtr::new(Dice_ui::UH2::UH2_0)),
                });
                while Dice_ui::method128(v157, v159.clone()) {
                    let v161: i32 = v159.l0.get().clone();
                    let v164: i32 = ((v161.wrapping_neg()) + (v157)) - 1_i32;
                    let v165: LrcPtr<Dice_ui::UH2> = v159.l1.get().clone();
                    let v166: Result<
                        Option<Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                        std::string::String,
                    > = v156[v164].clone();
                    let v167: i32 = (v161) + 1_i32;
                    v159.l0.set(v167);
                    v159.l1.set(LrcPtr::new(Dice_ui::UH2::UH2_1(v166, v165)));
                    ()
                }
                {
                    let v171: Dice_ui::US51 =
                        Dice_ui::method129(v159.l1.get().clone(), Dice_ui::US51::US51_0(v154));
                    let v185: Dice_ui::US51 = match &v171 {
                        Dice_ui::US51::US51_0(v171_0_0) => {
                            let v173: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method135(v171_0_0.clone());
                            let v174 = Dice_ui::method136();
                            let v176: bool = true;
                            let mut v173 = v173;
                            let v178: bool = true;
                            v173.sort_by_key(|x| v174(x.clone()));
                            Dice_ui::US51::US51_0(v173)
                        }
                        Dice_ui::US51::US51_1(v171_1_0) => Dice_ui::US51::US51_1(v171_1_0.clone()),
                    };
                    let v200: Dice_ui::US52 = match &v185 {
                        Dice_ui::US51::US51_0(v185_0_0) => {
                            let v187: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method137(v185_0_0.clone());
                            let v189: bool = true;
                            let mut v187 = v187;
                            let v191: bool = true;
                            v187.reverse();
                            let v193: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v187;
                            Dice_ui::US52::US52_0(fable_library_rust::NativeArray_::array_from(
                                v193.clone(),
                            ))
                        }
                        Dice_ui::US51::US51_1(v185_1_0) => Dice_ui::US52::US52_1(v185_1_0.clone()),
                    };
                    match &v200 {
                        Dice_ui::US52::US52_0(v200_0_0) => {
                            Dice_ui::US46::US46_0(Dice_ui::US47::US47_0(v200_0_0.clone()))
                        }
                        Dice_ui::US52::US52_1(v200_1_0) => Dice_ui::US46::US46_1(v200_1_0.clone()),
                    }
                }
            };
            let v222: Dice_ui::US53 = match &v208 {
                Dice_ui::US46::US46_0(v208_0_0) => {
                    let v209: Dice_ui::US47 = v208_0_0.clone();
                    Dice_ui::US53::US53_0(match &v209 {
                        Dice_ui::US47::US47_0(v209_0_0) => Some(
                            match &v209 {
                                Dice_ui::US47::US47_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    })
                }
                Dice_ui::US46::US46_1(v208_1_0) => Dice_ui::US53::US53_1(v208_1_0.clone()),
            };
            let v234: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = match &v222 {
                Dice_ui::US53::US53_0(v222_0_0) => Ok::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v222_0_0.clone()),
                Dice_ui::US53::US53_1(v222_1_0) => Err::<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                >(v222_1_0.clone()),
            };
            let v241: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        (append(
                            (append(
                                string(
                                    "use_transactions.render (9) / txns new_arc_memo / result: ",
                                ),
                                sprintf!("{:?}", v234.clone()),
                            )),
                            string(" / loading: "),
                        )),
                        (ofBoolean(v87)),
                    )),
                    string(""),
                ),
            );
            let v243: bool = true;
            leptos::logging::log!("{}", v241);
            v234
        }
        pub fn closure108(
            unitVar: (),
            v0_1: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
        ) -> Dice_ui::US53 {
            Dice_ui::US53::US53_0(v0_1)
        }
        pub fn method138(
        ) -> Func1<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, Dice_ui::US53> {
            Func1::new(
                move |v: Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>| {
                    Dice_ui::closure108((), v)
                },
            )
        }
        pub fn closure109(unitVar: (), v0_1: std::string::String) -> Dice_ui::US53 {
            Dice_ui::US53::US53_1(v0_1)
        }
        pub fn method139() -> Func1<std::string::String, Dice_ui::US53> {
            Func1::new(move |v: std::string::String| Dice_ui::closure109((), v))
        }
        pub fn closure110(
            unitVar: (),
            v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Dice_ui::US47 {
            Dice_ui::US47::US47_0(v0_1)
        }
        pub fn method140() -> Func1<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, Dice_ui::US47> {
            Func1::new(move |v: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>| {
                Dice_ui::closure110((), v)
            })
        }
        pub fn closure111(unitVar: (), v0_1: serde_json::Error) -> std::string::String {
            format!("{}", v0_1)
        }
        pub fn method141() -> Func1<serde_json::Error, std::string::String> {
            Func1::new(move |v: serde_json::Error| Dice_ui::closure111((), v))
        }
        pub fn closure112(unitVar: (), v0_1: std::string::String) -> string {
            fable_library_rust::String_::fromString(v0_1)
        }
        pub fn method142() -> Func1<std::string::String, string> {
            Func1::new(move |v: std::string::String| Dice_ui::closure112((), v))
        }
        pub fn method143(
            v0_1: Result<std::string::String, std::string::String>,
        ) -> Result<std::string::String, std::string::String> {
            v0_1
        }
        pub fn closure113(
            unitVar: (),
            v0_1: string,
        ) -> (string, Dice_ui::US23, string, bool, bool) {
            (
                string("https://rpc.mainnet.near.org"),
                Dice_ui::US23::US23_1,
                v0_1,
                true,
                false,
            )
        }
        pub fn method144() -> Func1<string, (string, Dice_ui::US23, string, bool, bool)> {
            Func1::new(move |v: string| Dice_ui::closure113((), v))
        }
        pub fn method145(
            v0_1: Result<string, std::string::String>,
        ) -> Result<string, std::string::String> {
            v0_1
        }
        pub fn method146(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
        ) -> Func1<
            (string, usize, LrcPtr<Dice_ui::Heap5>),
            Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
        > {
            v0_1
        }
        pub fn closure114(
            v0_1: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            >,
            _arg: (string, usize, LrcPtr<Dice_ui::Heap5>),
        ) -> Result<(string, Dice_ui::US23, string, bool, bool), std::string::String> {
            let v4: Func1<
                (string, usize, LrcPtr<Dice_ui::Heap5>),
                Result<(string, Dice_ui::US23, string, bool, bool), std::string::String>,
            > = Dice_ui::method146(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure107(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, std::string::String>
        {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method138();
            let v4 = Dice_ui::method139();
            let v6: Dice_ui::US53 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v36: Dice_ui::US46 = match &v6 {
                Dice_ui::US53::US53_0(v6_0_0) => Dice_ui::US46::US46_0(defaultValue(
                    Dice_ui::US47::US47_1,
                    map(Dice_ui::method140(), v6_0_0.clone()),
                )),
                Dice_ui::US53::US53_1(v6_1_0) => Dice_ui::US46::US46_1(v6_1_0.clone()),
            };
            let v372: Dice_ui::US54 = match &v36 {
                Dice_ui::US46::US46_0(v36_0_0) => {
                    let v37: Dice_ui::US47 = v36_0_0.clone();
                    if let Dice_ui::US47::US47_0(v37_0_0) = &v37 {
                        let v40: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v37_0_0.clone().to_vec();
                        let v43: bool = true;
                        let _func1_from_v41 = Func1::from(move |value| {
                            //;
                            let patternInput: (string, usize, LrcPtr<Dice_ui::Heap5>) = value;
                            let v57: &str = &*string("2.0");
                            let v90: std::string::String = String::from(v57);
                            let v124: &str = &*string("dontcare");
                            let v157: std::string::String = String::from(v124);
                            let v191: &str = &*string("EXPERIMENTAL_tx_status");
                            let v224: std::string::String = String::from(v191);
                            let v259: &str = &*string("bowen");
                            let v317: Array<std::string::String> = new_array(&[
                                (patternInput.2.clone()).l3.clone(),
                                String::from(v259),
                            ]);
                            let v319: Vec<std::string::String> = v317.to_vec();
                            let v321: crate::model::near::rpc::RpcInput =
                                crate::model::near::rpc::RpcInput {
                                    jsonrpc: v90,
                                    id: v157,
                                    method: v224,
                                    params: v319,
                                };
                            let v323: Result<std::string::String, serde_json::Error> =
                                serde_json::to_string(&v321);
                            let v324 = Dice_ui::method141();
                            let v330: Result<std::string::String, std::string::String> =
                                v323.map_err(|x| v324(x));
                            let v340 = Dice_ui::method142();
                            let v341: Result<std::string::String, std::string::String> =
                                Dice_ui::method143(v330);
                            let v343: Result<string, std::string::String> = v341.map(|x| v340(x));
                            let v344 = Dice_ui::method144();
                            let v345: Result<string, std::string::String> =
                                Dice_ui::method145(v343);
                            let v347: Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            > = v345.map(|x| v344(x));
                            let v350: bool = true;
                            v347 /*;
                                 let v352: bool = */
                        }); //;
                        let v354: Func1<
                            (string, usize, LrcPtr<Dice_ui::Heap5>),
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = _func1_from_v41;
                        let v357: Vec<
                            Result<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::string::String,
                            >,
                        > = v40
                            .into_iter()
                            .map(|x| {
                                Func1::new({
                                    let v354 = v354.clone();
                                    move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                                        Dice_ui::closure114(v354.clone(), arg10_0040)
                                    }
                                })(x.clone())
                            })
                            .collect::<Vec<_>>();
                        let v359: Result<
                            Vec<(string, Dice_ui::US23, string, bool, bool)>,
                            std::string::String,
                        > = v357.into_iter().collect();
                        let v361: Vec<(string, Dice_ui::US23, string, bool, bool)> = v359?;
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_0(
                            fable_library_rust::NativeArray_::array_from(v361.clone()),
                        ))
                    } else {
                        Dice_ui::US54::US54_0(Dice_ui::US55::US55_1)
                    }
                }
                Dice_ui::US46::US46_1(v36_1_0) => Dice_ui::US54::US54_1(v36_1_0.clone()),
            };
            let v386: Dice_ui::US56 = match &v372 {
                Dice_ui::US54::US54_0(v372_0_0) => {
                    let v373: Dice_ui::US55 = v372_0_0.clone();
                    Dice_ui::US56::US56_0(match &v373 {
                        Dice_ui::US55::US55_0(v373_0_0) => Some(
                            match &v373 {
                                Dice_ui::US55::US55_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ),
                        _ => None::<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    })
                }
                Dice_ui::US54::US54_1(v372_1_0) => Dice_ui::US56::US56_1(v372_1_0.clone()),
            };
            let v398: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = match &v386 {
                Dice_ui::US56::US56_0(v386_0_0) => Ok::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v386_0_0.clone()),
                Dice_ui::US56::US56_1(v386_1_0) => Err::<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >(v386_1_0.clone()),
            };
            let v405: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (10) / rpc_requests new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v398.clone()),
                    )),
                    string(""),
                ),
            );
            let v407: bool = true;
            leptos::logging::log!("{}", v405);
            v398
        }
        pub fn closure116(
            unitVar: (),
            v0_1: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
        ) -> Dice_ui::US56 {
            Dice_ui::US56::US56_0(v0_1)
        }
        pub fn method147(
        ) -> Func1<Option<Array<(string, Dice_ui::US23, string, bool, bool)>>, Dice_ui::US56>
        {
            Func1::new(
                move |v: Option<Array<(string, Dice_ui::US23, string, bool, bool)>>| {
                    Dice_ui::closure116((), v)
                },
            )
        }
        pub fn closure117(unitVar: (), v0_1: std::string::String) -> Dice_ui::US56 {
            Dice_ui::US56::US56_1(v0_1)
        }
        pub fn method148() -> Func1<std::string::String, Dice_ui::US56> {
            Func1::new(move |v: std::string::String| Dice_ui::closure117((), v))
        }
        pub fn closure118(
            unitVar: (),
            v0_1: Array<(string, Dice_ui::US23, string, bool, bool)>,
        ) -> Dice_ui::US55 {
            Dice_ui::US55::US55_0(v0_1)
        }
        pub fn method149(
        ) -> Func1<Array<(string, Dice_ui::US23, string, bool, bool)>, Dice_ui::US55> {
            Func1::new(
                move |v: Array<(string, Dice_ui::US23, string, bool, bool)>| {
                    Dice_ui::closure118((), v)
                },
            )
        }
        pub fn closure115(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Vec<(string, Dice_ui::US23, string, bool, bool)> {
            let v2: Result<
                Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method147();
            let v4 = Dice_ui::method148();
            let v6: Dice_ui::US56 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v36: Dice_ui::US54 = match &v6 {
                Dice_ui::US56::US56_0(v6_0_0) => Dice_ui::US54::US54_0(defaultValue(
                    Dice_ui::US55::US55_1,
                    map(Dice_ui::method149(), v6_0_0.clone()),
                )),
                Dice_ui::US56::US56_1(v6_1_0) => Dice_ui::US54::US54_1(v6_1_0.clone()),
            };
            let v42: Array<(string, Dice_ui::US23, string, bool, bool)> =
                if let Dice_ui::US54::US54_0(v36_0_0) = &v36 {
                    let v37: Dice_ui::US55 = v36_0_0.clone();
                    if let Dice_ui::US55::US55_0(v37_0_0) = &v37 {
                        v37_0_0.clone()
                    } else {
                        new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                    }
                } else {
                    new_empty::<(string, Dice_ui::US23, string, bool, bool)>()
                };
            let v44: Vec<(string, Dice_ui::US23, string, bool, bool)> = v42.to_vec();
            let v51: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string(
                            "use_transactions.render (11) / rpc_requests\' new_arc_memo / result: ",
                        ),
                        sprintf!("{:?}", v44.clone()),
                    )),
                    string(""),
                ),
            );
            let v53: bool = true;
            leptos::logging::log!("{}", v51);
            v44
        }
        pub fn closure121(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransferDetail,
        ) -> (
            std::string::String,
            Option<std::string::String>,
            Option<f64>,
            Option<std::string::String>,
        ) {
            (
                v0_1.clone().deposit,
                v0_1.clone().args,
                v0_1.clone().gas,
                v0_1.method_name,
            )
        }
        pub fn method151(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
        ) -> Func1<
            std::collections::HashMap<std::string::String, crate::model::near::rpc::TransferDetail>,
            std::collections::HashMap<
                std::string::String,
                (
                    std::string::String,
                    Option<std::string::String>,
                    Option<f64>,
                    Option<std::string::String>,
                ),
            >,
        > {
            v0_1
        }
        pub fn closure122(
            v0_1: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            v1: std::collections::HashMap<
                std::string::String,
                crate::model::near::rpc::TransferDetail,
            >,
        ) -> std::collections::HashMap<
            std::string::String,
            (
                std::string::String,
                Option<std::string::String>,
                Option<f64>,
                Option<std::string::String>,
            ),
        > {
            let v2: Func1<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::near::rpc::TransferDetail,
                >,
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            > = Dice_ui::method151(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method152(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::Receipt,
            (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure123(
            v0_1: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::Receipt,
        ) -> (
            std::string::String,
            Array<
                std::collections::HashMap<
                    std::string::String,
                    (
                        std::string::String,
                        Option<std::string::String>,
                        Option<f64>,
                        Option<std::string::String>,
                    ),
                >,
            >,
            std::string::String,
            Array<std::string::String>,
            Array<std::string::String>,
            std::string::String,
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method152(v0_1);
            let patternInput: (
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
            )
        }
        pub fn method153(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::GasProfile,
            (
                std::string::String,
                std::string::String,
                std::string::String,
            ),
        > {
            v0_1
        }
        pub fn closure124(
            v0_1: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            >,
            v1: crate::model::near::rpc::GasProfile,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
        ) {
            let v2: Func1<
                crate::model::near::rpc::GasProfile,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = Dice_ui::method153(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method155(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
        ) -> Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>
        {
            v0_1
        }
        pub fn closure126(
            v0_1: Func1<crate::model::near::rpc::Proof, (std::string::String, std::string::String)>,
            v1: crate::model::near::rpc::Proof,
        ) -> (std::string::String, std::string::String) {
            let v2: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = Dice_ui::method155(v0_1);
            let patternInput: (std::string::String, std::string::String) = (move |x| v2(x))(v1);
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure125(
            unitVar: (),
            v0_1: Vec<crate::model::near::rpc::Proof>,
        ) -> Array<(std::string::String, std::string::String)> {
            let v3: bool = true;
            let _func1_from_v1 = Func1::from(move |value| {
                //;
                let v5: crate::model::near::rpc::Proof = value;
                let v7: std::string::String = v5.clone().direction;
                let v9: std::string::String = v5.hash;
                let v12: bool = true;
                (v7, v9) /*;
                         let v14: bool = */
            }); //;
            let v16: Func1<
                crate::model::near::rpc::Proof,
                (std::string::String, std::string::String),
            > = _func1_from_v1;
            let v19: Vec<(std::string::String, std::string::String)> = v0_1
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v16 = v16.clone();
                        move |v: crate::model::near::rpc::Proof| Dice_ui::closure126(v16.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            fable_library_rust::NativeArray_::array_from(v19.clone())
        }
        pub fn method154() -> Func1<
            Vec<crate::model::near::rpc::Proof>,
            Array<(std::string::String, std::string::String)>,
        > {
            Func1::new(move |v: Vec<crate::model::near::rpc::Proof>| Dice_ui::closure125((), v))
        }
        pub fn method156(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::ReceiptsOutcome,
            (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ),
        > {
            v0_1
        }
        pub fn closure127(
            v0_1: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            >,
            v1: crate::model::near::rpc::ReceiptsOutcome,
        ) -> (
            std::string::String,
            std::string::String,
            std::string::String,
            u64,
            Array<std::string::String>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            u8,
            Array<std::string::String>,
            std::collections::HashMap<std::string::String, std::string::String>,
            Option<std::string::String>,
            Array<(std::string::String, std::string::String)>,
        ) {
            let v2: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = Dice_ui::method156(v0_1);
            let patternInput: (
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            ) = (move |x| v2(x))(v1);
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
                patternInput.3.clone(),
                patternInput.4.clone(),
                patternInput.5.clone(),
                patternInput.6.clone(),
                patternInput.7.clone(),
                patternInput.8.clone(),
                patternInput.9.clone(),
                patternInput.10.clone(),
            )
        }
        pub fn closure120(
            unitVar: (),
            v0_1: crate::model::near::rpc::TransactionStatus,
        ) -> (
            Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )>,
            Array<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )>,
        ) {
            let v2: Vec<crate::model::near::rpc::Receipt> = v0_1.clone().receipts;
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: crate::model::near::rpc::Receipt = value;
                let v9: std::string::String = v7.clone().predecessor_id;
                let v11: crate::model::near::rpc::ReceiptDetail = v7.clone().receipt;
                let v13: crate::model::near::rpc::ActionDetail = v11.action;
                let v15: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                > = v13.clone().actions;
                let v18: bool = true;
                let _func1_from_v16 = Func1::from(move |value| {
                    //;
                    let v20: std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    > = value;
                    let v23: std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    > = v20
                        .into_iter()
                        .map(|(k, v)| {
                            (
                                k,
                                Func1::new(move |v: crate::model::near::rpc::TransferDetail| {
                                    Dice_ui::closure121((), v)
                                })(v),
                            )
                        })
                        .collect();
                    let v26: bool = true;
                    v23 /*;
                        let v28: bool = */
                }); //;
                let v30: Func1<
                    std::collections::HashMap<
                        std::string::String,
                        crate::model::near::rpc::TransferDetail,
                    >,
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = _func1_from_v16;
                let v33: Vec<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = v15
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v30 = v30.clone();
                            move |v_1: std::collections::HashMap<
                                std::string::String,
                                crate::model::near::rpc::TransferDetail,
                            >| Dice_ui::closure122(v30.clone(), v_1)
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v35: Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                > = fable_library_rust::NativeArray_::array_from(v33.clone());
                let v37: std::string::String = v13.clone().gas_price;
                let v39: Vec<std::string::String> = v13.clone().input_data_ids;
                let v41: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v39.clone());
                let v43: Vec<std::string::String> = v13.clone().output_data_receivers;
                let v45: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v43.clone());
                let v47: std::string::String = v13.clone().signer_id;
                let v49: std::string::String = v13.signer_public_key;
                let v51: std::string::String = v7.clone().receipt_id;
                let v53: std::string::String = v7.receiver_id;
                let v56: bool = true;
                (v9, v35, v37, v41, v45, v47, v49, v51, v53) /*;
                                                             let v58: bool = */
            }); //;
            let v60: Func1<
                crate::model::near::rpc::Receipt,
                (
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                ),
            > = _func1_from_v3;
            let v63: Vec<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v60 = v60.clone();
                        move |v_2: crate::model::near::rpc::Receipt| {
                            Dice_ui::closure123(v60.clone(), v_2)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v65: Array<(
                std::string::String,
                Array<
                    std::collections::HashMap<
                        std::string::String,
                        (
                            std::string::String,
                            Option<std::string::String>,
                            Option<f64>,
                            Option<std::string::String>,
                        ),
                    >,
                >,
                std::string::String,
                Array<std::string::String>,
                Array<std::string::String>,
                std::string::String,
                std::string::String,
                std::string::String,
                std::string::String,
            )> = fable_library_rust::NativeArray_::array_from(v63.clone());
            let v67: Vec<crate::model::near::rpc::ReceiptsOutcome> = v0_1.receipts_outcome;
            let v70: bool = true;
            let _func1_from_v68 = Func1::from(move |value| {
                //;
                let v72: crate::model::near::rpc::ReceiptsOutcome = value;
                let v74: std::string::String = v72.clone().block_hash;
                let v76: std::string::String = v72.clone().id;
                let v78: crate::model::near::rpc::OutcomeDetail = v72.clone().outcome;
                let v80: std::string::String = v78.clone().executor_id;
                let v82: u64 = v78.clone().gas_burnt;
                let v84: Vec<std::string::String> = v78.clone().logs;
                let v86: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v84.clone());
                let v88: crate::model::near::rpc::Metadata = v78.clone().metadata;
                let v90: Vec<crate::model::near::rpc::GasProfile> = v88.clone().gas_profile;
                let v93: bool = true;
                let _func1_from_v91 = Func1::from(move |value| {
                    //;
                    let v95: crate::model::near::rpc::GasProfile = value;
                    let v97: std::string::String = v95.clone().cost;
                    let v99: std::string::String = v95.clone().cost_category;
                    let v101: std::string::String = v95.gas_used;
                    let v104: bool = true;
                    (v97, v99, v101) /*;
                                     let v106: bool = */
                }); //;
                let v108: Func1<
                    crate::model::near::rpc::GasProfile,
                    (
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    ),
                > = _func1_from_v91;
                let v111: Vec<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = v90
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v108 = v108.clone();
                            move |v_3: crate::model::near::rpc::GasProfile| {
                                Dice_ui::closure124(v108.clone(), v_3)
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>();
                let v113: Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )> = fable_library_rust::NativeArray_::array_from(v111.clone());
                let v115: u8 = v88.version;
                let v117: Vec<std::string::String> = v78.clone().receipt_ids;
                let v119: Array<std::string::String> =
                    fable_library_rust::NativeArray_::array_from(v117.clone());
                let v121: std::collections::HashMap<std::string::String, std::string::String> =
                    v78.clone().status;
                let v123: Option<std::string::String> = v78.tokens_burnt;
                let v125: Option<Vec<crate::model::near::rpc::Proof>> = v72.proof;
                let v163: Array<(std::string::String, std::string::String)> = defaultValue(
                    new_empty::<(std::string::String, std::string::String)>(),
                    map(Dice_ui::method154(), v125),
                );
                let v168: bool = true;
                (v74, v76, v80, v82, v86, v113, v115, v119, v121, v123, v163) /*;
                                                                              let v170: bool = */
            }); //;
            let v172: Func1<
                crate::model::near::rpc::ReceiptsOutcome,
                (
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                ),
            > = _func1_from_v68;
            let v175: Vec<(
                std::string::String,
                std::string::String,
                std::string::String,
                u64,
                Array<std::string::String>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                u8,
                Array<std::string::String>,
                std::collections::HashMap<std::string::String, std::string::String>,
                Option<std::string::String>,
                Array<(std::string::String, std::string::String)>,
            )> = v67
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v172 = v172.clone();
                        move |v_4: crate::model::near::rpc::ReceiptsOutcome| {
                            Dice_ui::closure127(v172.clone(), v_4)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            (
                v65,
                fable_library_rust::NativeArray_::array_from(v175.clone()),
            )
        }
        pub fn method150() -> Func1<
            crate::model::near::rpc::TransactionStatus,
            (
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::TransactionStatus| {
                Dice_ui::closure120((), v)
            })
        }
        pub fn closure129(
            unitVar: (),
            v0_1: crate::model::near::rpc::ErrorCauseInfo,
        ) -> (Option<std::string::String>, Option<std::string::String>) {
            (v0_1.clone().error_message, v0_1.requested_transaction_hash)
        }
        pub fn method158() -> Func1<
            crate::model::near::rpc::ErrorCauseInfo,
            (Option<std::string::String>, Option<std::string::String>),
        > {
            Func1::new(move |v: crate::model::near::rpc::ErrorCauseInfo| Dice_ui::closure129((), v))
        }
        pub fn closure128(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcError,
        ) -> (
            std::string::String,
            std::string::String,
            Option<(Option<std::string::String>, Option<std::string::String>)>,
            i32,
            std::string::String,
            std::string::String,
        ) {
            let v2: std::string::String = v0_1.clone().name;
            let v4: crate::model::near::rpc::ErrorCause = v0_1.clone().cause;
            let v6: std::string::String = v4.clone().name;
            let v8: Option<crate::model::near::rpc::ErrorCauseInfo> = v4.info;
            (
                v2,
                v6,
                map(Dice_ui::method158(), v8),
                v0_1.clone().code,
                v0_1.clone().message,
                v0_1.data,
            )
        }
        pub fn method157() -> Func1<
            crate::model::near::rpc::RpcError,
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        > {
            Func1::new(move |v: crate::model::near::rpc::RpcError| Dice_ui::closure128((), v))
        }
        pub fn closure119(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> (
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        ) {
            let v2: std::string::String = v0_1.clone().jsonrpc;
            let v4: Option<crate::model::near::rpc::TransactionStatus> = v0_1.clone().result;
            let v8: Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )> = map(Dice_ui::method150(), v4);
            let v197: Option<crate::model::near::rpc::RpcError> = v0_1.clone().error;
            (v2, v8, map(Dice_ui::method157(), v197), v0_1.id)
        }
        pub fn closure133(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Option<crate::model::near::rpc::RpcResponse> {
            Some(v0_1)
        }
        pub fn method161(
        ) -> Func1<crate::model::near::rpc::RpcResponse, Option<crate::model::near::rpc::RpcResponse>>
        {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure133((), v))
        }
        pub fn method162(
            v0_1: Result<crate::model::near::rpc::RpcResponse, std::string::String>,
        ) -> Result<crate::model::near::rpc::RpcResponse, std::string::String> {
            v0_1
        }
        pub fn closure132(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
            _arg: (string, Dice_ui::US23, string, bool, bool),
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            let v56: Dice_ui::US29 = match &v0_1 {
                Dice_ui::US35::US35_0(v0_1_0_0) => {
                    let v8: Dice_ui::US36 = match &v0_1 {
                        Dice_ui::US35::US35_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US29::US29_0(match &v8 {
                        Dice_ui::US36::US36_0(v8_0_0) => {
                            let v10: Option<Dice_ui::US25> = tryItem(v2, v8_0_0.clone());
                            let v29: Dice_ui::US32 =
                                defaultValue(Dice_ui::US32::US32_1, map(Dice_ui::method87(), v10));
                            let v39: Dice_ui::US25 = if let Dice_ui::US32::US32_0(v29_0_0) = &v29 {
                                let v33: Dice_ui::US25 = v29_0_0.clone();
                                if let Dice_ui::US25::US25_0(v33_0_0) = &v33 {
                                    Dice_ui::US25::US25_0(v33_0_0.clone())
                                } else {
                                    Dice_ui::US25::US25_1
                                }
                            } else {
                                Dice_ui::US25::US25_1
                            };
                            Dice_ui::US30::US30_0(match &v39 {
                                Dice_ui::US25::US25_0(v39_0_0) => {
                                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                                        (match &v39 {
                                            Dice_ui::US25::US25_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        })
                                        .l0
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US31::US31_1,
                            })
                        }
                        Dice_ui::US36::US36_1(v8_1_0) => Dice_ui::US30::US30_1(v8_1_0.clone()),
                    })
                }
                _ => Dice_ui::US29::US29_1,
            };
            let v69: string = append(
                (append(
                    (append(
                        (append(
                            string("state_core.use_request (15) / result memo / request: "),
                            (Dice_ui::method8(
                                400_i64,
                                sprintf!(
                                    "{:?}",
                                    (
                                        _arg.0.clone(),
                                        _arg.1.clone(),
                                        _arg.2.clone(),
                                        _arg.3.clone(),
                                        _arg.4.clone()
                                    )
                                ),
                            )),
                        )),
                        string(" / state_data: "),
                    )),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v56.clone()))),
                )),
                string(""),
            );
            let v71: bool = true;
            leptos::logging::log!("{}", v69);
            let v78: string = append(
                (append(
                    string("state_core.use_request (16) / effect / json: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v1.clone()))),
                )),
                string(""),
            );
            let v80: bool = true;
            leptos::logging::log!("{}", v78);
            let v117: Dice_ui::US31 = match &v1 {
                Dice_ui::US41::US41_0(v1_0_0) => {
                    let v84: Option<Dice_ui::US31> = tryItem(
                        v2,
                        fable_library_rust::NativeArray_::array_from(v1_0_0.clone().clone()),
                    );
                    let v103: Dice_ui::US42 =
                        defaultValue(Dice_ui::US42::US42_1, map(Dice_ui::method108(), v84));
                    if let Dice_ui::US42::US42_0(v103_0_0) = &v103 {
                        let v107: Dice_ui::US31 = v103_0_0.clone();
                        if let Dice_ui::US31::US31_0(v107_0_0) = &v107 {
                            Dice_ui::US31::US31_0(v107_0_0.clone())
                        } else {
                            Dice_ui::US31::US31_1
                        }
                    } else {
                        Dice_ui::US31::US31_1
                    }
                }
                _ => Dice_ui::US31::US31_1,
            };
            if let Dice_ui::US31::US31_0(v117_0_0) = &v117 {
                let v119: string = Dice_ui::method41(v117_0_0.clone());
                let v128: &str = &*v119;
                let v154: Result<crate::model::near::rpc::RpcResponse, serde_json::Error> =
                    serde_json::from_str(&v128);
                let v155 = Dice_ui::method42();
                let v161: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    v154.map_err(|x| v155(x));
                let v171 = Dice_ui::method161();
                let v172: Result<crate::model::near::rpc::RpcResponse, std::string::String> =
                    Dice_ui::method162(v161);
                v172.map(|x| v171(x))
            } else {
                if let Dice_ui::US29::US29_0(v56_0_0) = &v56 {
                    let v175: Dice_ui::US30 = v56_0_0.clone();
                    if let Dice_ui::US30::US30_0(v175_0_0) = &v175 {
                        let v176: Dice_ui::US31 = v175_0_0.clone();
                        if let Dice_ui::US31::US31_0(v176_0_0) = &v176 {
                            let v178: string = Dice_ui::method41(v176_0_0.clone());
                            let v187: &str = &*v178;
                            let v213: Result<
                                crate::model::near::rpc::RpcResponse,
                                serde_json::Error,
                            > = serde_json::from_str(&v187);
                            let v214 = Dice_ui::method42();
                            let v220: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = v213.map_err(|x| v214(x));
                            let v230 = Dice_ui::method161();
                            let v231: Result<
                                crate::model::near::rpc::RpcResponse,
                                std::string::String,
                            > = Dice_ui::method162(v220);
                            v231.map(|x| v230(x))
                        } else {
                            let v238: string = append(
                                (append(
                                    string("state_core.use_request (17) / json Error / value: "),
                                    sprintf!("{:?}", (v117.clone(), v56.clone())),
                                )),
                                string(""),
                            );
                            let v240: bool = true;
                            leptos::logging::log!("{}", v238);
                            Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                                None::<crate::model::near::rpc::RpcResponse>,
                            )
                        }
                    } else {
                        let v251: string = append(
                            (append(
                                string("state_core.use_request (17) / json Error / value: "),
                                sprintf!("{:?}", (v117.clone(), v56.clone())),
                            )),
                            string(""),
                        );
                        let v253: bool = true;
                        leptos::logging::log!("{}", v251);
                        Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                            None::<crate::model::near::rpc::RpcResponse>,
                        )
                    }
                } else {
                    let v264: string = append(
                        (append(
                            string("state_core.use_request (17) / json Error / value: "),
                            sprintf!("{:?}", (v117.clone(), v56.clone())),
                        )),
                        string(""),
                    );
                    let v266: bool = true;
                    leptos::logging::log!("{}", v264);
                    Ok::<Option<crate::model::near::rpc::RpcResponse>, std::string::String>(
                        None::<crate::model::near::rpc::RpcResponse>,
                    )
                }
            }
        }
        pub fn closure131(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
            v2: i32,
        ) -> Func1<
            (string, Dice_ui::US23, string, bool, bool),
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |arg10_0040: (string, Dice_ui::US23, string, bool, bool)| {
                    Dice_ui::closure132(v0_1.clone(), v1.clone(), v2, arg10_0040)
                }
            })
        }
        pub fn method160(
            v0_1: Dice_ui::US35,
            v1: Dice_ui::US41,
        ) -> Func1<
            i32,
            Func1<
                (string, Dice_ui::US23, string, bool, bool),
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            >,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure131(v0_1.clone(), v1.clone(), v)
            })
        }
        pub fn closure130(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            >,
            v2: leptos::prelude::ArcLocalResource<Result<Vec<Option<string>>, std::string::String>>,
            v3: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            >,
            unitVar: (),
        ) -> Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>
        {
            let v5: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                leptos::prelude::ArcMemo::get(&v0_1);
            let v10: string = append(
                (append(
                    string("state_core.use_requests (13) / result memo / requests: "),
                    sprintf!("{:?}", v5.clone()),
                )),
                string(""),
            );
            let v12: bool = true;
            leptos::logging::log!("{}", v10);
            let v14: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                leptos::prelude::ArcMemo::get(&v1);
            let v33: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v14));
            let v85: Dice_ui::US35 = match &v33 {
                Dice_ui::US26::US26_0(v33_0_0) => {
                    let v37: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v33 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v38 = Dice_ui::method83();
                    let v39 = Dice_ui::method84();
                    let v41: Dice_ui::US24 = match &v37 {
                        Err(v37_1_0) => v39(v37_1_0.clone()),
                        Ok(v37_0_0) => v38(v37_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v41 {
                        Dice_ui::US24::US24_0(v41_0_0) => {
                            let v46: bool = true;
                            let _vec_map: Vec<_> = v41_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v48: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v67: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v48),
                                    );
                                    let v72: bool = true;
                                    v67
                                })
                                .collect::<Vec<_>>();
                            let v74: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v74.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v41_1_0) => Dice_ui::US36::US36_1(v41_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v92: string = append(
                (append(
                    string("state_core.use_request (14) / result_memo / state_data: "),
                    (Dice_ui::method8(400_i64, sprintf!("{:?}", v85.clone()))),
                )),
                string(""),
            );
            let v94: bool = true;
            leptos::logging::log!("{}", v92);
            let v96: Option<Result<Vec<Option<string>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v115: Dice_ui::US37 =
                defaultValue(Dice_ui::US37::US37_1, map(Dice_ui::method103(), v96));
            let v129: Dice_ui::US38 = match &v115 {
                Dice_ui::US37::US37_0(v115_0_0) => {
                    let v119: Result<Vec<Option<string>>, std::string::String> = match &v115 {
                        Dice_ui::US37::US37_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    let v120 = Dice_ui::method104();
                    let v121 = Dice_ui::method105();
                    Dice_ui::US38::US38_0(match &v119 {
                        Err(v119_1_0) => v121(v119_1_0.clone()),
                        Ok(v119_0_0) => v120(v119_0_0.clone()),
                    })
                }
                _ => Dice_ui::US38::US38_1,
            };
            let v170: Dice_ui::US40 = match &v129 {
                Dice_ui::US38::US38_0(v129_0_0) => {
                    let v130: Dice_ui::US39 = match &v129 {
                        Dice_ui::US38::US38_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone();
                    Dice_ui::US40::US40_0(match &v130 {
                        Dice_ui::US39::US39_0(v130_0_0) => {
                            let v133: bool = true;
                            let _vec_map: Vec<_> = v130_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v135: Option<string> = x;
                                    let v154: Dice_ui::US31 = defaultValue(
                                        Dice_ui::US31::US31_1,
                                        map(Dice_ui::method106(), v135),
                                    );
                                    let v159: bool = true;
                                    v154
                                })
                                .collect::<Vec<_>>();
                            Dice_ui::US41::US41_0(_vec_map)
                        }
                        Dice_ui::US39::US39_1(v130_1_0) => Dice_ui::US41::US41_1(v130_1_0.clone()),
                    })
                }
                _ => Dice_ui::US40::US40_1,
            };
            let v173: Vec<Dice_ui::US31> = new_empty::<Dice_ui::US31>().to_vec();
            let v177: Dice_ui::US41 = match &v170 {
                Dice_ui::US40::US40_0(v170_0_0) => match &v170 {
                    Dice_ui::US40::US40_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => Dice_ui::US41::US41_0(v173.clone()),
            };
            let v260: bool = match &v177 {
                Dice_ui::US41::US41_0(v177_0_0) => {
                    let v180: bool = true;
                    v177_0_0.clone().into_iter().for_each(|x| {
                        //;
                        let v182: Dice_ui::US31 = x;
                        let v253: bool = if let Dice_ui::US31::US31_0(v182_0_0) = &v182 {
                            let v192: &str = &*v182_0_0.clone();
                            let v250: LrcPtr<Dice_ui::Heap4> = LrcPtr::new(Dice_ui::Heap4 {
                                l0: String::from(v192),
                            });
                            let v252: bool = true;
                            leptos::prelude::Action::dispatch(&v3.clone(), v250.clone());
                            true
                        } else {
                            false
                        };
                        let v255: bool = true;
                        let v257: bool = true;
                    }); //;
                    false
                }
                _ => false,
            };
            let v261 = Dice_ui::method160(v85, v177.clone());
            let v262: Vec<(string, Dice_ui::US23, string, bool, bool)> = Dice_ui::method96(v5);
            let v264: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v262
                .iter()
                .enumerate()
                .map(|(i, x)| v261(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>();
            let v266: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = fable_library_rust::NativeArray_::array_from(v264.clone());
            let v273: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (18) / result_func func0 / result: "),
                        sprintf!("{:?}", v266.clone()),
                    )),
                    string(""),
                ),
            );
            let v275: bool = true;
            leptos::logging::log!("{}", v273);
            v266
        }
        pub fn method164(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            crate::model::near::rpc::RpcResponse,
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure135(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: Option<crate::model::near::rpc::RpcResponse>,
        ) -> Option<(
            std::string::String,
            Option<(
                Array<(
                    std::string::String,
                    Array<
                        std::collections::HashMap<
                            std::string::String,
                            (
                                std::string::String,
                                Option<std::string::String>,
                                Option<f64>,
                                Option<std::string::String>,
                            ),
                        >,
                    >,
                    std::string::String,
                    Array<std::string::String>,
                    Array<std::string::String>,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    std::string::String,
                )>,
                Array<(
                    std::string::String,
                    std::string::String,
                    std::string::String,
                    u64,
                    Array<std::string::String>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    u8,
                    Array<std::string::String>,
                    std::collections::HashMap<std::string::String, std::string::String>,
                    Option<std::string::String>,
                    Array<(std::string::String, std::string::String)>,
                )>,
            )>,
            Option<(
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            )>,
            Option<std::string::String>,
        )> {
            map(Dice_ui::method164(v0_1), v1)
        }
        pub fn method163(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> Func1<
            Option<crate::model::near::rpc::RpcResponse>,
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v_1: Option<crate::model::near::rpc::RpcResponse>| {
                    Dice_ui::closure135(v0_1.clone(), v_1)
                }
            })
        }
        pub fn method165(
            v0_1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String> {
            v0_1
        }
        pub fn method166(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        ) -> Func1<
            Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            v0_1
        }
        pub fn closure136(
            v0_1: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            v1: Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = Dice_ui::method166(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure134(
            v0_1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
            v1: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>>,
            v2: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            >,
            v3: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            >,
            unitVar: (),
        ) -> Vec<
            Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            >,
        > {
            let v5: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v1.clone().into()).into();
            let v7: bool = leptos::prelude::ArcSignal::get(&v5);
            let v9: leptos::prelude::ArcSignal<bool> =
                leptos::prelude::Submission::pending(&v2.clone().into()).into();
            let v11: bool = leptos::prelude::ArcSignal::get(&v9);
            let v13: Option<std::sync::Arc<rexie::Rexie>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v1), |x| x.clone());
            let v32: Dice_ui::US2 = defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v13));
            let v37: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                Option::map(leptos::prelude::ArcLocalResource::get(&v2), |x| x.clone());
            let v56: Dice_ui::US26 =
                defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v37));
            let v108: Dice_ui::US35 = match &v56 {
                Dice_ui::US26::US26_0(v56_0_0) => {
                    let v60: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                        match &v56 {
                            Dice_ui::US26::US26_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                    let v61 = Dice_ui::method83();
                    let v62 = Dice_ui::method84();
                    let v64: Dice_ui::US24 = match &v60 {
                        Err(v60_1_0) => v62(v60_1_0.clone()),
                        Ok(v60_0_0) => v61(v60_0_0.clone()),
                    };
                    Dice_ui::US35::US35_0(match &v64 {
                        Dice_ui::US24::US24_0(v64_0_0) => {
                            let v69: bool = true;
                            let _vec_map: Vec<_> = v64_0_0
                                .clone()
                                .into_iter()
                                .map(|x| {
                                    //;
                                    let v71: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                    let v90: Dice_ui::US25 = defaultValue(
                                        Dice_ui::US25::US25_1,
                                        map(Dice_ui::method85(), v71),
                                    );
                                    let v95: bool = true;
                                    v90
                                })
                                .collect::<Vec<_>>();
                            let v97: Vec<Dice_ui::US25> = _vec_map;
                            Dice_ui::US36::US36_0(fable_library_rust::NativeArray_::array_from(
                                v97.clone(),
                            ))
                        }
                        Dice_ui::US24::US24_1(v64_1_0) => Dice_ui::US36::US36_1(v64_1_0.clone()),
                    })
                }
                _ => Dice_ui::US35::US35_1,
            };
            let v114: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v32));
            let v120: string = Dice_ui::method8(400_i64, sprintf!("{:?}", v108));
            let v121: string =
                append((append((append((append((append((append((append((append(string("state_core.use_request (19) / result move / database: "),
                                                                               (v114))),
                                                                       string(" / database_loading: "))),
                                                               (ofBoolean(v7)))),
                                                       string(" / state_data: "))),
                                               (v120))),
                                       string(" / state_data_loading: "))),
                               (ofBoolean(v11)))), string(""));
            let v123: bool = true;
            leptos::logging::log!("{}", v121);
            let v125: Array<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = leptos::prelude::ArcMemo::get(&v3);
            let v127: Vec<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
            > = v125.to_vec();
            let v130: bool = true;
            let _func1_from_v128 = Func1::from(move |value| {
                //;
                let v132: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = value;
                let v133 = Dice_ui::method163(v0_1);
                let v134: Result<
                    Option<crate::model::near::rpc::RpcResponse>,
                    std::string::String,
                > = Dice_ui::method165(v132);
                let v136: Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                > = v134.map(|x| v133(x));
                let v139: bool = true;
                v136 /*;
                     let v141: bool = */
            }); //;
            let v143: Func1<
                Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>,
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = _func1_from_v128;
            let v146: Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            > = v127
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v143 = v143.clone();
                        move |v: Result<
                            Option<crate::model::near::rpc::RpcResponse>,
                            std::string::String,
                        >| Dice_ui::closure136(v143.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v153: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("state_core.use_requests (20) / result func0 / result: "),
                        sprintf!("{:?}", v146.clone()),
                    )),
                    string(""),
                ),
            );
            let v155: bool = true;
            leptos::logging::log!("{}", v153);
            v146
        }
        pub fn method159(
            v0_1: leptos::prelude::ArcMemo<Vec<(string, Dice_ui::US23, string, bool, bool)>>,
            v1: Func1<
                crate::model::near::rpc::RpcResponse,
                (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                ),
            >,
        ) -> leptos::prelude::ArcMemo<
            Vec<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
        > {
            let v4: bool = true;
            leptos::logging::log!("{}", string("state_core.use_requests (1)"));
            let v7: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v10: bool = true;
            let _func0_from_v8 = Func0::from(move || {
                //;
                let v12: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v14: bool = */
                    async move {
                        /*;
                        let v16: bool = */
                        ();
                        let v19: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v22: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v24: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v26: bool = */
                            async {
                                /*;
                                let v28: bool = */
                                ();
                                let v29: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v30: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v32: Result<rexie::Rexie, rexie::Error> = v30.await;
                                let v33 = Dice_ui::method6();
                                let v39: Result<rexie::Rexie, std::string::String> =
                                    v32.map_err(|x| v33(x));
                                let v51: string = string("}");
                                let v58: bool = true;
                                let _fix_closure_v53 = v39;
                                let v63: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v53 "), (v51))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v64: bool = true;
                                _fix_closure_v53
                            },
                        ); // rust.fix_closure';
                        let v66 = __future_init;
                        let v68: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v66;
                        let v70: Result<rexie::Rexie, std::string::String> = v68.await;
                        let v76: rexie::Rexie = v70.unwrap();
                        let v87: rexie::Rexie = (Dice_ui::method7())(v76);
                        let v89: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v87);
                        let v96: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v89.clone()))),
                                        string("")));
                        let v98: bool = true;
                        leptos::logging::log!("{}", v96);
                        let v99: string = string("}");
                        let v106: bool = true;
                        let _fix_closure_v101 = v89;
                        let v111: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v101 "), (v99))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v112: bool = true;
                        _fix_closure_v101
                    },
                ); // rust.fix_closure';
                let v114 = __future_init;
                let v116: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v114;
                let v118: bool = true;
                v116 /*;
                     let v120: bool = */
            }); //;
            let v122: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v8;
            let v124: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v122().await });
            let v127: leptos::prelude::ArcMemo<
                Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v124 = v124.clone();
                    move || Dice_ui::closure64(v124.clone(), ())
                })()
            });
            let v130: bool = true;
            let _func0_from_v128 = Func0::from(move || {
                //;
                let v132: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v124.clone()), |x| {
                        x.clone()
                    });
                let v134: bool = true;
                let _optionm_map_ = v132.map(|x| {
                    //;
                    let v136: std::sync::Arc<rexie::Rexie> = x;
                    let v139: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v136);
                    let v141: bool = true;
                    v139
                });
                let v143: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v145: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v147: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v149: bool = */
                    async move {
                        /*;
                        let v151: bool = */
                        ();
                        let v153: string = sprintf!("{:?}", v143.clone());
                        let v162: string =
                append((append((append((append(string("state_core.use_requests (3) / state_data_resource new_local_resource / request : "),
                                               (Dice_ui::method8(400_i64,
                                                                 sprintf!("{:?}",
                                                                          v145.clone()))))),
                                       string(" / database: "))), (v153))),
                       string(""));
                        let v164: bool = true;
                        leptos::logging::log!("{}", v162);
                        let v166: bool = true;
                        let _optionm_map_ = v143.map(|x| {
                            //;
                            let v168: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v170: std::sync::Arc<rexie::Rexie> = v168.0;
                            let v172: bool = true;
                            v170
                        });
                        let v174: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v193: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v174));
                        let v678: Dice_ui::US24 = if let Dice_ui::US2::US2_0(v193_0_0) = &v193 {
                            let v200: bool = true;
                            let _func1_from_v198 = Func1::from(move |value| {
                                //;
                                let patternInput: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v207: string = append(
                                    (append(
                                        (append(
                                            (append(string("url["), (patternInput.0.clone()))),
                                            string("]("),
                                        )),
                                        sprintf!("{:?}", patternInput.2.clone()),
                                    )),
                                    string(")"),
                                );
                                let v208: string = append(
                                    (append(
                                        string("state_core.get_data () / id: "),
                                        (v207.clone()),
                                    )),
                                    string(""),
                                );
                                let v210: bool = true;
                                leptos::logging::log!("{}", v208);
                                let v212: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v214: bool = */
                                    async {
                                        /*;
                                        let v216: bool = */
                                        ();
                                        let v218: Array<string> = new_array(&[string("store")]);
                                        let v220: Vec<string> = v218.to_vec();
                                        let v223: bool = true;
                                        let _func1_from_v221 = Func1::from(move |value| {
                                            //;
                                            let v225: string = value;
                                            let v234: &str = &*v225;
                                            let v267: std::string::String = String::from(v234);
                                            let v294: bool = true;
                                            v267 /*;
                                                 let v296: bool = */
                                        }); //;
                                        let v298: Func1<string, std::string::String> =
                                            _func1_from_v221;
                                        let v301: Vec<std::string::String> = v220
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v298 = v298.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v298.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v302: std::sync::Arc<rexie::Rexie> =
                                            Dice_ui::method11(v193_0_0.clone());
                                        let v304: Result<rexie::Transaction, rexie::Error> = v302
                                            .transaction(&v301, rexie::TransactionMode::ReadOnly);
                                        let v305 = Dice_ui::method12();
                                        let v311: Result<rexie::Transaction, std::string::String> =
                                            v304.map_err(|x| v305(x));
                                        let v322: rexie::Transaction = v311?;
                                        let v323: string = Dice_ui::method13();
                                        let v332: &str = &*v323;
                                        let v358: Result<rexie::Store, rexie::Error> =
                                            v322.store(v332);
                                        let v359 = Dice_ui::method14();
                                        let v365: Result<rexie::Store, std::string::String> =
                                            v358.map_err(|x| v359(x));
                                        let v376: rexie::Store = v365?;
                                        let v377: string = Dice_ui::method79(v207);
                                        let v386: &str = &*v377;
                                        let v412: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v386);
                                        let v414: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v376, v412));
                                        let v416: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v414.await;
                                        let v417 = Dice_ui::method16();
                                        let v423: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v416.map_err(|x| v417(x));
                                        let v434: Option<wasm_bindgen::JsValue> = v423?;
                                        let v453: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v434),
                                        );
                                        let v561: Dice_ui::US25 = match &v453 {
                                            Dice_ui::US4::US4_0(v453_0_0) => {
                                                let v458: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v453 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v460: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v458);
                                                let v461 = Dice_ui::method19();
                                                let v467: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v460.map_err(|x| v461(x));
                                                let v478: Option<serde_json::Value> = v467?;
                                                let v497: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v478),
                                                );
                                                match &v497 {
                                                    Dice_ui::US5::US5_0(v497_0_0) => {
                                                        let v502: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v497 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v504: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v502);
                                                        let v505 = Dice_ui::method22();
                                                        let v511: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v504.map_err(|x| v505(x));
                                                        let v522: Vec<u8> = v511?;
                                                        let v524: Array<u8> =
                                            fable_library_rust::NativeArray_::array_from(v522.clone());
                                                        let v526: string =
                                            append((append(string("state_core.get_data () / data_len: "),
                                                           (toString(get_Count(v524.clone()))))),
                                                   string(""));
                                                        let v528: bool = true;
                                                        leptos::logging::log!("{}", v526);
                                                        let v530: Vec<u8> = v524.to_vec();
                                                        let v532: &[u8] = v530.as_slice();
                                                        let v534: bool = true;
                                                        let mut v532 = v532;
                                                        let v536: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v532,
                                                        );
                                                        let v537 = Dice_ui::method23();
                                                        let v543: Result<
                                                            LrcPtr<Dice_ui::Heap4>,
                                                            std::string::String,
                                                        > = v536.map_err(|x| v537(x));
                                                        Dice_ui::US25::US25_0(v543?)
                                                    }
                                                    _ => Dice_ui::US25::US25_1,
                                                }
                                            }
                                            _ => Dice_ui::US25::US25_1,
                                        };
                                        let v569: Option<LrcPtr<Dice_ui::Heap4>> = match &v561 {
                                            Dice_ui::US25::US25_0(v561_0_0) => Some(
                                                match &v561 {
                                                    Dice_ui::US25::US25_0(x) => x.clone(),
                                                    _ => unreachable!(),
                                                }
                                                .clone(),
                                            ),
                                            _ => None::<LrcPtr<Dice_ui::Heap4>>,
                                        };
                                        let v574: string = string("}");
                                        let v581: bool = true;
                                        let _fix_closure_v576 = Ok::<
                                            Option<LrcPtr<Dice_ui::Heap4>>,
                                            std::string::String,
                                        >(
                                            v569
                                        );
                                        let v586: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v576 "),
                                                        (v574),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v587: bool = true;
                                        _fix_closure_v576
                                    },
                                ); // rust.fix_closure';
                                let v589 = __future_init;
                                let v591: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v589;
                                let v594: bool = true;
                                v591 /*;
                                     let v596: bool = */
                            }); //;
                            let v598: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v198;
                            let v602: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method81(
                                v145.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v598 = v598.clone();
                                            move |arg10_0040_2: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure65(v598.clone(), arg10_0040_2)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v604: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<LrcPtr<Dice_ui::Heap4>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v602);
                            let v606: Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            > = v604.await;
                            Dice_ui::US24::US24_0(v606?)
                        } else {
                            let v619: &str = &*string("database=None");
                            Dice_ui::US24::US24_1(String::from(v619))
                        };
                        let v690: Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String> =
                            match &v678 {
                                Dice_ui::US24::US24_0(v678_0_0) => {
                                    Ok::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v678_0_0.clone(),
                                    )
                                }
                                Dice_ui::US24::US24_1(v678_1_0) => {
                                    Err::<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>(
                                        v678_1_0.clone(),
                                    )
                                }
                            };
                        let v697: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_requests (4) / state_data_resource new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v690.clone()))),
                                        string("")));
                        let v699: bool = true;
                        leptos::logging::log!("{}", v697);
                        let v700: string = string("}");
                        let v707: bool = true;
                        let _fix_closure_v702 = v690;
                        let v712: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v702 "), (v700))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v713: bool = true;
                        _fix_closure_v702
                    },
                ); // rust.fix_closure';
                let v715 = __future_init;
                let v717: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                > = v715;
                let v719: bool = true;
                v717 /*;
                     let v721: bool = */
            }); //;
            let v723: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<
                                Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                std::string::String,
                            >,
                        >,
                    >,
                >,
            > = _func0_from_v128;
            let v725: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v723().await });
            let v728: leptos::prelude::ArcMemo<
                Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v725 = v725.clone();
                    move || Dice_ui::closure66(v725.clone(), ())
                })()
            });
            let v731: bool = true;
            let _func0_from_v729 = Func0::from(move || {
                //;
                let v733: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                    leptos::prelude::ArcMemo::get(&v0_1.clone());
                let v735: Option<Result<Vec<Option<LrcPtr<Dice_ui::Heap4>>>, std::string::String>> =
                    leptos::prelude::ArcMemo::get(&v728.clone());
                let v742: string = append(
                    (append(
                        string(
                            "state_core.use_requests (7) / json new_local_resource / requests: ",
                        ),
                        (Dice_ui::method8(400_i64, sprintf!("{:?}", v733.clone()))),
                    )),
                    string(""),
                );
                let v744: bool = true;
                leptos::logging::log!("{}", v742);
                let v746: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v748: bool = */
                    async move {
                        /*;
                        let v750: bool = */
                        ();
                        let v769: Dice_ui::US26 =
                            defaultValue(Dice_ui::US26::US26_1, map(Dice_ui::method82(), v735));
                        let v819: Dice_ui::US27 = match &v769 {
                            Dice_ui::US26::US26_0(v769_0_0) => {
                                let v773: Result<
                                    Vec<Option<LrcPtr<Dice_ui::Heap4>>>,
                                    std::string::String,
                                > = match &v769 {
                                    Dice_ui::US26::US26_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone();
                                let v774 = Dice_ui::method83();
                                let v775 = Dice_ui::method84();
                                let v777: Dice_ui::US24 = match &v773 {
                                    Err(v773_1_0) => v775(v773_1_0.clone()),
                                    Ok(v773_0_0) => v774(v773_0_0.clone()),
                                };
                                Dice_ui::US27::US27_0(match &v777 {
                                    Dice_ui::US24::US24_0(v777_0_0) => {
                                        let v782: bool = true;
                                        let _vec_map: Vec<_> = v777_0_0
                                            .clone()
                                            .into_iter()
                                            .map(|x| {
                                                //;
                                                let v784: Option<LrcPtr<Dice_ui::Heap4>> = x;
                                                let v803: Dice_ui::US25 = defaultValue(
                                                    Dice_ui::US25::US25_1,
                                                    map(Dice_ui::method85(), v784),
                                                );
                                                let v808: bool = true;
                                                v803
                                            })
                                            .collect::<Vec<_>>();
                                        Dice_ui::US28::US28_0(_vec_map)
                                    }
                                    Dice_ui::US24::US24_1(v777_1_0) => {
                                        Dice_ui::US28::US28_1(v777_1_0.clone())
                                    }
                                })
                            }
                            _ => Dice_ui::US27::US27_1,
                        };
                        let v826: string = append(
                            (append(
                                string("state_core.use_requests (8) / result_memo / state_data: "),
                                (Dice_ui::method8(400_i64, sprintf!("{:?}", v819.clone()))),
                            )),
                            string(""),
                        );
                        let v828: bool = true;
                        leptos::logging::log!("{}", v826);
                        let v829 = Dice_ui::method86(v819);
                        let v830: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            Dice_ui::method96(v733);
                        let v833: Vec<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = Dice_ui::method97(
                            v830.iter()
                                .enumerate()
                                .map(|(i, x)| v829(i.try_into().unwrap())(x.clone()))
                                .collect::<Vec<_>>(),
                        );
                        let v835: futures::future::TryJoinAll<
                            std::pin::Pin<
                                Box<
                                    dyn std::future::Future<
                                        Output = Result<Option<string>, std::string::String>,
                                    >,
                                >,
                            >,
                        > = futures::future::try_join_all(v833);
                        let v837: Result<Vec<Option<string>>, std::string::String> = v835.await;
                        let v839: Vec<Option<string>> = v837?;
                        let v844: string = string("}");
                        let v851: bool = true;
                        let _fix_closure_v846 =
                            Ok::<Vec<Option<string>>, std::string::String>(v839);
                        let v856: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v846 "), (v844))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v857: bool = true;
                        _fix_closure_v846
                    },
                ); // rust.fix_closure';
                let v859 = __future_init;
                let v861: std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                > = v859;
                let v863: bool = true;
                v861 /*;
                     let v865: bool = */
            }); //;
            let v867: Func0<
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Vec<Option<string>>, std::string::String>,
                        >,
                    >,
                >,
            > = _func0_from_v729;
            let v869: leptos::prelude::ArcLocalResource<
                Result<Vec<Option<string>>, std::string::String>,
            > = leptos::prelude::ArcLocalResource::new(|| async move { v867().await });
            let v872: bool = true;
            let _func1_from_v870 = Func1::from(move |value| {
                //;
                let v874: LrcPtr<Dice_ui::Heap4> = value;
                let v880: string = append(
                    (append(
                        string(
                            "state_core.use_requests (10) / set_state_data_action / value_len: ",
                        ),
                        (toString(length(sprintf!("{:?}", v874.clone())) as i64)),
                    )),
                    string(""),
                );
                let v882: bool = true;
                leptos::logging::log!("{}", v880);
                let v884: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v886: bool = */
                    async move {
                        /*;
                        let v888: bool = */
                        ();
                        let v890: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Vec<(string, Dice_ui::US23, string, bool, bool)>,
                                >,
                            >,
                        > = Box::pin(v0_1.clone());
                        let v892: Vec<(string, Dice_ui::US23, string, bool, bool)> =
                            leptos::prelude::ArcMemo::get_untracked(&v890);
                        let v894: std::pin::Pin<
                            Box<
                                leptos::prelude::ArcMemo<
                                    Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>>,
                                >,
                            >,
                        > = Box::pin(v127);
                        let v896: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> =
                            leptos::prelude::ArcMemo::get_untracked(&v894);
                        let v898: bool = true;
                        let _optionm_map_ = v896.map(|x| {
                            //;
                            let v900: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v902: std::sync::Arc<rexie::Rexie> = v900.0;
                            let v904: bool = true;
                            v902
                        });
                        let v906: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v925: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v906));
                        let v1102: Dice_ui::US34 = if let Dice_ui::US2::US2_0(v925_0_0) = &v925 {
                            let v932: bool = true;
                            let _func1_from_v930 = Func1::from(move |value| {
                                //;
                                let patternInput_1: (string, Dice_ui::US23, string, bool, bool) =
                                    value;
                                let v934: string = patternInput_1.0.clone();
                                let v940: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v942: bool = */
                                    async move {
                                        /*;
                                        let v944: bool = */
                                        ();
                                        let v945: string =
                        append((append(string("state_core.use_requests (11) / set_state_data_action / database=Some(_) / url: "),
                                       (v934.clone()))), string(""));
                                        let v947: bool = true;
                                        leptos::logging::log!("{}", v945);
                                        let v948: string = append(
                                            (append(
                                                (append(
                                                    (append(string("url["), (v934))),
                                                    string("]("),
                                                )),
                                                sprintf!("{:?}", patternInput_1.2.clone()),
                                            )),
                                            string(")"),
                                        );
                                        let v954: string = append(
                                            (append(
                                                string("state_core.set_data () / data_len: "),
                                                (toString(
                                                    length(sprintf!("{:?}", v874.clone())) as i64
                                                )),
                                            )),
                                            string(""),
                                        );
                                        let v956: bool = true;
                                        leptos::logging::log!("{}", v954);
                                        let v958: bool = true;
                                        let __future_init = Box::pin(
                                            /*;
                                            let v960: bool = */
                                            async move {
                                                /*;
                                                let v962: bool = */
                                                ();
                                                let v964: bool = true;
                                                let mut data = Vec::new();
                                                let v966: bool = true;
                                                borsh::BorshSerialize::serialize(&v874, &mut data)
                                                    .unwrap();
                                                let v968: Vec<u8> = data;
                                                let v970: wasm_bindgen::JsValue =
                                                    serde_wasm_bindgen::to_value(&v968).unwrap();
                                                let v971: string = Dice_ui::method98(v948);
                                                let v980: &str = &*v971;
                                                let v1006: rexie::Transaction =
                                                    v925_0_0.clone().transaction(
                                                        &["store"],
                                                        rexie::TransactionMode::ReadWrite,
                                                    )?;
                                                let v1008: rexie::Store = v1006.store("store")?;
                                                let v1010: bool = true;
                                                v1008.put(&v970, Some(&v980.into())).await?;
                                                let v1012: bool = true;
                                                v1006.done().await?;
                                                let v1017: string = string("}");
                                                let v1024: bool = true;
                                                let _fix_closure_v1019 = Ok::<(), rexie::Error>(());
                                                let v1029: string = append(
                                                    (append(
                                                        (append(
                                                            (append(
                                                                string("true; _fix_closure_v1019 "),
                                                                (v1017),
                                                            )),
                                                            string("); "),
                                                        )),
                                                        string(""),
                                                    )),
                                                    string(" // rust.fix_closure\'"),
                                                );
                                                let v1030: bool = true;
                                                _fix_closure_v1019
                                            },
                                        ); // rust.fix_closure';
                                        let v1032 = __future_init;
                                        let v1034: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<(), rexie::Error>,
                                                >,
                                            >,
                                        > = v1032;
                                        let v1036: Result<(), rexie::Error> = v1034.await;
                                        let v1037 = Dice_ui::method99();
                                        let v1043: Result<(), std::string::String> =
                                            v1036.map_err(|x| v1037(x));
                                        let v1054: bool = true;
                                        v1043?;
                                        let v1059: string = string("}");
                                        let v1066: bool = true;
                                        let _fix_closure_v1061 = Ok::<(), std::string::String>(());
                                        let v1071: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1061 "),
                                                        (v1059),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1072: bool = true;
                                        _fix_closure_v1061
                                    },
                                ); // rust.fix_closure';
                                let v1074 = __future_init;
                                let v1076: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                > = v1074;
                                let v1079: bool = true;
                                v1076 /*;
                                      let v1081: bool = */
                            }); //;
                            let v1083: Func1<
                                (string, Dice_ui::US23, string, bool, bool),
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = _func1_from_v930;
                            let v1087: Vec<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = Dice_ui::method101(
                                v892.into_iter()
                                    .map(|x| {
                                        Func1::new({
                                            let v1083 = v1083.clone();
                                            move |arg10_0040_4: (
                                                string,
                                                Dice_ui::US23,
                                                string,
                                                bool,
                                                bool,
                                            )| {
                                                Dice_ui::closure76(v1083.clone(), arg10_0040_4)
                                            }
                                        })(x.clone())
                                    })
                                    .collect::<Vec<_>>(),
                            );
                            let v1089: futures::future::TryJoinAll<
                                std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<(), std::string::String>,
                                        >,
                                    >,
                                >,
                            > = futures::future::try_join_all(v1087);
                            let v1091: Result<Vec<()>, std::string::String> = v1089.await;
                            Dice_ui::US34::US34_0(v1091?)
                        } else {
                            let v1097: bool = true;
                            leptos::logging::log!("{}", string("state_core.use_requests (12) / set_state_data_action / database,request=None"));
                            Dice_ui::US34::US34_0(new_empty::<()>().to_vec())
                        };
                        let v1114: Result<Vec<()>, std::string::String> = match &v1102 {
                            Dice_ui::US34::US34_0(v1102_0_0) => {
                                Ok::<Vec<()>, std::string::String>(v1102_0_0.clone())
                            }
                            Dice_ui::US34::US34_1(v1102_1_0) => {
                                Err::<Vec<()>, std::string::String>(v1102_1_0.clone())
                            }
                        };
                        let v1115: string = string("}");
                        let v1122: bool = true;
                        let _fix_closure_v1117 = v1114;
                        let v1127: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v1117 "), (v1115))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v1128: bool = true;
                        _fix_closure_v1117
                    },
                ); // rust.fix_closure';
                let v1130 = __future_init;
                let v1132: std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                > = v1130;
                let v1135: bool = true;
                v1132 /*;
                      let v1137: bool = */
            }); //;
            let v1139: Func1<
                LrcPtr<Dice_ui::Heap4>,
                std::pin::Pin<
                    Box<dyn std::future::Future<Output = Result<Vec<()>, std::string::String>>>,
                >,
            > = _func1_from_v870;
            let v1142: leptos::prelude::Action<
                LrcPtr<Dice_ui::Heap4>,
                Result<Vec<()>, std::string::String>,
            > = leptos::prelude::Action::new(move |value: &std::sync::Arc<Heap4>| {
                Func1::new({
                    let v1139 = v1139.clone();
                    move |v_1: LrcPtr<Dice_ui::Heap4>| Dice_ui::closure77(v1139.clone(), v_1)
                })(value.clone())
            });
            let v1145: leptos::prelude::ArcMemo<
                Array<Result<Option<crate::model::near::rpc::RpcResponse>, std::string::String>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v0_1 = v0_1.clone();
                    let v1142 = v1142.clone();
                    let v728 = v728.clone();
                    let v869 = v869.clone();
                    move || {
                        Dice_ui::closure130(
                            v0_1.clone(),
                            v728.clone(),
                            v869.clone(),
                            v1142.clone(),
                            (),
                        )
                    }
                })()
            });
            leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v1 = v1.clone();
                    let v1145 = v1145.clone();
                    let v124 = v124.clone();
                    let v725 = v725.clone();
                    move || {
                        Dice_ui::closure134(
                            v1.clone(),
                            v124.clone(),
                            v725.clone(),
                            v1145.clone(),
                            (),
                        )
                    }
                })()
            })
        }
        pub fn method167() -> string {
            string("https://rpc.mainnet.near.org")
        }
        pub fn closure137(unitVar: (), v0_1: Dice_ui::US14) -> Dice_ui::US57 {
            Dice_ui::US57::US57_0(v0_1)
        }
        pub fn method168() -> Func1<Dice_ui::US14, Dice_ui::US57> {
            Func1::new(move |v: Dice_ui::US14| Dice_ui::closure137((), v))
        }
        pub fn closure138(unitVar: (), v0_1: std::string::String) -> Dice_ui::US57 {
            Dice_ui::US57::US57_1(v0_1)
        }
        pub fn method169() -> Func1<std::string::String, Dice_ui::US57> {
            Func1::new(move |v: std::string::String| Dice_ui::closure138((), v))
        }
        pub fn closure139(
            unitVar: (),
            v0_1: crate::model::near::rpc::RpcResponse,
        ) -> Dice_ui::US60 {
            Dice_ui::US60::US60_0(v0_1)
        }
        pub fn method170() -> Func1<crate::model::near::rpc::RpcResponse, Dice_ui::US60> {
            Func1::new(move |v: crate::model::near::rpc::RpcResponse| Dice_ui::closure139((), v))
        }
        pub fn closure140(unitVar: (), v0_1: std::string::String) -> Dice_ui::US60 {
            Dice_ui::US60::US60_1(v0_1)
        }
        pub fn method171() -> Func1<std::string::String, Dice_ui::US60> {
            Func1::new(move |v: std::string::String| Dice_ui::closure140((), v))
        }
        pub fn method172(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            >,
        ) -> Func1<
            LrcPtr<Dice_ui::Heap6>,
            std::pin::Pin<
                Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
            >,
        > {
            v0_1
        }
        pub fn closure141(
            v0_1: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap6>,
        ) -> std::pin::Pin<
            Box<dyn std::future::Future<Output = Result<Dice_ui::US59, std::string::String>>>,
        > {
            let v2: Func1<
                LrcPtr<Dice_ui::Heap6>,
                std::pin::Pin<
                    Box<
                        dyn std::future::Future<
                            Output = Result<Dice_ui::US59, std::string::String>,
                        >,
                    >,
                >,
            > = Dice_ui::method172(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn closure144(unitVar: (), v0_1: Dice_ui::US59) -> Dice_ui::US58 {
            Dice_ui::US58::US58_0(v0_1)
        }
        pub fn method174() -> Func1<Dice_ui::US59, Dice_ui::US58> {
            Func1::new(move |v: Dice_ui::US59| Dice_ui::closure144((), v))
        }
        pub fn closure145(unitVar: (), v0_1: std::string::String) -> Dice_ui::US58 {
            Dice_ui::US58::US58_1(v0_1)
        }
        pub fn method175() -> Func1<std::string::String, Dice_ui::US58> {
            Func1::new(move |v: std::string::String| Dice_ui::closure145((), v))
        }
        pub fn closure143(
            unitVar: (),
            v0_1: Result<Dice_ui::US59, std::string::String>,
        ) -> Dice_ui::US58 {
            let v1 = Dice_ui::method174();
            let v2 = Dice_ui::method175();
            match &v0_1 {
                Err(v0_1_1_0) => v2(v0_1_1_0.clone()),
                Ok(v0_1_0_0) => v1(v0_1_0_0.clone()),
            }
        }
        pub fn method173() -> Func1<Result<Dice_ui::US59, std::string::String>, Dice_ui::US58> {
            Func1::new(move |v: Result<Dice_ui::US59, std::string::String>| {
                Dice_ui::closure143((), v)
            })
        }
        pub fn closure146(unitVar: (), v0_1: Dice_ui::US58) -> Dice_ui::US62 {
            Dice_ui::US62::US62_0(v0_1)
        }
        pub fn method176() -> Func1<Dice_ui::US58, Dice_ui::US62> {
            Func1::new(move |v: Dice_ui::US58| Dice_ui::closure146((), v))
        }
        pub fn closure142(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> Result<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            std::string::String,
        > {
            let v2: leptos::prelude::ArcRwSignal<
                Option<Result<Dice_ui::US59, std::string::String>>,
            > = leptos::prelude::ArcAction::value(&v0_1);
            let v4: Option<Result<Dice_ui::US59, std::string::String>> =
                leptos::prelude::ArcRwSignal::get(&v2);
            let v8: Option<Dice_ui::US58> = map(Dice_ui::method173(), v4);
            let v43: Dice_ui::US62 =
                defaultValue(Dice_ui::US62::US62_1, map(Dice_ui::method176(), v8));
            let v64: Dice_ui::US58 = if let Dice_ui::US62::US62_0(v43_0_0) = &v43 {
                let v47: Dice_ui::US58 = v43_0_0.clone();
                match &v47 {
                    Dice_ui::US58::US58_0(v47_0_0) => {
                        let v50: Dice_ui::US59 = v47_0_0.clone();
                        if let Dice_ui::US59::US59_0(v50_0_0, v50_0_1, v50_0_2, v50_0_3) = &v50 {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                v50_0_0.clone(),
                                v50_0_1.clone(),
                                v50_0_2.clone(),
                                v50_0_3.clone(),
                            ))
                        } else {
                            Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                        }
                    }
                    Dice_ui::US58::US58_1(v47_1_0) => Dice_ui::US58::US58_1(v47_1_0.clone()),
                }
            } else {
                Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
            };
            let v81: Dice_ui::US63 = match &v64 {
                Dice_ui::US58::US58_0(v64_0_0) => {
                    let v65: Dice_ui::US59 = v64_0_0.clone();
                    Dice_ui::US63::US63_0(match &v65 {
                        Dice_ui::US59::US59_0(v65_0_0, v65_0_1, v65_0_2, v65_0_3) => Some((
                            match &v65 {
                                Dice_ui::US59::US59_0(x, _, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v65 {
                                Dice_ui::US59::US59_0(_, x, _, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v65 {
                                Dice_ui::US59::US59_0(_, _, x, _) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            match &v65 {
                                Dice_ui::US59::US59_0(_, _, _, x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        )),
                        _ => {
                            None::<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>
                        }
                    })
                }
                Dice_ui::US58::US58_1(v64_1_0) => Dice_ui::US63::US63_1(v64_1_0.clone()),
            };
            let v93: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = match &v81 {
                Dice_ui::US63::US63_0(v81_0_0) => Ok::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v81_0_0.clone()),
                Dice_ui::US63::US63_1(v81_1_0) => Err::<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >(v81_1_0.clone()),
            };
            let v100: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / roll new_arc_memo / result: "),
                        sprintf!("{:?}", v93.clone()),
                    )),
                    string(""),
                ),
            );
            let v102: bool = true;
            leptos::logging::log!("{}", v100);
            v93
        }
        pub fn closure148(
            unitVar: (),
            v0_1: Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
        ) -> Dice_ui::US63 {
            Dice_ui::US63::US63_0(v0_1)
        }
        pub fn method177() -> Func1<
            Option<(
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            )>,
            Dice_ui::US63,
        > {
            Func1::new(
                move |v: Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>| Dice_ui::closure148((), v),
            )
        }
        pub fn closure149(unitVar: (), v0_1: std::string::String) -> Dice_ui::US63 {
            Dice_ui::US63::US63_1(v0_1)
        }
        pub fn method178() -> Func1<std::string::String, Dice_ui::US63> {
            Func1::new(move |v: std::string::String| Dice_ui::closure149((), v))
        }
        pub fn closure150(
            unitVar: (),
            _arg: (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
        ) -> Dice_ui::US59 {
            Dice_ui::US59::US59_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
            )
        }
        pub fn method179() -> Func1<
            (
                std::string::String,
                Option<(
                    Array<(
                        std::string::String,
                        Array<
                            std::collections::HashMap<
                                std::string::String,
                                (
                                    std::string::String,
                                    Option<std::string::String>,
                                    Option<f64>,
                                    Option<std::string::String>,
                                ),
                            >,
                        >,
                        std::string::String,
                        Array<std::string::String>,
                        Array<std::string::String>,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        std::string::String,
                    )>,
                    Array<(
                        std::string::String,
                        std::string::String,
                        std::string::String,
                        u64,
                        Array<std::string::String>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        u8,
                        Array<std::string::String>,
                        std::collections::HashMap<std::string::String, std::string::String>,
                        Option<std::string::String>,
                        Array<(std::string::String, std::string::String)>,
                    )>,
                )>,
                Option<(
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )>,
                Option<std::string::String>,
            ),
            Dice_ui::US59,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )| Dice_ui::closure150((), arg10_0040),
            )
        }
        pub fn closure151(
            unitVar: (),
            _arg: (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
        ) -> Dice_ui::US64 {
            Dice_ui::US64::US64_0(
                _arg.0.clone(),
                _arg.1.clone(),
                _arg.2.clone(),
                _arg.3.clone(),
                _arg.4.clone(),
                _arg.5.clone(),
            )
        }
        pub fn method180() -> Func1<
            (
                std::string::String,
                std::string::String,
                Option<(Option<std::string::String>, Option<std::string::String>)>,
                i32,
                std::string::String,
                std::string::String,
            ),
            Dice_ui::US64,
        > {
            Func1::new(
                move |arg10_0040: (
                    std::string::String,
                    std::string::String,
                    Option<(Option<std::string::String>, Option<std::string::String>)>,
                    i32,
                    std::string::String,
                    std::string::String,
                )| Dice_ui::closure151((), arg10_0040),
            )
        }
        pub fn closure147(
            v0_1: leptos::prelude::ArcMemo<
                Result<
                    Option<(
                        std::string::String,
                        Option<(
                            Array<(
                                std::string::String,
                                Array<
                                    std::collections::HashMap<
                                        std::string::String,
                                        (
                                            std::string::String,
                                            Option<std::string::String>,
                                            Option<f64>,
                                            Option<std::string::String>,
                                        ),
                                    >,
                                >,
                                std::string::String,
                                Array<std::string::String>,
                                Array<std::string::String>,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                                u64,
                                Array<std::string::String>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                u8,
                                Array<std::string::String>,
                                std::collections::HashMap<std::string::String, std::string::String>,
                                Option<std::string::String>,
                                Array<(std::string::String, std::string::String)>,
                            )>,
                        )>,
                        Option<(
                            std::string::String,
                            std::string::String,
                            Option<(Option<std::string::String>, Option<std::string::String>)>,
                            i32,
                            std::string::String,
                            std::string::String,
                        )>,
                        Option<std::string::String>,
                    )>,
                    std::string::String,
                >,
            >,
            unitVar: (),
        ) -> Option<string> {
            let v2: Result<
                Option<(
                    std::string::String,
                    Option<(
                        Array<(
                            std::string::String,
                            Array<
                                std::collections::HashMap<
                                    std::string::String,
                                    (
                                        std::string::String,
                                        Option<std::string::String>,
                                        Option<f64>,
                                        Option<std::string::String>,
                                    ),
                                >,
                            >,
                            std::string::String,
                            Array<std::string::String>,
                            Array<std::string::String>,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            std::string::String,
                        )>,
                        Array<(
                            std::string::String,
                            std::string::String,
                            std::string::String,
                            u64,
                            Array<std::string::String>,
                            Array<(
                                std::string::String,
                                std::string::String,
                                std::string::String,
                            )>,
                            u8,
                            Array<std::string::String>,
                            std::collections::HashMap<std::string::String, std::string::String>,
                            Option<std::string::String>,
                            Array<(std::string::String, std::string::String)>,
                        )>,
                    )>,
                    Option<(
                        std::string::String,
                        std::string::String,
                        Option<(Option<std::string::String>, Option<std::string::String>)>,
                        i32,
                        std::string::String,
                        std::string::String,
                    )>,
                    Option<std::string::String>,
                )>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v3 = Dice_ui::method177();
            let v4 = Dice_ui::method178();
            let v6: Dice_ui::US63 = match &v2 {
                Err(v2_1_0) => v4(v2_1_0.clone()),
                Ok(v2_0_0) => v3(v2_0_0.clone()),
            };
            let v39: Dice_ui::US58 = match &v6 {
                Dice_ui::US63::US63_0(v6_0_0) => Dice_ui::US58::US58_0(defaultValue(
                    Dice_ui::US59::US59_1,
                    map(Dice_ui::method179(), v6_0_0.clone()),
                )),
                Dice_ui::US63::US63_1(v6_1_0) => Dice_ui::US58::US58_1(v6_1_0.clone()),
            };
            let v85: Dice_ui::US31 = if let Dice_ui::US58::US58_0(v39_0_0) = &v39 {
                let v40: Dice_ui::US59 = v39_0_0.clone();
                if let Dice_ui::US59::US59_0(v40_0_0, v40_0_1, v40_0_2, v40_0_3) = &v40 {
                    let v68: Dice_ui::US64 = defaultValue(
                        Dice_ui::US64::US64_1,
                        map(Dice_ui::method180(), v40_0_2.clone()),
                    );
                    if let Dice_ui::US64::US64_0(
                        v68_0_0,
                        v68_0_1,
                        v68_0_2,
                        v68_0_3,
                        v68_0_4,
                        v68_0_5,
                    ) = &v68
                    {
                        Dice_ui::US31::US31_0(append(
                            (append(
                                (append(
                                    (append(
                                        (append(
                                            (append(
                                                (append((toString(v68_0_0.clone())), string(": "))),
                                                (toString(v68_0_4.clone())),
                                            )),
                                            string(" - "),
                                        )),
                                        (toString(v68_0_5.clone())),
                                    )),
                                    string(" ("),
                                )),
                                (toString(v68_0_1.clone())),
                            )),
                            string(")"),
                        ))
                    } else {
                        Dice_ui::US31::US31_1
                    }
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            let v93: Option<string> = match &v85 {
                Dice_ui::US31::US31_0(v85_0_0) => Some(
                    match &v85 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => None::<string>,
            };
            let v100: string = Dice_ui::method8(
                200_i64,
                append(
                    (append(
                        string("dice_view.render (x) / error_message new_arc_memo / result: "),
                        sprintf!("{:?}", v93.clone()),
                    )),
                    string(""),
                ),
            );
            let v102: bool = true;
            leptos::logging::log!("{}", v100);
            v93
        }
        pub fn closure152(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> Dice_ui::US31 {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v28: Dice_ui::US14 = defaultValue(
                Dice_ui::US14::US14_1,
                map(Dice_ui::method39(), v8.l1.clone()),
            );
            match &v28 {
                Dice_ui::US14::US14_0(v28_0_0) => {
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                        match &v28 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US31::US31_1,
            }
        }
        pub fn method181(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> {
            v0_1
        }
        pub fn closure154(
            v0_1: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)>,
            v1_: bool,
            v1__1: std::string::String,
        ) -> (bool, std::string::String) {
            let v2: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                Dice_ui::method181(v0_1);
            let patternInput: (bool, std::string::String) =
                (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn method182(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
        ) -> Func1<(bool, std::string::String), std::string::String> {
            v0_1
        }
        pub fn closure155(
            v0_1: Func1<(bool, std::string::String), std::string::String>,
            _arg: (bool, std::string::String),
        ) -> std::string::String {
            let v3: Func1<(bool, std::string::String), std::string::String> =
                Dice_ui::method182(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure157(
            v0_1: i32,
            v1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = leptos::prelude::signal(v1);
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure156(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            std::string::String,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: std::string::String| Dice_ui::closure157(v0_1, v)
            })
        }
        pub fn method183() -> Func1<
            i32,
            Func1<
                std::string::String,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure156((), v))
        }
        pub fn method184(v0_1: Vec<std::string::String>) -> Vec<std::string::String> {
            v0_1
        }
        pub fn closure153(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let v14: LrcPtr<(bool, std::string::String)> = value;
                let v25: bool = true;
                (v14.0.clone(), v14.1.clone()) /*;
                                               let v27: bool = */
            }); //;
            let v29: Func1<LrcPtr<(bool, std::string::String)>, (bool, std::string::String)> =
                _func1_from_v10;
            let v32: Vec<(bool, std::string::String)> = v8
                .l0
                .clone()
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                            Dice_ui::closure154(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v33 = Dice_ui::method55();
            let v34: Vec<(bool, std::string::String)> = Dice_ui::method56(v32);
            let v36: Vec<(bool, std::string::String)> = v34
                .into_iter()
                .filter(|x| v33(x.clone().clone()))
                .collect::<Vec<_>>();
            let v39: bool = true;
            let _func1_from_v37 = Func1::from(move |value| {
                //;
                let patternInput: (bool, std::string::String) = value;
                let v45: bool = true;
                patternInput.1.clone() /*;
                                       let v47: bool = */
            }); //;
            let v49: Func1<(bool, std::string::String), std::string::String> = _func1_from_v37;
            let v52: Vec<std::string::String> = v36
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v49 = v49.clone();
                        move |arg10_0040_1: (bool, std::string::String)| {
                            Dice_ui::closure155(v49.clone(), arg10_0040_1)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v53 = Dice_ui::method183();
            let v54: Vec<std::string::String> = Dice_ui::method184(v52);
            v54.iter()
                .enumerate()
                .map(|(i, x)| v53(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method185(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        > {
            v0_1
        }
        pub fn closure159(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<std::string::String>,
            leptos::prelude::WriteSignal<std::string::String>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = Dice_ui::method185(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method186(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
            (i32, leptos::prelude::ReadSignal<std::string::String>),
        > {
            v0_1
        }
        pub fn closure160(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            ),
        ) -> (i32, leptos::prelude::ReadSignal<std::string::String>) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = Dice_ui::method186(v0_1);
            let patternInput: (i32, leptos::prelude::ReadSignal<std::string::String>) =
                (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure158(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        ),
                    )>,
                >,
            >,
            unitVar: (),
        ) -> Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> {
            let v2: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v5: bool = true;
            let _func1_from_v3 = Func1::from(move |value| {
                //;
                let v7: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = v7.1.clone();
                let v22: bool = true;
                (v7.0.clone(), b.0.clone(), b.1.clone()) /*;
                                                         let v24: bool = */
            }); //;
            let v26: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<std::string::String>,
                        leptos::prelude::WriteSignal<std::string::String>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
            > = _func1_from_v3;
            let v29: Vec<(
                i32,
                leptos::prelude::ReadSignal<std::string::String>,
                leptos::prelude::WriteSignal<std::string::String>,
            )> = v2
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v26 = v26.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<std::string::String>,
                                leptos::prelude::WriteSignal<std::string::String>,
                            ),
                        )>| {
                            Dice_ui::closure159(
                                v26.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v32: bool = true;
            let _func1_from_v30 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ) = value;
                let v39: bool = true;
                (patternInput.0.clone(), patternInput.1.clone()) /*;
                                                                 let v41: bool = */
            }); //;
            let v43: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<std::string::String>,
                    leptos::prelude::WriteSignal<std::string::String>,
                ),
                (i32, leptos::prelude::ReadSignal<std::string::String>),
            > = _func1_from_v30;
            v29.into_iter()
                .map(|x| {
                    Func1::new({
                        let v43 = v43.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<std::string::String>,
                            leptos::prelude::WriteSignal<std::string::String>,
                        )| Dice_ui::closure160(v43.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure161(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure162(unitVar: (), unitVar_1: ()) -> bool {
            true
        }
        pub fn closure163(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure164(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure165(unitVar: (), unitVar_1: ()) -> string {
            string("Roll")
        }
        pub fn method187() -> Func0<string> {
            Func0::new(move || Dice_ui::closure165((), ()))
        }
        pub fn closure166(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure168(unitVar: (), unitVar_1: ()) -> string {
            string("[align-self:flex-start]")
        }
        pub fn closure169(unitVar: (), unitVar_1: ()) -> bool {
            false
        }
        pub fn closure170(unitVar: (), unitVar_1: ()) -> string {
            string("py-[4px]")
        }
        pub fn closure171(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> &'static str {
            let v4: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure173(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<Dice_ui::US31>,
        ) -> Dice_ui::US65 {
            Dice_ui::US65::US65_0(v0_1)
        }
        pub fn method189() -> Func1<leptos::prelude::ArcMemo<Dice_ui::US31>, Dice_ui::US65> {
            Func1::new(move |v: leptos::prelude::ArcMemo<Dice_ui::US31>| Dice_ui::closure173((), v))
        }
        pub fn closure172(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> string {
            let v21: Dice_ui::US65 =
                defaultValue(Dice_ui::US65::US65_1, map(Dice_ui::method189(), v1));
            let v31: Dice_ui::US42 = match &v21 {
                Dice_ui::US65::US65_0(v21_0_0) => {
                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                        &match &v21 {
                            Dice_ui::US65::US65_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US42::US42_1,
            };
            let v38: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v31_0_0) = &v31 {
                let v32: Dice_ui::US31 = v31_0_0.clone();
                if let Dice_ui::US31::US31_0(v32_0_0) = &v32 {
                    Dice_ui::US31::US31_0(v32_0_0.clone())
                } else {
                    Dice_ui::US31::US31_1
                }
            } else {
                Dice_ui::US31::US31_1
            };
            match &v38 {
                Dice_ui::US31::US31_0(v38_0_0) => match &v38 {
                    Dice_ui::US31::US31_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => string("Select..."),
            }
        }
        pub fn method188(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
        ) -> Func0<string> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move || Dice_ui::closure172(v0_1.clone(), v1.clone(), v2.clone(), ())
            })
        }
        pub fn closure175(
            unitVar: (),
            v0_1: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
        ) -> Dice_ui::US66 {
            Dice_ui::US66::US66_0(v0_1)
        }
        pub fn method190() -> Func1<
            leptos::prelude::ArcMemo<Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>>,
            Dice_ui::US66,
        > {
            Func1::new(
                move |v: leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >| Dice_ui::closure175((), v),
            )
        }
        pub fn method192(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            v0_1
        }
        pub fn closure176(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> i32 {
            let v3: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> =
                Dice_ui::method192(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn method191(
            v0_1: Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32>,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), i32> {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (i32, leptos::prelude::ReadSignal<std::string::String>)| {
                    Dice_ui::closure176(v0_1.clone(), arg10_0040)
                }
            })
        }
        pub fn method193(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure177(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method194(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<(i32, leptos::prelude::ReadSignal<std::string::String>), leptos::prelude::AnyView>
        {
            v0_1
        }
        pub fn closure178(
            v0_1: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            >,
            _arg: (i32, leptos::prelude::ReadSignal<std::string::String>),
        ) -> leptos::prelude::AnyView {
            let v3: Func1<
                (i32, leptos::prelude::ReadSignal<std::string::String>),
                leptos::prelude::AnyView,
            > = Dice_ui::method194(v0_1);
            (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()))
        }
        pub fn closure174(
            v0_1: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            >,
            v1: Option<leptos::prelude::ArcMemo<Dice_ui::US31>>,
            v2: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string =
                string("class=\"flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100\"");
            let v5: string = append(
                (append((append(string(" "), (v3))), string(""))),
                string(""),
            );
            let v24: Dice_ui::US66 = defaultValue(
                Dice_ui::US66::US66_1,
                map(Dice_ui::method190(), v0_1.clone()),
            );
            let v34: Dice_ui::US67 = match &v24 {
                Dice_ui::US66::US66_0(v24_0_0) => {
                    Dice_ui::US67::US67_0(leptos::prelude::ArcMemo::get(
                        &match &v24 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    ))
                }
                _ => Dice_ui::US67::US67_1,
            };
            let v37: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> =
                new_empty::<(i32, leptos::prelude::ReadSignal<std::string::String>)>().to_vec();
            let v40: Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)> = match &v34 {
                Dice_ui::US67::US67_0(v34_0_0) => match &v34 {
                    Dice_ui::US67::US67_0(x) => x.clone(),
                    _ => unreachable!(),
                }
                .clone(),
                _ => v37.clone(),
            };
            let v827: leptos::prelude::Fragment = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v40.clone()),
            ) as u64)
                == 0_u64
            {
                let v46: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v48: string = string(" class=\"[height:17px]\"");
                let v62: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v68: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v69: string = string("vec![]");
                let v70: Vec<leptos::prelude::AnyView> = vec![];
                let v72: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v70);
                let v74: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v72);
                let v77: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v68))),
                                    string(">move || { v74 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v79: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v74 }</path> };
                let v81: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v79);
                let v85: string = string("vec![v81]");
                let v86: Vec<leptos::prelude::AnyView> = vec![v81];
                let v88: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v86);
                let v90: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v88);
                let v93: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v62))),
                                    string(">move || { v90 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v95: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v90 }</svg> };
                let v97: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v95);
                let v101: string = string("vec![v97]");
                let v102: Vec<leptos::prelude::AnyView> = vec![v97];
                let v104: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v102);
                let v106: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v104);
                let v109: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v48))),
                                    string(">move || { v106 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v111: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v106 }</span> };
                let v113: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v111);
                let v115: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v125: &str = &*string("No data");
                let v158: std::string::String = String::from(v125);
                let v184: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v158));
                let v188: string = string("vec![v184]");
                let v189: Vec<leptos::prelude::AnyView> = vec![v184];
                let v191: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v189);
                let v193: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v191);
                let v196: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v115))),
                                    string(">move || { v193 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v198: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v193 }</pre> };
                let v200: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v198);
                let v208: string = string("vec![v113, v200]");
                let v209: Vec<leptos::prelude::AnyView> = vec![v113, v200];
                let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
                let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
                let v216: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v46))),
                                    string(">move || { v213 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v218: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v213 }</div> };
                let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
                let v224: string = string("vec![v220]");
                let v225: Vec<leptos::prelude::AnyView> = vec![v220];
                leptos::prelude::Fragment::new(v225)
            } else {
                let v246: Dice_ui::US66 =
                    defaultValue(Dice_ui::US66::US66_1, map(Dice_ui::method190(), v0_1));
                match &v246 {
                    Dice_ui::US66::US66_0(v246_0_0) => {
                        let v252: leptos::prelude::ArcMemo<
                            Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                        > = match &v246 {
                            Dice_ui::US66::US66_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone();
                        let v255: bool = true;
                        let _func1_from_v253 = Func1::from(move |value| {
                            //;
                            let patternInput: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v261: bool = true;
                            patternInput.0.clone() /*;
                                                   let v263: bool = */
                        }); //;
                        let v266 = Dice_ui::method191(_func1_from_v253);
                        let v269: bool = true;
                        let _func1_from_v267 = Func1::from(move |value| {
                            //;
                            let patternInput_1: (
                                i32,
                                leptos::prelude::ReadSignal<std::string::String>,
                            ) = value;
                            let v274: std::string::String =
                                leptos::prelude::ReadSignal::get(&patternInput_1.1.clone());
                            let v275: std::string::String = Dice_ui::method193(v274.clone());
                            let v278: bool = true;
                            let _func0_from_v276 = Func0::from(move || {
                                //;
                                let v280: string =
                                    fable_library_rust::String_::fromString(v274.clone());
                                let v283: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v285: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v283);
                                let v288: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                                > = Box::pin(v285.l3.clone());
                                let v290: LrcPtr<Dice_ui::Heap0> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v288);
                                let v298: std::pin::Pin<
                                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                                > = Box::pin(v2.l0.clone());
                                let v300: LrcPtr<Dice_ui::Heap1> =
                                    leptos::prelude::ArcRwSignal::get_untracked(&v298);
                                let v310: &str = &*v280;
                                let v372: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                                    l0: v290.l0.clone(),
                                    l1: Some(String::from(v310)),
                                    l2: v290.l2,
                                    l3: v290.l3,
                                    l4: v290.l4.clone(),
                                });
                                let v374: bool = true;
                                leptos::prelude::ArcRwSignal::set(&v300.l3.clone(), v372); //;
                                let v376: bool = true; /*;
                                                       let v378: bool = */
                            }); //;
                            let v380: Func0<()> = _func0_from_v276;
                            let v493: string = join(
                                string(" "),
                                toArray(delay(Func0::new(move || {
                                    ofList(ofArray_1(new_array(&[
                                        string("flex"),
                                        string("flex-1"),
                                        string("gap-[10px]"),
                                        string("[align-items:center]"),
                                        string("[justify-content:center]"),
                                        string("inline-block"),
                                        string("rounded"),
                                        string("border"),
                                        string("border-gray-400"),
                                        string("hover:bg-gray-100"),
                                        string("px-[22px]"),
                                        string("py-1"),
                                        string("text-sm"),
                                        string("text-gray-900"),
                                        string("bg-gray-200"),
                                        string("hover:text-gray-600"),
                                        string("focus:outline-none"),
                                        string("focus:ring"),
                                        string("active:text-gray-500"),
                                    ])))
                                }))),
                            );
                            let v504: &str = &*v493;
                            let v537: std::string::String = String::from(v504);
                            let v563: std::string::String = v537;
                            let v569: string =
                                string(" aria-label=v275 on:click=move |_| v380() class=v563");
                            let v571: string = fable_library_rust::String_::fromString(v274);
                            let v590: Dice_ui::US65 = defaultValue(
                                Dice_ui::US65::US65_1,
                                map(Dice_ui::method189(), v1.clone()),
                            );
                            let v600: Dice_ui::US42 = match &v590 {
                                Dice_ui::US65::US65_0(v590_0_0) => {
                                    Dice_ui::US42::US42_0(leptos::prelude::ArcMemo::get(
                                        &match &v590 {
                                            Dice_ui::US65::US65_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ))
                                }
                                _ => Dice_ui::US42::US42_1,
                            };
                            let v607: Dice_ui::US31 = if let Dice_ui::US42::US42_0(v600_0_0) = &v600
                            {
                                let v601: Dice_ui::US31 = v600_0_0.clone();
                                if let Dice_ui::US31::US31_0(v601_0_0) = &v601 {
                                    Dice_ui::US31::US31_0(v601_0_0.clone())
                                } else {
                                    Dice_ui::US31::US31_1
                                }
                            } else {
                                Dice_ui::US31::US31_1
                            };
                            let v696: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(
                                v607_0_0,
                            ) = &v607
                            {
                                if (v571.clone()) == (v607_0_0.clone()) {
                                    let v612 = {
                                        let clo = Func0::new(move || Dice_ui::closure177((), ()));
                                        Func1::new({
                                            let clo = clo.clone();
                                            move |arg: ()| clo()
                                        })
                                    };
                                    let v624: string =
                                            string(" class=move || \" \".to_owned() + &v612(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                                    let v634: string =
                                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" r=\"9\" cy=\"12\" cx=\"12\"");
                                    let v635: string = string("vec![]");
                                    let v636: Vec<leptos::prelude::AnyView> = vec![];
                                    let v638: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v636);
                                    let v640: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v638);
                                    let v643: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<circle "), (v634))),
                                                        string(">move || { v640 }</"),
                                                    )),
                                                    string("circle"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v645: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                                    > = leptos::prelude::view! { <circle  stroke-linejoin="round" stroke-linecap="round" r="9" cy="12" cx="12">move || { v640 }</circle> };
                                    let v647: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v645);
                                    let v653: string =
                                            string(" d=\"M9 12l2 2l4 -4\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                                    let v654: string = string("vec![]");
                                    let v655: Vec<leptos::prelude::AnyView> = vec![];
                                    let v657: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v655);
                                    let v659: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v657);
                                    let v662: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<path "), (v653))),
                                                        string(">move || { v659 }</"),
                                                    )),
                                                    string("path"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v664: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                                    > = leptos::prelude::view! { <path  d="M9 12l2 2l4 -4" stroke-linejoin="round" stroke-linecap="round">move || { v659 }</path> };
                                    let v666: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v664);
                                    let v674: string = string("vec![v647, v666]");
                                    let v675: Vec<leptos::prelude::AnyView> = vec![v647, v666];
                                    let v677: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v675);
                                    let v679: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v677);
                                    let v682: string = append(
                                        (append(
                                            string("leptos::prelude::view! { "),
                                            (append(
                                                (append(
                                                    (append(
                                                        (append(string("<svg "), (v624))),
                                                        string(">move || { v679 }</"),
                                                    )),
                                                    string("svg"),
                                                )),
                                                string(">"),
                                            )),
                                        )),
                                        string(" }"),
                                    );
                                    let v684: leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v612(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v679 }</svg> };
                                    leptos::prelude::IntoAny::into_any(v684)
                                } else {
                                    let v687: string = string("vec![]");
                                    let v688: Vec<leptos::prelude::AnyView> = vec![];
                                    leptos::prelude::IntoAny::into_any(v688)
                                }
                            } else {
                                let v692: string = string("vec![]");
                                let v693: Vec<leptos::prelude::AnyView> = vec![];
                                leptos::prelude::IntoAny::into_any(v693)
                            };
                            let v705: &str = &*v571;
                            let v738: std::string::String = String::from(v705);
                            let v764: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v738),
                            );
                            let v772: string = string("vec![v696, v764]");
                            let v773: Vec<leptos::prelude::AnyView> = vec![v696, v764];
                            let v775: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v773);
                            let v777: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v775);
                            let v780: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<button "), (v569))),
                                                string(">move || { v777 }</"),
                                            )),
                                            string("button"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v782: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Button, _, _>,
                            > = leptos::prelude::view! { <button  aria-label=v275 on:click=move |_| v380() class=v563>move || { v777 }</button> };
                            let v784: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v782);
                            let v788: string = string("vec![v784]");
                            let v789: Vec<leptos::prelude::AnyView> = vec![v784];
                            let v791: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v789);
                            let v793: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v791);
                            let v796: bool = true;
                            v793 /*;
                                 let v798: bool = */
                        }); //;
                        let v800: Func1<
                            (i32, leptos::prelude::ReadSignal<std::string::String>),
                            leptos::prelude::AnyView,
                        > = _func1_from_v267;
                        let v812: string =
                                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v804(x) let:x key=move |x| v266(x.to_owned()) each=v252 /> })");
                        let v813: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::view! { <leptos::prelude::For  children=move |x| v804(x) let:x key=move |x| v266(x.to_owned()) each=v252 /> },
                        );
                        let v817: string = string("vec![v813]");
                        let v818: Vec<leptos::prelude::AnyView> = vec![v813];
                        leptos::prelude::Fragment::new(v818)
                    }
                    _ => {
                        let v821: string = string("vec![]");
                        let v822: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::Fragment::new(v822)
                    }
                }
            };
            let v829: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v827);
            let v832: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5))),
                                string(">move || { v829 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v834: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[10px] gap-[7px] [border-left-width:1px] [border-bottom-width:1px] border-gray-200 bg-gray-100">move || { v829 }</div> };
            let v836: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v834);
            let v840: string = string("vec![v836]");
            let v841: Vec<leptos::prelude::AnyView> = vec![v836];
            leptos::prelude::Fragment::new(v841)
        }
        pub fn method195(
            v0_1: Func0<leptos::prelude::Fragment>,
        ) -> Func0<leptos::prelude::Fragment> {
            v0_1
        }
        pub fn closure179(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn method196(v0_1: Func1<std::string::String, ()>) -> Func1<std::string::String, ()> {
            v0_1
        }
        pub fn closure180(v0_1: Func1<std::string::String, ()>, v1: std::string::String) {
            let v2: Func1<std::string::String, ()> = Dice_ui::method196(v0_1);
            (move |x| v2(x))(v1);
            ()
        }
        pub fn closure181(
            v0_1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            unitVar: (),
        ) -> bool {
            let v2: leptos::prelude::ArcMemo<bool> = leptos::prelude::ArcAction::pending(&v0_1);
            leptos::prelude::ArcMemo::get(&v2)
        }
        pub fn method197(v0_1: Func0<bool>) -> Func0<bool> {
            v0_1
        }
        pub fn closure182(unitVar: (), unitVar_1: ()) -> string {
            string("[width:15px] [height:14px]")
        }
        pub fn closure167(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcAction<
                LrcPtr<Dice_ui::Heap6>,
                Result<Dice_ui::US59, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<Option<string>>,
            v3: leptos::prelude::ArcMemo<Dice_ui::US31>,
            v4: leptos::prelude::ArcMemo<
                Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-col p-[10px] gap-[11px]\"");
            let v9: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v19: &str = &*string("Account");
            let v52: std::string::String = String::from(v19);
            let v78: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v52));
            let v82: Option<
                leptos::prelude::ArcMemo<
                    Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                >,
            > = Some(v4);
            let v86: Option<leptos::prelude::ArcMemo<Dice_ui::US31>> = Some(v3);
            let v89: string = string("vec![]");
            let v90: Vec<leptos::prelude::AnyView> = vec![];
            let v92: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v90);
            let v94: string = string(" class=\"flex flex-col [position:relative]\"");
            let v97 = {
                let clo = Func0::new(move || Dice_ui::closure168((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v100 = {
                let clo_1 = Func0::new(move || Dice_ui::closure169((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v102: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
            let v106: string = string("vec![v92]");
            let v107: Vec<leptos::prelude::AnyView> = vec![v92];
            let v109: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v107);
            let v111: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v109);
            let v114: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v102))),
                                string(">move || { v111 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v116: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v111 }</div> };
            let v118: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v116);
            let v119: string =
                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v97(())");
            let v122: string = append(
                (append(
                    string(" open=move || v100(())"),
                    (append(
                        (append((append(string(" "), (v119))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v125 = {
                let clo_2 = Func0::new(move || Dice_ui::closure170((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v128 = {
                let clo_3 = Func0::new({
                    let v0_1 = v0_1.clone();
                    let v82 = v82.clone();
                    let v86 = v86.clone();
                    move || Dice_ui::closure171(v82.clone(), v86.clone(), v0_1.clone(), ())
                });
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v129: string =
                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v128(()) + \" \" + &v125(())");
            let v130: string = append(
                (append((append(string(" "), (v129))), string(""))),
                string(""),
            );
            let v132: string = string(" class=\"flex items-center gap-2\"");
            let v135: string =
                string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
            let v136: string = (Dice_ui::method188(v82.clone(), v86.clone(), v0_1.clone()))();
            let v145: &str = &*v136;
            let v178: std::string::String = String::from(v145);
            let v204: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v178));
            let v208: string = string("vec![v204]");
            let v209: Vec<leptos::prelude::AnyView> = vec![v204];
            let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
            let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
            let v216: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v135))),
                                string(">move || { v213 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v218: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v213 }</span> };
            let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
            let v224: string = string("vec![v220]");
            let v225: Vec<leptos::prelude::AnyView> = vec![v220];
            let v227: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v225);
            let v229: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v227);
            let v231: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v132))),
                                string(">move || { v229 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v233: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v229 }</div> };
            let v235: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v233);
            let v237: string = string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
            let v240 = {
                let clo_4 = Func0::new(move || Dice_ui::closure166((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v248: string =
                string(" class=move || \" \".to_owned() + &v240(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v250: string =
                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
            let v254: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v250))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v255: string = string("vec![]");
            let v256: Vec<leptos::prelude::AnyView> = vec![];
            let v258: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v256);
            let v260: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v258);
            let v263: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v254))),
                                string(">move || { v260 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v265: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v260 }</path> };
            let v267: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v265);
            let v271: string = string("vec![v267]");
            let v272: Vec<leptos::prelude::AnyView> = vec![v267];
            let v274: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v272);
            let v276: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v274);
            let v279: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v248))),
                                string(">move || { v276 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v281: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v240(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v276 }</svg> };
            let v283: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v281);
            let v287: string = string("vec![v283]");
            let v288: Vec<leptos::prelude::AnyView> = vec![v283];
            let v290: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v288);
            let v292: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v290);
            let v294: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v237))),
                                string(">move || { v292 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v296: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v292 }</span> };
            let v298: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v296);
            let v306: string = string("vec![v235, v298]");
            let v307: Vec<leptos::prelude::AnyView> = vec![v235, v298];
            let v309: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v309);
            let v314: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<summary "), (v130))),
                                string(">move || { v311 }</"),
                            )),
                            string("summary"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v316: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v128(()) + " " + &v125(())>move || { v311 }</summary> };
            let v318: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v316);
            let v320: string = string(" class=\"flex flex-1 flex-col\"");
            let v324: Func0<leptos::prelude::Fragment> =
                Dice_ui::method195(Func0::new(move || {
                    Func0::new({
                        let v0_1 = v0_1.clone();
                        let v82 = v82.clone();
                        let v86 = v86.clone();
                        move || Dice_ui::closure174(v82.clone(), v86.clone(), v0_1.clone(), ())
                    })()
                }));
            let v326: leptos::prelude::Fragment = (move || v324())();
            let v328: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v326);
            let v330: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v320))),
                                string(">move || { v328 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v332: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v328 }</div> };
            let v334: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v332);
            let v341: string = string("vec![v318, v334]");
            let v342: Vec<leptos::prelude::AnyView> = vec![v318, v334];
            let v344: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v342);
            let v346: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v344);
            let v349: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<details "), (v122))),
                                string(">move || { v346 }</"),
                            )),
                            string("details"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v351: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Details, _, _>,
            > = leptos::prelude::view! { <details  open=move || v100(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v97(())>move || { v346 }</details> };
            let v353: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v351);
            let v360: string = string("vec![v118, v353]");
            let v361: Vec<leptos::prelude::AnyView> = vec![v118, v353];
            let v363: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v361);
            let v365: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v363);
            let v367: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v94))),
                                string(">move || { v365 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v369: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v365 }</div> };
            let v371: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v369);
            let v378: string = string("vec![v78, v371]");
            let v379: Vec<leptos::prelude::AnyView> = vec![v78, v371];
            let v381: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v379);
            let v383: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v381);
            let v385: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v9))),
                                string(">move || { v383 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v387: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v383 }</div> };
            let v389: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v387);
            let v391: string = string(
                " class=\"flex [flex-direction:column] [gap:2px] [align-items:flex-start]\"",
            );
            let v401: &str = &*string("Max");
            let v434: std::string::String = String::from(v401);
            let v460: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v434));
            let v463: bool = true;
            let _func0_from_v461 = Func0::from(move || {
                //;
                let v466: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v468: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v466);
                let v471: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v468.l3.clone());
                let v473: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v471);
                let v476: bool = true;
                v473.l2 /*;
                        let v478: bool = */
            }); //;
            let v480: Func0<i32> = _func0_from_v461;
            let v483: bool = true;
            let _func1_from_v481 = Func0::from(move || {
                //;
                let v485: std::string::String = value;
                let v488: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v490: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v488);
                let v493: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v490.l3.clone());
                let v495: LrcPtr<Dice_ui::Heap0> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v493);
                let v503: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v505: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v503);
                let v509: string = toString(v485);
                let v527: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                    l0: v495.l0.clone(),
                    l1: v495.l1.clone(),
                    l2: if string("") == (v509.clone()) {
                        1_i32
                    } else {
                        toInt32(v509)
                    },
                    l3: v495.l3,
                    l4: v495.l4.clone(),
                });
                let v529: bool = true;
                leptos::prelude::ArcRwSignal::set(&v505.l3.clone(), v527); //;
                let v531: bool = true; /*;
                                       let v533: bool = */
            }); //;
            let v535: Func1<std::string::String, ()> = _func1_from_v481;
            let v538 = {
                let clo_5 = Func0::new(move || Dice_ui::closure179((), ()));
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v548: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v541(leptos::prelude::event_target_value(&event)) prop:value=move || v480() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v538(()) /> }");
            let v550: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v541(leptos::prelude::event_target_value(&event)) prop:value=move || v480() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v538(()) /> };
            let v552: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v550);
            let v559: string = string("vec![v460, v552]");
            let v560: Vec<leptos::prelude::AnyView> = vec![v460, v552];
            let v562: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v560);
            let v564: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v562);
            let v566: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v391))),
                                string(">move || { v564 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v568: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex [flex-direction:column] [gap:2px] [align-items:flex-start]">move || { v564 }</div> };
            let v570: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v568);
            let v572: string = string(" class=\"flex\"");
            let v575: Func0<bool> = Func0::new(move || {
                Func0::new({
                    let v1 = v1.clone();
                    move || Dice_ui::closure181(v1.clone(), ())
                })()
            });
            let v576: Func0<bool> = Dice_ui::method197(v575.clone());
            let v579: bool = true;
            let _func0_from_v577 = Func0::from(move || {
                //;
                let v582: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                    Box::pin(v0_1.l0.clone());
                let v584: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v582);
                let v587: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                    Box::pin(v584.l3.clone());
                let v591: LrcPtr<Dice_ui::Heap6> = LrcPtr::new(Dice_ui::Heap6 {
                    l0: (leptos::prelude::ArcRwSignal::get_untracked(&v587)).l2,
                });
                let v593: bool = true;
                leptos::prelude::ArcAction::dispatch(&v1.clone(), v591.clone());
                let v595: bool = true; /*;
                                       let v597: bool = */
            }); //;
            let v599: Func0<()> = _func0_from_v577;
            let v707: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("flex"),
                        string("gap-[10px]"),
                        string("[align-items:center]"),
                        string("inline-block"),
                        string("rounded"),
                        string("border"),
                        string("border-gray-400"),
                        string("hover:bg-gray-400"),
                        string("px-4"),
                        string("py-1"),
                        string("text-sm"),
                        string("font-medium"),
                        string("text-gray-900"),
                        string("bg-transparent"),
                        string("hover:text-gray-600"),
                        string("focus:outline-none"),
                        string("focus:ring"),
                        string("active:text-gray-500"),
                    ])))
                }))),
            );
            let v718: &str = &*v707;
            let v751: std::string::String = String::from(v718);
            let v777: std::string::String = v751;
            let v783: string =
                string(" on:click=move |_| v599() prop:disabled=move || v576() class=v777");
            let v793: &str = &*string("Roll");
            let v826: std::string::String = String::from(v793);
            let v852: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v826));
            let v1218: leptos::prelude::AnyView = if v575() {
                let v857 = {
                    let clo_6 = Func0::new(move || Dice_ui::closure182((), ()));
                    Func1::new({
                        let clo_6 = clo_6.clone();
                        move |arg_6: ()| clo_6()
                    })
                };
                let v875: string =
                        string(" class=move || \" \".to_owned() + &v857(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                let v887: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"",
                );
                let v899: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v900: string = string("vec![]");
                let v901: Vec<leptos::prelude::AnyView> = vec![];
                let v903: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v901);
                let v905: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v903);
                let v908: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v899))),
                                    string(">move || { v905 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v910: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v905 }</animate> };
                let v912: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v910);
                let v924: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v925: string = string("vec![]");
                let v926: Vec<leptos::prelude::AnyView> = vec![];
                let v928: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v926);
                let v930: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v928);
                let v932: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v924))),
                                    string(">move || { v930 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v934: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v930 }</animate> };
                let v936: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v934);
                let v948: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v949: string = string("vec![]");
                let v950: Vec<leptos::prelude::AnyView> = vec![];
                let v952: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v950);
                let v954: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v952);
                let v956: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v948))),
                                    string(">move || { v954 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v958: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v954 }</animate> };
                let v960: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v958);
                let v970: string = string("vec![v912, v936, v960]");
                let v971: Vec<leptos::prelude::AnyView> = vec![v912, v936, v960];
                let v973: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v971);
                let v975: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v973);
                let v978: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v887))),
                                    string(">move || { v975 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v980: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v975 }</rect> };
                let v992: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"",
                );
                let v1004: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v1005: string = string("vec![]");
                let v1006: Vec<leptos::prelude::AnyView> = vec![];
                let v1008: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1006);
                let v1010: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1008);
                let v1012: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1004))),
                                    string(">move || { v1010 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1014: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1010 }</animate> };
                let v1016: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1014);
                let v1028: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v1029: string = string("vec![]");
                let v1030: Vec<leptos::prelude::AnyView> = vec![];
                let v1032: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1030);
                let v1034: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1032);
                let v1036: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1028))),
                                    string(">move || { v1034 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1038: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1034 }</animate> };
                let v1040: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1038);
                let v1052: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v1053: string = string("vec![]");
                let v1054: Vec<leptos::prelude::AnyView> = vec![];
                let v1056: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1054);
                let v1058: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1056);
                let v1060: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1052))),
                                    string(">move || { v1058 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1062: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1058 }</animate> };
                let v1064: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1062);
                let v1074: string = string("vec![v1016, v1040, v1064]");
                let v1075: Vec<leptos::prelude::AnyView> = vec![v1016, v1040, v1064];
                let v1077: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1075);
                let v1079: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1077);
                let v1081: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v992))),
                                    string(">move || { v1079 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1083: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1079 }</rect> };
                let v1095: string = string(
                    " opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"",
                );
                let v1107: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                let v1108: string = string("vec![]");
                let v1109: Vec<leptos::prelude::AnyView> = vec![];
                let v1111: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1109);
                let v1113: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1111);
                let v1115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1107))),
                                    string(">move || { v1113 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1117: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1113 }</animate> };
                let v1119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1117);
                let v1131: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                let v1132: string = string("vec![]");
                let v1133: Vec<leptos::prelude::AnyView> = vec![];
                let v1135: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1133);
                let v1137: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1135);
                let v1139: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1131))),
                                    string(">move || { v1137 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1141: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1137 }</animate> };
                let v1143: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1141);
                let v1155: string =
                        string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                let v1156: string = string("vec![]");
                let v1157: Vec<leptos::prelude::AnyView> = vec![];
                let v1159: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1157);
                let v1161: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1159);
                let v1163: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<animate "), (v1155))),
                                    string(">move || { v1161 }</"),
                                )),
                                string("animate"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1165: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1161 }</animate> };
                let v1167: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1165);
                let v1177: string = string("vec![v1119, v1143, v1167]");
                let v1178: Vec<leptos::prelude::AnyView> = vec![v1119, v1143, v1167];
                let v1180: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1178);
                let v1182: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1180);
                let v1184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<rect "), (v1095))),
                                    string(">move || { v1182 }</"),
                                )),
                                string("rect"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v1182 }</rect> };
                let v1188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1186);
                let v1190: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1083);
                let v1192: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v980);
                let v1202: string = string("vec![v1192, v1190, v1188]");
                let v1203: Vec<leptos::prelude::AnyView> = vec![v1192, v1190, v1188];
                let v1205: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1203);
                let v1207: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1205);
                let v1209: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v875))),
                                    string(">move || { v1207 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1211: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v857(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v1207 }</svg> };
                leptos::prelude::IntoAny::into_any(v1211)
            } else {
                let v1214: string = string("vec![]");
                let v1215: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1215)
            };
            let v1225: string = string("vec![v852, v1218]");
            let v1226: Vec<leptos::prelude::AnyView> = vec![v852, v1218];
            let v1228: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1226);
            let v1230: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1228);
            let v1233: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<button "), (v783))),
                                string(">move || { v1230 }</"),
                            )),
                            string("button"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1235: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Button, _, _>,
            > = leptos::prelude::view! { <button  on:click=move |_| v599() prop:disabled=move || v576() class=v777>move || { v1230 }</button> };
            let v1237: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1235);
            let v1239: Option<string> = leptos::prelude::ArcMemo::get(&v2);
            let v1258: Dice_ui::US31 =
                defaultValue(Dice_ui::US31::US31_1, map(Dice_ui::method106(), v1239));
            let v1437: leptos::prelude::AnyView = if let Dice_ui::US31::US31_0(v1258_0_0) = &v1258 {
                let v1264: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v1266: string = string(" class=\"[height:17px]\"");
                let v1280: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v1286: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v1287: string = string("vec![]");
                let v1288: Vec<leptos::prelude::AnyView> = vec![];
                let v1290: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1288);
                let v1292: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1290);
                let v1294: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v1286))),
                                    string(">move || { v1292 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1296: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v1292 }</path> };
                let v1298: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1296);
                let v1302: string = string("vec![v1298]");
                let v1303: Vec<leptos::prelude::AnyView> = vec![v1298];
                let v1305: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1303);
                let v1307: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1305);
                let v1309: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v1280))),
                                    string(">move || { v1307 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1311: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v1307 }</svg> };
                let v1313: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1311);
                let v1317: string = string("vec![v1313]");
                let v1318: Vec<leptos::prelude::AnyView> = vec![v1313];
                let v1320: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1318);
                let v1322: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1320);
                let v1324: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v1266))),
                                    string(">move || { v1322 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1326: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v1322 }</span> };
                let v1328: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1326);
                let v1330: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v1339: &str = &*v1258_0_0.clone();
                let v1372: std::string::String = String::from(v1339);
                let v1398: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1372));
                let v1402: string = string("vec![v1398]");
                let v1403: Vec<leptos::prelude::AnyView> = vec![v1398];
                let v1405: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1403);
                let v1407: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1405);
                let v1410: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v1330))),
                                    string(">move || { v1407 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1412: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v1407 }</pre> };
                let v1414: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1412);
                let v1421: string = string("vec![v1328, v1414]");
                let v1422: Vec<leptos::prelude::AnyView> = vec![v1328, v1414];
                let v1424: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1422);
                let v1426: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1424);
                let v1428: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v1264))),
                                    string(">move || { v1426 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v1430: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v1426 }</div> };
                leptos::prelude::IntoAny::into_any(v1430)
            } else {
                let v1433: string = string("vec![]");
                let v1434: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v1434)
            };
            let v1444: string = string("vec![v1237, v1437]");
            let v1445: Vec<leptos::prelude::AnyView> = vec![v1237, v1437];
            let v1447: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1445);
            let v1449: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1447);
            let v1451: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v572))),
                                string(">move || { v1449 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1453: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex">move || { v1449 }</div> };
            let v1455: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1453);
            let v1465: string = string("vec![v389, v570, v1455]");
            let v1466: Vec<leptos::prelude::AnyView> = vec![v389, v570, v1455];
            let v1468: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v1466);
            let v1470: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v1468);
            let v1472: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v1470 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v1474: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-col p-[10px] gap-[11px]">move || { v1470 }</div> };
            let v1476: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1474);
            let v1480: string = string("vec![v1476]");
            let v1481: Vec<leptos::prelude::AnyView> = vec![v1476];
            leptos::prelude::Fragment::new(v1481)
        }
        pub fn closure183(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure184(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure185(unitVar: (), unitVar_1: ()) -> string {
            string("History")
        }
        pub fn method198() -> Func0<string> {
            Func0::new(move || Dice_ui::closure185((), ()))
        }
        pub fn method200(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
        ) -> Func1<(std::string::String, Option<std::string::String>), (string, Dice_ui::US31)>
        {
            v0_1
        }
        pub fn closure188(
            v0_1: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            >,
            _arg: (std::string::String, Option<std::string::String>),
        ) -> (string, Dice_ui::US31) {
            let v3: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = Dice_ui::method200(v0_1);
            let patternInput: (string, Dice_ui::US31) =
                (move |x| v3(x))((_arg.0.clone(), _arg.1.clone()));
            (patternInput.0.clone(), patternInput.1.clone())
        }
        pub fn closure189(unitVar: (), _arg: (string, Dice_ui::US31)) -> bool {
            let v1: Dice_ui::US31 = _arg.1.clone();
            if string("FUNCTION_CALL") == (_arg.0.clone()) {
                if let Dice_ui::US31::US31_0(v1_0_0) = &v1 {
                    string("generate_random_number") == (v1_0_0.clone())
                } else {
                    false
                }
            } else {
                false
            }
        }
        pub fn method201() -> Func1<(string, Dice_ui::US31), bool> {
            Func1::new(move |arg10_0040: (string, Dice_ui::US31)| {
                Dice_ui::closure189((), arg10_0040)
            })
        }
        pub fn method202(v0_1: Vec<(string, Dice_ui::US31)>) -> Vec<(string, Dice_ui::US31)> {
            v0_1
        }
        pub fn closure187(unitVar: (), _arg: (string, usize, LrcPtr<Dice_ui::Heap5>)) -> bool {
            let v2: LrcPtr<Dice_ui::Heap5> = _arg.2.clone();
            let v5: Vec<(std::string::String, Option<std::string::String>)> =
                v2.l7.clone().to_vec();
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let patternInput: (std::string::String, Option<std::string::String>) = value;
                let v13: string = fable_library_rust::String_::fromString(patternInput.0.clone());
                let v32: Dice_ui::US14 = defaultValue(
                    Dice_ui::US14::US14_1,
                    map(Dice_ui::method39(), patternInput.1.clone()),
                );
                let v42: Dice_ui::US31 = match &v32 {
                    Dice_ui::US14::US14_0(v32_0_0) => {
                        Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(
                            match &v32 {
                                Dice_ui::US14::US14_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US31::US31_1,
                };
                let v45: bool = true;
                (v13, v42) /*;
                           let v47: bool = */
            }); //;
            let v49: Func1<
                (std::string::String, Option<std::string::String>),
                (string, Dice_ui::US31),
            > = _func1_from_v6;
            let v52: Vec<(string, Dice_ui::US31)> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v49 = v49.clone();
                        move |arg10_0040: (std::string::String, Option<std::string::String>)| {
                            Dice_ui::closure188(v49.clone(), arg10_0040)
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v53 = Dice_ui::method201();
            let v54: Vec<(string, Dice_ui::US31)> = Dice_ui::method202(v52);
            let v56: Vec<(string, Dice_ui::US31)> = v54
                .into_iter()
                .filter(|x| v53(x.clone().clone()))
                .collect::<Vec<_>>();
            if (get_Count(fable_library_rust::NativeArray_::array_from(v56.clone()))) > 0_i32 {
                (_arg.0.clone()) == (fable_library_rust::String_::fromString(v2.l2.clone()))
            } else {
                false
            }
        }
        pub fn method199() -> Func1<(string, usize, LrcPtr<Dice_ui::Heap5>), bool> {
            Func1::new(move |arg10_0040: (string, usize, LrcPtr<Dice_ui::Heap5>)| {
                Dice_ui::closure187((), arg10_0040)
            })
        }
        pub fn method203(
            v0_1: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)>,
        ) -> Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> {
            v0_1
        }
        pub fn method204(v0_1: i64) -> i64 {
            v0_1
        }
        pub fn closure190(unitVar: (), v0_1: chrono::DateTime<chrono::Utc>) -> Dice_ui::US68 {
            Dice_ui::US68::US68_0(v0_1)
        }
        pub fn method205() -> Func1<chrono::DateTime<chrono::Utc>, Dice_ui::US68> {
            Func1::new(move |v: chrono::DateTime<chrono::Utc>| Dice_ui::closure190((), v))
        }
        pub fn method206(v0_1: i32, v1: LrcPtr<Dice_ui::Mut2>) -> bool {
            (v1.l0.get().clone()) < (v0_1)
        }
        pub fn closure191(unitVar: (), unitVar_1: ()) -> string {
            string("[width:24px] [height:30px]")
        }
        pub fn closure186(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    Result<
                        Option<(
                            std::string::String,
                            Option<(
                                Array<(
                                    std::string::String,
                                    Array<
                                        std::collections::HashMap<
                                            std::string::String,
                                            (
                                                std::string::String,
                                                Option<std::string::String>,
                                                Option<f64>,
                                                Option<std::string::String>,
                                            ),
                                        >,
                                    >,
                                    std::string::String,
                                    Array<std::string::String>,
                                    Array<std::string::String>,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Array<(
                                    std::string::String,
                                    std::string::String,
                                    std::string::String,
                                    u64,
                                    Array<std::string::String>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    u8,
                                    Array<std::string::String>,
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                    Option<std::string::String>,
                                    Array<(std::string::String, std::string::String)>,
                                )>,
                            )>,
                            Option<(
                                std::string::String,
                                std::string::String,
                                Option<(Option<std::string::String>, Option<std::string::String>)>,
                                i32,
                                std::string::String,
                                std::string::String,
                            )>,
                            Option<std::string::String>,
                        )>,
                        std::string::String,
                    >,
                >,
            >,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v4: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v2410: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v4.clone()),
            ) as u64)
                == 0_u64
            {
                let v11: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v13: string = string(" class=\"[height:17px]\"");
                let v27: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v33: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v34: string = string("vec![]");
                let v35: Vec<leptos::prelude::AnyView> = vec![];
                let v37: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v35);
                let v39: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v37);
                let v42: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v33))),
                                    string(">move || { v39 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v44: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v39 }</path> };
                let v46: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v44);
                let v50: string = string("vec![v46]");
                let v51: Vec<leptos::prelude::AnyView> = vec![v46];
                let v53: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v51);
                let v55: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v53);
                let v58: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v27))),
                                    string(">move || { v55 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v60: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v55 }</svg> };
                let v62: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v60);
                let v66: string = string("vec![v62]");
                let v67: Vec<leptos::prelude::AnyView> = vec![v62];
                let v69: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v67);
                let v71: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v69);
                let v74: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v13))),
                                    string(">move || { v71 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v76: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v71 }</span> };
                let v78: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v76);
                let v80: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v90: &str = &*string("No account selected");
                let v123: std::string::String = String::from(v90);
                let v149: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v123));
                let v153: string = string("vec![v149]");
                let v154: Vec<leptos::prelude::AnyView> = vec![v149];
                let v156: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v154);
                let v158: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v156);
                let v161: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v80))),
                                    string(">move || { v158 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v163: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v158 }</pre> };
                let v165: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v163);
                let v173: string = string("vec![v78, v165]");
                let v174: Vec<leptos::prelude::AnyView> = vec![v78, v165];
                let v176: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v174);
                let v178: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v176);
                let v181: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v11))),
                                    string(">move || { v178 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v183: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v178 }</div> };
                leptos::prelude::IntoAny::into_any(v183)
            } else {
                let v187: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v188 = Dice_ui::method138();
                let v189 = Dice_ui::method139();
                let v191: Dice_ui::US53 = match &v187 {
                    Err(v187_1_0) => v189(v187_1_0.clone()),
                    Ok(v187_0_0) => v188(v187_0_0.clone()),
                };
                let v221: Dice_ui::US46 = match &v191 {
                    Dice_ui::US53::US53_0(v191_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v191_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v191_1_0) => Dice_ui::US46::US46_1(v191_1_0.clone()),
                };
                match &v221 {
                    Dice_ui::US46::US46_0(v221_0_0) => {
                        let v222: Dice_ui::US47 = v221_0_0.clone();
                        if let Dice_ui::US47::US47_0(v222_0_0) = &v222 {
                            let v225: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v222_0_0.clone().to_vec();
                            let v226 = Dice_ui::method199();
                            let v227: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                Dice_ui::method203(v225);
                            let v229: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> = v227
                                .into_iter()
                                .filter(|x| v226(x.clone().clone()))
                                .collect::<Vec<_>>();
                            let v232: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v242: &str = &*string("Block Timestamp");
                            let v275: std::string::String = String::from(v242);
                            let v301: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v275),
                            );
                            let v305: string = string("vec![v301]");
                            let v306: Vec<leptos::prelude::AnyView> = vec![v301];
                            let v308: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v306);
                            let v310: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v308);
                            let v313: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v232))),
                                                string(">move || { v310 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v315: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v310 }</th> };
                            let v317: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v315);
                            let v319: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v329: &str = &*string("Predecessor");
                            let v362: std::string::String = String::from(v329);
                            let v388: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v362),
                            );
                            let v392: string = string("vec![v388]");
                            let v393: Vec<leptos::prelude::AnyView> = vec![v388];
                            let v395: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v393);
                            let v397: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v395);
                            let v399: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v319))),
                                                string(">move || { v397 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v401: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v397 }</th> };
                            let v403: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v401);
                            let v405: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v415: &str = &*string("Receiver");
                            let v448: std::string::String = String::from(v415);
                            let v474: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v448),
                            );
                            let v478: string = string("vec![v474]");
                            let v479: Vec<leptos::prelude::AnyView> = vec![v474];
                            let v481: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v479);
                            let v483: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v481);
                            let v485: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v405))),
                                                string(">move || { v483 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v487: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v483 }</th> };
                            let v489: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v487);
                            let v491: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v501: &str = &*string("Fee");
                            let v534: std::string::String = String::from(v501);
                            let v560: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v534),
                            );
                            let v564: string = string("vec![v560]");
                            let v565: Vec<leptos::prelude::AnyView> = vec![v560];
                            let v567: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v565);
                            let v569: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v567);
                            let v571: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v491))),
                                                string(">move || { v569 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v573: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v569 }</th> };
                            let v575: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v573);
                            let v577: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v587: &str = &*string("Result");
                            let v620: std::string::String = String::from(v587);
                            let v646: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v620),
                            );
                            let v650: string = string("vec![v646]");
                            let v651: Vec<leptos::prelude::AnyView> = vec![v646];
                            let v653: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v651);
                            let v655: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v653);
                            let v657: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v577))),
                                                string(">move || { v655 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v659: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v655 }</th> };
                            let v661: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v659);
                            let v663: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                            let v673: &str = &*string("Status");
                            let v706: std::string::String = String::from(v673);
                            let v732: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                                leptos::prelude::IntoView::into_view(v706),
                            );
                            let v736: string = string("vec![v732]");
                            let v737: Vec<leptos::prelude::AnyView> = vec![v732];
                            let v739: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v737);
                            let v741: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v739);
                            let v743: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<th "), (v663))),
                                                string(">move || { v741 }</"),
                                            )),
                                            string("th"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v745: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Th, _, _>,
                            > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v741 }</th> };
                            let v747: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v745);
                            let v767: string = string("vec![v317, v403, v489, v575, v661, v747]");
                            let v768: Vec<leptos::prelude::AnyView> =
                                vec![v317, v403, v489, v575, v661, v747];
                            let v770: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v768);
                            let v772: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v770);
                            let v775: string =
                                string("leptos::prelude::view! { <tr >move || { v772 }</tr> }");
                            let v777: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                            > = leptos::prelude::view! { <tr >move || { v772 }</tr> };
                            let v779: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v777);
                            let v783: string = string("vec![v779]");
                            let v784: Vec<leptos::prelude::AnyView> = vec![v779];
                            let v786: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v784);
                            let v788: Vec<
                                Result<
                                    Option<(
                                        std::string::String,
                                        Option<(
                                            Array<(
                                                std::string::String,
                                                Array<
                                                    std::collections::HashMap<
                                                        std::string::String,
                                                        (
                                                            std::string::String,
                                                            Option<std::string::String>,
                                                            Option<f64>,
                                                            Option<std::string::String>,
                                                        ),
                                                    >,
                                                >,
                                                std::string::String,
                                                Array<std::string::String>,
                                                Array<std::string::String>,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                                u64,
                                                Array<std::string::String>,
                                                Array<(
                                                    std::string::String,
                                                    std::string::String,
                                                    std::string::String,
                                                )>,
                                                u8,
                                                Array<std::string::String>,
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    std::string::String,
                                                >,
                                                Option<std::string::String>,
                                                Array<(std::string::String, std::string::String)>,
                                            )>,
                                        )>,
                                        Option<(
                                            std::string::String,
                                            std::string::String,
                                            Option<(
                                                Option<std::string::String>,
                                                Option<std::string::String>,
                                            )>,
                                            i32,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Option<std::string::String>,
                                    )>,
                                    std::string::String,
                                >,
                            > = leptos::prelude::ArcMemo::get(&v0_1.clone());
                            let v790: bool = true;
                            let _vec_map : Vec<_> = v229.into_iter().map(|x| { //;
                                let patternInput:
                                        (string, usize,
                                         LrcPtr<Dice_ui::Heap5>) = x;
                                let v794: LrcPtr<Dice_ui::Heap5> =
                                    patternInput.2.clone();
                                let v796:
                                        Array<Result<Option<(std::string::String,
                                                             Option<(Array<(std::string::String,
                                                                            Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                                  Option<std::string::String>,
                                                                                                                                  Option<f64>,
                                                                                                                                  Option<std::string::String>)>>,
                                                                            std::string::String,
                                                                            Array<std::string::String>,
                                                                            Array<std::string::String>,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            std::string::String)>,
                                                                     Array<(std::string::String,
                                                                            std::string::String,
                                                                            std::string::String,
                                                                            u64,
                                                                            Array<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String,
                                                                                   std::string::String)>,
                                                                            u8,
                                                                            Array<std::string::String>,
                                                                            std::collections::HashMap<std::string::String, std::string::String>,
                                                                            Option<std::string::String>,
                                                                            Array<(std::string::String,
                                                                                   std::string::String)>)>)>,
                                                             Option<(std::string::String,
                                                                     std::string::String,
                                                                     Option<(Option<std::string::String>,
                                                                             Option<std::string::String>)>,
                                                                     i32,
                                                                     std::string::String,
                                                                     std::string::String)>,
                                                             Option<std::string::String>)>,
                                                     std::string::String>> =
                                    fable_library_rust::NativeArray_::array_from(v788.clone());
                                let v802: i32 = patternInput.1.clone() as i32;
                                let v811:
                                        Result<Option<(std::string::String,
                                                       Option<(Array<(std::string::String,
                                                                      Array<std::collections::HashMap<std::string::String, (std::string::String,
                                                                                                                            Option<std::string::String>,
                                                                                                                            Option<f64>,
                                                                                                                            Option<std::string::String>)>>,
                                                                      std::string::String,
                                                                      Array<std::string::String>,
                                                                      Array<std::string::String>,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      std::string::String)>,
                                                               Array<(std::string::String,
                                                                      std::string::String,
                                                                      std::string::String,
                                                                      u64,
                                                                      Array<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String,
                                                                             std::string::String)>,
                                                                      u8,
                                                                      Array<std::string::String>,
                                                                      std::collections::HashMap<std::string::String, std::string::String>,
                                                                      Option<std::string::String>,
                                                                      Array<(std::string::String,
                                                                             std::string::String)>)>)>,
                                                       Option<(std::string::String,
                                                               std::string::String,
                                                               Option<(Option<std::string::String>,
                                                                       Option<std::string::String>)>,
                                                               i32,
                                                               std::string::String,
                                                               std::string::String)>,
                                                       Option<std::string::String>)>,
                                               std::string::String> =
                                    v796[v802].clone();
                                let v815: string =
                                    string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                let v817: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v827: i64 =
                                    (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v794.l5.clone()))))
                                        / 1000_i64;
                                let v829:
                                        Option<chrono::DateTime<chrono::Utc>> =
                                    chrono::DateTime::from_timestamp_micros(v827);
                                let v848: Dice_ui::US68 =
                                    defaultValue(Dice_ui::US68::US68_1,
                                                 map(Dice_ui::method205(),
                                                     v829));
                                let v867: Dice_ui::US31 =
                                    match &v848 {
                                        Dice_ui::US68::US68_0(v848_0_0) => {
                                            let v854: chrono::NaiveDateTime =
                                                match &v848 {
                                                    Dice_ui::US68::US68_0(x)
                                                    => x.clone(),
                                                    _ => unreachable!(),
                                                }.clone().naive_utc();
                                            let v856:
                                                    chrono::DateTime<chrono::Local> =
                                                chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v854);
                                            let v858: string =
                                                string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                            let v859: &str =
                                                r#"%Y-%m-%d %H:%M:%S"#;
                                            let v861: std::string::String =
                                                v856.format(v859).to_string();
                                            Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v861))
                                        }
                                        _ => Dice_ui::US31::US31_1,
                                    };
                                let v873: Dice_ui::US69 =
                                    match &v867 {
                                        Dice_ui::US31::US31_0(v867_0_0) =>
                                        Dice_ui::US69::US69_0(match &v867 {
                                                                  Dice_ui::US31::US31_0(x)
                                                                  =>
                                                                  x.clone(),
                                                                  _ =>
                                                                  unreachable!(),
                                                              }.clone()),
                                        _ =>
                                        Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                    };
                                let v878: string =
                                    match &v873 {
                                        Dice_ui::US69::US69_0(v873_0_0) =>
                                        v873_0_0.clone(),
                                        Dice_ui::US69::US69_1(v873_1_0) =>
                                        append((append(string("sm\'.to_string result / Error: "),
                                                       (v873_1_0.clone()))),
                                               string("")),
                                    };
                                let v887: &str = &*v878;
                                let v920: std::string::String =
                                    String::from(v887);
                                let v946: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v920));
                                let v950: string = string("vec![v946]");
                                let v951: Vec<leptos::prelude::AnyView> =
                                    vec![v946];
                                let v953: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v951);
                                let v955: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v953);
                                let v958: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v817))),
                                                                           string(">move || { v955 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v960:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v955 }</td> };
                                let v962: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v960);
                                let v964: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v967: string =
                                    fable_library_rust::String_::fromString(v794.l1.clone());
                                let v976: &str = &*v967;
                                let v1009: std::string::String =
                                    String::from(v976);
                                let v1035: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1009));
                                let v1039: string = string("vec![v1035]");
                                let v1040: Vec<leptos::prelude::AnyView> =
                                    vec![v1035];
                                let v1042: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1040);
                                let v1044: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1042);
                                let v1046: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v964))),
                                                                           string(">move || { v1044 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1048:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1044 }</td> };
                                let v1050: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1048);
                                let v1052: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1055: string =
                                    fable_library_rust::String_::fromString(v794.l2.clone());
                                let v1064: &str = &*v1055;
                                let v1097: std::string::String =
                                    String::from(v1064);
                                let v1123: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1097));
                                let v1127: string = string("vec![v1123]");
                                let v1128: Vec<leptos::prelude::AnyView> =
                                    vec![v1123];
                                let v1130: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1128);
                                let v1132: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1130);
                                let v1134: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1052))),
                                                                           string(">move || { v1132 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1136:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1132 }</td> };
                                let v1138: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1136);
                                let v1140: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1144: string = toString(v794.l10);
                                let v1155: &str = &*v1144;
                                let v1188: std::string::String =
                                    String::from(v1155);
                                let v1214: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1188));
                                let v1218: string = string("vec![v1214]");
                                let v1219: Vec<leptos::prelude::AnyView> =
                                    vec![v1214];
                                let v1221: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1219);
                                let v1223: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1221);
                                let v1225: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1140))),
                                                                           string(">move || { v1223 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1227:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1223 }</td> };
                                let v1229: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1227);
                                let v1231: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1416: leptos::prelude::Fragment =
                                    if (get_Count(v794.l11.clone()) as u64) ==
                                           0_u64 {
                                        let v1243: &str = &*string("");
                                        let v1276: std::string::String =
                                            String::from(v1243);
                                        let v1302: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1276));
                                        let v1306: string =
                                            string("vec![v1302]");
                                        let v1307:
                                                Vec<leptos::prelude::AnyView> =
                                            vec![v1302];
                                        leptos::prelude::Fragment::new(v1307)
                                    } else {
                                        let v1310:
                                                Array<std::string::String> =
                                            v794.l11.clone();
                                        let v1311: i32 =
                                            get_Count(v1310.clone());
                                        let v1313: LrcPtr<Dice_ui::Mut2> =
                                            LrcPtr::new(Dice_ui::Mut2{l0:
                                                                          MutCell::new(0_i32),
                                                                      l1:
                                                                          MutCell::new(Dice_ui::US31::US31_1),});
                                        while Dice_ui::method206(v1311,
                                                                 v1313.clone())
                                              {
                                            let v1315: i32 =
                                                v1313.l0.get().clone();
                                            let v1318: i32 =
                                                ((v1315.wrapping_neg()) +
                                                     (v1311)) - 1_i32;
                                            let v1319: Dice_ui::US31 =
                                                v1313.l1.get().clone();
                                            let v1320: std::string::String =
                                                v1310[v1318].clone();
                                            let v1325: Array<string> =
                                                split(fable_library_rust::String_::fromString(v1320),
                                                      string(" / result: "),
                                                      -1_i32, 0_i32);
                                            let v1334: Dice_ui::US31 =
                                                if let Dice_ui::US31::US31_1 =
                                                       &v1319 {
                                                    if (get_Count(v1325.clone())
                                                            as u64) == 2_u64 {
                                                        let v1330: string =
                                                            v1325[0_i32].clone();
                                                        Dice_ui::US31::US31_0(v1325[1_i32].clone())
                                                    } else { v1319 }
                                                } else { v1319.clone() };
                                            let v1335: i32 = (v1315) + 1_i32;
                                            v1313.l0.set(v1335);
                                            v1313.l1.set(v1334);
                                            ()
                                        }
                                        {
                                            let v1336: Dice_ui::US31 =
                                                v1313.l1.get().clone();
                                            let v1340: string =
                                                match &v1336 {
                                                    Dice_ui::US31::US31_0(v1336_0_0)
                                                    =>
                                                    match &v1336 {
                                                        Dice_ui::US31::US31_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone(),
                                                    _ => string("?"),
                                                };
                                            let v1349: &str = &*v1340;
                                            let v1382: std::string::String =
                                                String::from(v1349);
                                            let v1408:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1382));
                                            let v1412: string =
                                                string("vec![v1408]");
                                            let v1413:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1408];
                                            leptos::prelude::Fragment::new(v1413)
                                        }
                                    };
                                let v1418: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1416);
                                let v1420: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1231))),
                                                                           string(">move || { v1418 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1422:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1418 }</td> };
                                let v1424: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1422);
                                let v1426: string =
                                    string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                let v1430: string =
                                    if v794.l9 {
                                        string("Ok")
                                    } else { string("Outcome Error") };
                                let v1431 = Dice_ui::method177();
                                let v1432 = Dice_ui::method178();
                                let v1434: Dice_ui::US63 =
                                    match &v811 {
                                        Err(v811_1_0) =>
                                        v1432(v811_1_0.clone()),
                                        Ok(v811_0_0) =>
                                        v1431(v811_0_0.clone()),
                                    };
                                let v1467: Dice_ui::US58 =
                                    match &v1434 {
                                        Dice_ui::US63::US63_0(v1434_0_0) =>
                                        Dice_ui::US58::US58_0(defaultValue(Dice_ui::US59::US59_1,
                                                                           map(Dice_ui::method179(),
                                                                               v1434_0_0.clone()))),
                                        Dice_ui::US63::US63_1(v1434_1_0) =>
                                        Dice_ui::US58::US58_1(v1434_1_0.clone()),
                                    };
                                let v1576: Dice_ui::US69 =
                                    match &v1467 {
                                        Dice_ui::US58::US58_0(v1467_0_0) => {
                                            let v1468: Dice_ui::US59 =
                                                v1467_0_0.clone();
                                            if let Dice_ui::US59::US59_0(v1468_0_0,
                                                                         v1468_0_1,
                                                                         v1468_0_2,
                                                                         v1468_0_3)
                                                   = &v1468 {
                                                let v1471:
                                                        Option<(std::string::String,
                                                                std::string::String,
                                                                Option<(Option<std::string::String>,
                                                                        Option<std::string::String>)>,
                                                                i32,
                                                                std::string::String,
                                                                std::string::String)> =
                                                    v1468_0_2.clone();
                                                let v1496: Dice_ui::US64 =
                                                    defaultValue(Dice_ui::US64::US64_1,
                                                                 map(Dice_ui::method180(),
                                                                     v1471.clone()));
                                                match &v1496 {
                                                    Dice_ui::US64::US64_0(v1496_0_0,
                                                                          v1496_0_1,
                                                                          v1496_0_2,
                                                                          v1496_0_3,
                                                                          v1496_0_4,
                                                                          v1496_0_5)
                                                    => {
                                                        let v1529:
                                                                Dice_ui::US64 =
                                                            defaultValue(Dice_ui::US64::US64_1,
                                                                         map(Dice_ui::method180(),
                                                                             v1471.clone()));
                                                        let v1542:
                                                                Dice_ui::US31 =
                                                            if let Dice_ui::US64::US64_0(v1529_0_0,
                                                                                         v1529_0_1,
                                                                                         v1529_0_2,
                                                                                         v1529_0_3,
                                                                                         v1529_0_4,
                                                                                         v1529_0_5)
                                                                   = &v1529 {
                                                                Dice_ui::US31::US31_0(append((append((append((append((append((append((append((toString(v1529_0_0.clone())),
                                                                                                                                             string(": "))),
                                                                                                                                     (toString(v1529_0_4.clone())))),
                                                                                                                             string(" - "))),
                                                                                                                     (toString(v1529_0_5.clone())))),
                                                                                                             string(" ("))),
                                                                                                     (toString(v1529_0_1.clone())))),
                                                                                             string(")")))
                                                            } else {
                                                                Dice_ui::US31::US31_1
                                                            };
                                                        Dice_ui::US69::US69_1(match &v1542
                                                                                  {
                                                                                  Dice_ui::US31::US31_0(v1542_0_0)
                                                                                  =>
                                                                                  match &v1542
                                                                                      {
                                                                                      Dice_ui::US31::US31_0(x)
                                                                                      =>
                                                                                      x.clone(),
                                                                                      _
                                                                                      =>
                                                                                      unreachable!(),
                                                                                  }.clone(),
                                                                                  _
                                                                                  =>
                                                                                  Dice_ui::method8(400_i64,
                                                                                                   sprintf!("{:?}",
                                                                                                            ())),
                                                                              })
                                                    }
                                                    _ =>
                                                    Dice_ui::US69::US69_0(Dice_ui::method8(400_i64,
                                                                                           sprintf!("{:?}",
                                                                                                    (v1468_0_0.clone(),
                                                                                                     v1468_0_1.clone(),
                                                                                                     v1471.clone(),
                                                                                                     v1468_0_3.clone())))),
                                                }
                                            } else {
                                                Dice_ui::US69::US69_1(concat(new_array(&[string("RPC Response: "),
                                                                                         Dice_ui::method8(400_i64,
                                                                                                          sprintf!("{:?}",
                                                                                                                   v1467.clone()))])))
                                            }
                                        }
                                        Dice_ui::US58::US58_1(v1467_1_0) =>
                                        Dice_ui::US69::US69_1(fable_library_rust::String_::fromString(v1467_1_0.clone())),
                                    };
                                let v1589: string =
                                    concat(new_array(&[v1430, string(" / "),
                                                       match &v1576 {
                                                           Dice_ui::US69::US69_0(v1576_0_0)
                                                           =>
                                                           concat(new_array(&[string("RPC Response: "),
                                                                              Dice_ui::method8(400_i64,
                                                                                               sprintf!("{:?}",
                                                                                                        v1576_0_0.clone()))])),
                                                           Dice_ui::US69::US69_1(v1576_1_0)
                                                           =>
                                                           concat(new_array(&[string("Error: "),
                                                                              v1576_1_0.clone()])),
                                                       }]));
                                let v1598: &str = &*v1589;
                                let v1631: std::string::String =
                                    String::from(v1598);
                                let v1657: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1631));
                                let v1661: string = string("vec![v1657]");
                                let v1662: Vec<leptos::prelude::AnyView> =
                                    vec![v1657];
                                let v1664: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1662);
                                let v1666: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1664);
                                let v1668: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<td "),
                                                                                   (v1426))),
                                                                           string(">move || { v1666 }</"))),
                                                                   string("td"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1670:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                    leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1666 }</td> };
                                let v1672: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1670);
                                let v1691: string =
                                    string("vec![v962, v1050, v1138, v1229, v1424, v1672]");
                                let v1692: Vec<leptos::prelude::AnyView> =
                                    vec![v962, v1050, v1138, v1229, v1424, v1672];
                                let v1694: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1692);
                                let v1696: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1694);
                                let v1698: string =
                                    append((append(string("leptos::prelude::view! { "),
                                                   (append((append((append((append(string("<tr "),
                                                                                   (v815))),
                                                                           string(">move || { v1696 }</"))),
                                                                   string("tr"))),
                                                           string(">"))))),
                                           string(" }"));
                                let v1700:
                                        leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                    leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v1696 }</tr> };
                                let v1702: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1700);
                                let v1704: bool =
                                    true; v1702 }).collect::<Vec<_>>();
                            let v1706: Vec<leptos::prelude::AnyView> = _vec_map;
                            let v1708: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1706);
                            let v1712: string = string("vec![v1708]");
                            let v1713: Vec<leptos::prelude::AnyView> = vec![v1708];
                            let v1715: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1713);
                            let v1717: string =
                                    string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                            let v1719: string = string(" class=\"ltr:text-left rtl:text-right\"");
                            let v1721: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v786);
                            let v1724: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<thead "), (v1719))),
                                                string(">move || { v1721 }</"),
                                            )),
                                            string("thead"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1726: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                            > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v1721 }</thead> };
                            let v1728: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1726);
                            let v1730: string =
                                string(" class=\"divide-y divide-gray-200 dark:divide-gray-700\"");
                            let v1732: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1715);
                            let v1735: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<tbody "), (v1730))),
                                                string(">move || { v1732 }</"),
                                            )),
                                            string("tbody"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1737: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                            > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v1732 }</tbody> };
                            let v1739: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1737);
                            let v1746: string = string("vec![v1728, v1739]");
                            let v1747: Vec<leptos::prelude::AnyView> = vec![v1728, v1739];
                            let v1749: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1747);
                            let v1751: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1749);
                            let v1754: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<table "), (v1717))),
                                                string(">move || { v1751 }</"),
                                            )),
                                            string("table"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1756: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Table, _, _>,
                            > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v1751 }</table> };
                            leptos::prelude::IntoAny::into_any(v1756)
                        } else {
                            let v1761: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v1763: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v1766 = {
                                let clo = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo = clo.clone();
                                    move |arg: ()| clo()
                                })
                            };
                            let v1784: string =
                                    string(" class=move || \" \".to_owned() + &v1766(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v1796: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v1808: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1809: string = string("vec![]");
                            let v1810: Vec<leptos::prelude::AnyView> = vec![];
                            let v1812: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1810);
                            let v1814: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1812);
                            let v1817: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1808))),
                                                string(">move || { v1814 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1819: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1814 }</animate> };
                            let v1821: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1819);
                            let v1833: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v1834: string = string("vec![]");
                            let v1835: Vec<leptos::prelude::AnyView> = vec![];
                            let v1837: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1835);
                            let v1839: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1837);
                            let v1841: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1833))),
                                                string(">move || { v1839 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1843: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v1839 }</animate> };
                            let v1845: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1843);
                            let v1857: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1858: string = string("vec![]");
                            let v1859: Vec<leptos::prelude::AnyView> = vec![];
                            let v1861: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1859);
                            let v1863: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1861);
                            let v1865: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1857))),
                                                string(">move || { v1863 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1867: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1863 }</animate> };
                            let v1869: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1867);
                            let v1880: string = string("vec![v1821, v1845, v1869]");
                            let v1881: Vec<leptos::prelude::AnyView> = vec![v1821, v1845, v1869];
                            let v1883: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1881);
                            let v1885: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1883);
                            let v1888: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1796))),
                                                string(">move || { v1885 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1890: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v1885 }</rect> };
                            let v1902: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v1914: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1915: string = string("vec![]");
                            let v1916: Vec<leptos::prelude::AnyView> = vec![];
                            let v1918: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1916);
                            let v1920: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1918);
                            let v1922: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1914))),
                                                string(">move || { v1920 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1924: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v1920 }</animate> };
                            let v1926: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1924);
                            let v1938: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v1939: string = string("vec![]");
                            let v1940: Vec<leptos::prelude::AnyView> = vec![];
                            let v1942: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1940);
                            let v1944: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1942);
                            let v1946: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1938))),
                                                string(">move || { v1944 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1948: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v1944 }</animate> };
                            let v1950: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1948);
                            let v1962: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v1963: string = string("vec![]");
                            let v1964: Vec<leptos::prelude::AnyView> = vec![];
                            let v1966: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1964);
                            let v1968: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1966);
                            let v1970: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v1962))),
                                                string(">move || { v1968 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1972: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v1968 }</animate> };
                            let v1974: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1972);
                            let v1984: string = string("vec![v1926, v1950, v1974]");
                            let v1985: Vec<leptos::prelude::AnyView> = vec![v1926, v1950, v1974];
                            let v1987: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v1985);
                            let v1989: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v1987);
                            let v1991: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v1902))),
                                                string(">move || { v1989 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v1993: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v1989 }</rect> };
                            let v2005: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v2017: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v2018: string = string("vec![]");
                            let v2019: Vec<leptos::prelude::AnyView> = vec![];
                            let v2021: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2019);
                            let v2023: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2021);
                            let v2025: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2017))),
                                                string(">move || { v2023 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2027: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v2023 }</animate> };
                            let v2029: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2027);
                            let v2041: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v2042: string = string("vec![]");
                            let v2043: Vec<leptos::prelude::AnyView> = vec![];
                            let v2045: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2043);
                            let v2047: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2045);
                            let v2049: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2041))),
                                                string(">move || { v2047 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2051: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v2047 }</animate> };
                            let v2053: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2051);
                            let v2065: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v2066: string = string("vec![]");
                            let v2067: Vec<leptos::prelude::AnyView> = vec![];
                            let v2069: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2067);
                            let v2071: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2069);
                            let v2073: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v2065))),
                                                string(">move || { v2071 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2075: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v2071 }</animate> };
                            let v2077: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2075);
                            let v2087: string = string("vec![v2029, v2053, v2077]");
                            let v2088: Vec<leptos::prelude::AnyView> = vec![v2029, v2053, v2077];
                            let v2090: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2088);
                            let v2092: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2090);
                            let v2094: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v2005))),
                                                string(">move || { v2092 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2096: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v2092 }</rect> };
                            let v2098: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2096);
                            let v2100: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1993);
                            let v2102: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v1890);
                            let v2112: string = string("vec![v2102, v2100, v2098]");
                            let v2113: Vec<leptos::prelude::AnyView> = vec![v2102, v2100, v2098];
                            let v2115: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2113);
                            let v2117: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2115);
                            let v2120: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v1784))),
                                                string(">move || { v2117 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2122: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v1766(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v2117 }</svg> };
                            let v2124: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2122);
                            let v2134: &str = &*string("Loading...");
                            let v2167: std::string::String = String::from(v2134);
                            let v2193: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v2167),
                                );
                            let v2200: string = string("vec![v2124, v2193]");
                            let v2201: Vec<leptos::prelude::AnyView> = vec![v2124, v2193];
                            let v2203: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2201);
                            let v2205: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2203);
                            let v2208: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1763))),
                                                string(">move || { v2205 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2210: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v2205 }</div> };
                            let v2212: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v2210);
                            let v2216: string = string("vec![v2212]");
                            let v2217: Vec<leptos::prelude::AnyView> = vec![v2212];
                            let v2219: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v2217);
                            let v2221: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v2219);
                            let v2223: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1761))),
                                                string(">move || { v2221 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v2225: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v2221 }</div> };
                            leptos::prelude::IntoAny::into_any(v2225)
                        }
                    }
                    Dice_ui::US46::US46_1(v221_1_0) => {
                        let v2231: string =
                            fable_library_rust::String_::fromString(v221_1_0.clone());
                        let v2234: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v2236: string = string(" class=\"[height:17px]\"");
                        let v2250: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v2256: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v2257: string = string("vec![]");
                        let v2258: Vec<leptos::prelude::AnyView> = vec![];
                        let v2260: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2258);
                        let v2262: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2260);
                        let v2265: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v2256))),
                                            string(">move || { v2262 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2267: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v2262 }</path> };
                        let v2269: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2267);
                        let v2273: string = string("vec![v2269]");
                        let v2274: Vec<leptos::prelude::AnyView> = vec![v2269];
                        let v2276: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2274);
                        let v2278: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2276);
                        let v2281: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v2250))),
                                            string(">move || { v2278 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2283: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v2278 }</svg> };
                        let v2285: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2283);
                        let v2289: string = string("vec![v2285]");
                        let v2290: Vec<leptos::prelude::AnyView> = vec![v2285];
                        let v2292: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2290);
                        let v2294: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2292);
                        let v2297: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v2236))),
                                            string(">move || { v2294 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2299: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v2294 }</span> };
                        let v2301: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2299);
                        let v2303: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v2312: &str = &*v2231;
                        let v2345: std::string::String = String::from(v2312);
                        let v2371: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v2345),
                        );
                        let v2375: string = string("vec![v2371]");
                        let v2376: Vec<leptos::prelude::AnyView> = vec![v2371];
                        let v2378: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2376);
                        let v2380: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2378);
                        let v2383: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v2303))),
                                            string(">move || { v2380 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2385: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v2380 }</pre> };
                        let v2387: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v2385);
                        let v2395: string = string("vec![v2301, v2387]");
                        let v2396: Vec<leptos::prelude::AnyView> = vec![v2301, v2387];
                        let v2398: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v2396);
                        let v2400: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v2398);
                        let v2403: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v2234))),
                                            string(">move || { v2400 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v2405: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v2400 }</div> };
                        leptos::prelude::IntoAny::into_any(v2405)
                    }
                }
            };
            let v2415: string = string("vec![v2410]");
            let v2416: Vec<leptos::prelude::AnyView> = vec![v2410];
            leptos::prelude::Fragment::new(v2416)
        }
        pub fn closure194(
            v0_1: i32,
            v1_: bool,
            v1__1: std::string::String,
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((v1_, v1__1)));
            LrcPtr::new((v0_1, (patternInput.0.clone(), patternInput.1.clone())))
        }
        pub fn closure193(
            unitVar: (),
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(bool, std::string::String)>,
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure194(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method207() -> Func1<
            i32,
            Func1<
                LrcPtr<(bool, std::string::String)>,
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        > {
            Func1::new(move |v: i32| Dice_ui::closure193((), v))
        }
        pub fn method208(
            v0_1: Vec<LrcPtr<(bool, std::string::String)>>,
        ) -> Vec<LrcPtr<(bool, std::string::String)>> {
            v0_1
        }
        pub fn closure192(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            unitVar: (),
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            let v8: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get(&v5.l3.clone());
            let v10 = Dice_ui::method207();
            let v11: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v8.l0.clone());
            v11.iter()
                .enumerate()
                .map(|(i, x)| v10(i.try_into().unwrap())(x.clone()))
                .collect::<Vec<_>>()
        }
        pub fn method209(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure196(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method209(v0_1);
            let patternInput: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v2(x))(LrcPtr::new((v1_, v1__1)));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn method210(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
        ) -> Func1<
            (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        > {
            v0_1
        }
        pub fn closure197(
            v0_1: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            >,
            _arg: (
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> (
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) {
            let v4: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = Dice_ui::method210(v0_1);
            let patternInput: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ) = (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()));
            (
                patternInput.0.clone(),
                patternInput.1.clone(),
                patternInput.2.clone(),
            )
        }
        pub fn closure195(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: leptos::prelude::ReadSignal<i32>,
            unitVar: (),
        ) -> Vec<(
            i32,
            i32,
            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        )> {
            let v3: i32 = leptos::prelude::ReadSignal::get(&v1);
            let v5: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v8: bool = true;
            let _func1_from_v6 = Func1::from(move |value| {
                //;
                let v10: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let b: (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = v10.1.clone();
                let v25: bool = true;
                (v10.0.clone(), b.0.clone(), b.1.clone()) /*;
                                                          let v27: bool = */
            }); //;
            let v29: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v6;
            let v32: Vec<(
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            )> = v5
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v29 = v29.clone();
                        move |tupledArg: LrcPtr<(
                            i32,
                            (
                                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                            ),
                        )>| {
                            Dice_ui::closure196(
                                v29.clone(),
                                tupledArg.0.clone(),
                                tupledArg.1.clone(),
                            )
                        }
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v35: bool = true;
            let _func1_from_v33 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v42: bool = true;
                (v3, patternInput.0.clone(), patternInput.1.clone()) /*;
                                                                     let v44: bool = */
            }); //;
            let v46: Func1<
                (
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            > = _func1_from_v33;
            v32.into_iter()
                .map(|x| {
                    Func1::new({
                        let v46 = v46.clone();
                        move |arg10_0040_1: (
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        )| Dice_ui::closure197(v46.clone(), arg10_0040_1)
                    })(x.clone())
                })
                .collect::<Vec<_>>()
        }
        pub fn closure198(
            v0_1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            unitVar: (),
        ) -> i32 {
            let v2: Vec<(
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            )> = leptos::prelude::ArcMemo::get(&v0_1);
            get_Count(fable_library_rust::NativeArray_::array_from(v2.clone()))
        }
        pub fn method211(
            v0_: i32,
            v0__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(
            i32,
            (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        )> {
            LrcPtr::new((v0_, v0__1))
        }
        pub fn method212(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn method213(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            LrcPtr<(bool, std::string::String)>,
        > {
            v0_1
        }
        pub fn closure200(
            v0_1: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            >,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = Dice_ui::method213(v0_1);
            (move |x| v2(x))(LrcPtr::new((v1_, v1__1)))
        }
        pub fn closure199(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v8: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v11: i32 = get_Count(fable_library_rust::NativeArray_::array_from(
                v8.clone().clone(),
            ));
            let v21: &str = &*string("");
            let v54: std::string::String = String::from(v21);
            let patternInput: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ) = leptos::prelude::signal(LrcPtr::new((false, v54)));
            let v87: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = LrcPtr::new((v11, (patternInput.0.clone(), patternInput.1.clone())));
            let v90: LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )> = Dice_ui::method211(v87.0.clone(), v87.1.clone());
            let v91: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method212(v8);
            let v93: bool = true;
            let mut v91 = v91;
            let v95: bool = true;
            v91.push(v90);
            let v97: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v91;
            let v100: bool = true;
            let _func1_from_v98 = Func1::from(move |value| {
                //;
                let v102: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v116: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v102.1.clone()).0.clone());
                let v119: bool = true;
                v116 /*;
                     let v121: bool = */
            }); //;
            let v123: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v98;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v97
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v123 = v123.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v123.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v1.l1.clone(),
                l2: v1.l2,
                l3: v1.l3,
                l4: v1.l4.clone(),
            })
        }
        pub fn closure201(unitVar: (), v0_1: i32) -> i32 {
            1_i32 + (v0_1)
        }
        pub fn closure202(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure203(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" bg-gray-300 hover:bg-gray-200");
            String::from(v9)
        }
        pub fn closure204(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure205(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure206(unitVar: (), unitVar_1: ()) -> string {
            string("Accounts")
        }
        pub fn method214(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure206((), ()))
        }
        pub fn method216(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            v0_1
        }
        pub fn closure208(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> LrcPtr<(i32, i32)> {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            > = Dice_ui::method216(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn method215(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                LrcPtr<(i32, i32)>,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            LrcPtr<(i32, i32)>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |arg10_0040: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )| Dice_ui::closure208(v0_1.clone(), arg10_0040)
            })
        }
        pub fn method217(v0_1: i32) -> i32 {
            v0_1
        }
        pub fn method219(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure211(
            v0_1: i32,
            v1: i32,
            v2_: bool,
            v2__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v2: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v2_, v2__1));
            if Dice_ui::method219((v1) == (v0_1)) {
                v2.clone()
            } else {
                LrcPtr::new(((v2.0.clone()) == false, v2.1.clone()))
            }
        }
        pub fn closure210(
            v0_1: i32,
            v1: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure211(v0_1, v1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn method218(
            v0_1: i32,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |v: i32| Dice_ui::closure210(v0_1, v)
            })
        }
        pub fn closure209(v0_1: LrcPtr<Dice_ui::Heap2>, v1: i32, v2: leptos::ev::Event) {
            let v5: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v7: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v5);
            let v10: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>> =
                Box::pin(v7.l3.clone());
            let v12: LrcPtr<Dice_ui::Heap0> = leptos::prelude::ArcRwSignal::get_untracked(&v10);
            let v20: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v22: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v20);
            let v24 = Dice_ui::method218(v1);
            let v25: Vec<LrcPtr<(bool, std::string::String)>> = Dice_ui::method208(v12.l0.clone());
            let v28: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v25
                    .iter()
                    .enumerate()
                    .map(|(i, x)| v24(i.try_into().unwrap())(x.clone()))
                    .collect::<Vec<_>>(),
                l1: v12.l1.clone(),
                l2: v12.l2,
                l3: v12.l3,
                l4: v12.l4.clone(),
            });
            let v30: bool = true;
            leptos::prelude::ArcRwSignal::set(&v22.l3.clone(), v28); //;
            ()
        }
        pub fn closure212(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            unitVar: (),
        ) -> bool {
            (leptos::prelude::ReadSignal::get(&v0_1)).0.clone()
        }
        pub fn method220(
            v0_1: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
        ) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure212(v0_1.clone(), ())
            })
        }
        pub fn closure213(v0_1: i32, unitVar: ()) -> std::string::String {
            let v1: string = append((append(string("account-"), (toString(v0_1)))), string(""));
            let v10: &str = &*v1;
            String::from(v10)
        }
        pub fn method221(v0_1: i32) -> Func0<std::string::String> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure213(v0_1, ())
            })
        }
        pub fn method223(v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure215(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
            v3_: bool,
            v3__1: std::string::String,
        ) -> LrcPtr<(bool, std::string::String)> {
            let v3: LrcPtr<(bool, std::string::String)> = LrcPtr::new((v3_, v3__1));
            if Dice_ui::method223((v2) == (v0_1)) {
                v3.clone()
            } else {
                LrcPtr::new((v3.0.clone(), v1))
            }
        }
        pub fn closure214(
            v0_1: i32,
            v1: std::string::String,
            v2: i32,
        ) -> Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>
        {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v2 = v2.clone();
                move |tupledArg: LrcPtr<(bool, std::string::String)>| {
                    Dice_ui::closure215(
                        v0_1,
                        v1.clone(),
                        v2,
                        tupledArg.0.clone(),
                        tupledArg.1.clone(),
                    )
                }
            })
        }
        pub fn method222(
            v0_1: i32,
            v1: std::string::String,
        ) -> Func1<
            i32,
            Func1<LrcPtr<(bool, std::string::String)>, LrcPtr<(bool, std::string::String)>>,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                move |v: i32| Dice_ui::closure214(v0_1, v1.clone(), v)
            })
        }
        pub fn closure216(unitVar: (), unitVar_1: ()) -> string {
            string("flex-1")
        }
        pub fn method224(
            v0_1: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            >,
        ) -> Vec<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
        > {
            v0_1
        }
        pub fn closure219(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn method226() -> Func1<bool, bool> {
            Func1::new(move |v: bool| Dice_ui::closure219((), v))
        }
        pub fn closure218(
            v0_1: i32,
            v1_: i32,
            v1__1: (
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> bool {
            let v14: bool = ((LrcPtr::new((v1_, v1__1))).0.clone()) == (v0_1);
            (Dice_ui::method226())(v14)
        }
        pub fn method225(
            v0_1: i32,
        ) -> Func1<
            LrcPtr<(
                i32,
                (
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                    leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                ),
            )>,
            bool,
        > {
            Func1::new({
                let v0_1 = v0_1.clone();
                move |tupledArg: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>| {
                    Dice_ui::closure218(v0_1, tupledArg.0.clone(), tupledArg.1.clone())
                }
            })
        }
        pub fn closure217(
            v0_1: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v1: i32,
            v2: LrcPtr<Dice_ui::Heap0>,
        ) -> LrcPtr<Dice_ui::Heap0> {
            let v10: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = Dice_ui::method224(leptos::prelude::ArcMemo::get(&v0_1));
            let v11 = Dice_ui::method225(v1);
            let v13: bool = true;
            let mut v10 = v10;
            let v15: bool = true;
            v10.retain(|x| v11(x.clone()));
            let v17: Vec<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
            > = v10;
            let v20: bool = true;
            let _func1_from_v18 = Func1::from(move |value| {
                //;
                let v22: LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )> = value;
                let v36: LrcPtr<(bool, std::string::String)> =
                    leptos::prelude::ReadSignal::get(&(v22.1.clone()).0.clone());
                let v39: bool = true;
                v36 /*;
                    let v41: bool = */
            }); //;
            let v43: Func1<
                LrcPtr<(
                    i32,
                    (
                        leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                    ),
                )>,
                LrcPtr<(bool, std::string::String)>,
            > = _func1_from_v18;
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v17
                    .into_iter()
                    .map(|x| {
                        Func1::new({
                            let v43 = v43.clone();
                            move |tupledArg: LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>| {
                                Dice_ui::closure200(
                                    v43.clone(),
                                    tupledArg.0.clone(),
                                    tupledArg.1.clone(),
                                )
                            }
                        })(x.clone())
                    })
                    .collect::<Vec<_>>(),
                l1: v2.l1.clone(),
                l2: v2.l2,
                l3: v2.l3,
                l4: v2.l4.clone(),
            })
        }
        pub fn closure220(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure221(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string(" pr-[7px] pl-[5px]");
            String::from(v9)
        }
        pub fn method227(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
        ) -> Func1<
            (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
            leptos::prelude::AnyView,
        > {
            v0_1
        }
        pub fn closure222(
            v0_1: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            >,
            _arg: (
                i32,
                i32,
                leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
            ),
        ) -> leptos::prelude::AnyView {
            let v4: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = Dice_ui::method227(v0_1);
            (move |x| v4(x))((_arg.0.clone(), _arg.1.clone(), _arg.2.clone()))
        }
        pub fn closure207(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            >,
            v2: leptos::prelude::ArcMemo<i32>,
            v3: leptos::prelude::ArcMemo<
                Vec<
                    LrcPtr<(
                        i32,
                        (
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                            leptos::prelude::WriteSignal<LrcPtr<(bool, std::string::String)>>,
                        ),
                    )>,
                >,
            >,
            v4: leptos::prelude::WriteSignal<i32>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v7: string = string(" class=\"flex flex-1 flex-col p-[8px] gap-[8px]\"");
            let v9: leptos::prelude::ArcMemo<
                Vec<(
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                )>,
            > = v1;
            let v12: bool = true;
            let _func1_from_v10 = Func1::from(move |value| {
                //;
                let patternInput: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v23: bool = true;
                LrcPtr::new((patternInput.0.clone(), patternInput.1.clone())) /*;
                                                                              let v25: bool = */
            }); //;
            let v28 = Dice_ui::method215(_func1_from_v10);
            let v31: bool = true;
            let _func1_from_v29 = Func1::from(move |value| {
                //;
                let patternInput_1: (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ) = value;
                let v35: leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>> =
                    patternInput_1.2.clone();
                let v37: string = string(" class=\"flex gap-[8px] [align-items:center]\"");
                let v38: i32 = Dice_ui::method217(patternInput_1.1.clone());
                let v41: bool = true;
                let _func0_from_v39 = Func0::from(move || {
                    //;
                    let v42: string =
                        append((append(string("account-"), (toString(v38)))), string(""));
                    let v51: &str = &*v42;
                    let v84: std::string::String = String::from(v51);
                    let v110: bool = true;
                    v84 /*;
                        let v112: bool = */
                }); //;
                let v114: Func0<std::string::String> = _func0_from_v39;
                let v162: string = join(
                    string(" "),
                    toArray(delay(Func0::new(move || {
                        ofList(ofArray_1(new_array(&[
                            string("block"),
                            string("relative"),
                            string("h-8"),
                            string("w-14"),
                            string("cursor-pointer"),
                            string("[-webkit-tap-highlight-color:_transparent]"),
                        ])))
                    }))),
                );
                let v173: &str = &*v162;
                let v206: std::string::String = String::from(v173);
                let v232: std::string::String = v206;
                let v236: string = string(" class=v232 for=move || v114()");
                let v239: bool = true;
                let v237 = Func1::new({
                    let v0_1 = v0_1.clone();
                    let v38 = v38.clone();
                    move |v: leptos::ev::Event| Dice_ui::closure209(v0_1.clone(), v38, v)
                }); //;
                let v240 = Dice_ui::method220(v35.clone());
                let v241 = Dice_ui::method221(v38);
                let v242: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
                let v254: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                string("<input "),
                                (append(
                                    (append(
                                        string(" prop:checked=move || v240()"),
                                        (append(
                                            (append(
                                                string(" on:change=move |event| v237(event)"),
                                                (append(
                                                    (append(
                                                        string(" id=move || v241()"),
                                                        (append(
                                                            (append(
                                                                string(" type=\"checkbox\""),
                                                                (append(
                                                                    (append(
                                                                        (append(
                                                                            string(" "),
                                                                            (v242),
                                                                        )),
                                                                        string(""),
                                                                    )),
                                                                    string(""),
                                                                )),
                                                            )),
                                                            string(""),
                                                        )),
                                                    )),
                                                    string(""),
                                                )),
                                            )),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(" />"),
                        )),
                    )),
                    string(" }"),
                );
                let v256: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  prop:checked=move || v240() on:change=move |event| v237(event) id=move || v241() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
                let v258: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v256);
                let v259: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
                let v260: string = append(
                    (append((append(string(" "), (v259))), string(""))),
                    string(""),
                );
                let v270: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
                let v272: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
                let v276: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v272))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v277: string = string("vec![]");
                let v278: Vec<leptos::prelude::AnyView> = vec![];
                let v280: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v278);
                let v282: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v280);
                let v285: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v276))),
                                    string(">move || { v282 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v287: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v282 }</path> };
                let v289: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v287);
                let v293: string = string("vec![v289]");
                let v294: Vec<leptos::prelude::AnyView> = vec![v289];
                let v296: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v294);
                let v298: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v296);
                let v301: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v270))),
                                    string(">move || { v298 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v303: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v298 }</svg> };
                let v313: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
                let v315: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
                let v319: string = append(
                    (append(
                        string(" clip-rule=\"evenodd\""),
                        (append(
                            (append(
                                (append(string(" "), (v315))),
                                string(" fill-rule=\"evenodd\""),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v320: string = string("vec![]");
                let v321: Vec<leptos::prelude::AnyView> = vec![];
                let v323: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v321);
                let v325: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v323);
                let v327: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v319))),
                                    string(">move || { v325 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v329: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v325 }</path> };
                let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
                let v335: string = string("vec![v331]");
                let v336: Vec<leptos::prelude::AnyView> = vec![v331];
                let v338: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v336);
                let v340: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v338);
                let v342: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v313))),
                                    string(">move || { v340 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v344: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v340 }</svg> };
                let v346: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v344);
                let v348: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v303);
                let v356: string = string("vec![v348, v346]");
                let v357: Vec<leptos::prelude::AnyView> = vec![v348, v346];
                let v359: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v357);
                let v361: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v359);
                let v364: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v260))),
                                    string(">move || { v361 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v366: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v361 }</span> };
                let v368: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v366);
                let v369: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
                let v370: string = append(
                    (append((append(string(" "), (v369))), string(""))),
                    string(""),
                );
                let v371: string = string("vec![]");
                let v372: Vec<leptos::prelude::AnyView> = vec![];
                let v374: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v372);
                let v376: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v374);
                let v378: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v370))),
                                    string(">move || { v376 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v380: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v376 }</span> };
                let v382: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v380);
                let v392: string = string("vec![v258, v368, v382]");
                let v393: Vec<leptos::prelude::AnyView> = vec![v258, v368, v382];
                let v395: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v393);
                let v397: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v395);
                let v400: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<label "), (v236))),
                                    string(">move || { v397 }</"),
                                )),
                                string("label"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v402: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Label, _, _>,
                > = leptos::prelude::view! { <label  class=v232 for=move || v114()>move || { v397 }</label> };
                let v404: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v402);
                let v407: bool = true;
                let _func0_from_v405 = Func0::from(move || {
                    //;
                    let v409: LrcPtr<(bool, std::string::String)> =
                        leptos::prelude::ReadSignal::get(&v35);
                    let v419: bool = true;
                    v409.1.clone() /*;
                                   let v421: bool = */
                }); //;
                let v423: Func0<std::string::String> = _func0_from_v405;
                let v426: bool = true;
                let _func1_from_v424 = Func0::from(move || {
                    //;
                    let v428: std::string::String = value;
                    let v431: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v433: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v431);
                    let v436: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap0>>>,
                    > = Box::pin(v433.l3.clone());
                    let v438: LrcPtr<Dice_ui::Heap0> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v436);
                    let v446: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v0_1.l0.clone());
                    let v448: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v446);
                    let v450 = Dice_ui::method222(v38, v428);
                    let v451: Vec<LrcPtr<(bool, std::string::String)>> =
                        Dice_ui::method208(v438.l0.clone());
                    let v454: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                        l0: v451
                            .iter()
                            .enumerate()
                            .map(|(i, x)| v450(i.try_into().unwrap())(x.clone()))
                            .collect::<Vec<_>>(),
                        l1: v438.l1.clone(),
                        l2: v438.l2,
                        l3: v438.l3,
                        l4: v438.l4.clone(),
                    });
                    let v456: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v448.l3.clone(), v454); //;
                    let v458: bool = true; /*;
                                           let v460: bool = */
                }); //;
                let v462: Func1<std::string::String, ()> = _func1_from_v424;
                let v465 = {
                    let clo = Func0::new(move || Dice_ui::closure216((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v474: string =
                string("leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v468(leptos::prelude::event_target_value(&event)) prop:value=move || v423() class=move || \"bg-gray-50 h-[31px] [font-size:.875rem] \".to_owned() + &v465(()) /> }");
                let v476: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Input, _, _>,
                > = leptos::prelude::view! { <input  on:keyup=move |event: web_sys::KeyboardEvent| v468(leptos::prelude::event_target_value(&event)) prop:value=move || v423() class=move || "bg-gray-50 h-[31px] [font-size:.875rem] ".to_owned() + &v465(()) /> };
                let v478: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v476);
                let v592: leptos::prelude::AnyView = if (leptos::prelude::ArcMemo::get(&v2))
                    == 1_i32
                {
                    let v482: string = string("vec![]");
                    let v483: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v483)
                } else {
                    let v488: bool = true;
                    let _func0_from_v486 = Func0::from(move || {
                        //;
                        let v491: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v0_1.l0.clone());
                        let v493: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v491);
                        let v496: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v493.l3.clone(),
                            |x: &mut /*;
                             let v498: */
                             LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                                    let v503: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v3 = v3.clone();
                                    let v38 = v38.clone();
                                    move |v_2: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure217(v3.clone(), v38, v_2)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v505: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4,
                            |x: &mut /*;
                             let v507: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v512: bool =
                                     */| {
                                *x = Func1::new(move |v_3: i32| Dice_ui::closure201((), v_3))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v514: bool = true; /*;
                                               let v516: bool = */
                    }); //;
                    let v518: Func0<()> = _func0_from_v486;
                    let v521 = {
                        let clo_1 = Func0::new(move || Dice_ui::closure220((), ()));
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v533: string =
                        string(" class=move || \" \".to_owned() + &v521(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v539: string =
                        string(" d=\"M6 6l12 12m0-12L6 18\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v540: string = string("vec![]");
                    let v541: Vec<leptos::prelude::AnyView> = vec![];
                    let v543: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v541);
                    let v545: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v543);
                    let v547: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v539))),
                                        string(">move || { v545 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v549: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M6 6l12 12m0-12L6 18" stroke-linejoin="round" stroke-linecap="round">move || { v545 }</path> };
                    let v551: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v549);
                    let v555: string = string("vec![v551]");
                    let v556: Vec<leptos::prelude::AnyView> = vec![v551];
                    let v558: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v556);
                    let v560: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v558);
                    let v562: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v533))),
                                        string(">move || { v560 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v564: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v521(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v560 }</svg> };
                    let v569 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure221((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v570: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v569(())");
                    let v573: string = append(
                        (append(
                            string(" aria-label=\"Delete\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v518()"),
                                    (append(
                                        (append((append(string(" "), (v570))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v575: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v564);
                    let v579: string = string("vec![v575]");
                    let v580: Vec<leptos::prelude::AnyView> = vec![v575];
                    let v582: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v580);
                    let v584: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v582);
                    let v587: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v573))),
                                        string(">move || { v584 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v589: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Delete" on:click=move |_| v518() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v569(())>move || { v584 }</button> };
                    leptos::prelude::IntoAny::into_any(v589)
                };
                let v602: string = string("vec![v404, v478, v592]");
                let v603: Vec<leptos::prelude::AnyView> = vec![v404, v478, v592];
                let v605: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v603);
                let v607: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v605);
                let v610: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v37))),
                                    string(">move || { v607 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v612: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex gap-[8px] [align-items:center]">move || { v607 }</div> };
                let v614: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v612);
                let v618: string = string("vec![v614]");
                let v619: Vec<leptos::prelude::AnyView> = vec![v614];
                let v621: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v619);
                let v623: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v621);
                let v626: bool = true;
                v623 /*;
                     let v628: bool = */
            }); //;
            let v630: Func1<
                (
                    i32,
                    i32,
                    leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                ),
                leptos::prelude::AnyView,
            > = _func1_from_v29;
            let v642: string =
                string("leptos::prelude::IntoAny::into_any(leptos::prelude::view! { <leptos::prelude::For  children=move |x| v634(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> })");
            let v643: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                leptos::prelude::view! { <leptos::prelude::For  children=move |x| v634(x) let:x key=move |x| v28(x.to_owned()) each=v9 /> },
            );
            let v647: string = string("vec![v643]");
            let v648: Vec<leptos::prelude::AnyView> = vec![v643];
            let v650: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v648);
            let v652: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v650);
            let v654: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v7))),
                                string(">move || { v652 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v656: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[8px] gap-[8px]">move || { v652 }</div> };
            let v658: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v656);
            let v662: string = string("vec![v658]");
            let v663: Vec<leptos::prelude::AnyView> = vec![v658];
            leptos::prelude::Fragment::new(v663)
        }
        pub fn closure223(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure224(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure225(unitVar: (), unitVar_1: ()) -> string {
            string("View")
        }
        pub fn method228() -> Func0<string> {
            Func0::new(move || Dice_ui::closure225((), ()))
        }
        pub fn closure227(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Dark Mode");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method229() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure227((), ()))
        }
        pub fn closure230(unitVar: (), v0_1: bool) -> bool {
            (v0_1) == false
        }
        pub fn closure229(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l0.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure231(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l0.clone())
        }
        pub fn method231(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure231(v0_1.clone(), ())
            })
        }
        pub fn closure232(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("dark-mode");
            String::from(v9)
        }
        pub fn method232() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure232((), ()))
        }
        pub fn closure228(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("dark-mode");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                    let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v124: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v135: &str = &*v124;
            let v168: std::string::String = String::from(v135);
            let v194: std::string::String = v168;
            let v199: string = string(" class=v194 for=move || v76()");
            let v202: bool = true;
            let v200 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure229(v0_1.clone(), v)
            }); //;
            let v203 = Dice_ui::method231(v0_1.clone());
            let v204 = Dice_ui::method232();
            let v205: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v217: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v203()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v200(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v204()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v205))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v219: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v203() on:change=move |event| v200(event) id=move || v204() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v221: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v219);
            let v222: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v223: string = append(
                (append((append(string(" "), (v222))), string(""))),
                string(""),
            );
            let v233: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v235: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v239: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v235))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v240: string = string("vec![]");
            let v241: Vec<leptos::prelude::AnyView> = vec![];
            let v243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v241);
            let v245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v243);
            let v248: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v239))),
                                string(">move || { v245 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v250: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v245 }</path> };
            let v252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v250);
            let v256: string = string("vec![v252]");
            let v257: Vec<leptos::prelude::AnyView> = vec![v252];
            let v259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v257);
            let v261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v259);
            let v264: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v233))),
                                string(">move || { v261 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v266: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v261 }</svg> };
            let v276: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v278: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v282: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v278))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v283: string = string("vec![]");
            let v284: Vec<leptos::prelude::AnyView> = vec![];
            let v286: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v284);
            let v288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v286);
            let v290: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v282))),
                                string(">move || { v288 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v292: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v288 }</path> };
            let v294: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v292);
            let v298: string = string("vec![v294]");
            let v299: Vec<leptos::prelude::AnyView> = vec![v294];
            let v301: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v299);
            let v303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v301);
            let v305: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v276))),
                                string(">move || { v303 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v307: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v303 }</svg> };
            let v309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v266);
            let v319: string = string("vec![v311, v309]");
            let v320: Vec<leptos::prelude::AnyView> = vec![v311, v309];
            let v322: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v320);
            let v324: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v322);
            let v327: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v223))),
                                string(">move || { v324 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v329: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v324 }</span> };
            let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
            let v332: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v333: string = append(
                (append((append(string(" "), (v332))), string(""))),
                string(""),
            );
            let v334: string = string("vec![]");
            let v335: Vec<leptos::prelude::AnyView> = vec![];
            let v337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v335);
            let v339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v337);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v333))),
                                string(">move || { v339 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v339 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v355: string = string("vec![v221, v331, v345]");
            let v356: Vec<leptos::prelude::AnyView> = vec![v221, v331, v345];
            let v358: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v356);
            let v360: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v358);
            let v363: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v199))),
                                string(">move || { v360 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v365: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v194 for=move || v76()>move || { v360 }</label> };
            let v367: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v365);
            let v371: string = string("vec![v367]");
            let v372: Vec<leptos::prelude::AnyView> = vec![v367];
            leptos::prelude::Fragment::new(v372)
        }
        pub fn method230(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure228(v0_1.clone(), ())
            })
        }
        pub fn closure233(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure234(unitVar: (), unitVar_1: ()) -> string {
            string("pt-[9px] pr-[10px] pb-[11px] pl-[10px]")
        }
        pub fn closure235(unitVar: (), unitVar_1: ()) -> string {
            string("sm:grid-cols-[150px_repeat(2,minmax(0,1fr))]")
        }
        pub fn closure236(unitVar: (), unitVar_1: ()) -> string {
            string("[overflow:auto]")
        }
        pub fn closure237(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Debug");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method233() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure237((), ()))
        }
        pub fn closure239(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l1.clone(),
                |x: &mut /*;
                 let v11: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v16: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure240(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            leptos::prelude::ArcRwSignal::get(&v5.l1.clone())
        }
        pub fn method235(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure240(v0_1.clone(), ())
            })
        }
        pub fn closure241(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("debug");
            String::from(v9)
        }
        pub fn method236() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure241((), ()))
        }
        pub fn closure238(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("debug");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                    let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v124: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v135: &str = &*v124;
            let v168: std::string::String = String::from(v135);
            let v194: std::string::String = v168;
            let v199: string = string(" class=v194 for=move || v76()");
            let v202: bool = true;
            let v200 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure239(v0_1.clone(), v)
            }); //;
            let v203 = Dice_ui::method235(v0_1.clone());
            let v204 = Dice_ui::method236();
            let v205: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v217: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v203()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v200(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v204()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v205))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v219: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v203() on:change=move |event| v200(event) id=move || v204() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v221: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v219);
            let v222: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v223: string = append(
                (append((append(string(" "), (v222))), string(""))),
                string(""),
            );
            let v233: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v235: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v239: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v235))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v240: string = string("vec![]");
            let v241: Vec<leptos::prelude::AnyView> = vec![];
            let v243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v241);
            let v245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v243);
            let v248: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v239))),
                                string(">move || { v245 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v250: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v245 }</path> };
            let v252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v250);
            let v256: string = string("vec![v252]");
            let v257: Vec<leptos::prelude::AnyView> = vec![v252];
            let v259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v257);
            let v261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v259);
            let v264: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v233))),
                                string(">move || { v261 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v266: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v261 }</svg> };
            let v276: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v278: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v282: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v278))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v283: string = string("vec![]");
            let v284: Vec<leptos::prelude::AnyView> = vec![];
            let v286: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v284);
            let v288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v286);
            let v290: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v282))),
                                string(">move || { v288 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v292: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v288 }</path> };
            let v294: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v292);
            let v298: string = string("vec![v294]");
            let v299: Vec<leptos::prelude::AnyView> = vec![v294];
            let v301: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v299);
            let v303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v301);
            let v305: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v276))),
                                string(">move || { v303 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v307: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v303 }</svg> };
            let v309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v266);
            let v319: string = string("vec![v311, v309]");
            let v320: Vec<leptos::prelude::AnyView> = vec![v311, v309];
            let v322: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v320);
            let v324: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v322);
            let v327: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v223))),
                                string(">move || { v324 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v329: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v324 }</span> };
            let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
            let v332: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v333: string = append(
                (append((append(string(" "), (v332))), string(""))),
                string(""),
            );
            let v334: string = string("vec![]");
            let v335: Vec<leptos::prelude::AnyView> = vec![];
            let v337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v335);
            let v339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v337);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v333))),
                                string(">move || { v339 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v339 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v355: string = string("vec![v221, v331, v345]");
            let v356: Vec<leptos::prelude::AnyView> = vec![v221, v331, v345];
            let v358: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v356);
            let v360: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v358);
            let v363: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v199))),
                                string(">move || { v360 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v365: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v194 for=move || v76()>move || { v360 }</label> };
            let v367: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v365);
            let v371: string = string("vec![v367]");
            let v372: Vec<leptos::prelude::AnyView> = vec![v367];
            leptos::prelude::Fragment::new(v372)
        }
        pub fn method234(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure238(v0_1.clone(), ())
            })
        }
        pub fn closure242(unitVar: (), unitVar_1: ()) -> string {
            string("items-center p-0")
        }
        pub fn closure226(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col p-[11px] gap-[11px]\"");
            let v4 = Dice_ui::method229();
            let v5 = Dice_ui::method230(v0_1.clone());
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure233((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            fn v10() -> string {
                Dice_ui::closure234((), ())
            }
            let v11 = {
                let clo_1 = Func0::from(v10);
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            fn v13() -> string {
                Dice_ui::closure235((), ())
            }
            let v14 = {
                let clo_2 = Func0::from(v13);
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            fn v18() -> string {
                Dice_ui::closure236((), ())
            }
            let v19 = {
                let clo_3 = Func0::from(v18);
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v62 = Dice_ui::method233();
            let v63 = Dice_ui::method234(v0_1);
            let v66 = {
                let clo_4 = Func0::new(move || Dice_ui::closure242((), ()));
                Func1::new({
                    let clo_4 = clo_4.clone();
                    move |arg_4: ()| clo_4()
                })
            };
            let v68 = {
                let clo_5 = Func0::from(v10);
                Func1::new({
                    let clo_5 = clo_5.clone();
                    move |arg_5: ()| clo_5()
                })
            };
            let v70 = {
                let clo_6 = Func0::from(v13);
                Func1::new({
                    let clo_6 = clo_6.clone();
                    move |arg_6: ()| clo_6()
                })
            };
            let v71: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v70(()) + \" \" + &v68(()) + \" \" + &v66(())");
            let v72: string = append(
                (append((append(string(" "), (v71))), string(""))),
                string(""),
            );
            let v74 = {
                let clo_7 = Func0::from(v18);
                Func1::new({
                    let clo_7 = clo_7.clone();
                    move |arg_7: ()| clo_7()
                })
            };
            let v76: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v77: leptos::prelude::Fragment = v62();
            let v79: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v77);
            let v81: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v76))),
                                string(">move || { v79 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v83: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v79 }</dt> };
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v87: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v74(())");
            let v88: leptos::prelude::Fragment = v63();
            let v90: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v88);
            let v92: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v87))),
                                string(">move || { v90 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v94: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v74(())>move || { v90 }</dd> };
            let v96: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v94);
            let v103: string = string("vec![v85, v96]");
            let v104: Vec<leptos::prelude::AnyView> = vec![v85, v96];
            let v106: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v104);
            let v108: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v106);
            let v110: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v72))),
                                string(">move || { v108 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v112: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v70(()) + " " + &v68(()) + " " + &v66(())>move || { v108 }</dl> };
            let v114: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v112);
            let v116: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v123: string = string("vec![v116, v114]");
            let v124: Vec<leptos::prelude::AnyView> = vec![v116, v114];
            let v126: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v124);
            let v128: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v126);
            let v131: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v128 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v133: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> = leptos::prelude::view! { <div  class="flex flex-1 flex-col p-[11px] gap-[11px]">move || { v128 }</div> };
            let v135: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v133);
            let v139: string = string("vec![v135]");
            let v140: Vec<leptos::prelude::AnyView> = vec![v135];
            leptos::prelude::Fragment::new(v140)
        }
        pub fn closure243(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure244(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure245(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method237() -> Func0<string> {
            Func0::new(move || Dice_ui::closure245((), ()))
        }
        pub fn closure247(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Global State");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method238() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure247((), ()))
        }
        pub fn closure250(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_0(v0_1)
        }
        pub fn method240() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure250((), v))
        }
        pub fn closure251(unitVar: (), v0_1: std::string::String) -> Dice_ui::US70 {
            Dice_ui::US70::US70_1(v0_1)
        }
        pub fn method241() -> Func1<std::string::String, Dice_ui::US70> {
            Func1::new(move |v: std::string::String| Dice_ui::closure251((), v))
        }
        pub fn closure249(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> string {
            let v3: bool = true;
            leptos::logging::log!(
                "{}",
                string("settings_view.global_state_log_render () / global_state_json memo")
            );
            let v5: LrcPtr<Dice_ui::Heap2> = v0_1.clone();
            let v7: Result<std::string::String, std::string::String> =
                serde_json::to_string_pretty(&v5).map_err(|x| x.to_string());
            let v8 = Dice_ui::method240();
            let v9 = Dice_ui::method241();
            let v11: Dice_ui::US70 = match &v7 {
                Err(v7_1_0) => v9(v7_1_0.clone()),
                Ok(v7_0_0) => v8(v7_0_0.clone()),
            };
            match &v11 {
                Dice_ui::US70::US70_0(v11_0_0) => {
                    fable_library_rust::String_::fromString(v11_0_0.clone())
                }
                Dice_ui::US70::US70_1(v11_1_0) => append(
                    (append(string("Error: "), (toString(v11_1_0.clone())))),
                    string(""),
                ),
            }
        }
        pub fn closure252(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure248(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v2: bool = true;
            leptos::logging::log!("{}", string("settings_view.global_state_log_render ()"));
            let v4: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v6: LrcPtr<Dice_ui::Heap2> = v4.unwrap();
            let v9: leptos::prelude::ArcMemo<string> = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v6 = v6.clone();
                    move || Dice_ui::closure249(v6.clone(), ())
                })()
            });
            let v11: string = leptos::prelude::ArcMemo::get(&v9);
            let v14 = {
                let clo = Func0::new(move || Dice_ui::closure252((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v15: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v14(())");
            let v17: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v26: &str = &*v11;
            let v59: std::string::String = String::from(v26);
            let v85: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v59));
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            let v92: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v90);
            let v94: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v92);
            let v97: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v17))),
                                string(">move || { v94 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v99: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v14(())>move || { v94 }</pre> };
            let v101: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v99);
            let v105: string = string("vec![v101]");
            let v106: Vec<leptos::prelude::AnyView> = vec![v101];
            leptos::prelude::Fragment::new(v106)
        }
        pub fn method239() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure248((), ()))
        }
        pub fn closure253(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure246(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v0_1 = Dice_ui::method238();
            let v1 = Dice_ui::method239();
            let v4 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v7 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v10 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v11: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v10(()) + \" \" + &v7(()) + \" \" + &v4(())");
            let v13: string = append(
                (append((append(string(" "), (v11))), string(""))),
                string(""),
            );
            let v16 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v18: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v19: leptos::prelude::Fragment = v0_1();
            let v21: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v19);
            let v24: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v18))),
                                string(">move || { v21 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v26: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v21 }</dt> };
            let v28: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v26);
            let v30: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v16(())");
            let v31: leptos::prelude::Fragment = v1();
            let v33: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v31);
            let v36: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v30))),
                                string(">move || { v33 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v38: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v16(())>move || { v33 }</dd> };
            let v40: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v38);
            let v48: string = string("vec![v28, v40]");
            let v49: Vec<leptos::prelude::AnyView> = vec![v28, v40];
            let v51: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v49);
            let v53: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v51);
            let v56: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v13))),
                                string(">move || { v53 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v58: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v10(()) + " " + &v7(()) + " " + &v4(())>move || { v53 }</dl> };
            let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
            let v64: string = string("vec![v60]");
            let v65: Vec<leptos::prelude::AnyView> = vec![v60];
            leptos::prelude::Fragment::new(v65)
        }
        pub fn closure254(v0_1: leptos::prelude::WriteSignal<bool>, unitVar: ()) {
            let v2: bool = true;
            leptos::prelude::WriteSignal::update(
                &v0_1,
                |x: &mut /*;
                 let v4: */
                 bool /* = fable_library_rust::Native_::getZero();
                      let v9: bool =
                          */| {
                    *x = Func1::new(move |v: bool| Dice_ui::closure230((), v))(x.clone())
                },
            ); //;
            ()
        }
        pub fn closure255(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn method242(v0_1: &'static str) -> &'static str {
            v0_1
        }
        pub fn closure256(
            v0_1: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> std::string::String {
            let v10: &'static str =
                Dice_ui::method242(if leptos::prelude::ReadSignal::get(&v0_1) {
                    let v4: string = string("r#\"\"#");
                    r#""#
                } else {
                    let v7: string = string("r#\"bg-gray-300 hover:bg-gray-200\"#");
                    r#"bg-gray-300 hover:bg-gray-200"#
                });
            v10.to_owned() + " hover:bg-gray-200"
        }
        pub fn closure257(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure258(v0_1: leptos::prelude::AnyView, unitVar: ()) -> &'static str {
            let v2: string = string("r#\"[margin-right:40px]\"#");
            r#"[margin-right:40px]"#
        }
        pub fn closure259(unitVar: (), unitVar_1: ()) -> string {
            string("Transactions")
        }
        pub fn method243(v0_1: leptos::prelude::AnyView) -> Func0<string> {
            Func0::new(move || Dice_ui::closure259((), ()))
        }
        pub fn closure261(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Settings");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn closure262(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Table View");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method244() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure262((), ()))
        }
        pub fn closure265(unitVar: (), v0_1: LrcPtr<Dice_ui::Heap0>) -> LrcPtr<Dice_ui::Heap0> {
            LrcPtr::new(Dice_ui::Heap0 {
                l0: v0_1.l0.clone(),
                l1: v0_1.l1.clone(),
                l2: v0_1.l2,
                l3: v0_1.l3,
                l4: if if let Dice_ui::US1::US1_1 = &v0_1.l4 {
                    true
                } else {
                    false
                } {
                    Dice_ui::US1::US1_0
                } else {
                    Dice_ui::US1::US1_1
                },
            })
        }
        pub fn closure264(v0_1: LrcPtr<Dice_ui::Heap2>, v1: leptos::ev::Event) {
            let v4: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v6: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v4);
            let v9: bool = true;
            leptos::prelude::ArcRwSignal::update(
                &v6.l3.clone(),
                |x: &mut /*;
                 let v11: */
                 LrcPtr<Dice_ui::Heap0> /* = fable_library_rust::Native_::getZero();
                                        let v16: bool =
                                            */| {
                    *x = Func1::new(move |v: LrcPtr<Dice_ui::Heap0>| Dice_ui::closure265((), v))(
                        x.clone(),
                    )
                },
            ); //;
            ()
        }
        pub fn closure266(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> bool {
            let v3: std::pin::Pin<Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>> =
                Box::pin(v0_1.l0.clone());
            let v5: LrcPtr<Dice_ui::Heap1> = leptos::prelude::ArcRwSignal::get_untracked(&v3);
            if let Dice_ui::US1::US1_1 = &(leptos::prelude::ArcRwSignal::get(&v5.l3.clone())).l4 {
                true
            } else {
                false
            }
        }
        pub fn method246(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure266(v0_1.clone(), ())
            })
        }
        pub fn closure267(unitVar: (), unitVar_1: ()) -> std::string::String {
            let v9: &str = &*string("table-view");
            String::from(v9)
        }
        pub fn method247() -> Func0<std::string::String> {
            Func0::new(move || Dice_ui::closure267((), ()))
        }
        pub fn closure263(v0_1: LrcPtr<Dice_ui::Heap2>, unitVar: ()) -> leptos::prelude::Fragment {
            let v3: bool = true;
            let _func0_from_v1 = Func0::from(move || {
                //;
                let v13: &str = &*string("table-view");
                let v46: std::string::String = String::from(v13);
                let v72: bool = true;
                v46 /*;
                    let v74: bool = */
            }); //;
            let v76: Func0<std::string::String> = _func0_from_v1;
            let v124: string = join(
                string(" "),
                toArray(delay(Func0::new(move || {
                    ofList(ofArray_1(new_array(&[
                        string("block"),
                        string("relative"),
                        string("h-8"),
                        string("w-14"),
                        string("cursor-pointer"),
                        string("[-webkit-tap-highlight-color:_transparent]"),
                    ])))
                }))),
            );
            let v135: &str = &*v124;
            let v168: std::string::String = String::from(v135);
            let v194: std::string::String = v168;
            let v199: string = string(" class=v194 for=move || v76()");
            let v202: bool = true;
            let v200 = Func1::new({
                let v0_1 = v0_1.clone();
                move |v: leptos::ev::Event| Dice_ui::closure264(v0_1.clone(), v)
            }); //;
            let v203 = Dice_ui::method246(v0_1.clone());
            let v204 = Dice_ui::method247();
            let v205: string =
                string("class=\"peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden\"");
            let v217: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            string("<input "),
                            (append(
                                (append(
                                    string(" prop:checked=move || v203()"),
                                    (append(
                                        (append(
                                            string(" on:change=move |event| v200(event)"),
                                            (append(
                                                (append(
                                                    string(" id=move || v204()"),
                                                    (append(
                                                        (append(
                                                            string(" type=\"checkbox\""),
                                                            (append(
                                                                (append(
                                                                    (append(string(" "), (v205))),
                                                                    string(""),
                                                                )),
                                                                string(""),
                                                            )),
                                                        )),
                                                        string(""),
                                                    )),
                                                )),
                                                string(""),
                                            )),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(" />"),
                    )),
                )),
                string(" }"),
            );
            let v219: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Input, _, _>> = leptos::prelude::view! { <input  prop:checked=move || v203() on:change=move |event| v200(event) id=move || v204() type="checkbox" class="peer sr-only [&:checked_+_span_svg[data-checked-icon]]:block [&:checked_+_span_svg[data-unchecked-icon]]:hidden" /> };
            let v221: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v219);
            let v222: string =
                string("class=\"absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400\"");
            let v223: string = append(
                (append((append(string(" "), (v222))), string(""))),
                string(""),
            );
            let v233: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-unchecked-icon");
            let v235: string =
                string("d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"");
            let v239: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v235))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v240: string = string("vec![]");
            let v241: Vec<leptos::prelude::AnyView> = vec![];
            let v243: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v241);
            let v245: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v243);
            let v248: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v239))),
                                string(">move || { v245 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v250: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" fill-rule="evenodd">move || { v245 }</path> };
            let v252: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v250);
            let v256: string = string("vec![v252]");
            let v257: Vec<leptos::prelude::AnyView> = vec![v252];
            let v259: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v257);
            let v261: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v259);
            let v264: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v233))),
                                string(">move || { v261 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v266: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-unchecked-icon>move || { v261 }</svg> };
            let v276: string =
                string(" fill=\"currentColor\" viewBox=\"0 0 20 20\" class=\"hidden h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" data-checked-icon");
            let v278: string =
                string("d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"");
            let v282: string = append(
                (append(
                    string(" clip-rule=\"evenodd\""),
                    (append(
                        (append(
                            (append(string(" "), (v278))),
                            string(" fill-rule=\"evenodd\""),
                        )),
                        string(""),
                    )),
                )),
                string(""),
            );
            let v283: string = string("vec![]");
            let v284: Vec<leptos::prelude::AnyView> = vec![];
            let v286: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v284);
            let v288: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v286);
            let v290: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v282))),
                                string(">move || { v288 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v292: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  clip-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" fill-rule="evenodd">move || { v288 }</path> };
            let v294: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v292);
            let v298: string = string("vec![v294]");
            let v299: Vec<leptos::prelude::AnyView> = vec![v294];
            let v301: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v299);
            let v303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v301);
            let v305: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v276))),
                                string(">move || { v303 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v307: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  fill="currentColor" viewBox="0 0 20 20" class="hidden h-4 w-4" xmlns="http://www.w3.org/2000/svg" data-checked-icon>move || { v303 }</svg> };
            let v309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v307);
            let v311: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v266);
            let v319: string = string("vec![v311, v309]");
            let v320: Vec<leptos::prelude::AnyView> = vec![v311, v309];
            let v322: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v320);
            let v324: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v322);
            let v327: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v223))),
                                string(">move || { v324 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v329: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-y-0 start-0 z-10 m-1 inline-flex h-6 w-6 items-center justify-center rounded-full bg-white dark:bg-gray-400 peer-checked:bg-white text-gray-200 transition-all peer-checked:start-6 peer-checked:text-gray-400">move || { v324 }</span> };
            let v331: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v329);
            let v332: string =
                string("class=\"absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300\"");
            let v333: string = append(
                (append((append(string(" "), (v332))), string(""))),
                string(""),
            );
            let v334: string = string("vec![]");
            let v335: Vec<leptos::prelude::AnyView> = vec![];
            let v337: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v335);
            let v339: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v337);
            let v341: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<span "), (v333))),
                                string(">move || { v339 }</"),
                            )),
                            string("span"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v343: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> = leptos::prelude::view! { <span  class="absolute inset-0 rounded-full bg-gray-200 dark:bg-gray-200 transition peer-checked:bg-gray-300">move || { v339 }</span> };
            let v345: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v343);
            let v355: string = string("vec![v221, v331, v345]");
            let v356: Vec<leptos::prelude::AnyView> = vec![v221, v331, v345];
            let v358: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v356);
            let v360: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v358);
            let v363: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v199))),
                                string(">move || { v360 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v365: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class=v194 for=move || v76()>move || { v360 }</label> };
            let v367: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v365);
            let v371: string = string("vec![v367]");
            let v372: Vec<leptos::prelude::AnyView> = vec![v367];
            leptos::prelude::Fragment::new(v372)
        }
        pub fn method245(v0_1: LrcPtr<Dice_ui::Heap2>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure263(v0_1.clone(), ())
            })
        }
        pub fn closure268(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure269(v0_1: i64, unitVar: ()) -> leptos::prelude::Fragment {
            let v1: string = append(
                (append(string("Transaction "), (toString((v0_1) + 1_i64)))),
                string(""),
            );
            let v10: &str = &*v1;
            let v43: std::string::String = String::from(v10);
            let v69: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v43));
            let v74: string = string("vec![v69]");
            let v75: Vec<leptos::prelude::AnyView> = vec![v69];
            leptos::prelude::Fragment::new(v75)
        }
        pub fn closure270(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Account");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method248() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure270((), ()))
        }
        pub fn closure271(v0_1: string, unitVar: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*v0_1;
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method249(v0_1: string) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure271(v0_1.clone(), ())
            })
        }
        pub fn closure272(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure273(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure274(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Timestamp");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method250() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure274((), ()))
        }
        pub fn closure275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v20: i64 =
                (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v5))))
                    / 1000_i64;
            let v22: Option<chrono::DateTime<chrono::Utc>> =
                chrono::DateTime::from_timestamp_micros(v20);
            let v41: Dice_ui::US68 =
                defaultValue(Dice_ui::US68::US68_1, map(Dice_ui::method205(), v22));
            let v60: Dice_ui::US31 = match &v41 {
                Dice_ui::US68::US68_0(v41_0_0) => {
                    let v47: chrono::NaiveDateTime = match &v41 {
                        Dice_ui::US68::US68_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone()
                    .naive_utc();
                    let v49: chrono::DateTime<chrono::Local> =
                        chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v47);
                    let v51: string = string("r#\"%Y-%m-%d %H:%M:%S\"#");
                    let v52: &str = r#"%Y-%m-%d %H:%M:%S"#;
                    let v54: std::string::String = v49.format(v52).to_string();
                    Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v54))
                }
                _ => Dice_ui::US31::US31_1,
            };
            let v66: Dice_ui::US69 = match &v60 {
                Dice_ui::US31::US31_0(v60_0_0) => Dice_ui::US69::US69_0(
                    match &v60 {
                        Dice_ui::US31::US31_0(x) => x.clone(),
                        _ => unreachable!(),
                    }
                    .clone(),
                ),
                _ => Dice_ui::US69::US69_1(string(
                    "resultm.from_option / Option does not have a value.",
                )),
            };
            let v71: string = match &v66 {
                Dice_ui::US69::US69_0(v66_0_0) => v66_0_0.clone(),
                Dice_ui::US69::US69_1(v66_1_0) => append(
                    (append(string("sm\'.to_string result / Error: "), (v66_1_0.clone()))),
                    string(""),
                ),
            };
            let v80: &str = &*v71;
            let v113: std::string::String = String::from(v80);
            let v139: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v113));
            let v144: string = string("vec![v139]");
            let v145: Vec<leptos::prelude::AnyView> = vec![v139];
            leptos::prelude::Fragment::new(v145)
        }
        pub fn method251(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure275(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure276(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure277(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure278(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Predecessor");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method252() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure278((), ()))
        }
        pub fn closure279(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v1);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method253(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure279(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure280(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure281(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure282(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receiver");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method254() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure282((), ()))
        }
        pub fn closure283(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v2);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method255(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure283(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure284(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure285(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure286(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Actions");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method256() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure286((), ()))
        }
        pub fn closure288(v0_1: std::string::String, unitVar: ()) -> leptos::prelude::Fragment {
            let v2: string = fable_library_rust::String_::fromString(v0_1);
            let v11: string = if string("FUNCTION_CALL") == (v2.clone()) {
                string("Function Call:")
            } else {
                if string("DEPLOY_CONTRACT") == (v2.clone()) {
                    string("Contract Deploy:")
                } else {
                    if string("TRANSFER") == (v2.clone()) {
                        string("Transfer:")
                    } else {
                        v2
                    }
                }
            };
            let v20: &str = &*v11;
            let v53: std::string::String = String::from(v20);
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v53));
            let v84: string = string("vec![v79]");
            let v85: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v85)
        }
        pub fn method258(v0_1: std::string::String) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure288(v0_1.clone(), ())
            })
        }
        pub fn closure290(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Method");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method260() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure290((), ()))
        }
        pub fn closure291(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v19: Dice_ui::US14 =
                defaultValue(Dice_ui::US14::US14_1, map(Dice_ui::method39(), v0_1));
            match &v19 {
                Dice_ui::US14::US14_0(v19_0_0) => {
                    let v25: string = fable_library_rust::String_::fromString(
                        match &v19 {
                            Dice_ui::US14::US14_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v34: &str = &*v25;
                    let v67: std::string::String = String::from(v34);
                    let v93: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v67),
                    );
                    let v98: string = string("vec![v93]");
                    let v99: Vec<leptos::prelude::AnyView> = vec![v93];
                    leptos::prelude::Fragment::new(v99)
                }
                _ => {
                    let v111: &str = &*string("None");
                    let v144: std::string::String = String::from(v111);
                    let v170: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v144),
                    );
                    let v175: string = string("vec![v170]");
                    let v176: Vec<leptos::prelude::AnyView> = vec![v170];
                    leptos::prelude::Fragment::new(v176)
                }
            }
        }
        pub fn method261(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure291(v0_1.clone(), ())
            })
        }
        pub fn closure292(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure293(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure294(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure289(
            v0_1: Option<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v3: string = string(" class=\"flex flex-1 flex-col\"");
            let v4 = Dice_ui::method260();
            let v5 = Dice_ui::method261(v0_1);
            let v8 = {
                let clo = Func0::new(move || Dice_ui::closure292((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v11 = {
                let clo_1 = Func0::new(move || Dice_ui::closure293((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v14 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v15: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v14(()) + \" \" + &v11(()) + \" \" + &v8(())");
            let v16: string = append(
                (append((append(string(" "), (v15))), string(""))),
                string(""),
            );
            let v19 = {
                let clo_3 = Func0::new(move || Dice_ui::closure294((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v21: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v22: leptos::prelude::Fragment = v4();
            let v24: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v22);
            let v27: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v21))),
                                string(">move || { v24 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v29: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v24 }</dt> };
            let v31: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v29);
            let v33: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v19(())");
            let v34: leptos::prelude::Fragment = v5();
            let v36: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v34);
            let v39: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v33))),
                                string(">move || { v36 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v41: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v19(())>move || { v36 }</dd> };
            let v43: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v41);
            let v51: string = string("vec![v31, v43]");
            let v52: Vec<leptos::prelude::AnyView> = vec![v31, v43];
            let v54: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v52);
            let v56: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v54);
            let v59: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v16))),
                                string(">move || { v56 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v61: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v14(()) + " " + &v11(()) + " " + &v8(())>move || { v56 }</dl> };
            let v63: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v61);
            let v67: string = string("vec![v63]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v63];
            let v70: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v70);
            let v75: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v3))),
                                string(">move || { v72 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v77: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v72 }</div> };
            let v79: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v77);
            let v83: string = string("vec![v79]");
            let v84: Vec<leptos::prelude::AnyView> = vec![v79];
            leptos::prelude::Fragment::new(v84)
        }
        pub fn method259(v0_1: Option<std::string::String>) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure289(v0_1.clone(), ())
            })
        }
        pub fn closure295(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure296(unitVar: (), unitVar_1: ()) -> string {
            string("items-center")
        }
        pub fn closure297(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure298(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure287(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<(std::string::String, Option<std::string::String>)> = v7.to_vec();
            let v15: bool = true;
            let _vec_map : Vec<_> = v13.into_iter().map(|x| { //;
            let patternInput:
                    (std::string::String, Option<std::string::String>) = x;
            let v19 = Dice_ui::method258(patternInput.0.clone());
            let v20 = Dice_ui::method259(patternInput.1.clone());
            let v23 =
                {
                    let clo = Func0::new(move || Dice_ui::closure295((), ()));
                    Func1::new({
                                   let clo = clo.clone();
                                   move |arg: ()| clo()
                               })
                };
            let v26 =
                {
                    let clo_1 =
                        Func0::new(move || Dice_ui::closure296((), ()));
                    Func1::new({
                                   let clo_1 = clo_1.clone();
                                   move |arg_1: ()| clo_1()
                               })
                };
            let v29 =
                {
                    let clo_2 =
                        Func0::new(move || Dice_ui::closure297((), ()));
                    Func1::new({
                                   let clo_2 = clo_2.clone();
                                   move |arg_2: ()| clo_2()
                               })
                };
            let v30: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v29(()) + \" \" + &v26(()) + \" \" + &v23(())");
            let v32: string =
                append((append((append(string(" "), (v30))), string(""))),
                       string(""));
            let v35 =
                {
                    let clo_3 =
                        Func0::new(move || Dice_ui::closure298((), ()));
                    Func1::new({
                                   let clo_3 = clo_3.clone();
                                   move |arg_3: ()| clo_3()
                               })
                };
            let v37: string =
                string(" class=\"[font-size:12px] text-gray-400\"");
            let v38: leptos::prelude::Fragment = v19();
            let v40: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v38);
            let v43: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dt "),
                                                               (v37))),
                                                       string(">move || { v40 }</"))),
                                               string("dt"))),
                                       string(">"))))), string(" }"));
            let v45:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v40 }</dt> };
            let v47: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v45);
            let v49: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v35(())");
            let v50: leptos::prelude::Fragment = v20();
            let v52: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v50);
            let v55: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dd "),
                                                               (v49))),
                                                       string(">move || { v52 }</"))),
                                               string("dd"))),
                                       string(">"))))), string(" }"));
            let v57:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v35(())>move || { v52 }</dd> };
            let v59: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v57);
            let v67: string = string("vec![v47, v59]");
            let v68: Vec<leptos::prelude::AnyView> = vec![v47, v59];
            let v70: leptos::prelude::Fragment =
                leptos::prelude::Fragment::new(v68);
            let v72: leptos::prelude::AnyView =
                leptos::prelude::AnyView::from(v70);
            let v75: string =
                append((append(string("leptos::prelude::view! { "),
                               (append((append((append((append(string("<dl "),
                                                               (v32))),
                                                       string(">move || { v72 }</"))),
                                               string("dl"))),
                                       string(">"))))), string(" }"));
            let v77:
                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v29(()) + " " + &v26(()) + " " + &v23(())>move || { v72 }</dl> };
            let v79: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(v77);
            let v81: bool = true; v79 }).collect::<Vec<_>>();
            let v83: Vec<leptos::prelude::AnyView> = _vec_map;
            let v85: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v83);
            let v89: string = string("vec![v85]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v85];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method257(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure287(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure299(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure300(unitVar: (), unitVar_1: ()) -> string {
            string("sm:pr-[10px]")
        }
        pub fn closure301(unitVar: (), unitVar_1: ()) -> string {
            string("[flex-direction:column]")
        }
        pub fn closure302(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Deposit");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method262() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure302((), ()))
        }
        pub fn closure303(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v8);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method263(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure303(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure304(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure305(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure306(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Outcome Status");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method264() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure306((), ()))
        }
        pub fn closure307(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = ofBoolean(v9);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method265(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure307(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure308(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure309(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure310(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Fee");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method266() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure310((), ()))
        }
        pub fn closure311(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v10);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method267(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure311(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure312(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure313(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure314(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Height");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method268() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure314((), ()))
        }
        pub fn closure315(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v14: string = toString(v6);
            let v25: &str = &*v14;
            let v58: std::string::String = String::from(v25);
            let v84: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v58));
            let v89: string = string("vec![v84]");
            let v90: Vec<leptos::prelude::AnyView> = vec![v84];
            leptos::prelude::Fragment::new(v90)
        }
        pub fn method269(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure315(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure316(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure317(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure318(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Hash");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method270() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure318((), ()))
        }
        pub fn closure319(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v3);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method271(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure319(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure320(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure321(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure322(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Block Hash");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method272() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure322((), ()))
        }
        pub fn closure323(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v4);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method273(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure323(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure324(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure325(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure326(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Receipt ID");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method274() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure326((), ()))
        }
        pub fn closure327(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: string = fable_library_rust::String_::fromString(v0_1);
            let v22: &str = &*v13;
            let v55: std::string::String = String::from(v22);
            let v81: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v55));
            let v86: string = string("vec![v81]");
            let v87: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v87)
        }
        pub fn method275(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure327(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure328(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure329(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure330(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Logs");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method276() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure330((), ()))
        }
        pub fn method278(
            v0_1: Func1<std::string::String, string>,
        ) -> Func1<std::string::String, string> {
            v0_1
        }
        pub fn closure332(
            v0_1: Func1<std::string::String, string>,
            v1: std::string::String,
        ) -> string {
            let v2: Func1<std::string::String, string> = Dice_ui::method278(v0_1);
            (move |x| v2(x))(v1)
        }
        pub fn method279() -> string {
            string("\n")
        }
        pub fn closure333(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh]")
        }
        pub fn closure331(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v13: Vec<std::string::String> = v11.to_vec();
            let v16: bool = true;
            let _func1_from_v14 = Func1::from(move |value| {
                //;
                let v18: std::string::String = value;
                let v20: string = fable_library_rust::String_::fromString(v18);
                let v23: bool = true;
                v20 /*;
                    let v25: bool = */
            }); //;
            let v27: Func1<std::string::String, string> = _func1_from_v14;
            let v30: Vec<string> = v13
                .into_iter()
                .map(|x| {
                    Func1::new({
                        let v27 = v27.clone();
                        move |v: std::string::String| Dice_ui::closure332(v27.clone(), v)
                    })(x.clone())
                })
                .collect::<Vec<_>>();
            let v34: LrcPtr<dyn IEnumerable_1<string>> =
                ofArray(fable_library_rust::NativeArray_::array_from(v30.clone()));
            let v47: string = replace(
                join(Dice_ui::method279(), toArray(v34)),
                string("\\n"),
                string("\n"),
            );
            let v50 = {
                let clo = Func0::new(move || Dice_ui::closure333((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v51: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v50(())");
            let v53: string = append(
                (append((append(string(" "), (v51))), string(""))),
                string(""),
            );
            let v62: &str = &*v47;
            let v95: std::string::String = String::from(v62);
            let v121: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v95));
            let v125: string = string("vec![v121]");
            let v126: Vec<leptos::prelude::AnyView> = vec![v121];
            let v128: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v126);
            let v130: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v128);
            let v133: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v53))),
                                string(">move || { v130 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v135: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v50(())>move || { v130 }</pre> };
            let v137: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v135);
            let v141: string = string("vec![v137]");
            let v142: Vec<leptos::prelude::AnyView> = vec![v137];
            leptos::prelude::Fragment::new(v142)
        }
        pub fn method277(
            v0_1: std::string::String,
            v1: std::string::String,
            v2: std::string::String,
            v3: std::string::String,
            v4: std::string::String,
            v5: std::string::String,
            v6: u32,
            v7: Array<(std::string::String, Option<std::string::String>)>,
            v8: f64,
            v9: bool,
            v10: f64,
            v11: Array<std::string::String>,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                let v1 = v1.clone();
                let v10 = v10.clone();
                let v11 = v11.clone();
                let v2 = v2.clone();
                let v3 = v3.clone();
                let v4 = v4.clone();
                let v5 = v5.clone();
                let v6 = v6.clone();
                let v7 = v7.clone();
                let v8 = v8.clone();
                let v9 = v9.clone();
                move || {
                    Dice_ui::closure331(
                        v0_1.clone(),
                        v1.clone(),
                        v2.clone(),
                        v3.clone(),
                        v4.clone(),
                        v5.clone(),
                        v6,
                        v7.clone(),
                        v8,
                        v9,
                        v10,
                        v11.clone(),
                        (),
                    )
                }
            })
        }
        pub fn closure334(unitVar: (), unitVar_1: ()) -> string {
            string("items-center py-[4px]")
        }
        pub fn closure335(unitVar: (), unitVar_1: ()) -> string {
            string("")
        }
        pub fn closure336(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:20vh] [width:100vw] [max-width:100vw]")
        }
        pub fn method281(v0_1: Array<std::string::String>, v1: i32) -> bool {
            let v0_1: MutCell<Array<std::string::String>> = MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method281: loop {
                break '_method281 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    let v4: std::string::String = v0_1[v1.get().clone()].clone();
                    if (length(fable_library_rust::String_::fromString(v4))) > 0_i32 {
                        true
                    } else {
                        let v0_1_temp: Array<std::string::String> = v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method281;
                    }
                } else {
                    false
                });
            }
        }
        pub fn method280(v0_1: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>, v1: i32) -> bool {
            let v0_1: MutCell<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>> =
                MutCell::new(v0_1.clone());
            let v1: MutCell<i32> = MutCell::new(v1);
            '_method280: loop {
                break '_method280 (if (v1.get().clone()) < (get_Count(v0_1.get().clone())) {
                    if Dice_ui::method281(
                        ((v0_1[v1.get().clone()].clone()).2.clone()).l11.clone(),
                        0_i32,
                    ) {
                        true
                    } else {
                        let v0_1_temp: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                            v0_1.get().clone();
                        let v1_temp: i32 = (v1.get().clone()) + 1_i32;
                        v0_1.set(v0_1_temp);
                        v1.set(v1_temp);
                        continue '_method280;
                    }
                } else {
                    false
                });
            }
        }
        pub fn closure260(
            v0_1: LrcPtr<Dice_ui::Heap2>,
            v1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            v2: leptos::prelude::ArcMemo<
                Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
            >,
            v3: leptos::prelude::ReadSignal<bool>,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v144: leptos::prelude::AnyView = if leptos::prelude::ReadSignal::get(&v3) {
                let v8: string = string(" class=\"px-[12px] py-[10px]\"");
                let v10: string = string(" class=\"flex items-center pb-[6px]\"");
                let v12: string = string(" class=\"pr-[15px] [font-size:13px]\"");
                let v16: Func0<leptos::prelude::Fragment> =
                    Dice_ui::method195(Func0::new(move || {
                        Func0::new(move || Dice_ui::closure261((), ()))()
                    }));
                let v18: leptos::prelude::Fragment = (move || v16())();
                let v20: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v18);
                let v23: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v12))),
                                    string(">move || { v20 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v25: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v20 }</span> };
                let v27: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v25);
                let v29: string = string(" class=\"h-px flex-1 bg-gray-300\"");
                let v30: string = string("vec![]");
                let v31: Vec<leptos::prelude::AnyView> = vec![];
                let v33: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v31);
                let v35: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v33);
                let v37: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v29))),
                                    string(">move || { v35 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v39: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v35 }</span> };
                let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
                let v49: string = string("vec![v27, v41]");
                let v50: Vec<leptos::prelude::AnyView> = vec![v27, v41];
                let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
                let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
                let v56: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v10))),
                                    string(">move || { v54 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v58: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v54 }</span> };
                let v60: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v58);
                let v61 = Dice_ui::method244();
                let v62 = Dice_ui::method245(v0_1.clone());
                let v65 = {
                    let clo = Func0::new(move || Dice_ui::closure268((), ()));
                    Func1::new({
                        let clo = clo.clone();
                        move |arg: ()| clo()
                    })
                };
                let v68 = {
                    let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                    Func1::new({
                        let clo_1 = clo_1.clone();
                        move |arg_1: ()| clo_1()
                    })
                };
                let v71 = {
                    let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                    Func1::new({
                        let clo_2 = clo_2.clone();
                        move |arg_2: ()| clo_2()
                    })
                };
                let v72: string =
                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v71(()) + \" \" + &v68(()) + \" \" + &v65(())");
                let v73: string = append(
                    (append((append(string(" "), (v72))), string(""))),
                    string(""),
                );
                let v76 = {
                    let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                    Func1::new({
                        let clo_3 = clo_3.clone();
                        move |arg_3: ()| clo_3()
                    })
                };
                let v78: string = string(" class=\"[font-size:12px] text-gray-400\"");
                let v79: leptos::prelude::Fragment = v61();
                let v81: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v79);
                let v84: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dt "), (v78))),
                                    string(">move || { v81 }</"),
                                )),
                                string("dt"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v86: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v81 }</dt> };
                let v88: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v86);
                let v90: string =
                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v76(())");
                let v91: leptos::prelude::Fragment = v62();
                let v93: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v91);
                let v96: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dd "), (v90))),
                                    string(">move || { v93 }</"),
                                )),
                                string("dd"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v98: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v76(())>move || { v93 }</dd> };
                let v100: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v98);
                let v107: string = string("vec![v88, v100]");
                let v108: Vec<leptos::prelude::AnyView> = vec![v88, v100];
                let v110: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v108);
                let v112: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v110);
                let v115: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<dl "), (v73))),
                                    string(">move || { v112 }</"),
                                )),
                                string("dl"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v117: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v71(()) + " " + &v68(()) + " " + &v65(())>move || { v112 }</dl> };
                let v119: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v117);
                let v126: string = string("vec![v60, v119]");
                let v127: Vec<leptos::prelude::AnyView> = vec![v60, v119];
                let v129: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v127);
                let v131: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v129);
                let v134: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v8))),
                                    string(">move || { v131 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v136: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="px-[12px] py-[10px]">move || { v131 }</div> };
                leptos::prelude::IntoAny::into_any(v136)
            } else {
                let v140: string = string("vec![]");
                let v141: Vec<leptos::prelude::AnyView> = vec![];
                leptos::prelude::IntoAny::into_any(v141)
            };
            let v146: Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)> =
                leptos::prelude::ArcMemo::get(&v2);
            let v4588: leptos::prelude::AnyView = if (get_Count(
                fable_library_rust::NativeArray_::array_from(v146.clone()),
            ) as u64)
                == 0_u64
            {
                let v153: string =
                    string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                let v155: string = string(" class=\"[height:17px]\"");
                let v169: string =
                        string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v175: string =
                        string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v176: string = string("vec![]");
                let v177: Vec<leptos::prelude::AnyView> = vec![];
                let v179: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v177);
                let v181: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v179);
                let v184: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v175))),
                                    string(">move || { v181 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v186: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v181 }</path> };
                let v188: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v186);
                let v192: string = string("vec![v188]");
                let v193: Vec<leptos::prelude::AnyView> = vec![v188];
                let v195: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v193);
                let v197: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v195);
                let v200: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v169))),
                                    string(">move || { v197 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v202: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v197 }</svg> };
                let v204: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v202);
                let v208: string = string("vec![v204]");
                let v209: Vec<leptos::prelude::AnyView> = vec![v204];
                let v211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v209);
                let v213: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v211);
                let v216: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<span "), (v155))),
                                    string(">move || { v213 }</"),
                                )),
                                string("span"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v218: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Span, _, _>,
                > = leptos::prelude::view! { <span  class="[height:17px]">move || { v213 }</span> };
                let v220: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v218);
                let v222: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                let v232: &str = &*string("No account selected");
                let v265: std::string::String = String::from(v232);
                let v291: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v265));
                let v295: string = string("vec![v291]");
                let v296: Vec<leptos::prelude::AnyView> = vec![v291];
                let v298: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v296);
                let v300: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v298);
                let v303: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<pre "), (v222))),
                                    string(">move || { v300 }</"),
                                )),
                                string("pre"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v305: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v300 }</pre> };
                let v307: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v305);
                let v315: string = string("vec![v220, v307]");
                let v316: Vec<leptos::prelude::AnyView> = vec![v220, v307];
                let v318: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v316);
                let v320: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v318);
                let v323: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<div "), (v153))),
                                    string(">move || { v320 }</"),
                                )),
                                string("div"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v325: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v320 }</div> };
                leptos::prelude::IntoAny::into_any(v325)
            } else {
                let v329: Result<
                    Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                    std::string::String,
                > = leptos::prelude::ArcMemo::get(&v1);
                let v330 = Dice_ui::method138();
                let v331 = Dice_ui::method139();
                let v333: Dice_ui::US53 = match &v329 {
                    Err(v329_1_0) => v331(v329_1_0.clone()),
                    Ok(v329_0_0) => v330(v329_0_0.clone()),
                };
                let v363: Dice_ui::US46 = match &v333 {
                    Dice_ui::US53::US53_0(v333_0_0) => Dice_ui::US46::US46_0(defaultValue(
                        Dice_ui::US47::US47_1,
                        map(Dice_ui::method140(), v333_0_0.clone()),
                    )),
                    Dice_ui::US53::US53_1(v333_1_0) => Dice_ui::US46::US46_1(v333_1_0.clone()),
                };
                match &v363 {
                    Dice_ui::US46::US46_0(v363_0_0) => {
                        let v364: Dice_ui::US47 = v363_0_0.clone();
                        if let Dice_ui::US47::US47_0(v364_0_0) = &v364 {
                            let v365: Array<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                v364_0_0.clone();
                            let v368: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v0_1.l0.clone());
                            let v370: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v368);
                            if if let Dice_ui::US1::US1_0 =
                                &(leptos::prelude::ArcRwSignal::get(&v370.l3.clone())).l4
                            {
                                true
                            } else {
                                false
                            } {
                                let v376: string =
                                        string("class=\"grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]\"");
                                let v378: string = append(
                                    (append((append(string(" "), (v376))), string(""))),
                                    string(""),
                                );
                                let v380: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v365.clone().to_vec();
                                let v382: bool = true;
                                let _vec_map : Vec<_> = v380.into_iter().map(|x| { //;
                                    let patternInput:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v386: LrcPtr<Dice_ui::Heap5> =
                                        patternInput.2.clone();
                                    let v387: std::string::String =
                                        v386.l0.clone();
                                    let v388: std::string::String =
                                        v386.l1.clone();
                                    let v389: std::string::String =
                                        v386.l2.clone();
                                    let v390: std::string::String =
                                        v386.l3.clone();
                                    let v391: std::string::String =
                                        v386.l4.clone();
                                    let v392: std::string::String =
                                        v386.l5.clone();
                                    let v393: u32 = v386.l6;
                                    let v394:
                                            Array<(std::string::String,
                                                   Option<std::string::String>)> =
                                        v386.l7.clone();
                                    let v395: f64 = v386.l8;
                                    let v396: bool = v386.l9;
                                    let v397: f64 = v386.l10;
                                    let v398: Array<std::string::String> =
                                        v386.l11.clone();
                                    let v401: i64 =
                                        patternInput.1.clone() as i64;
                                    let v406: bool =
                                        true; leptos::logging::log!("{}", string("transaction.render (1)"));
                                    let v408: Option<LrcPtr<Dice_ui::Heap2>> =
                                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                                    let v410: LrcPtr<Dice_ui::Heap2> =
                                        v408.unwrap();
                                    let v412: string =
                                        string(" class=\"flex flex-1 flex-col overflow-x-auto\"");
                                    let v414: string =
                                        string(" class=\"flex items-center pb-[6px]\"");
                                    let v416: string =
                                        string(" class=\"pr-[15px] [font-size:13px]\"");
                                    let v420:
                                            Func0<leptos::prelude::Fragment> =
                                        Dice_ui::method195(Func0::new(move || Func0::new({
                                                                                             let v401
                                                                                                 =
                                                                                                 v401.clone();
                                                                                             move
                                                                                                 ||
                                                                                                 Dice_ui::closure269(v401,
                                                                                                                     ())
                                                                                         })()));
                                    let v422: leptos::prelude::Fragment =
                                        (move || v420())();
                                    let v424: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v422);
                                    let v427: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v416))),
                                                                               string(">move || { v424 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v429:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="pr-[15px] [font-size:13px]">move || { v424 }</span> };
                                    let v431: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v429);
                                    let v433: string =
                                        string(" class=\"h-px flex-1 bg-gray-300\"");
                                    let v434: string = string("vec![]");
                                    let v435: Vec<leptos::prelude::AnyView> =
                                        vec![];
                                    let v437: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v435);
                                    let v439: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v437);
                                    let v441: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v433))),
                                                                               string(">move || { v439 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v443:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="h-px flex-1 bg-gray-300">move || { v439 }</span> };
                                    let v445: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v443);
                                    let v453: string =
                                        string("vec![v431, v445]");
                                    let v454: Vec<leptos::prelude::AnyView> =
                                        vec![v431, v445];
                                    let v456: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v454);
                                    let v458: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v456);
                                    let v460: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<span "),
                                                                                       (v414))),
                                                                               string(">move || { v458 }</"))),
                                                                       string("span"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v462:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Span, _, _>> =
                                        leptos::prelude::view! { <span  class="flex items-center pb-[6px]">move || { v458 }</span> };
                                    let v464: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v462);
                                    let v466: string =
                                        string(" class=\"grid flex-1 divide-y-[1px] divide-gray-500/[.10]\"");
                                    let v467 = Dice_ui::method248();
                                    let v468 =
                                        Dice_ui::method249(patternInput.0.clone());
                                    let v471 =
                                        {
                                            let clo_4 =
                                                Func0::new(move ||
                                                               Dice_ui::closure272((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_4 =
                                                               clo_4.clone();
                                                           move |arg_4: ()|
                                                               clo_4()
                                                       })
                                        };
                                    let v474 =
                                        {
                                            let clo_5 =
                                                Func0::new(move ||
                                                               Dice_ui::closure273((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_5 =
                                                               clo_5.clone();
                                                           move |arg_5: ()|
                                                               clo_5()
                                                       })
                                        };
                                    fn v476() -> string {
                                        Dice_ui::closure235((), ())
                                    }
                                    let v477 =
                                        {
                                            let clo_6 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_6 =
                                                               clo_6.clone();
                                                           move |arg_6: ()|
                                                               clo_6()
                                                       })
                                        };
                                    let v478: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v477(()) + \" \" + &v474(()) + \" \" + &v471(())");
                                    let v479: string =
                                        append((append((append(string(" "),
                                                               (v478))),
                                                       string(""))),
                                               string(""));
                                    fn v481() -> string {
                                        Dice_ui::closure236((), ())
                                    }
                                    let v482 =
                                        {
                                            let clo_7 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_7 =
                                                               clo_7.clone();
                                                           move |arg_7: ()|
                                                               clo_7()
                                                       })
                                        };
                                    let v484: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v485: leptos::prelude::Fragment =
                                        v467();
                                    let v487: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v485);
                                    let v490: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v484))),
                                                                               string(">move || { v487 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v492:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v487 }</dt> };
                                    let v494: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v492);
                                    let v496: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v482(())");
                                    let v497: leptos::prelude::Fragment =
                                        v468();
                                    let v499: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v497);
                                    let v502: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v496))),
                                                                               string(">move || { v499 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v504:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v482(())>move || { v499 }</dd> };
                                    let v506: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v504);
                                    let v513: string =
                                        string("vec![v494, v506]");
                                    let v514: Vec<leptos::prelude::AnyView> =
                                        vec![v494, v506];
                                    let v516: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v514);
                                    let v518: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v516);
                                    let v521: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v479))),
                                                                               string(">move || { v518 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v523:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v477(()) + " " + &v474(()) + " " + &v471(())>move || { v518 }</dl> };
                                    let v525: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v523);
                                    let v526 = Dice_ui::method250();
                                    let v527 =
                                        Dice_ui::method251(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v530 =
                                        {
                                            let clo_8 =
                                                Func0::new(move ||
                                                               Dice_ui::closure276((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_8 =
                                                               clo_8.clone();
                                                           move |arg_8: ()|
                                                               clo_8()
                                                       })
                                        };
                                    let v533 =
                                        {
                                            let clo_9 =
                                                Func0::new(move ||
                                                               Dice_ui::closure277((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_9 =
                                                               clo_9.clone();
                                                           move |arg_9: ()|
                                                               clo_9()
                                                       })
                                        };
                                    let v535 =
                                        {
                                            let clo_10 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_10 =
                                                               clo_10.clone();
                                                           move |arg_10: ()|
                                                               clo_10()
                                                       })
                                        };
                                    let v536: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v535(()) + \" \" + &v533(()) + \" \" + &v530(())");
                                    let v537: string =
                                        append((append((append(string(" "),
                                                               (v536))),
                                                       string(""))),
                                               string(""));
                                    let v539 =
                                        {
                                            let clo_11 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_11 =
                                                               clo_11.clone();
                                                           move |arg_11: ()|
                                                               clo_11()
                                                       })
                                        };
                                    let v541: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v542: leptos::prelude::Fragment =
                                        v526();
                                    let v544: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v542);
                                    let v546: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v541))),
                                                                               string(">move || { v544 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v548:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v544 }</dt> };
                                    let v550: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v548);
                                    let v552: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v539(())");
                                    let v553: leptos::prelude::Fragment =
                                        v527();
                                    let v555: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v553);
                                    let v557: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v552))),
                                                                               string(">move || { v555 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v559:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v539(())>move || { v555 }</dd> };
                                    let v561: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v559);
                                    let v568: string =
                                        string("vec![v550, v561]");
                                    let v569: Vec<leptos::prelude::AnyView> =
                                        vec![v550, v561];
                                    let v571: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v569);
                                    let v573: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v571);
                                    let v575: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v537))),
                                                                               string(">move || { v573 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v577:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v535(()) + " " + &v533(()) + " " + &v530(())>move || { v573 }</dl> };
                                    let v579: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v577);
                                    let v580 = Dice_ui::method252();
                                    let v581 =
                                        Dice_ui::method253(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v584 =
                                        {
                                            let clo_12 =
                                                Func0::new(move ||
                                                               Dice_ui::closure280((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_12 =
                                                               clo_12.clone();
                                                           move |arg_12: ()|
                                                               clo_12()
                                                       })
                                        };
                                    let v587 =
                                        {
                                            let clo_13 =
                                                Func0::new(move ||
                                                               Dice_ui::closure281((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_13 =
                                                               clo_13.clone();
                                                           move |arg_13: ()|
                                                               clo_13()
                                                       })
                                        };
                                    let v589 =
                                        {
                                            let clo_14 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_14 =
                                                               clo_14.clone();
                                                           move |arg_14: ()|
                                                               clo_14()
                                                       })
                                        };
                                    let v590: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v589(()) + \" \" + &v587(()) + \" \" + &v584(())");
                                    let v591: string =
                                        append((append((append(string(" "),
                                                               (v590))),
                                                       string(""))),
                                               string(""));
                                    let v593 =
                                        {
                                            let clo_15 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_15 =
                                                               clo_15.clone();
                                                           move |arg_15: ()|
                                                               clo_15()
                                                       })
                                        };
                                    let v595: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v596: leptos::prelude::Fragment =
                                        v580();
                                    let v598: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v596);
                                    let v600: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v595))),
                                                                               string(">move || { v598 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v602:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v598 }</dt> };
                                    let v604: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v602);
                                    let v606: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v593(())");
                                    let v607: leptos::prelude::Fragment =
                                        v581();
                                    let v609: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v607);
                                    let v611: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v606))),
                                                                               string(">move || { v609 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v613:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v593(())>move || { v609 }</dd> };
                                    let v615: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v613);
                                    let v622: string =
                                        string("vec![v604, v615]");
                                    let v623: Vec<leptos::prelude::AnyView> =
                                        vec![v604, v615];
                                    let v625: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v623);
                                    let v627: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v625);
                                    let v629: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v591))),
                                                                               string(">move || { v627 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v631:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v589(()) + " " + &v587(()) + " " + &v584(())>move || { v627 }</dl> };
                                    let v633: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v631);
                                    let v634 = Dice_ui::method254();
                                    let v635 =
                                        Dice_ui::method255(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v638 =
                                        {
                                            let clo_16 =
                                                Func0::new(move ||
                                                               Dice_ui::closure284((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_16 =
                                                               clo_16.clone();
                                                           move |arg_16: ()|
                                                               clo_16()
                                                       })
                                        };
                                    let v641 =
                                        {
                                            let clo_17 =
                                                Func0::new(move ||
                                                               Dice_ui::closure285((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_17 =
                                                               clo_17.clone();
                                                           move |arg_17: ()|
                                                               clo_17()
                                                       })
                                        };
                                    let v643 =
                                        {
                                            let clo_18 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_18 =
                                                               clo_18.clone();
                                                           move |arg_18: ()|
                                                               clo_18()
                                                       })
                                        };
                                    let v644: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v643(()) + \" \" + &v641(()) + \" \" + &v638(())");
                                    let v645: string =
                                        append((append((append(string(" "),
                                                               (v644))),
                                                       string(""))),
                                               string(""));
                                    let v647 =
                                        {
                                            let clo_19 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_19 =
                                                               clo_19.clone();
                                                           move |arg_19: ()|
                                                               clo_19()
                                                       })
                                        };
                                    let v649: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v650: leptos::prelude::Fragment =
                                        v634();
                                    let v652: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v650);
                                    let v654: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v649))),
                                                                               string(">move || { v652 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v656:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v652 }</dt> };
                                    let v658: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v656);
                                    let v660: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v647(())");
                                    let v661: leptos::prelude::Fragment =
                                        v635();
                                    let v663: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v661);
                                    let v665: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v660))),
                                                                               string(">move || { v663 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v667:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v647(())>move || { v663 }</dd> };
                                    let v669: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v667);
                                    let v676: string =
                                        string("vec![v658, v669]");
                                    let v677: Vec<leptos::prelude::AnyView> =
                                        vec![v658, v669];
                                    let v679: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v677);
                                    let v681: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v679);
                                    let v683: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v645))),
                                                                               string(">move || { v681 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v685:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v643(()) + " " + &v641(()) + " " + &v638(())>move || { v681 }</dl> };
                                    let v687: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v685);
                                    let v688 = Dice_ui::method256();
                                    let v689 =
                                        Dice_ui::method257(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v692 =
                                        {
                                            let clo_20 =
                                                Func0::new(move ||
                                                               Dice_ui::closure299((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_20 =
                                                               clo_20.clone();
                                                           move |arg_20: ()|
                                                               clo_20()
                                                       })
                                        };
                                    let v695 =
                                        {
                                            let clo_21 =
                                                Func0::new(move ||
                                                               Dice_ui::closure300((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_21 =
                                                               clo_21.clone();
                                                           move |arg_21: ()|
                                                               clo_21()
                                                       })
                                        };
                                    let v697 =
                                        {
                                            let clo_22 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_22 =
                                                               clo_22.clone();
                                                           move |arg_22: ()|
                                                               clo_22()
                                                       })
                                        };
                                    let v698: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v697(()) + \" \" + &v695(()) + \" \" + &v692(())");
                                    let v699: string =
                                        append((append((append(string(" "),
                                                               (v698))),
                                                       string(""))),
                                               string(""));
                                    let v702 =
                                        {
                                            let clo_23 =
                                                Func0::new(move ||
                                                               Dice_ui::closure301((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_23 =
                                                               clo_23.clone();
                                                           move |arg_23: ()|
                                                               clo_23()
                                                       })
                                        };
                                    let v704: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v705: leptos::prelude::Fragment =
                                        v688();
                                    let v707: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v705);
                                    let v709: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v704))),
                                                                               string(">move || { v707 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v711:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v707 }</dt> };
                                    let v713: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v711);
                                    let v715: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v702(())");
                                    let v716: leptos::prelude::Fragment =
                                        v689();
                                    let v718: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v716);
                                    let v720: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v715))),
                                                                               string(">move || { v718 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v722:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v702(())>move || { v718 }</dd> };
                                    let v724: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v722);
                                    let v731: string =
                                        string("vec![v713, v724]");
                                    let v732: Vec<leptos::prelude::AnyView> =
                                        vec![v713, v724];
                                    let v734: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v732);
                                    let v736: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v734);
                                    let v738: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v699))),
                                                                               string(">move || { v736 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v740:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v697(()) + " " + &v695(()) + " " + &v692(())>move || { v736 }</dl> };
                                    let v742: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v740);
                                    let v743 = Dice_ui::method262();
                                    let v744 =
                                        Dice_ui::method263(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v747 =
                                        {
                                            let clo_24 =
                                                Func0::new(move ||
                                                               Dice_ui::closure304((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_24 =
                                                               clo_24.clone();
                                                           move |arg_24: ()|
                                                               clo_24()
                                                       })
                                        };
                                    let v750 =
                                        {
                                            let clo_25 =
                                                Func0::new(move ||
                                                               Dice_ui::closure305((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_25 =
                                                               clo_25.clone();
                                                           move |arg_25: ()|
                                                               clo_25()
                                                       })
                                        };
                                    let v752 =
                                        {
                                            let clo_26 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_26 =
                                                               clo_26.clone();
                                                           move |arg_26: ()|
                                                               clo_26()
                                                       })
                                        };
                                    let v753: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v752(()) + \" \" + &v750(()) + \" \" + &v747(())");
                                    let v754: string =
                                        append((append((append(string(" "),
                                                               (v753))),
                                                       string(""))),
                                               string(""));
                                    let v756 =
                                        {
                                            let clo_27 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_27 =
                                                               clo_27.clone();
                                                           move |arg_27: ()|
                                                               clo_27()
                                                       })
                                        };
                                    let v758: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v759: leptos::prelude::Fragment =
                                        v743();
                                    let v761: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v759);
                                    let v763: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v758))),
                                                                               string(">move || { v761 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v765:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v761 }</dt> };
                                    let v767: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v765);
                                    let v769: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v756(())");
                                    let v770: leptos::prelude::Fragment =
                                        v744();
                                    let v772: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v770);
                                    let v774: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v769))),
                                                                               string(">move || { v772 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v776:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v756(())>move || { v772 }</dd> };
                                    let v778: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v776);
                                    let v785: string =
                                        string("vec![v767, v778]");
                                    let v786: Vec<leptos::prelude::AnyView> =
                                        vec![v767, v778];
                                    let v788: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v786);
                                    let v790: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v788);
                                    let v792: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v754))),
                                                                               string(">move || { v790 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v794:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v752(()) + " " + &v750(()) + " " + &v747(())>move || { v790 }</dl> };
                                    let v796: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v794);
                                    let v797 = Dice_ui::method264();
                                    let v798 =
                                        Dice_ui::method265(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v801 =
                                        {
                                            let clo_28 =
                                                Func0::new(move ||
                                                               Dice_ui::closure308((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_28 =
                                                               clo_28.clone();
                                                           move |arg_28: ()|
                                                               clo_28()
                                                       })
                                        };
                                    let v804 =
                                        {
                                            let clo_29 =
                                                Func0::new(move ||
                                                               Dice_ui::closure309((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_29 =
                                                               clo_29.clone();
                                                           move |arg_29: ()|
                                                               clo_29()
                                                       })
                                        };
                                    let v806 =
                                        {
                                            let clo_30 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_30 =
                                                               clo_30.clone();
                                                           move |arg_30: ()|
                                                               clo_30()
                                                       })
                                        };
                                    let v807: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v806(()) + \" \" + &v804(()) + \" \" + &v801(())");
                                    let v808: string =
                                        append((append((append(string(" "),
                                                               (v807))),
                                                       string(""))),
                                               string(""));
                                    let v810 =
                                        {
                                            let clo_31 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_31 =
                                                               clo_31.clone();
                                                           move |arg_31: ()|
                                                               clo_31()
                                                       })
                                        };
                                    let v812: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v813: leptos::prelude::Fragment =
                                        v797();
                                    let v815: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v813);
                                    let v817: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v812))),
                                                                               string(">move || { v815 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v819:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v815 }</dt> };
                                    let v821: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v819);
                                    let v823: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v810(())");
                                    let v824: leptos::prelude::Fragment =
                                        v798();
                                    let v826: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v824);
                                    let v828: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v823))),
                                                                               string(">move || { v826 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v830:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v810(())>move || { v826 }</dd> };
                                    let v832: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v830);
                                    let v839: string =
                                        string("vec![v821, v832]");
                                    let v840: Vec<leptos::prelude::AnyView> =
                                        vec![v821, v832];
                                    let v842: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v840);
                                    let v844: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v842);
                                    let v846: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v808))),
                                                                               string(">move || { v844 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v848:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v806(()) + " " + &v804(()) + " " + &v801(())>move || { v844 }</dl> };
                                    let v850: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v848);
                                    let v851 = Dice_ui::method266();
                                    let v852 =
                                        Dice_ui::method267(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v855 =
                                        {
                                            let clo_32 =
                                                Func0::new(move ||
                                                               Dice_ui::closure312((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_32 =
                                                               clo_32.clone();
                                                           move |arg_32: ()|
                                                               clo_32()
                                                       })
                                        };
                                    let v858 =
                                        {
                                            let clo_33 =
                                                Func0::new(move ||
                                                               Dice_ui::closure313((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_33 =
                                                               clo_33.clone();
                                                           move |arg_33: ()|
                                                               clo_33()
                                                       })
                                        };
                                    let v860 =
                                        {
                                            let clo_34 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_34 =
                                                               clo_34.clone();
                                                           move |arg_34: ()|
                                                               clo_34()
                                                       })
                                        };
                                    let v861: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v860(()) + \" \" + &v858(()) + \" \" + &v855(())");
                                    let v862: string =
                                        append((append((append(string(" "),
                                                               (v861))),
                                                       string(""))),
                                               string(""));
                                    let v864 =
                                        {
                                            let clo_35 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_35 =
                                                               clo_35.clone();
                                                           move |arg_35: ()|
                                                               clo_35()
                                                       })
                                        };
                                    let v866: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v867: leptos::prelude::Fragment =
                                        v851();
                                    let v869: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v867);
                                    let v871: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v866))),
                                                                               string(">move || { v869 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v873:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v869 }</dt> };
                                    let v875: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v873);
                                    let v877: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v864(())");
                                    let v878: leptos::prelude::Fragment =
                                        v852();
                                    let v880: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v878);
                                    let v882: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v877))),
                                                                               string(">move || { v880 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v884:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v864(())>move || { v880 }</dd> };
                                    let v886: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v884);
                                    let v893: string =
                                        string("vec![v875, v886]");
                                    let v894: Vec<leptos::prelude::AnyView> =
                                        vec![v875, v886];
                                    let v896: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v894);
                                    let v898: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v896);
                                    let v900: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v862))),
                                                                               string(">move || { v898 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v902:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v860(()) + " " + &v858(()) + " " + &v855(())>move || { v898 }</dl> };
                                    let v904: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v902);
                                    let v905 = Dice_ui::method268();
                                    let v906 =
                                        Dice_ui::method269(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v909 =
                                        {
                                            let clo_36 =
                                                Func0::new(move ||
                                                               Dice_ui::closure316((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_36 =
                                                               clo_36.clone();
                                                           move |arg_36: ()|
                                                               clo_36()
                                                       })
                                        };
                                    let v912 =
                                        {
                                            let clo_37 =
                                                Func0::new(move ||
                                                               Dice_ui::closure317((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_37 =
                                                               clo_37.clone();
                                                           move |arg_37: ()|
                                                               clo_37()
                                                       })
                                        };
                                    let v914 =
                                        {
                                            let clo_38 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_38 =
                                                               clo_38.clone();
                                                           move |arg_38: ()|
                                                               clo_38()
                                                       })
                                        };
                                    let v915: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v914(()) + \" \" + &v912(()) + \" \" + &v909(())");
                                    let v916: string =
                                        append((append((append(string(" "),
                                                               (v915))),
                                                       string(""))),
                                               string(""));
                                    let v918 =
                                        {
                                            let clo_39 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_39 =
                                                               clo_39.clone();
                                                           move |arg_39: ()|
                                                               clo_39()
                                                       })
                                        };
                                    let v920: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v921: leptos::prelude::Fragment =
                                        v905();
                                    let v923: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v921);
                                    let v925: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v920))),
                                                                               string(">move || { v923 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v927:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v923 }</dt> };
                                    let v929: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v927);
                                    let v931: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v918(())");
                                    let v932: leptos::prelude::Fragment =
                                        v906();
                                    let v934: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v932);
                                    let v936: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v931))),
                                                                               string(">move || { v934 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v938:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v918(())>move || { v934 }</dd> };
                                    let v940: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v938);
                                    let v947: string =
                                        string("vec![v929, v940]");
                                    let v948: Vec<leptos::prelude::AnyView> =
                                        vec![v929, v940];
                                    let v950: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v948);
                                    let v952: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v950);
                                    let v954: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v916))),
                                                                               string(">move || { v952 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v956:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v914(()) + " " + &v912(()) + " " + &v909(())>move || { v952 }</dl> };
                                    let v958: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v956);
                                    let v959 = Dice_ui::method270();
                                    let v960 =
                                        Dice_ui::method271(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v963 =
                                        {
                                            let clo_40 =
                                                Func0::new(move ||
                                                               Dice_ui::closure320((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_40 =
                                                               clo_40.clone();
                                                           move |arg_40: ()|
                                                               clo_40()
                                                       })
                                        };
                                    let v966 =
                                        {
                                            let clo_41 =
                                                Func0::new(move ||
                                                               Dice_ui::closure321((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_41 =
                                                               clo_41.clone();
                                                           move |arg_41: ()|
                                                               clo_41()
                                                       })
                                        };
                                    let v968 =
                                        {
                                            let clo_42 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_42 =
                                                               clo_42.clone();
                                                           move |arg_42: ()|
                                                               clo_42()
                                                       })
                                        };
                                    let v969: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v968(()) + \" \" + &v966(()) + \" \" + &v963(())");
                                    let v970: string =
                                        append((append((append(string(" "),
                                                               (v969))),
                                                       string(""))),
                                               string(""));
                                    let v972 =
                                        {
                                            let clo_43 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_43 =
                                                               clo_43.clone();
                                                           move |arg_43: ()|
                                                               clo_43()
                                                       })
                                        };
                                    let v974: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v975: leptos::prelude::Fragment =
                                        v959();
                                    let v977: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v975);
                                    let v979: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v974))),
                                                                               string(">move || { v977 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v981:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v977 }</dt> };
                                    let v983: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v981);
                                    let v985: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v972(())");
                                    let v986: leptos::prelude::Fragment =
                                        v960();
                                    let v988: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v986);
                                    let v990: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v985))),
                                                                               string(">move || { v988 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v992:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v972(())>move || { v988 }</dd> };
                                    let v994: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v992);
                                    let v1001: string =
                                        string("vec![v983, v994]");
                                    let v1002: Vec<leptos::prelude::AnyView> =
                                        vec![v983, v994];
                                    let v1004: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1002);
                                    let v1006: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1004);
                                    let v1008: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v970))),
                                                                               string(">move || { v1006 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1010:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v968(()) + " " + &v966(()) + " " + &v963(())>move || { v1006 }</dl> };
                                    let v1012: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1010);
                                    let v1013 = Dice_ui::method272();
                                    let v1014 =
                                        Dice_ui::method273(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v1017 =
                                        {
                                            let clo_44 =
                                                Func0::new(move ||
                                                               Dice_ui::closure324((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_44 =
                                                               clo_44.clone();
                                                           move |arg_44: ()|
                                                               clo_44()
                                                       })
                                        };
                                    let v1020 =
                                        {
                                            let clo_45 =
                                                Func0::new(move ||
                                                               Dice_ui::closure325((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_45 =
                                                               clo_45.clone();
                                                           move |arg_45: ()|
                                                               clo_45()
                                                       })
                                        };
                                    let v1022 =
                                        {
                                            let clo_46 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_46 =
                                                               clo_46.clone();
                                                           move |arg_46: ()|
                                                               clo_46()
                                                       })
                                        };
                                    let v1023: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1022(()) + \" \" + &v1020(()) + \" \" + &v1017(())");
                                    let v1024: string =
                                        append((append((append(string(" "),
                                                               (v1023))),
                                                       string(""))),
                                               string(""));
                                    let v1026 =
                                        {
                                            let clo_47 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_47 =
                                                               clo_47.clone();
                                                           move |arg_47: ()|
                                                               clo_47()
                                                       })
                                        };
                                    let v1028: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1029: leptos::prelude::Fragment =
                                        v1013();
                                    let v1031: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1029);
                                    let v1033: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1028))),
                                                                               string(">move || { v1031 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1035:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1031 }</dt> };
                                    let v1037: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1035);
                                    let v1039: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1026(())");
                                    let v1040: leptos::prelude::Fragment =
                                        v1014();
                                    let v1042: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1040);
                                    let v1044: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1039))),
                                                                               string(">move || { v1042 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1046:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1026(())>move || { v1042 }</dd> };
                                    let v1048: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1046);
                                    let v1055: string =
                                        string("vec![v1037, v1048]");
                                    let v1056: Vec<leptos::prelude::AnyView> =
                                        vec![v1037, v1048];
                                    let v1058: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1056);
                                    let v1060: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1058);
                                    let v1062: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1024))),
                                                                               string(">move || { v1060 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1064:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1022(()) + " " + &v1020(()) + " " + &v1017(())>move || { v1060 }</dl> };
                                    let v1066: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1064);
                                    let v1067 = Dice_ui::method274();
                                    let v1068 =
                                        Dice_ui::method275(v387.clone(),
                                                           v388.clone(),
                                                           v389.clone(),
                                                           v390.clone(),
                                                           v391.clone(),
                                                           v392.clone(), v393,
                                                           v394.clone(), v395,
                                                           v396, v397,
                                                           v398.clone());
                                    let v1071 =
                                        {
                                            let clo_48 =
                                                Func0::new(move ||
                                                               Dice_ui::closure328((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_48 =
                                                               clo_48.clone();
                                                           move |arg_48: ()|
                                                               clo_48()
                                                       })
                                        };
                                    let v1074 =
                                        {
                                            let clo_49 =
                                                Func0::new(move ||
                                                               Dice_ui::closure329((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_49 =
                                                               clo_49.clone();
                                                           move |arg_49: ()|
                                                               clo_49()
                                                       })
                                        };
                                    let v1076 =
                                        {
                                            let clo_50 = Func0::from(v476);
                                            Func1::new({
                                                           let clo_50 =
                                                               clo_50.clone();
                                                           move |arg_50: ()|
                                                               clo_50()
                                                       })
                                        };
                                    let v1077: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1076(()) + \" \" + &v1074(()) + \" \" + &v1071(())");
                                    let v1078: string =
                                        append((append((append(string(" "),
                                                               (v1077))),
                                                       string(""))),
                                               string(""));
                                    let v1080 =
                                        {
                                            let clo_51 = Func0::from(v481);
                                            Func1::new({
                                                           let clo_51 =
                                                               clo_51.clone();
                                                           move |arg_51: ()|
                                                               clo_51()
                                                       })
                                        };
                                    let v1082: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1083: leptos::prelude::Fragment =
                                        v1067();
                                    let v1085: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1083);
                                    let v1087: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1082))),
                                                                               string(">move || { v1085 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1089:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1085 }</dt> };
                                    let v1091: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1089);
                                    let v1093: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1080(())");
                                    let v1094: leptos::prelude::Fragment =
                                        v1068();
                                    let v1096: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1094);
                                    let v1098: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1093))),
                                                                               string(">move || { v1096 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1100:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1080(())>move || { v1096 }</dd> };
                                    let v1102: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1100);
                                    let v1109: string =
                                        string("vec![v1091, v1102]");
                                    let v1110: Vec<leptos::prelude::AnyView> =
                                        vec![v1091, v1102];
                                    let v1112: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1110);
                                    let v1114: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1112);
                                    let v1116: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1078))),
                                                                               string(">move || { v1114 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1118:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1076(()) + " " + &v1074(()) + " " + &v1071(())>move || { v1114 }</dl> };
                                    let v1120: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1118);
                                    let v1181: leptos::prelude::AnyView =
                                        if (get_Count(v398.clone()) as u64) ==
                                               0_u64 {
                                            let v1123: string =
                                                string("vec![]");
                                            let v1124:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![];
                                            leptos::prelude::IntoAny::into_any(v1124)
                                        } else {
                                            let v1127 = Dice_ui::method276();
                                            let v1128 =
                                                Dice_ui::method277(v387, v388,
                                                                   v389, v390,
                                                                   v391, v392,
                                                                   v393, v394,
                                                                   v395, v396,
                                                                   v397,
                                                                   v398);
                                            let v1131 =
                                                {
                                                    let clo_52 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure334((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_52
                                                                       =
                                                                       clo_52.clone();
                                                                   move
                                                                       |arg_52:
                                                                            ()|
                                                                       clo_52()
                                                               })
                                                };
                                            let v1134 =
                                                {
                                                    let clo_53 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure335((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_53
                                                                       =
                                                                       clo_53.clone();
                                                                   move
                                                                       |arg_53:
                                                                            ()|
                                                                       clo_53()
                                                               })
                                                };
                                            let v1136 =
                                                {
                                                    let clo_54 =
                                                        Func0::from(v476);
                                                    Func1::new({
                                                                   let clo_54
                                                                       =
                                                                       clo_54.clone();
                                                                   move
                                                                       |arg_54:
                                                                            ()|
                                                                       clo_54()
                                                               })
                                                };
                                            let v1137: string =
                                                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1136(()) + \" \" + &v1134(()) + \" \" + &v1131(())");
                                            let v1138: string =
                                                append((append((append(string(" "),
                                                                       (v1137))),
                                                               string(""))),
                                                       string(""));
                                            let v1140 =
                                                {
                                                    let clo_55 =
                                                        Func0::from(v481);
                                                    Func1::new({
                                                                   let clo_55
                                                                       =
                                                                       clo_55.clone();
                                                                   move
                                                                       |arg_55:
                                                                            ()|
                                                                       clo_55()
                                                               })
                                                };
                                            let v1142: string =
                                                string(" class=\"[font-size:12px] text-gray-400\"");
                                            let v1143:
                                                    leptos::prelude::Fragment =
                                                v1127();
                                            let v1145:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1143);
                                            let v1147: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dt "),
                                                                                               (v1142))),
                                                                                       string(">move || { v1145 }</"))),
                                                                               string("dt"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1149:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                                leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1145 }</dt> };
                                            let v1151:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1149);
                                            let v1153: string =
                                                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1140(())");
                                            let v1154:
                                                    leptos::prelude::Fragment =
                                                v1128();
                                            let v1156:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1154);
                                            let v1158: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dd "),
                                                                                               (v1153))),
                                                                                       string(">move || { v1156 }</"))),
                                                                               string("dd"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1160:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                                leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1140(())>move || { v1156 }</dd> };
                                            let v1162:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v1160);
                                            let v1169: string =
                                                string("vec![v1151, v1162]");
                                            let v1170:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v1151, v1162];
                                            let v1172:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v1170);
                                            let v1174:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v1172);
                                            let v1176: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<dl "),
                                                                                               (v1138))),
                                                                                       string(">move || { v1174 }</"))),
                                                                               string("dl"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v1178:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                                leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1136(()) + " " + &v1134(()) + " " + &v1131(())>move || { v1174 }</dl> };
                                            leptos::prelude::IntoAny::into_any(v1178)
                                        };
                                    let v1221: string =
                                        string("vec![v525, v579, v633, v687, v742, v796, v850, v904, v958, v1012, v1066, v1120, v1181]");
                                    let v1222: Vec<leptos::prelude::AnyView> =
                                        vec![v525, v579, v633, v687, v742, v796, v850, v904, v958, v1012, v1066, v1120, v1181];
                                    let v1224: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1222);
                                    let v1226: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1224);
                                    let v1229: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v466))),
                                                                               string(">move || { v1226 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1231:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="grid flex-1 divide-y-[1px] divide-gray-500/[.10]">move || { v1226 }</div> };
                                    let v1233: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1231);
                                    let v1240: string =
                                        string("vec![v464, v1233]");
                                    let v1241: Vec<leptos::prelude::AnyView> =
                                        vec![v464, v1233];
                                    let v1243: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1241);
                                    let v1245: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1243);
                                    let v1247: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<div "),
                                                                                       (v412))),
                                                                               string(">move || { v1245 }</"))),
                                                                       string("div"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1249:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                                        leptos::prelude::view! { <div  class="flex flex-1 flex-col overflow-x-auto">move || { v1245 }</div> };
                                    let v1251: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1249);
                                    let v1253: bool =
                                        true; v1251 }).collect::<Vec<_>>();
                                let v1255: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v1257: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v1255);
                                let v1261: string = string("vec![v1257]");
                                let v1262: Vec<leptos::prelude::AnyView> = vec![v1257];
                                let v1264: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v1262);
                                let v1266: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v1264);
                                let v1268: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<div "), (v378))),
                                                    string(">move || { v1266 }</"),
                                                )),
                                                string("div"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v1270: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Div, _, _>,
                                > = leptos::prelude::view! { <div  class="grid flex-1 py-[10px] px-[12px] [gap:15px] sm:[grid-template-columns:repeat(auto-fill,minmax(500px,1fr))]">move || { v1266 }</div> };
                                leptos::prelude::IntoAny::into_any(v1270)
                            } else {
                                let v1274: Vec<(string, usize, LrcPtr<Dice_ui::Heap5>)> =
                                    v365.clone().to_vec();
                                let v1276: bool = true;
                                let _vec_map : Vec<_> = v1274.into_iter().map(|x| { //;
                                    let patternInput_1:
                                            (string, usize,
                                             LrcPtr<Dice_ui::Heap5>) = x;
                                    let v1280: LrcPtr<Dice_ui::Heap5> =
                                        patternInput_1.2.clone();
                                    let v1283: bool =
                                        true; leptos::logging::log!("{}", string("transaction.tr_render (1)"));
                                    let v1286: string =
                                        string(" class=\"odd:bg-gray-50 dark:odd:bg-gray-800/50\"");
                                    let v1288: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1297: &str =
                                        &*patternInput_1.0.clone();
                                    let v1330: std::string::String =
                                        String::from(v1297);
                                    let v1356: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1330));
                                    let v1360: string = string("vec![v1356]");
                                    let v1361: Vec<leptos::prelude::AnyView> =
                                        vec![v1356];
                                    let v1363: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1361);
                                    let v1365: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1363);
                                    let v1368: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1288))),
                                                                               string(">move || { v1365 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1370:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1365 }</td> };
                                    let v1372: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1370);
                                    let v1374: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1384: i64 =
                                        (Dice_ui::method204(toInt64(fable_library_rust::String_::fromString(v1280.l5.clone()))))
                                            / 1000_i64;
                                    let v1386:
                                            Option<chrono::DateTime<chrono::Utc>> =
                                        chrono::DateTime::from_timestamp_micros(v1384);
                                    let v1405: Dice_ui::US68 =
                                        defaultValue(Dice_ui::US68::US68_1,
                                                     map(Dice_ui::method205(),
                                                         v1386));
                                    let v1424: Dice_ui::US31 =
                                        match &v1405 {
                                            Dice_ui::US68::US68_0(v1405_0_0)
                                            => {
                                                let v1411:
                                                        chrono::NaiveDateTime =
                                                    match &v1405 {
                                                        Dice_ui::US68::US68_0(x)
                                                        => x.clone(),
                                                        _ => unreachable!(),
                                                    }.clone().naive_utc();
                                                let v1413:
                                                        chrono::DateTime<chrono::Local> =
                                                    chrono::offset::TimeZone::from_utc_datetime(&chrono::Local, &v1411);
                                                let v1415: string =
                                                    string("r#\"%Y-%m-%d %H:%M:%S\"#");
                                                let v1416: &str =
                                                    r#"%Y-%m-%d %H:%M:%S"#;
                                                let v1418:
                                                        std::string::String =
                                                    v1413.format(v1416).to_string();
                                                Dice_ui::US31::US31_0(fable_library_rust::String_::fromString(v1418))
                                            }
                                            _ => Dice_ui::US31::US31_1,
                                        };
                                    let v1430: Dice_ui::US69 =
                                        match &v1424 {
                                            Dice_ui::US31::US31_0(v1424_0_0)
                                            =>
                                            Dice_ui::US69::US69_0(match &v1424
                                                                      {
                                                                      Dice_ui::US31::US31_0(x)
                                                                      =>
                                                                      x.clone(),
                                                                      _ =>
                                                                      unreachable!(),
                                                                  }.clone()),
                                            _ =>
                                            Dice_ui::US69::US69_1(string("resultm.from_option / Option does not have a value.")),
                                        };
                                    let v1435: string =
                                        match &v1430 {
                                            Dice_ui::US69::US69_0(v1430_0_0)
                                            => v1430_0_0.clone(),
                                            Dice_ui::US69::US69_1(v1430_1_0)
                                            =>
                                            append((append(string("sm\'.to_string result / Error: "),
                                                           (v1430_1_0.clone()))),
                                                   string("")),
                                        };
                                    let v1444: &str = &*v1435;
                                    let v1477: std::string::String =
                                        String::from(v1444);
                                    let v1503: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1477));
                                    let v1507: string = string("vec![v1503]");
                                    let v1508: Vec<leptos::prelude::AnyView> =
                                        vec![v1503];
                                    let v1510: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1508);
                                    let v1512: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1510);
                                    let v1514: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1374))),
                                                                               string(">move || { v1512 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1516:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1512 }</td> };
                                    let v1518: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1516);
                                    let v1520: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1523: string =
                                        fable_library_rust::String_::fromString(v1280.l1.clone());
                                    let v1532: &str = &*v1523;
                                    let v1565: std::string::String =
                                        String::from(v1532);
                                    let v1591: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1565));
                                    let v1595: string = string("vec![v1591]");
                                    let v1596: Vec<leptos::prelude::AnyView> =
                                        vec![v1591];
                                    let v1598: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1596);
                                    let v1600: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1598);
                                    let v1602: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1520))),
                                                                               string(">move || { v1600 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1604:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1600 }</td> };
                                    let v1606: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1604);
                                    let v1608: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1611: string =
                                        fable_library_rust::String_::fromString(v1280.l2.clone());
                                    let v1620: &str = &*v1611;
                                    let v1653: std::string::String =
                                        String::from(v1620);
                                    let v1679: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1653));
                                    let v1683: string = string("vec![v1679]");
                                    let v1684: Vec<leptos::prelude::AnyView> =
                                        vec![v1679];
                                    let v1686: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1684);
                                    let v1688: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1686);
                                    let v1690: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1608))),
                                                                               string(">move || { v1688 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1692:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1688 }</td> };
                                    let v1694: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1692);
                                    let v1696: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1699:
                                            Vec<(std::string::String,
                                                 Option<std::string::String>)> =
                                        v1280.l7.clone().to_vec();
                                    let v1701: bool =
                                        true; let _vec_map : Vec<_> = v1699.into_iter().map(|x| { //;
                                    let patternInput_2:
                                            (std::string::String,
                                             Option<std::string::String>) = x;
                                    let v1705 =
                                        Dice_ui::method258(patternInput_2.0.clone());
                                    let v1706 =
                                        Dice_ui::method259(patternInput_2.1.clone());
                                    let v1709 =
                                        {
                                            let clo_56 =
                                                Func0::new(move ||
                                                               Dice_ui::closure295((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_56 =
                                                               clo_56.clone();
                                                           move |arg_56: ()|
                                                               clo_56()
                                                       })
                                        };
                                    let v1712 =
                                        {
                                            let clo_57 =
                                                Func0::new(move ||
                                                               Dice_ui::closure296((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_57 =
                                                               clo_57.clone();
                                                           move |arg_57: ()|
                                                               clo_57()
                                                       })
                                        };
                                    let v1715 =
                                        {
                                            let clo_58 =
                                                Func0::new(move ||
                                                               Dice_ui::closure297((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_58 =
                                                               clo_58.clone();
                                                           move |arg_58: ()|
                                                               clo_58()
                                                       })
                                        };
                                    let v1716: string =
                                        string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v1715(()) + \" \" + &v1712(()) + \" \" + &v1709(())");
                                    let v1717: string =
                                        append((append((append(string(" "),
                                                               (v1716))),
                                                       string(""))),
                                               string(""));
                                    let v1720 =
                                        {
                                            let clo_59 =
                                                Func0::new(move ||
                                                               Dice_ui::closure298((),
                                                                                   ()));
                                            Func1::new({
                                                           let clo_59 =
                                                               clo_59.clone();
                                                           move |arg_59: ()|
                                                               clo_59()
                                                       })
                                        };
                                    let v1722: string =
                                        string(" class=\"[font-size:12px] text-gray-400\"");
                                    let v1723: leptos::prelude::Fragment =
                                        v1705();
                                    let v1725: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1723);
                                    let v1728: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dt "),
                                                                                       (v1722))),
                                                                               string(">move || { v1725 }</"))),
                                                                       string("dt"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1730:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> =
                                        leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v1725 }</dt> };
                                    let v1732: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1730);
                                    let v1734: string =
                                        string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v1720(())");
                                    let v1735: leptos::prelude::Fragment =
                                        v1706();
                                    let v1737: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1735);
                                    let v1740: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dd "),
                                                                                       (v1734))),
                                                                               string(">move || { v1737 }</"))),
                                                                       string("dd"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1742:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> =
                                        leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v1720(())>move || { v1737 }</dd> };
                                    let v1744: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1742);
                                    let v1752: string =
                                        string("vec![v1732, v1744]");
                                    let v1753: Vec<leptos::prelude::AnyView> =
                                        vec![v1732, v1744];
                                    let v1755: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1753);
                                    let v1757: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1755);
                                    let v1760: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<dl "),
                                                                                       (v1717))),
                                                                               string(">move || { v1757 }</"))),
                                                                       string("dl"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1762:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> =
                                        leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v1715(()) + " " + &v1712(()) + " " + &v1709(())>move || { v1757 }</dl> };
                                    let v1764: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1762);
                                    let v1766: bool =
                                        true; v1764 }).collect::<Vec<_>>();
                                    let v1768: Vec<leptos::prelude::AnyView> =
                                        _vec_map;
                                    let v1770: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1768);
                                    let v1774: string = string("vec![v1770]");
                                    let v1775: Vec<leptos::prelude::AnyView> =
                                        vec![v1770];
                                    let v1777: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1775);
                                    let v1779: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1777);
                                    let v1781: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1696))),
                                                                               string(">move || { v1779 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1783:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1779 }</td> };
                                    let v1785: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1783);
                                    let v1787: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1791: string = toString(v1280.l8);
                                    let v1802: &str = &*v1791;
                                    let v1835: std::string::String =
                                        String::from(v1802);
                                    let v1861: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1835));
                                    let v1865: string = string("vec![v1861]");
                                    let v1866: Vec<leptos::prelude::AnyView> =
                                        vec![v1861];
                                    let v1868: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1866);
                                    let v1870: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1868);
                                    let v1872: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1787))),
                                                                               string(">move || { v1870 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1874:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1870 }</td> };
                                    let v1876: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1874);
                                    let v1878: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1882: string = toString(v1280.l10);
                                    let v1893: &str = &*v1882;
                                    let v1926: std::string::String =
                                        String::from(v1893);
                                    let v1952: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v1926));
                                    let v1956: string = string("vec![v1952]");
                                    let v1957: Vec<leptos::prelude::AnyView> =
                                        vec![v1952];
                                    let v1959: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v1957);
                                    let v1961: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v1959);
                                    let v1963: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1878))),
                                                                               string(">move || { v1961 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v1965:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v1961 }</td> };
                                    let v1967: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v1965);
                                    let v1969: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v1973: string = toString(v1280.l6);
                                    let v1984: &str = &*v1973;
                                    let v2017: std::string::String =
                                        String::from(v1984);
                                    let v2043: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2017));
                                    let v2047: string = string("vec![v2043]");
                                    let v2048: Vec<leptos::prelude::AnyView> =
                                        vec![v2043];
                                    let v2050: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2048);
                                    let v2052: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2050);
                                    let v2054: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v1969))),
                                                                               string(">move || { v2052 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2056:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2052 }</td> };
                                    let v2058: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2056);
                                    let v2060: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]\"");
                                    let v2272: leptos::prelude::Fragment =
                                        if (get_Count(v1280.l11.clone()) as
                                                u64) == 0_u64 {
                                            let v2072: &str = &*string("");
                                            let v2105: std::string::String =
                                                String::from(v2072);
                                            let v2131:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2105));
                                            let v2135: string =
                                                string("vec![v2131]");
                                            let v2136:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2131];
                                            leptos::prelude::Fragment::new(v2136)
                                        } else {
                                            let v2141:
                                                    Vec<std::string::String> =
                                                v1280.l11.clone().to_vec();
                                            let v2144: bool =
                                                true; let _func1_from_v2142 = Func1::from(move |value| { //;
                                            let v2146: std::string::String =
                                                value;
                                            let v2148: string =
                                                fable_library_rust::String_::fromString(v2146);
                                            let v2151: bool = true; v2148 /*;
                                            let v2153: bool = */ }); //;
                                            let v2155:
                                                    Func1<std::string::String, string> =
                                                _func1_from_v2142;
                                            let v2158: Vec<string> =
                                                v2141.into_iter().map(|x| Func1::new({
                                                                                         let v2155
                                                                                             =
                                                                                             v2155.clone();
                                                                                         move
                                                                                             |v:
                                                                                                  std::string::String|
                                                                                             Dice_ui::closure332(v2155.clone(),
                                                                                                                 v)
                                                                                     })(x.clone())).collect::<Vec<_>>();
                                            let v2162:
                                                    LrcPtr<dyn IEnumerable_1<string>> =
                                                ofArray(fable_library_rust::NativeArray_::array_from(v2158.clone()));
                                            let v2175: string =
                                                replace(join(Dice_ui::method279(),
                                                             toArray(v2162)),
                                                        string("\\n"),
                                                        string("\n"));
                                            let v2178 =
                                                {
                                                    let clo_60 =
                                                        Func0::new(move ||
                                                                       Dice_ui::closure336((),
                                                                                           ()));
                                                    Func1::new({
                                                                   let clo_60
                                                                       =
                                                                       clo_60.clone();
                                                                   move
                                                                       |arg_60:
                                                                            ()|
                                                                       clo_60()
                                                               })
                                                };
                                            let v2179: string =
                                                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v2178(())");
                                            let v2180: string =
                                                append((append((append(string(" "),
                                                                       (v2179))),
                                                               string(""))),
                                                       string(""));
                                            let v2189: &str = &*v2175;
                                            let v2222: std::string::String =
                                                String::from(v2189);
                                            let v2248:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2222));
                                            let v2252: string =
                                                string("vec![v2248]");
                                            let v2253:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2248];
                                            let v2255:
                                                    leptos::prelude::Fragment =
                                                leptos::prelude::Fragment::new(v2253);
                                            let v2257:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::AnyView::from(v2255);
                                            let v2260: string =
                                                append((append(string("leptos::prelude::view! { "),
                                                               (append((append((append((append(string("<pre "),
                                                                                               (v2180))),
                                                                                       string(">move || { v2257 }</"))),
                                                                               string("pre"))),
                                                                       string(">"))))),
                                                       string(" }"));
                                            let v2262:
                                                    leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> =
                                                leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v2178(())>move || { v2257 }</pre> };
                                            let v2264:
                                                    leptos::prelude::AnyView =
                                                leptos::prelude::IntoAny::into_any(v2262);
                                            let v2268: string =
                                                string("vec![v2264]");
                                            let v2269:
                                                    Vec<leptos::prelude::AnyView> =
                                                vec![v2264];
                                            leptos::prelude::Fragment::new(v2269)
                                        };
                                    let v2274: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2272);
                                    let v2276: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2060))),
                                                                               string(">move || { v2274 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2278:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500 [overflow:auto]">move || { v2274 }</td> };
                                    let v2280: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2278);
                                    let v2282: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2286: string = ofBoolean(v1280.l9);
                                    let v2297: &str = &*v2286;
                                    let v2330: std::string::String =
                                        String::from(v2297);
                                    let v2356: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2330));
                                    let v2360: string = string("vec![v2356]");
                                    let v2361: Vec<leptos::prelude::AnyView> =
                                        vec![v2356];
                                    let v2363: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2361);
                                    let v2365: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2363);
                                    let v2367: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2282))),
                                                                               string(">move || { v2365 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2369:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2365 }</td> };
                                    let v2371: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2369);
                                    let v2373: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2376: string =
                                        fable_library_rust::String_::fromString(v1280.l3.clone());
                                    let v2385: &str = &*v2376;
                                    let v2418: std::string::String =
                                        String::from(v2385);
                                    let v2444: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2418));
                                    let v2448: string = string("vec![v2444]");
                                    let v2449: Vec<leptos::prelude::AnyView> =
                                        vec![v2444];
                                    let v2451: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2449);
                                    let v2453: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2451);
                                    let v2455: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2373))),
                                                                               string(">move || { v2453 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2457:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2453 }</td> };
                                    let v2459: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2457);
                                    let v2461: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2464: string =
                                        fable_library_rust::String_::fromString(v1280.l4.clone());
                                    let v2473: &str = &*v2464;
                                    let v2506: std::string::String =
                                        String::from(v2473);
                                    let v2532: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2506));
                                    let v2536: string = string("vec![v2532]");
                                    let v2537: Vec<leptos::prelude::AnyView> =
                                        vec![v2532];
                                    let v2539: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2537);
                                    let v2541: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2539);
                                    let v2543: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2461))),
                                                                               string(">move || { v2541 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2545:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2541 }</td> };
                                    let v2547: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2545);
                                    let v2549: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500\"");
                                    let v2552: string =
                                        fable_library_rust::String_::fromString(v1280.l0.clone());
                                    let v2561: &str = &*v2552;
                                    let v2594: std::string::String =
                                        String::from(v2561);
                                    let v2620: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v2594));
                                    let v2624: string = string("vec![v2620]");
                                    let v2625: Vec<leptos::prelude::AnyView> =
                                        vec![v2620];
                                    let v2627: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2625);
                                    let v2629: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2627);
                                    let v2631: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<td "),
                                                                                       (v2549))),
                                                                               string(">move || { v2629 }</"))),
                                                                       string("td"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2633:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Td, _, _>> =
                                        leptos::prelude::view! { <td  class="whitespace-nowrap px-4 py-2 text-gray-700 dark:text-gray-500">move || { v2629 }</td> };
                                    let v2635: leptos::prelude::AnyView =
                                        leptos::prelude::IntoAny::into_any(v2633);
                                    let v2675: string =
                                        string("vec![v1372, v1518, v1606, v1694, v1785, v1876, v1967, v2058, v2280, v2371, v2459, v2547, v2635]");
                                    let v2676: Vec<leptos::prelude::AnyView> =
                                        vec![v1372, v1518, v1606, v1694, v1785, v1876, v1967, v2058, v2280, v2371, v2459, v2547, v2635];
                                    let v2678: leptos::prelude::Fragment =
                                        leptos::prelude::Fragment::new(v2676);
                                    let v2680: leptos::prelude::AnyView =
                                        leptos::prelude::AnyView::from(v2678);
                                    let v2683: string =
                                        append((append(string("leptos::prelude::view! { "),
                                                       (append((append((append((append(string("<tr "),
                                                                                       (v1286))),
                                                                               string(">move || { v2680 }</"))),
                                                                       string("tr"))),
                                                               string(">"))))),
                                               string(" }"));
                                    let v2685:
                                            leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Tr, _, _>> =
                                        leptos::prelude::view! { <tr  class="odd:bg-gray-50 dark:odd:bg-gray-800/50">move || { v2680 }</tr> };
                                    let v2687: bool =
                                        true; v2685 }).collect::<Vec<_>>();
                                let v2689: Vec<
                                    leptos::prelude::View<
                                        leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                    >,
                                > = _vec_map;
                                let v2691: bool = true;
                                let _vec_map: Vec<_> = v2689
                                    .into_iter()
                                    .map(|x| {
                                        //;
                                        let v2693: leptos::prelude::View<
                                            leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                        > = x;
                                        let v2695: leptos::prelude::AnyView =
                                            leptos::prelude::IntoAny::into_any(v2693);
                                        let v2697: bool = true;
                                        v2695
                                    })
                                    .collect::<Vec<_>>();
                                let v2699: Vec<leptos::prelude::AnyView> = _vec_map;
                                let v2701: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2699);
                                let v2705: string = string("vec![v2701]");
                                let v2706: Vec<leptos::prelude::AnyView> = vec![v2701];
                                let v2708: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2706);
                                let v2711: bool = true;
                                leptos::logging::log!(
                                    "{}",
                                    string("transaction.tr_head_render (1)")
                                );
                                let v2713: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2723: &str = &*string("Account");
                                let v2756: std::string::String = String::from(v2723);
                                let v2782: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2756),
                                    );
                                let v2786: string = string("vec![v2782]");
                                let v2787: Vec<leptos::prelude::AnyView> = vec![v2782];
                                let v2789: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2787);
                                let v2791: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2789);
                                let v2794: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2713))),
                                                    string(">move || { v2791 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2796: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2791 }</th> };
                                let v2798: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2796);
                                let v2800: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2810: &str = &*string("Block Timestamp");
                                let v2843: std::string::String = String::from(v2810);
                                let v2869: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2843),
                                    );
                                let v2873: string = string("vec![v2869]");
                                let v2874: Vec<leptos::prelude::AnyView> = vec![v2869];
                                let v2876: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2874);
                                let v2878: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2876);
                                let v2880: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2800))),
                                                    string(">move || { v2878 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2882: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2878 }</th> };
                                let v2884: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2882);
                                let v2886: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2896: &str = &*string("Predecessor");
                                let v2929: std::string::String = String::from(v2896);
                                let v2955: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v2929),
                                    );
                                let v2959: string = string("vec![v2955]");
                                let v2960: Vec<leptos::prelude::AnyView> = vec![v2955];
                                let v2962: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v2960);
                                let v2964: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2962);
                                let v2966: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2886))),
                                                    string(">move || { v2964 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v2968: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v2964 }</th> };
                                let v2970: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v2968);
                                let v2972: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v2982: &str = &*string("Receiver");
                                let v3015: std::string::String = String::from(v2982);
                                let v3041: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3015),
                                    );
                                let v3045: string = string("vec![v3041]");
                                let v3046: Vec<leptos::prelude::AnyView> = vec![v3041];
                                let v3048: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3046);
                                let v3050: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3048);
                                let v3052: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v2972))),
                                                    string(">move || { v3050 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3054: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3050 }</th> };
                                let v3056: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3054);
                                let v3058: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3068: &str = &*string("Action");
                                let v3101: std::string::String = String::from(v3068);
                                let v3127: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3101),
                                    );
                                let v3131: string = string("vec![v3127]");
                                let v3132: Vec<leptos::prelude::AnyView> = vec![v3127];
                                let v3134: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3132);
                                let v3136: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3134);
                                let v3138: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3058))),
                                                    string(">move || { v3136 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3140: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3136 }</th> };
                                let v3142: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3140);
                                let v3144: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3154: &str = &*string("Deposit");
                                let v3187: std::string::String = String::from(v3154);
                                let v3213: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3187),
                                    );
                                let v3217: string = string("vec![v3213]");
                                let v3218: Vec<leptos::prelude::AnyView> = vec![v3213];
                                let v3220: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3218);
                                let v3222: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3220);
                                let v3224: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3144))),
                                                    string(">move || { v3222 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3226: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3222 }</th> };
                                let v3228: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3226);
                                let v3230: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3240: &str = &*string("Fee");
                                let v3273: std::string::String = String::from(v3240);
                                let v3299: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3273),
                                    );
                                let v3303: string = string("vec![v3299]");
                                let v3304: Vec<leptos::prelude::AnyView> = vec![v3299];
                                let v3306: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3304);
                                let v3308: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3306);
                                let v3310: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3230))),
                                                    string(">move || { v3308 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3312: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3308 }</th> };
                                let v3314: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3312);
                                let v3316: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3326: &str = &*string("Block Height");
                                let v3359: std::string::String = String::from(v3326);
                                let v3385: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3359),
                                    );
                                let v3389: string = string("vec![v3385]");
                                let v3390: Vec<leptos::prelude::AnyView> = vec![v3385];
                                let v3392: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3390);
                                let v3394: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3392);
                                let v3396: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3316))),
                                                    string(">move || { v3394 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3398: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3394 }</th> };
                                let v3400: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3398);
                                let v3402: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3407: string = if false == (Dice_ui::method280(v365, 0_i32)) {
                                    string("")
                                } else {
                                    string("Logs")
                                };
                                let v3416: &str = &*v3407;
                                let v3449: std::string::String = String::from(v3416);
                                let v3475: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3449),
                                    );
                                let v3479: string = string("vec![v3475]");
                                let v3480: Vec<leptos::prelude::AnyView> = vec![v3475];
                                let v3482: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3480);
                                let v3484: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3482);
                                let v3486: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3402))),
                                                    string(">move || { v3484 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3488: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3484 }</th> };
                                let v3490: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3488);
                                let v3492: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3502: &str = &*string("Outcome Status");
                                let v3535: std::string::String = String::from(v3502);
                                let v3561: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3535),
                                    );
                                let v3565: string = string("vec![v3561]");
                                let v3566: Vec<leptos::prelude::AnyView> = vec![v3561];
                                let v3568: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3566);
                                let v3570: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3568);
                                let v3572: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3492))),
                                                    string(">move || { v3570 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3574: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3570 }</th> };
                                let v3576: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3574);
                                let v3578: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3588: &str = &*string("Hash");
                                let v3621: std::string::String = String::from(v3588);
                                let v3647: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3621),
                                    );
                                let v3651: string = string("vec![v3647]");
                                let v3652: Vec<leptos::prelude::AnyView> = vec![v3647];
                                let v3654: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3652);
                                let v3656: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3654);
                                let v3658: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3578))),
                                                    string(">move || { v3656 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3660: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3656 }</th> };
                                let v3662: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3660);
                                let v3664: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3674: &str = &*string("Block Hash");
                                let v3707: std::string::String = String::from(v3674);
                                let v3733: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3707),
                                    );
                                let v3737: string = string("vec![v3733]");
                                let v3738: Vec<leptos::prelude::AnyView> = vec![v3733];
                                let v3740: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3738);
                                let v3742: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3740);
                                let v3744: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3664))),
                                                    string(">move || { v3742 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3746: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3742 }</th> };
                                let v3748: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3746);
                                let v3750: string =
                                        string(" class=\"whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white\"");
                                let v3760: &str = &*string("Receipt ID");
                                let v3793: std::string::String = String::from(v3760);
                                let v3819: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(
                                        leptos::prelude::IntoView::into_view(v3793),
                                    );
                                let v3823: string = string("vec![v3819]");
                                let v3824: Vec<leptos::prelude::AnyView> = vec![v3819];
                                let v3826: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3824);
                                let v3828: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3826);
                                let v3830: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<th "), (v3750))),
                                                    string(">move || { v3828 }</"),
                                                )),
                                                string("th"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3832: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Th, _, _>,
                                > = leptos::prelude::view! { <th  class="whitespace-nowrap px-4 py-2 font-medium text-gray-900 dark:text-white">move || { v3828 }</th> };
                                let v3834: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3832);
                                let v3874: string =
                                        string("vec![v2798, v2884, v2970, v3056, v3142, v3228, v3314, v3400, v3490, v3576, v3662, v3748, v3834]");
                                let v3875: Vec<leptos::prelude::AnyView> = vec![
                                    v2798, v2884, v2970, v3056, v3142, v3228, v3314, v3400, v3490,
                                    v3576, v3662, v3748, v3834,
                                ];
                                let v3877: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3875);
                                let v3879: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3877);
                                let v3881: string = string(
                                    "leptos::prelude::view! { <tr >move || { v3879 }</tr> }",
                                );
                                let v3883: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tr, _, _>,
                                > = leptos::prelude::view! { <tr >move || { v3879 }</tr> };
                                let v3885: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3883);
                                let v3889: string = string("vec![v3885]");
                                let v3890: Vec<leptos::prelude::AnyView> = vec![v3885];
                                let v3892: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3890);
                                let v3894: string =
                                        string(" class=\"flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700\"");
                                let v3896: string =
                                    string(" class=\"ltr:text-left rtl:text-right\"");
                                let v3898: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3892);
                                let v3901: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<thead "), (v3896))),
                                                    string(">move || { v3898 }</"),
                                                )),
                                                string("thead"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3903: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Thead, _, _>,
                                > = leptos::prelude::view! { <thead  class="ltr:text-left rtl:text-right">move || { v3898 }</thead> };
                                let v3905: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3903);
                                let v3907: string = string(
                                    " class=\"divide-y divide-gray-200 dark:divide-gray-700\"",
                                );
                                let v3909: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v2708);
                                let v3912: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<tbody "), (v3907))),
                                                    string(">move || { v3909 }</"),
                                                )),
                                                string("tbody"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3914: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Tbody, _, _>,
                                > = leptos::prelude::view! { <tbody  class="divide-y divide-gray-200 dark:divide-gray-700">move || { v3909 }</tbody> };
                                let v3916: leptos::prelude::AnyView =
                                    leptos::prelude::IntoAny::into_any(v3914);
                                let v3923: string = string("vec![v3905, v3916]");
                                let v3924: Vec<leptos::prelude::AnyView> = vec![v3905, v3916];
                                let v3926: leptos::prelude::Fragment =
                                    leptos::prelude::Fragment::new(v3924);
                                let v3928: leptos::prelude::AnyView =
                                    leptos::prelude::AnyView::from(v3926);
                                let v3931: string = append(
                                    (append(
                                        string("leptos::prelude::view! { "),
                                        (append(
                                            (append(
                                                (append(
                                                    (append(string("<table "), (v3894))),
                                                    string(">move || { v3928 }</"),
                                                )),
                                                string("table"),
                                            )),
                                            string(">"),
                                        )),
                                    )),
                                    string(" }"),
                                );
                                let v3933: leptos::prelude::View<
                                    leptos::html::HtmlElement<leptos::html::Table, _, _>,
                                > = leptos::prelude::view! { <table  class="flex-1 min-w-full divide-y-2 divide-gray-200 text-sm dark:divide-gray-700">move || { v3928 }</table> };
                                leptos::prelude::IntoAny::into_any(v3933)
                            }
                        } else {
                            let v3939: string =
                                string(" class=\"grid place-content-center py-[10vh]\"");
                            let v3941: string =
                                string(" class=\"flex flex-1 [gap:4px] items-center\"");
                            let v3944 = {
                                let clo_61 = Func0::new(move || Dice_ui::closure191((), ()));
                                Func1::new({
                                    let clo_61 = clo_61.clone();
                                    move |arg_61: ()| clo_61()
                                })
                            };
                            let v3962: string =
                                    string(" class=move || \" \".to_owned() + &v3944(()) xml:space=\"preserve\" style=\"enable-background:new 0 0 50 50;\" viewBox=\"0 0 24 30\" y=\"0px\" x=\"0px\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"");
                            let v3974: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"0\"");
                            let v3986: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v3987: string = string("vec![]");
                            let v3988: Vec<leptos::prelude::AnyView> = vec![];
                            let v3990: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v3988);
                            let v3992: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v3990);
                            let v3995: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v3986))),
                                                string(">move || { v3992 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v3997: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v3992 }</animate> };
                            let v3999: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v3997);
                            let v4011: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v4012: string = string("vec![]");
                            let v4013: Vec<leptos::prelude::AnyView> = vec![];
                            let v4015: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4013);
                            let v4017: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4015);
                            let v4019: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4011))),
                                                string(">move || { v4017 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4021: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4017 }</animate> };
                            let v4023: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4021);
                            let v4035: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v4036: string = string("vec![]");
                            let v4037: Vec<leptos::prelude::AnyView> = vec![];
                            let v4039: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4037);
                            let v4041: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4039);
                            let v4043: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4035))),
                                                string(">move || { v4041 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4045: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4041 }</animate> };
                            let v4047: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4045);
                            let v4058: string = string("vec![v3999, v4023, v4047]");
                            let v4059: Vec<leptos::prelude::AnyView> = vec![v3999, v4023, v4047];
                            let v4061: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4059);
                            let v4063: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4061);
                            let v4066: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v3974))),
                                                string(">move || { v4063 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4068: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="0">move || { v4063 }</rect> };
                            let v4080: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"8\"");
                            let v4092: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v4093: string = string("vec![]");
                            let v4094: Vec<leptos::prelude::AnyView> = vec![];
                            let v4096: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4094);
                            let v4098: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4096);
                            let v4100: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4092))),
                                                string(">move || { v4098 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4102: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4098 }</animate> };
                            let v4104: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4102);
                            let v4116: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v4117: string = string("vec![]");
                            let v4118: Vec<leptos::prelude::AnyView> = vec![];
                            let v4120: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4118);
                            let v4122: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4120);
                            let v4124: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4116))),
                                                string(">move || { v4122 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4126: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 20; 10" attributeType="XML" attributeName="opacity">move || { v4122 }</animate> };
                            let v4128: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4126);
                            let v4140: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.15s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v4141: string = string("vec![]");
                            let v4142: Vec<leptos::prelude::AnyView> = vec![];
                            let v4144: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4142);
                            let v4146: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4144);
                            let v4148: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4140))),
                                                string(">move || { v4146 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4150: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.15s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4146 }</animate> };
                            let v4152: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4150);
                            let v4162: string = string("vec![v4104, v4128, v4152]");
                            let v4163: Vec<leptos::prelude::AnyView> = vec![v4104, v4128, v4152];
                            let v4165: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4163);
                            let v4167: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4165);
                            let v4169: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4080))),
                                                string(">move || { v4167 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4171: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="8">move || { v4167 }</rect> };
                            let v4183: string =
                                    string(" opacity=\"0.2\" fill=\"#333\" height=\"10\" width=\"4\" y=\"10\" x=\"16\"");
                            let v4195: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"0.2; 1; .2\" attributeType=\"XML\" attributeName=\"opacity\"");
                            let v4196: string = string("vec![]");
                            let v4197: Vec<leptos::prelude::AnyView> = vec![];
                            let v4199: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4197);
                            let v4201: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4199);
                            let v4203: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4195))),
                                                string(">move || { v4201 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4205: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="0.2; 1; .2" attributeType="XML" attributeName="opacity">move || { v4201 }</animate> };
                            let v4207: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4205);
                            let v4219: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 20; 10\" attributeType=\"XML\" attributeName=\"height\"");
                            let v4220: string = string("vec![]");
                            let v4221: Vec<leptos::prelude::AnyView> = vec![];
                            let v4223: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4221);
                            let v4225: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4223);
                            let v4227: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4219))),
                                                string(">move || { v4225 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4229: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 20; 10" attributeType="XML" attributeName="height">move || { v4225 }</animate> };
                            let v4231: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4229);
                            let v4243: string =
                                    string(" repeatCount=\"indefinite\" dur=\"0.6s\" begin=\"0.3s\" values=\"10; 5; 10\" attributeType=\"XML\" attributeName=\"y\"");
                            let v4244: string = string("vec![]");
                            let v4245: Vec<leptos::prelude::AnyView> = vec![];
                            let v4247: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4245);
                            let v4249: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4247);
                            let v4251: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<animate "), (v4243))),
                                                string(">move || { v4249 }</"),
                                            )),
                                            string("animate"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4253: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Animate, _, _>,
                            > = leptos::prelude::view! { <animate  repeatCount="indefinite" dur="0.6s" begin="0.3s" values="10; 5; 10" attributeType="XML" attributeName="y">move || { v4249 }</animate> };
                            let v4255: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4253);
                            let v4265: string = string("vec![v4207, v4231, v4255]");
                            let v4266: Vec<leptos::prelude::AnyView> = vec![v4207, v4231, v4255];
                            let v4268: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4266);
                            let v4270: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4268);
                            let v4272: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<rect "), (v4183))),
                                                string(">move || { v4270 }</"),
                                            )),
                                            string("rect"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4274: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                            > = leptos::prelude::view! { <rect  opacity="0.2" fill="#333" height="10" width="4" y="10" x="16">move || { v4270 }</rect> };
                            let v4276: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4274);
                            let v4278: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4171);
                            let v4280: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4068);
                            let v4290: string = string("vec![v4280, v4278, v4276]");
                            let v4291: Vec<leptos::prelude::AnyView> = vec![v4280, v4278, v4276];
                            let v4293: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4291);
                            let v4295: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4293);
                            let v4298: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v3962))),
                                                string(">move || { v4295 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4300: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3944(()) xml:space="preserve" style="enable-background:new 0 0 50 50;" viewBox="0 0 24 30" y="0px" x="0px" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" version="1.1">move || { v4295 }</svg> };
                            let v4302: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4300);
                            let v4312: &str = &*string("Loading...");
                            let v4345: std::string::String = String::from(v4312);
                            let v4371: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4345),
                                );
                            let v4378: string = string("vec![v4302, v4371]");
                            let v4379: Vec<leptos::prelude::AnyView> = vec![v4302, v4371];
                            let v4381: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4379);
                            let v4383: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4381);
                            let v4386: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3941))),
                                                string(">move || { v4383 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4388: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [gap:4px] items-center">move || { v4383 }</div> };
                            let v4390: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4388);
                            let v4394: string = string("vec![v4390]");
                            let v4395: Vec<leptos::prelude::AnyView> = vec![v4390];
                            let v4397: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4395);
                            let v4399: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4397);
                            let v4401: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v3939))),
                                                string(">move || { v4399 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4403: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="grid place-content-center py-[10vh]">move || { v4399 }</div> };
                            leptos::prelude::IntoAny::into_any(v4403)
                        }
                    }
                    Dice_ui::US46::US46_1(v363_1_0) => {
                        let v4409: string =
                            fable_library_rust::String_::fromString(v363_1_0.clone());
                        let v4412: string =
                            string(" class=\"flex flex-1 items-center [gap:4px] [padding:5px]\"");
                        let v4414: string = string(" class=\"[height:17px]\"");
                        let v4428: string =
                                string(" class=\"text-red-700\" stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v4434: string =
                                string(" d=\"M6 18L18 6M6 6l12 12\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v4435: string = string("vec![]");
                        let v4436: Vec<leptos::prelude::AnyView> = vec![];
                        let v4438: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4436);
                        let v4440: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4438);
                        let v4443: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4434))),
                                            string(">move || { v4440 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4445: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M6 18L18 6M6 6l12 12" stroke-linejoin="round" stroke-linecap="round">move || { v4440 }</path> };
                        let v4447: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4445);
                        let v4451: string = string("vec![v4447]");
                        let v4452: Vec<leptos::prelude::AnyView> = vec![v4447];
                        let v4454: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4452);
                        let v4456: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4454);
                        let v4459: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4428))),
                                            string(">move || { v4456 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4461: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class="text-red-700" stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4456 }</svg> };
                        let v4463: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4461);
                        let v4467: string = string("vec![v4463]");
                        let v4468: Vec<leptos::prelude::AnyView> = vec![v4463];
                        let v4470: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4468);
                        let v4472: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4470);
                        let v4475: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4414))),
                                            string(">move || { v4472 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4477: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[height:17px]">move || { v4472 }</span> };
                        let v4479: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4477);
                        let v4481: string = string(" class=\"[overflow-y:auto] [text-wrap:wrap]\"");
                        let v4490: &str = &*v4409;
                        let v4523: std::string::String = String::from(v4490);
                        let v4549: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v4523),
                        );
                        let v4553: string = string("vec![v4549]");
                        let v4554: Vec<leptos::prelude::AnyView> = vec![v4549];
                        let v4556: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4554);
                        let v4558: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4556);
                        let v4561: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<pre "), (v4481))),
                                            string(">move || { v4558 }</"),
                                        )),
                                        string("pre"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4563: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Pre, _, _>,
                        > = leptos::prelude::view! { <pre  class="[overflow-y:auto] [text-wrap:wrap]">move || { v4558 }</pre> };
                        let v4565: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4563);
                        let v4573: string = string("vec![v4479, v4565]");
                        let v4574: Vec<leptos::prelude::AnyView> = vec![v4479, v4565];
                        let v4576: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4574);
                        let v4578: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4576);
                        let v4581: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4412))),
                                            string(">move || { v4578 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4583: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 items-center [gap:4px] [padding:5px]">move || { v4578 }</div> };
                        leptos::prelude::IntoAny::into_any(v4583)
                    }
                }
            };
            let v4597: string = string("vec![v144, v4588]");
            let v4598: Vec<leptos::prelude::AnyView> = vec![v144, v4588];
            leptos::prelude::Fragment::new(v4598)
        }
        pub fn closure337(unitVar: (), unitVar_1: ()) -> string {
            string("py-[7px]")
        }
        pub fn closure338(unitVar: (), unitVar_1: ()) -> &'static str {
            let v1: string = string("r#\"\"#");
            r#""#
        }
        pub fn closure339(unitVar: (), unitVar_1: ()) -> string {
            string("Debug")
        }
        pub fn method282() -> Func0<string> {
            Func0::new(move || Dice_ui::closure339((), ()))
        }
        pub fn closure341(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v9: &str = &*string("Transactions");
            let v42: std::string::String = String::from(v9);
            let v68: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v42));
            let v73: string = string("vec![v68]");
            let v74: Vec<leptos::prelude::AnyView> = vec![v68];
            leptos::prelude::Fragment::new(v74)
        }
        pub fn method283() -> Func0<leptos::prelude::Fragment> {
            Func0::new(move || Dice_ui::closure341((), ()))
        }
        pub fn closure343(unitVar: (), unitVar_1: ()) -> string {
            string("[max-height:70vh]")
        }
        pub fn closure342(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v2: Result<
                Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                std::string::String,
            > = leptos::prelude::ArcMemo::get(&v0_1);
            let v13: std::string::String = format!("{:#?}", v2);
            let v15: string = fable_library_rust::String_::fromString(v13);
            let v44 = {
                let clo = Func0::new(move || Dice_ui::closure343((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v45: string =
                string("class=move || \"[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] \".to_owned() + &v44(())");
            let v47: string = append(
                (append((append(string(" "), (v45))), string(""))),
                string(""),
            );
            let v56: &str = &*v15;
            let v89: std::string::String = String::from(v56);
            let v115: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v89));
            let v119: string = string("vec![v115]");
            let v120: Vec<leptos::prelude::AnyView> = vec![v115];
            let v122: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v120);
            let v124: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v122);
            let v127: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<pre "), (v47))),
                                string(">move || { v124 }</"),
                            )),
                            string("pre"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v129: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Pre, _, _>> = leptos::prelude::view! { <pre  class=move || "[padding:1px] [font-size:12px] [line-height:12px] [text-wrap:pretty] ".to_owned() + &v44(())>move || { v124 }</pre> };
            let v131: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v129);
            let v135: string = string("vec![v131]");
            let v136: Vec<leptos::prelude::AnyView> = vec![v131];
            leptos::prelude::Fragment::new(v136)
        }
        pub fn method284(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
        ) -> Func0<leptos::prelude::Fragment> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure342(v0_1.clone(), ())
            })
        }
        pub fn closure340(
            v0_1: leptos::prelude::ArcMemo<
                Result<Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>, std::string::String>,
            >,
            unitVar: (),
        ) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method283();
            let v2 = Dice_ui::method284(v0_1);
            let v5 = {
                let clo = Func0::new(move || Dice_ui::closure253((), ()));
                Func1::new({
                    let clo = clo.clone();
                    move |arg: ()| clo()
                })
            };
            let v8 = {
                let clo_1 = Func0::new(move || Dice_ui::closure234((), ()));
                Func1::new({
                    let clo_1 = clo_1.clone();
                    move |arg_1: ()| clo_1()
                })
            };
            let v11 = {
                let clo_2 = Func0::new(move || Dice_ui::closure235((), ()));
                Func1::new({
                    let clo_2 = clo_2.clone();
                    move |arg_2: ()| clo_2()
                })
            };
            let v12: string =
                string("class=move || \"grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] \".to_owned() + &v11(()) + \" \" + &v8(()) + \" \" + &v5(())");
            let v14: string = append(
                (append((append(string(" "), (v12))), string(""))),
                string(""),
            );
            let v17 = {
                let clo_3 = Func0::new(move || Dice_ui::closure236((), ()));
                Func1::new({
                    let clo_3 = clo_3.clone();
                    move |arg_3: ()| clo_3()
                })
            };
            let v19: string = string(" class=\"[font-size:12px] text-gray-400\"");
            let v20: leptos::prelude::Fragment = v1();
            let v22: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v20);
            let v25: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dt "), (v19))),
                                string(">move || { v22 }</"),
                            )),
                            string("dt"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v27: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dt, _, _>> = leptos::prelude::view! { <dt  class="[font-size:12px] text-gray-400">move || { v22 }</dt> };
            let v29: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v27);
            let v31: string =
                string(" class=move || \"text-gray-700 sm:col-span-2 flex flex-1 \".to_owned () + &v17(())");
            let v32: leptos::prelude::Fragment = v2();
            let v34: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v32);
            let v37: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dd "), (v31))),
                                string(">move || { v34 }</"),
                            )),
                            string("dd"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v39: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dd, _, _>> = leptos::prelude::view! { <dd  class=move || "text-gray-700 sm:col-span-2 flex flex-1 ".to_owned () + &v17(())>move || { v34 }</dd> };
            let v41: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v39);
            let v49: string = string("vec![v29, v41]");
            let v50: Vec<leptos::prelude::AnyView> = vec![v29, v41];
            let v52: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v50);
            let v54: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v52);
            let v57: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<dl "), (v14))),
                                string(">move || { v54 }</"),
                            )),
                            string("dl"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v59: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Dl, _, _>> = leptos::prelude::view! { <dl  class=move || "grid gap-[1px] flex-1 even:bg-gray-50 [inline-size:max-content] [width:100%] [grid-auto-columns:max-content] ".to_owned() + &v11(()) + " " + &v8(()) + " " + &v5(())>move || { v54 }</dl> };
            let v61: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v59);
            let v65: string = string("vec![v61]");
            let v66: Vec<leptos::prelude::AnyView> = vec![v61];
            leptos::prelude::Fragment::new(v66)
        }
        pub fn closure344(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method285(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure344(v0_1.clone(), ())
            })
        }
        pub fn closure345(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method286(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure345(v0_1.clone(), ())
            })
        }
        pub fn closure346(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method287(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure346(v0_1.clone(), ())
            })
        }
        pub fn closure347(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn method288(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>) -> Func0<bool> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure347(v0_1.clone(), ())
            })
        }
        pub fn closure348(unitVar: (), unitVar_1: ()) -> string {
            string("h-5 w-5")
        }
        pub fn closure349(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("settings"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure350(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure351(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_4 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure352(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("transactions"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure353(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure354(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_3 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure355(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("lists"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure356(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure357(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_2 = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v5: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v8: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure358(
            v0_1: leptos::prelude::ArcMemo<string>,
            unitVar: (),
        ) -> std::string::String {
            let v4: string = append(
                (append(
                    (append((leptos::prelude::ArcMemo::get(&v0_1)), string("#/"))),
                    string("dice"),
                )),
                string(""),
            );
            let v13: &str = &*v4;
            String::from(v13)
        }
        pub fn closure359(v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>, unitVar: ()) -> bool {
            if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            }
        }
        pub fn closure360(
            v0_1: leptos::prelude::ReadSignal<Dice_ui::US18>,
            unitVar: (),
        ) -> &'static str {
            if if let Dice_ui::US18::US18_1(_) = &leptos::prelude::ReadSignal::get(&v0_1) {
                true
            } else {
                false
            } {
                let v7: string = string("r#\"border-grey-200 text-grey-900\"#");
                r#"border-grey-200 text-grey-900"#
            } else {
                let v10: string =
                    string("r#\"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700\"#");
                r#"border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700"#
            }
        }
        pub fn closure5(
            unitVar: (),
            v0_1: i32,
        ) -> leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> {
            let v1: string = append(
                (append(string("home.render () / router: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let v5: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v7: LrcPtr<Dice_ui::Heap2> = v5.unwrap();
            let v10: bool = true;
            leptos::logging::log!("{}", string("state_core.use_database (1)"));
            let v13: bool = true;
            let _func0_from_v11 = Func0::from(move || {
                //;
                let v15: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v17: bool = */
                    async move {
                        /*;
                        let v19: bool = */
                        ();
                        let v22: bool = true;
                        leptos::logging::log!(
                            "{}",
                            string("state_core.use_database (2) / database new_local_resource")
                        );
                        let v25: bool = true;
                        leptos::logging::log!("{}", string("state_core.build_database ()"));
                        let v27: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v29: bool = */
                            async {
                                /*;
                                let v31: bool = */
                                ();
                                let v32: string =
                string("Box::pin(rexie::Rexie::builder(\"database\").version(1).add_object_store(rexie::ObjectStore::new(\"store\")).build())");
                                let v33: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<rexie::Rexie, rexie::Error>,
                                        >,
                                    >,
                                > = Box::pin(
                                    rexie::Rexie::builder("database")
                                        .version(1)
                                        .add_object_store(rexie::ObjectStore::new("store"))
                                        .build(),
                                );
                                let v35: Result<rexie::Rexie, rexie::Error> = v33.await;
                                let v36 = Dice_ui::method6();
                                let v42: Result<rexie::Rexie, std::string::String> =
                                    v35.map_err(|x| v36(x));
                                let v54: string = string("}");
                                let v61: bool = true;
                                let _fix_closure_v56 = v42;
                                let v66: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v56 "), (v54))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v67: bool = true;
                                _fix_closure_v56
                            },
                        ); // rust.fix_closure';
                        let v69 = __future_init;
                        let v71: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<rexie::Rexie, std::string::String>,
                                >,
                            >,
                        > = v69;
                        let v73: Result<rexie::Rexie, std::string::String> = v71.await;
                        let v79: rexie::Rexie = v73.unwrap();
                        let v90: rexie::Rexie = (Dice_ui::method7())(v79);
                        let v92: std::sync::Arc<rexie::Rexie> = std::sync::Arc::new(v90);
                        let v99: string =
                Dice_ui::method8(200_i64,
                                 append((append(string("state_core.use_database (3) / database new_local_resource / result: "),
                                                sprintf!("{:?}",
                                                         v92.clone()))),
                                        string("")));
                        let v101: bool = true;
                        leptos::logging::log!("{}", v99);
                        let v102: string = string("}");
                        let v109: bool = true;
                        let _fix_closure_v104 = v92;
                        let v114: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v104 "), (v102))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v115: bool = true;
                        _fix_closure_v104
                    },
                ); // rust.fix_closure';
                let v117 = __future_init;
                let v119: std::pin::Pin<
                    Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>,
                > = v117;
                let v121: bool = true;
                v119 /*;
                     let v123: bool = */
            }); //;
            let v125: Func0<
                std::pin::Pin<Box<dyn std::future::Future<Output = std::sync::Arc<rexie::Rexie>>>>,
            > = _func0_from_v11;
            let v127: leptos::prelude::ArcLocalResource<std::sync::Arc<rexie::Rexie>> =
                leptos::prelude::ArcLocalResource::new(|| async move { v125().await });
            let v130: bool = true;
            leptos::logging::log!("{}", string("state_core.use_core_database (1)"));
            let v133: bool = true;
            let _func0_from_v131 = Func0::from(move || {
                //;
                let v135: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v127.clone()), |x| {
                        x.clone()
                    });
                let v137: bool = true;
                let _optionm_map_ = v135.map(|x| {
                    //;
                    let v139: std::sync::Arc<rexie::Rexie> = x;
                    let v142: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> =
                        PartialEqWrapper(v139);
                    let v144: bool = true;
                    v142
                });
                let v146: Option<PartialEqWrapper<std::sync::Arc<rexie::Rexie>>> = _optionm_map_;
                let v148: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v150: bool = */
                    async move {
                        /*;
                        let v152: bool = */
                        ();
                        let v157: string =
                append((append(string("state_core.use_core_database (2) / core_state_heap new_local_resource / database: "),
                               sprintf!("{:?}", v146.clone()))), string(""));
                        let v159: bool = true;
                        leptos::logging::log!("{}", v157);
                        let v161: bool = true;
                        let _optionm_map_ = v146.map(|x| {
                            //;
                            let v163: PartialEqWrapper<std::sync::Arc<rexie::Rexie>> = x;
                            let v165: std::sync::Arc<rexie::Rexie> = v163.0;
                            let v167: bool = true;
                            v165
                        });
                        let v169: Option<std::sync::Arc<rexie::Rexie>> = _optionm_map_;
                        let v188: Dice_ui::US2 =
                            defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v169));
                        let v618: Dice_ui::US3 = match &v188 {
                            Dice_ui::US2::US2_0(v188_0_0) => {
                                let v194: string =
                                    string("state_core.get_data () / id: core-state-heap");
                                let v196: bool = true;
                                leptos::logging::log!("{}", v194);
                                let v198: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v200: bool = */
                                    async {
                                        /*;
                                        let v202: bool = */
                                        ();
                                        let v204: Array<string> = new_array(&[string("store")]);
                                        let v206: Vec<string> = v204.to_vec();
                                        let v209: bool = true;
                                        let _func1_from_v207 = Func1::from(move |value| {
                                            //;
                                            let v211: string = value;
                                            let v220: &str = &*v211;
                                            let v253: std::string::String = String::from(v220);
                                            let v280: bool = true;
                                            v253 /*;
                                                 let v282: bool = */
                                        }); //;
                                        let v284: Func1<string, std::string::String> =
                                            _func1_from_v207;
                                        let v287: Vec<std::string::String> = v206
                                            .into_iter()
                                            .map(|x| {
                                                Func1::new({
                                                    let v284 = v284.clone();
                                                    move |v: string| {
                                                        Dice_ui::closure10(v284.clone(), v)
                                                    }
                                                })(
                                                    x.clone()
                                                )
                                            })
                                            .collect::<Vec<_>>();
                                        let v288: std::sync::Arc<rexie::Rexie> = Dice_ui::method11(
                                            match &v188 {
                                                Dice_ui::US2::US2_0(x) => x.clone(),
                                                _ => unreachable!(),
                                            }
                                            .clone(),
                                        );
                                        let v290: Result<rexie::Transaction, rexie::Error> = v288
                                            .transaction(&v287, rexie::TransactionMode::ReadOnly);
                                        let v291 = Dice_ui::method12();
                                        let v297: Result<rexie::Transaction, std::string::String> =
                                            v290.map_err(|x| v291(x));
                                        let v308: rexie::Transaction = v297?;
                                        let v309: string = Dice_ui::method13();
                                        let v318: &str = &*v309;
                                        let v344: Result<rexie::Store, rexie::Error> =
                                            v308.store(v318);
                                        let v345 = Dice_ui::method14();
                                        let v351: Result<rexie::Store, std::string::String> =
                                            v344.map_err(|x| v345(x));
                                        let v362: rexie::Store = v351?;
                                        let v363: string = Dice_ui::method15();
                                        let v372: &str = &*v363;
                                        let v398: wasm_bindgen::JsValue =
                                            wasm_bindgen::JsValue::from_str(v372);
                                        let v400: std::pin::Pin<
                                            Box<
                                                dyn std::future::Future<
                                                    Output = Result<
                                                        Option<wasm_bindgen::JsValue>,
                                                        rexie::Error,
                                                    >,
                                                >,
                                            >,
                                        > = Box::pin(rexie::Store::get(&v362, v398));
                                        let v402: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            rexie::Error,
                                        > = v400.await;
                                        let v403 = Dice_ui::method16();
                                        let v409: Result<
                                            Option<wasm_bindgen::JsValue>,
                                            std::string::String,
                                        > = v402.map_err(|x| v403(x));
                                        let v420: Option<wasm_bindgen::JsValue> = v409?;
                                        let v439: Dice_ui::US4 = defaultValue(
                                            Dice_ui::US4::US4_1,
                                            map(Dice_ui::method17(), v420),
                                        );
                                        let v547: Dice_ui::US3 = match &v439 {
                                            Dice_ui::US4::US4_0(v439_0_0) => {
                                                let v444: wasm_bindgen::JsValue = Dice_ui::method18(
                                                    match &v439 {
                                                        Dice_ui::US4::US4_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                );
                                                let v446: Result<
                                                    Option<serde_json::Value>,
                                                    serde_wasm_bindgen::Error,
                                                > = serde_wasm_bindgen::from_value(v444);
                                                let v447 = Dice_ui::method19();
                                                let v453: Result<
                                                    Option<serde_json::Value>,
                                                    std::string::String,
                                                > = v446.map_err(|x| v447(x));
                                                let v464: Option<serde_json::Value> = v453?;
                                                let v483: Dice_ui::US5 = defaultValue(
                                                    Dice_ui::US5::US5_1,
                                                    map(Dice_ui::method20(), v464),
                                                );
                                                match &v483 {
                                                    Dice_ui::US5::US5_0(v483_0_0) => {
                                                        let v488: serde_json::Value =
                                                            Dice_ui::method21(
                                                                match &v483 {
                                                                    Dice_ui::US5::US5_0(x) => {
                                                                        x.clone()
                                                                    }
                                                                    _ => unreachable!(),
                                                                }
                                                                .clone(),
                                                            );
                                                        let v490: Result<
                                                            Vec<u8>,
                                                            serde_json::Error,
                                                        > = serde_json::from_value(v488);
                                                        let v491 = Dice_ui::method22();
                                                        let v497: Result<
                                                            Vec<u8>,
                                                            std::string::String,
                                                        > = v490.map_err(|x| v491(x));
                                                        let v508: Vec<u8> = v497?;
                                                        let v510: Array<u8> =
                                                fable_library_rust::NativeArray_::array_from(v508.clone());
                                                        let v512: string =
                                                append((append(string("state_core.get_data () / data_len: "),
                                                               (toString(get_Count(v510.clone()))))),
                                                       string(""));
                                                        let v514: bool = true;
                                                        leptos::logging::log!("{}", v512);
                                                        let v516: Vec<u8> = v510.to_vec();
                                                        let v518: &[u8] = v516.as_slice();
                                                        let v520: bool = true;
                                                        let mut v518 = v518;
                                                        let v522: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            borsh::io::Error,
                                                        > = borsh::BorshDeserialize::deserialize(
                                                            &mut v518,
                                                        );
                                                        let v523 = Dice_ui::method23();
                                                        let v529: Result<
                                                            Option<LrcPtr<Dice_ui::Heap3>>,
                                                            std::string::String,
                                                        > = v522.map_err(|x| v523(x));
                                                        Dice_ui::US3::US3_0(v529?)
                                                    }
                                                    _ => Dice_ui::US3::US3_1,
                                                }
                                            }
                                            _ => Dice_ui::US3::US3_1,
                                        };
                                        let v555: Option<Option<LrcPtr<Dice_ui::Heap3>>> =
                                            match &v547 {
                                                Dice_ui::US3::US3_0(v547_0_0) => Some(
                                                    match &v547 {
                                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                                        _ => unreachable!(),
                                                    }
                                                    .clone(),
                                                ),
                                                _ => None::<Option<LrcPtr<Dice_ui::Heap3>>>,
                                            };
                                        let v560: string = string("}");
                                        let v567: bool = true;
                                        let _fix_closure_v562 =
                                            Ok::<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >(v555);
                                        let v572: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v562 "),
                                                        (v560),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v573: bool = true;
                                        _fix_closure_v562
                                    },
                                ); // rust.fix_closure';
                                let v575 = __future_init;
                                let v577: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                                std::string::String,
                                            >,
                                        >,
                                    >,
                                > = v575;
                                let v579: Result<
                                    Option<Option<LrcPtr<Dice_ui::Heap3>>>,
                                    std::string::String,
                                > = v577.await;
                                let v580 = Dice_ui::method24();
                                let v581 = Dice_ui::method25();
                                let v583: Dice_ui::US6 = match &v579 {
                                    Err(v579_1_0) => v581(v579_1_0.clone()),
                                    Ok(v579_0_0) => v580(v579_0_0.clone()),
                                };
                                match &v583 {
                                    Dice_ui::US6::US6_0(v583_0_0) => defaultValue(
                                        Dice_ui::US3::US3_1,
                                        map(Dice_ui::method26(), v583_0_0.clone()),
                                    ),
                                    Dice_ui::US6::US6_1(v583_1_0) => {
                                        let v610: string = append(
                                            (append(
                                                string(
                                                    "state_core.use_core_database (3) / error: ",
                                                ),
                                                (toString(v583_1_0.clone())),
                                            )),
                                            string(""),
                                        );
                                        let v612: bool = true;
                                        leptos::logging::log!("{}", v610);
                                        Dice_ui::US3::US3_1
                                    }
                                }
                            }
                            _ => Dice_ui::US3::US3_1,
                        };
                        let v645: Dice_ui::US7 = match &v618 {
                            Dice_ui::US3::US3_0(v618_0_0) => Dice_ui::US7::US7_0(defaultValue(
                                Dice_ui::US8::US8_1,
                                map(
                                    Dice_ui::method27(),
                                    match &v618 {
                                        Dice_ui::US3::US3_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                            )),
                            _ => Dice_ui::US7::US7_1,
                        };
                        let v652: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v645_0_0) = &v645 {
                            let v646: Dice_ui::US8 = v645_0_0.clone();
                            if let Dice_ui::US8::US8_0(v646_0_0) = &v646 {
                                Dice_ui::US8::US8_0(v646_0_0.clone())
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        } else {
                            Dice_ui::US8::US8_1
                        };
                        let v653: string = string("}");
                        let v660: bool = true;
                        let _fix_closure_v655 = v652;
                        let v665: string = append(
                            (append(
                                (append(
                                    (append(string("true; _fix_closure_v655 "), (v653))),
                                    string("); "),
                                )),
                                string(""),
                            )),
                            string(" // rust.fix_closure\'"),
                        );
                        let v666: bool = true;
                        _fix_closure_v655
                    },
                ); // rust.fix_closure';
                let v668 = __future_init;
                let v670: std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>> = v668;
                let v672: bool = true;
                v670 /*;
                     let v674: bool = */
            }); //;
            let v676: Func0<std::pin::Pin<Box<dyn std::future::Future<Output = Dice_ui::US8>>>> =
                _func0_from_v131;
            let v678: leptos::prelude::ArcLocalResource<Dice_ui::US8> =
                leptos::prelude::ArcLocalResource::new(|| async move { v676().await });
            let v681: bool = true;
            let _func0_from_v679 = Func0::from(move || {
                //;
                let v684: bool = true;
                leptos::logging::log!(
                    "{}",
                    string("state_core.use_core_database (4) / effect core_state_heap / ##1")
                );
                let v686: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                    Dice_ui::method29(Dice_ui::method28());
                let v687 = Dice_ui::method30();
                let v688 = Dice_ui::method31();
                let v690: Dice_ui::US9 = match &v686 {
                    Err(v686_1_0) => v688(v686_1_0.clone()),
                    Ok(v686_0_0) => v687(v686_0_0.clone()),
                };
                let v720: Dice_ui::US10 = match &v690 {
                    Dice_ui::US9::US9_0(v690_0_0) => Dice_ui::US10::US10_0(defaultValue(
                        Dice_ui::US11::US11_1,
                        map(Dice_ui::method32(), v690_0_0.clone()),
                    )),
                    Dice_ui::US9::US9_1(v690_1_0) => Dice_ui::US10::US10_1(v690_1_0.clone()),
                };
                let v1287: bool = if let Dice_ui::US10::US10_0(v720_0_0) = &v720 {
                    let v721: Dice_ui::US11 = v720_0_0.clone();
                    if let Dice_ui::US11::US11_0(v721_0_0) = &v721 {
                        let v722: web_sys::Storage = v721_0_0.clone();
                        let v724: Option<Dice_ui::US8> =
                            Option::map(leptos::prelude::ArcLocalResource::get(&v678), |x| {
                                x.clone()
                            });
                        let v743: Dice_ui::US7 =
                            defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v724));
                        let v751: string =
                            append((append(string("state_core.use_core_database (5) / effect core_state_heap / ##2 / core_state_heap: "),
                                           sprintf!("{:?}", v743.clone()))),
                                   string(""));
                        let v753: bool = true;
                        leptos::logging::log!("{}", v751);
                        let v1216: Dice_ui::US8 = if let Dice_ui::US7::US7_0(v743_0_0) = &v743 {
                            let v754: Dice_ui::US8 = v743_0_0.clone();
                            if let Dice_ui::US8::US8_0(v754_0_0) = &v754 {
                                Dice_ui::US8::US8_0(v754_0_0.clone())
                            } else {
                                let v757: web_sys::Storage = Dice_ui::method34(v722.clone());
                                let v758: string = Dice_ui::method35();
                                let v767: &str = &*v758;
                                let v793: Result<
                                    Option<std::string::String>,
                                    wasm_bindgen::JsValue,
                                > = web_sys::Storage::get_item(&v757, v767);
                                let v794 = Dice_ui::method36();
                                let v795 = Dice_ui::method37();
                                let v797: Dice_ui::US12 = match &v793 {
                                    Err(v793_1_0) => v795(v793_1_0.clone()),
                                    Ok(v793_0_0) => v794(v793_0_0.clone()),
                                };
                                let v830: Dice_ui::US13 = match &v797 {
                                    Dice_ui::US12::US12_0(v797_0_0) => {
                                        let v801: Option<std::string::String> =
                                            Dice_ui::method38(v797_0_0.clone());
                                        let v803: Option<std::string::String> =
                                            serde_json::from_value(v801.into()).unwrap();
                                        Dice_ui::US13::US13_0(defaultValue(
                                            Dice_ui::US14::US14_1,
                                            map(Dice_ui::method39(), v803),
                                        ))
                                    }
                                    Dice_ui::US12::US12_1(v797_1_0) => {
                                        Dice_ui::US13::US13_1(v797_1_0.clone())
                                    }
                                };
                                let v836: Dice_ui::US15 = match &v830 {
                                    Dice_ui::US13::US13_0(v830_0_0) => {
                                        Dice_ui::US15::US15_0(v830_0_0.clone())
                                    }
                                    _ => Dice_ui::US15::US15_1,
                                };
                                let v843: Dice_ui::US14 =
                                    if let Dice_ui::US15::US15_0(v836_0_0) = &v836 {
                                        let v837: Dice_ui::US14 = v836_0_0.clone();
                                        if let Dice_ui::US14::US14_0(v837_0_0) = &v837 {
                                            Dice_ui::US14::US14_0(v837_0_0.clone())
                                        } else {
                                            Dice_ui::US14::US14_1
                                        }
                                    } else {
                                        Dice_ui::US14::US14_1
                                    };
                                let v851: Option<std::string::String> = match &v843 {
                                    Dice_ui::US14::US14_0(v843_0_0) => Some(
                                        match &v843 {
                                            Dice_ui::US14::US14_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone(),
                                    ),
                                    _ => None::<std::string::String>,
                                };
                                let v855: Option<Dice_ui::US8> = map(Dice_ui::method40(), v851);
                                let v975: Dice_ui::US7 = defaultValue(
                                    Dice_ui::US7::US7_1,
                                    map(Dice_ui::method33(), v855),
                                );
                                if let Dice_ui::US7::US7_0(v975_0_0) = &v975 {
                                    let v979: Dice_ui::US8 = v975_0_0.clone();
                                    if let Dice_ui::US8::US8_0(v979_0_0) = &v979 {
                                        Dice_ui::US8::US8_0(v979_0_0.clone())
                                    } else {
                                        Dice_ui::US8::US8_1
                                    }
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            }
                        } else {
                            let v987: web_sys::Storage = Dice_ui::method34(v722);
                            let v988: string = Dice_ui::method35();
                            let v997: &str = &*v988;
                            let v1023: Result<Option<std::string::String>, wasm_bindgen::JsValue> =
                                web_sys::Storage::get_item(&v987, v997);
                            let v1024 = Dice_ui::method36();
                            let v1025 = Dice_ui::method37();
                            let v1027: Dice_ui::US12 = match &v1023 {
                                Err(v1023_1_0) => v1025(v1023_1_0.clone()),
                                Ok(v1023_0_0) => v1024(v1023_0_0.clone()),
                            };
                            let v1060: Dice_ui::US13 = match &v1027 {
                                Dice_ui::US12::US12_0(v1027_0_0) => {
                                    let v1031: Option<std::string::String> =
                                        Dice_ui::method38(v1027_0_0.clone());
                                    let v1033: Option<std::string::String> =
                                        serde_json::from_value(v1031.into()).unwrap();
                                    Dice_ui::US13::US13_0(defaultValue(
                                        Dice_ui::US14::US14_1,
                                        map(Dice_ui::method39(), v1033),
                                    ))
                                }
                                Dice_ui::US12::US12_1(v1027_1_0) => {
                                    Dice_ui::US13::US13_1(v1027_1_0.clone())
                                }
                            };
                            let v1066: Dice_ui::US15 = match &v1060 {
                                Dice_ui::US13::US13_0(v1060_0_0) => {
                                    Dice_ui::US15::US15_0(v1060_0_0.clone())
                                }
                                _ => Dice_ui::US15::US15_1,
                            };
                            let v1073: Dice_ui::US14 =
                                if let Dice_ui::US15::US15_0(v1066_0_0) = &v1066 {
                                    let v1067: Dice_ui::US14 = v1066_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v1067_0_0) = &v1067 {
                                        Dice_ui::US14::US14_0(v1067_0_0.clone())
                                    } else {
                                        Dice_ui::US14::US14_1
                                    }
                                } else {
                                    Dice_ui::US14::US14_1
                                };
                            let v1081: Option<std::string::String> = match &v1073 {
                                Dice_ui::US14::US14_0(v1073_0_0) => Some(
                                    match &v1073 {
                                        Dice_ui::US14::US14_0(x) => x.clone(),
                                        _ => unreachable!(),
                                    }
                                    .clone(),
                                ),
                                _ => None::<std::string::String>,
                            };
                            let v1085: Option<Dice_ui::US8> = map(Dice_ui::method40(), v1081);
                            let v1205: Dice_ui::US7 =
                                defaultValue(Dice_ui::US7::US7_1, map(Dice_ui::method33(), v1085));
                            if let Dice_ui::US7::US7_0(v1205_0_0) = &v1205 {
                                let v1209: Dice_ui::US8 = v1205_0_0.clone();
                                if let Dice_ui::US8::US8_0(v1209_0_0) = &v1209 {
                                    Dice_ui::US8::US8_0(v1209_0_0.clone())
                                } else {
                                    Dice_ui::US8::US8_1
                                }
                            } else {
                                Dice_ui::US8::US8_1
                            }
                        };
                        let v1221: string =
                            append((append(string("state_core.use_core_database (6) / effect core_state_heap / ##3 / core_state_heap: "),
                                           sprintf!("{:?}", v1216.clone()))),
                                   string(""));
                        let v1223: bool = true;
                        leptos::logging::log!("{}", v1221);
                        if let Dice_ui::US8::US8_0(v1216_0_0) = &v1216 {
                            let v1224: LrcPtr<Dice_ui::Heap3> = v1216_0_0.clone();
                            let v1227: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1229: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1227);
                            let v1232: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1229.l0.clone(),
                                |x: &mut /*;
                                 let v1234: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1239: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1224 = v1224.clone();
                                        move |v_1: bool| Dice_ui::closure32(v1224.clone(), v_1)
                                    })(x.clone())
                                },
                            ); //;
                            let v1242: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1244: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1242);
                            let v1247: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1244.l1.clone(),
                                |x: &mut /*;
                                 let v1249: */
                                 bool /* = fable_library_rust::Native_::getZero();
                                      let v1254: bool =
                                          */| {
                                    *x = Func1::new({
                                        let v1224 = v1224.clone();
                                        move |v_2: bool| Dice_ui::closure33(v1224.clone(), v_2)
                                    })(x.clone())
                                },
                            ); //;
                            let v1257: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1259: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1257);
                            let v1262: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1259.l2.clone(),
                                |x: &mut /*;
                                 let v1264: */
                                 std::string::String /* =
                                                         fable_library_rust::Native_::getZero::<()>();
                                                     let v1269: bool =
                                                         */| {
                                    *x = Func1::new({
                                        let v1224 = v1224.clone();
                                        move |v_3: std::string::String| {
                                            Dice_ui::closure34(v1224.clone(), v_3)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            let v1272: std::pin::Pin<
                                Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                            > = Box::pin(v7.l0.clone());
                            let v1274: LrcPtr<Dice_ui::Heap1> =
                                leptos::prelude::ArcRwSignal::get_untracked(&v1272);
                            let v1277: bool = true;
                            leptos::prelude::ArcRwSignal::update(
                                &v1274.l3.clone(),
                                |x: &mut /*;
                                 let v1279: */
                                 LrcPtr<Dice_ui::Heap0> /* =
                                                            fable_library_rust::Native_::getZero::<()>();
                                                        let v1284: bool =
                                                            */| {
                                    *x = Func1::new({
                                        let v1224 = v1224.clone();
                                        move |v_4: LrcPtr<Dice_ui::Heap0>| {
                                            Dice_ui::closure35(v1224.clone(), v_4)
                                        }
                                    })(x.clone())
                                },
                            ); //;
                            true
                        } else {
                            false
                        }
                    } else {
                        false
                    }
                } else {
                    false
                };
                let v1289: bool = true; /*;
                                        let v1291: bool = */
            }); //;
            let v1293: Func0<()> = _func0_from_v679;
            let v1295: bool = true;
            leptos::prelude::Effect::new(move |_| v1293());
            let v1298: leptos::prelude::ArcMemo<
                std::collections::HashMap<std::string::String, leptos::prelude::ArcRwSignal<bool>>,
            > = leptos::prelude::ArcMemo::new(move |_| {
                Func0::new({
                    let v7 = v7.clone();
                    move || Dice_ui::closure36(v7.clone(), ())
                })()
            });
            let patternInput: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1304: bool = true;
            let _func1_from_v1302 = Func1::from(move |value| {
                //;
                let v1306: LrcPtr<Dice_ui::Heap3> = value;
                let v1308: string = sprintf!("{:?}", v1306.clone());
                let v1312: Option<std::sync::Arc<rexie::Rexie>> =
                    Option::map(leptos::prelude::ArcLocalResource::get(&v127), |x| x.clone());
                let v1331: Dice_ui::US2 =
                    defaultValue(Dice_ui::US2::US2_1, map(Dice_ui::method9(), v1312));
                let v1336: bool = true;
                let __future_init = Box::pin(
                    /*;
                    let v1338: bool = */
                    async move {
                        /*;
                        let v1340: bool = */
                        ();
                        let v1441: bool = match &v1331 {
                            Dice_ui::US2::US2_0(v1331_0_0) => {
                                let v1342: string =
                            append((append(string("state_core.use_core_database (12) / set_core_state_heap_action / value: "),
                                           (v1308.clone()))), string(""));
                                let v1344: bool = true;
                                leptos::logging::log!("{}", v1342);
                                let v1350: string = append(
                                    (append(
                                        string("state_core.set_data () / data_len: "),
                                        (toString(length(sprintf!("{:?}", v1306.clone())) as i64)),
                                    )),
                                    string(""),
                                );
                                let v1352: bool = true;
                                leptos::logging::log!("{}", v1350);
                                let v1354: bool = true;
                                let __future_init = Box::pin(
                                    /*;
                                    let v1356: bool = */
                                    async move {
                                        /*;
                                        let v1358: bool = */
                                        ();
                                        let v1360: bool = true;
                                        let mut data = Vec::new();
                                        let v1362: bool = true;
                                        borsh::BorshSerialize::serialize(&v1306.clone(), &mut data)
                                            .unwrap();
                                        let v1364: Vec<u8> = data;
                                        let v1366: wasm_bindgen::JsValue =
                                            serde_wasm_bindgen::to_value(&v1364).unwrap();
                                        let v1367: string = Dice_ui::method43();
                                        let v1376: &str = &*v1367;
                                        let v1402: rexie::Transaction = match &v1331 {
                                            Dice_ui::US2::US2_0(x) => x.clone(),
                                            _ => unreachable!(),
                                        }
                                        .clone()
                                        .transaction(
                                            &["store"],
                                            rexie::TransactionMode::ReadWrite,
                                        )?;
                                        let v1404: rexie::Store = v1402.store("store")?;
                                        let v1406: bool = true;
                                        v1404.put(&v1366, Some(&v1376.into())).await?;
                                        let v1408: bool = true;
                                        v1402.done().await?;
                                        let v1413: string = string("}");
                                        let v1420: bool = true;
                                        let _fix_closure_v1415 = Ok::<(), rexie::Error>(());
                                        let v1425: string = append(
                                            (append(
                                                (append(
                                                    (append(
                                                        string("true; _fix_closure_v1415 "),
                                                        (v1413),
                                                    )),
                                                    string("); "),
                                                )),
                                                string(""),
                                            )),
                                            string(" // rust.fix_closure\'"),
                                        );
                                        let v1426: bool = true;
                                        _fix_closure_v1415
                                    },
                                ); // rust.fix_closure';
                                let v1428 = __future_init;
                                let v1430: std::pin::Pin<
                                    Box<dyn std::future::Future<Output = Result<(), rexie::Error>>>,
                                > = v1428;
                                let v1432: Result<(), rexie::Error> = v1430.await;
                                v1432.unwrap();
                                true
                            }
                            _ => {
                                let v1439: bool = true;
                                leptos::logging::log!("{}", string("state_core.use_core_database (13) / set_core_state_heap_action / database=None"));
                                false
                            }
                        };
                        let v1448: string =
                            string("true; _fix_closure_v1444 });  // rust.fix_closure\'");
                        let v1449: bool = true;
                        _fix_closure_v1444
                    },
                ); // rust.fix_closure';
                let v1451 = __future_init;
                let v1453: std::pin::Pin<Box<dyn std::future::Future<Output = ()>>> = v1451;
                let v1456: bool = true;
                v1453 /*;
                      let v1458: bool = */
            }); //;
            let v1460: Func1<
                LrcPtr<Dice_ui::Heap3>,
                std::pin::Pin<Box<dyn std::future::Future<Output = ()>>>,
            > = _func1_from_v1302;
            let v1463: leptos::prelude::ArcAction<LrcPtr<Dice_ui::Heap3>, ()> =
                leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap3>| {
                    Func1::new({
                        let v1460 = v1460.clone();
                        move |v_5: LrcPtr<Dice_ui::Heap3>| Dice_ui::closure37(v1460.clone(), v_5)
                    })(value.clone())
                });
            let v1466: bool = true;
            let _func0_from_v1464 = Func0::from(move || {
                //;
                let v1468: bool = leptos::prelude::ReadSignal::get(&patternInput.0.clone());
                let v1469: string =
                append((append(string("state_core.use_core_database (14) / effect new_core_state_heap / ##1 / loaded: "),
                               (ofBoolean(v1468)))), string(""));
                let v1471: bool = true;
                leptos::logging::log!("{}", v1469);
                let v1474: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1476: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1474);
                let v1479: bool = leptos::prelude::ArcRwSignal::get(&v1476.l0.clone());
                let v1482: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1484: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1482);
                let v1487: bool = leptos::prelude::ArcRwSignal::get(&v1484.l1.clone());
                let v1490: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1492: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1490);
                let v1495: std::string::String =
                    leptos::prelude::ArcRwSignal::get(&v1492.l2.clone());
                let v1498: std::pin::Pin<
                    Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                > = Box::pin(v7.l0.clone());
                let v1500: LrcPtr<Dice_ui::Heap1> =
                    leptos::prelude::ArcRwSignal::get_untracked(&v1498);
                let v1504: LrcPtr<Dice_ui::Heap3> = LrcPtr::new(Dice_ui::Heap3 {
                    l0: v1479,
                    l1: v1487,
                    l2: v1495,
                    l3: leptos::prelude::ArcRwSignal::get(&v1500.l3.clone()),
                });
                let v1509: string =
                append((append(string("state_core.use_core_database (15) / effect new_core_state_heap / ##2 / new_core_state_heap: "),
                               sprintf!("{:?}", v1504.clone()))), string(""));
                let v1511: bool = true;
                leptos::logging::log!("{}", v1509);
                let v1513: std::collections::HashMap<
                    std::string::String,
                    leptos::prelude::ArcRwSignal<bool>,
                > = leptos::prelude::ArcMemo::get(&v1298);
                let v1523: &str = &*string("dark_mode_key");
                let v1581: std::string::String = Dice_ui::method45(String::from(v1523));
                let v1583: Option<leptos::prelude::ArcRwSignal<bool>> =
                    std::collections::HashMap::get(&v1513, &v1581)
                        .map(|x| x)
                        .cloned();
                let v1602: Dice_ui::US16 =
                    defaultValue(Dice_ui::US16::US16_1, map(Dice_ui::method46(), v1583));
                let v1612: Dice_ui::US17 = match &v1602 {
                    Dice_ui::US16::US16_0(v1602_0_0) => {
                        Dice_ui::US17::US17_0(leptos::prelude::ArcRwSignal::get(
                            &match &v1602 {
                                Dice_ui::US16::US16_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                        ))
                    }
                    _ => Dice_ui::US17::US17_1,
                };
                let v1615: bool = match &v1612 {
                    Dice_ui::US17::US17_0(v1612_0_0) => match &v1612 {
                        Dice_ui::US17::US17_0(x) => x.clone(),
                        _ => unreachable!(),
                    },
                    _ => false,
                };
                let v1616: string =
                append((append(string("state_core.use_core_database (16) / effect new_core_state_heap / ##3 / dark_mode_loading: "),
                               (ofBoolean(v1615)))), string(""));
                let v1618: bool = true;
                leptos::logging::log!("{}", v1616);
                let v1718: bool = if (v1615) == false {
                    if (v1468) == false {
                        let v1622: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &patternInput.1.clone(),
                            |x: &mut /*;
                             let v1624: */
                             bool /* = fable_library_rust::Native_::getZero();
                                  let v1629: bool =
                                      */| {
                                *x = Func1::new(move |v_6: bool| Dice_ui::closure39((), v_6))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        true
                    } else {
                        let v1632: bool = true;
                        leptos::logging::log!("{}", string("state_core.use_core_database (18) / effect new_core_state_heap / ##4"));
                        let v1634: Result<Option<web_sys::Storage>, wasm_bindgen::JsValue> =
                            Dice_ui::method29(Dice_ui::method28());
                        let v1635 = Dice_ui::method30();
                        let v1636 = Dice_ui::method31();
                        let v1638: Dice_ui::US9 = match &v1634 {
                            Err(v1634_1_0) => v1636(v1634_1_0.clone()),
                            Ok(v1634_0_0) => v1635(v1634_0_0.clone()),
                        };
                        let v1668: Dice_ui::US10 = match &v1638 {
                            Dice_ui::US9::US9_0(v1638_0_0) => Dice_ui::US10::US10_0(defaultValue(
                                Dice_ui::US11::US11_1,
                                map(Dice_ui::method32(), v1638_0_0.clone()),
                            )),
                            Dice_ui::US9::US9_1(v1638_1_0) => {
                                Dice_ui::US10::US10_1(v1638_1_0.clone())
                            }
                        };
                        if let Dice_ui::US10::US10_0(v1668_0_0) = &v1668 {
                            let v1669: Dice_ui::US11 = v1668_0_0.clone();
                            if let Dice_ui::US11::US11_0(v1669_0_0) = &v1669 {
                                let v1672: bool = true;
                                leptos::prelude::ArcAction::dispatch(&v1463, v1504.clone().clone());
                                let v1673: web_sys::Storage = Dice_ui::method47(v1669_0_0.clone());
                                let v1674: string = Dice_ui::method48();
                                let v1683: &str = &*v1674;
                                let v1708: LrcPtr<Dice_ui::Heap3> = Dice_ui::method49(v1504);
                                let v1710: std::string::String =
                                    serde_json::json!(v1708).to_string();
                                let v1712: &str = v1710.as_str();
                                let v1714: bool = true;
                                web_sys::Storage::set(&v1673, v1683, v1712).unwrap();
                                true
                            } else {
                                false
                            }
                        } else {
                            false
                        }
                    }
                } else {
                    false
                };
                let v1720: bool = true; /*;
                                        let v1722: bool = */
            }); //;
            let v1724: Func0<()> = _func0_from_v1464;
            let v1726: bool = true;
            leptos::prelude::Effect::new(move |_| v1724());
            let v1728 = Dice_ui::method50(v7.clone());
            let v1732: string = string(" class:dark={move || v1728()} class=\"flex flex-1\"");
            let v1735: bool = true;
            leptos::logging::log!("{}", string("content.render ()"));
            let v1737: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1739: std::sync::Arc<dyn Fn(&str, leptos_router::NavigateOptions)> =
                std::sync::Arc::new(leptos_router::hooks::use_navigate());
            let v1741: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v1744: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v1741 = v1741.clone();
                        move || Dice_ui::closure41(v1741.clone(), ())
                    })()
                });
            let v1746: Option<LrcPtr<Dice_ui::Heap2>> =
                leptos::context::use_context::<std::sync::Arc<Heap2>>();
            let v1748: LrcPtr<Dice_ui::Heap2> = v1746.unwrap();
            let patternInput_1: (
                leptos::prelude::ReadSignal<Dice_ui::US18>,
                leptos::prelude::WriteSignal<Dice_ui::US18>,
            ) = leptos::prelude::signal(Dice_ui::US18::US18_0);
            let v1751: leptos::prelude::ReadSignal<Dice_ui::US18> = patternInput_1.0.clone();
            let patternInput_2: (
                leptos::prelude::ReadSignal<bool>,
                leptos::prelude::WriteSignal<bool>,
            ) = leptos::prelude::signal(false);
            let v1758: bool = true;
            let _func0_from_v1756 = Func0::from(move || {
                //;
                let v1760: bool = leptos::prelude::ReadSignal::get(&patternInput_2.0.clone());
                let v1762: leptos::prelude::Memo<std::string::String> = v1737.clone().hash;
                let v1764: std::string::String = leptos::prelude::Memo::get(&v1762);
                let v1767: string =
                    sprintf!("{}{}", leptos::prelude::ArcMemo::get(&v1744), v1764.clone());
                let v1768: string = append(
                    (append(
                        (append(
                            (append(
                                string("content.render () / effect 1 / new_url_hash: "),
                                (v1767.clone()),
                            )),
                            string(" / loaded: "),
                        )),
                        (ofBoolean(v1760)),
                    )),
                    string(""),
                );
                let v1770: bool = true;
                leptos::logging::log!("{}", v1768);
                let v1903: bool = if (v1760) == false {
                    let v1772: std::string::String = Dice_ui::method51(v1764);
                    if v1772 == "" {
                        let v1777: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v1748.l0.clone());
                        let v1779: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v1777);
                        let v1782: std::string::String =
                            leptos::prelude::ArcRwSignal::get(&v1779.l2.clone());
                        let v1784: string = fable_library_rust::String_::fromString(v1782);
                        let v1785: string = append(
                            (append(
                                string("content.render () / effect 1 / url_hash: "),
                                (v1784.clone()),
                            )),
                            string(""),
                        );
                        let v1787: bool = true;
                        leptos::logging::log!("{}", v1785);
                        if contains(v1784.clone(), string("#")) {
                            let v1801: &str = &*v1784;
                            v1739(v1801, Default::default());
                            ()
                        }
                    }
                    {
                        let v1828: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_2.1.clone(), true); //;
                        true
                    }
                } else {
                    let v1831: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v1748.l0.clone());
                    let v1833: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v1831);
                    let v1843: &str = &*v1767;
                    let v1876: std::string::String = String::from(v1843);
                    let v1902: bool = true;
                    leptos::prelude::ArcRwSignal::set(&v1833.l2.clone(), v1876); //;
                    false
                };
                let v1905: bool = true; /*;
                                        let v1907: bool = */
            }); //;
            let v1909: Func0<()> = _func0_from_v1756;
            let v1911: bool = true;
            leptos::prelude::Effect::new(move |_| v1909());
            let v1914: bool = true;
            let _func0_from_v1912 = Func0::from(move || {
                //;
                let v1916: leptos::prelude::Memo<std::string::String> = v1737.hash;
                let v1919: std::string::String =
                    Dice_ui::method52(leptos::prelude::Memo::get(&v1916));
                let v1921: Option<&str> = v1919.strip_prefix('#');
                let v1922: string = string("r#\"\"#");
                let v1923: &str = r#""#;
                let v1925: &str = v1921.unwrap_or(v1923);
                let v1927: Result<leptos_router::location::Url, std::string::String> =
                    leptos_router::location::Url::try_from(v1925);
                let v1928 = Dice_ui::method53();
                let v1929 = Dice_ui::method54();
                let v1931: Dice_ui::US20 = match &v1927 {
                    Err(v1927_1_0) => v1929(v1927_1_0.clone()),
                    Ok(v1927_0_0) => v1928(v1927_0_0.clone()),
                };
                let v1944: std::string::String = format!("{:#?}", v1931.clone());
                let v1973: string = append(
                    (append(
                        string("content.render () / effect 2 / hash_url: "),
                        (fable_library_rust::String_::fromString(v1944)),
                    )),
                    string(""),
                );
                let v1975: bool = true;
                leptos::logging::log!("{}", v1973);
                let v2100: bool = match &v1931 {
                    Dice_ui::US20::US20_0(v1931_0_0) => {
                        let v1976: leptos_router::location::Url = v1931_0_0.clone();
                        let v1978: std::string::String = v1976.clone().pathname;
                        let v1991: Dice_ui::US21 = if startsWith3(
                            fable_library_rust::String_::fromString(v1978),
                            string("/dice"),
                            false,
                        ) {
                            Dice_ui::US21::US21_0(Dice_ui::US18::US18_1(Dice_ui::US19::US19_0))
                        } else {
                            Dice_ui::US21::US21_1
                        };
                        let v2009: Dice_ui::US21 = match &v1991 {
                            Dice_ui::US21::US21_0(v1991_0_0) => Dice_ui::US21::US21_0(
                                match &v1991 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v1995: std::string::String = v1976.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v1995),
                                    string("/lists"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_2)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2027: Dice_ui::US21 = match &v2009 {
                            Dice_ui::US21::US21_0(v2009_0_0) => Dice_ui::US21::US21_0(
                                match &v2009 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2013: std::string::String = v1976.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2013),
                                    string("/transactions"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_3)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2045: Dice_ui::US21 = match &v2027 {
                            Dice_ui::US21::US21_0(v2027_0_0) => Dice_ui::US21::US21_0(
                                match &v2027 {
                                    Dice_ui::US21::US21_0(x) => x.clone(),
                                    _ => unreachable!(),
                                }
                                .clone(),
                            ),
                            _ => {
                                let v2031: std::string::String = v1976.clone().pathname;
                                if startsWith3(
                                    fable_library_rust::String_::fromString(v2031),
                                    string("/settings"),
                                    false,
                                ) {
                                    Dice_ui::US21::US21_0(Dice_ui::US18::US18_4)
                                } else {
                                    Dice_ui::US21::US21_1
                                }
                            }
                        };
                        let v2050: Dice_ui::US18 = match &v2045 {
                            Dice_ui::US21::US21_0(v2045_0_0) => match &v2045 {
                                Dice_ui::US21::US21_0(x) => x.clone(),
                                _ => unreachable!(),
                            }
                            .clone(),
                            _ => Dice_ui::US18::US18_1(Dice_ui::US19::US19_0),
                        };
                        let v2061: std::string::String = format!("{:#?}", v2050.clone());
                        let v2090: string = append(
                            (append(
                                string("content.render () / effect 2 / new_tab: "),
                                (fable_library_rust::String_::fromString(v2061)),
                            )),
                            string(""),
                        );
                        let v2092: bool = true;
                        leptos::logging::log!("{}", v2090);
                        let v2094: bool = true;
                        leptos::prelude::WriteSignal::set(&patternInput_1.1.clone(), v2050); //;
                        true
                    }
                    Dice_ui::US20::US20_1(v1931_1_0) => {
                        let v2096: string = append(
                            (append(
                                string("content.render () / effect 2 / hash_url error: "),
                                (toString(v1931_1_0.clone())),
                            )),
                            string(""),
                        );
                        let v2098: bool = true;
                        leptos::logging::log!("{}", v2096);
                        false
                    }
                };
                let v2102: bool = true; /*;
                                        let v2104: bool = */
            }); //;
            let v2106: Func0<()> = _func0_from_v1912;
            let v2108: bool = true;
            leptos::prelude::Effect::new(move |_| v2106());
            let v2110: string = string(" class=\"flex flex-1 max-[100px]:[overflow-x:auto]\"");
            let v2111: string =
                string("class=\"flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm\"");
            let v2112: string = append(
                (append((append(string(" "), (v2111))), string(""))),
                string(""),
            );
            let v2114: string = string(" class=\"flex flex-1 flex-col [overflow:hidden]\"");
            let v2116: Dice_ui::US18 = leptos::prelude::ReadSignal::get(&v1751.clone());
            let v5435: Dice_ui::US22 = match &v2116 {
                Dice_ui::US18::US18_1(v2116_1_0) => {
                    let v2120: bool = true;
                    leptos::logging::log!("{}", string("dice_view.render (1)"));
                    let v2122: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v2124: LrcPtr<Dice_ui::Heap2> = v2122.unwrap();
                    let v2127: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v2130: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2124 = v2124.clone();
                                move || Dice_ui::closure44(v2124.clone(), ())
                            })()
                        });
                    let v2133: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2130 = v2130.clone();
                            move || Dice_ui::closure46(v2130.clone(), ())
                        })()
                    });
                    let v2136: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2124 = v2124.clone();
                            let v2130 = v2130.clone();
                            move || Dice_ui::closure48(v2124.clone(), v2130.clone(), ())
                        })()
                    });
                    let v2139: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2136 = v2136.clone();
                            move || Dice_ui::closure51(v2136.clone(), ())
                        })()
                    });
                    let v2142: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2136 = v2136.clone();
                                move || Dice_ui::closure55(v2136.clone(), ())
                            })()
                        });
                    let v2144: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v2139,
                        Func1::new(move |v_7: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_7)
                        }),
                    );
                    let v2151: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v2144.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2153: bool = true;
                    leptos::logging::log!("{}", v2151);
                    let v2156: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2142 = v2142.clone();
                            let v2144 = v2144.clone();
                            move || Dice_ui::closure90(v2142.clone(), v2144.clone(), ())
                        })()
                    });
                    let v2159: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2156 = v2156.clone();
                            move || Dice_ui::closure107(v2156.clone(), ())
                        })()
                    });
                    let v2164: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<(
                                    std::string::String,
                                    Option<(
                                        Array<(
                                            std::string::String,
                                            Array<
                                                std::collections::HashMap<
                                                    std::string::String,
                                                    (
                                                        std::string::String,
                                                        Option<std::string::String>,
                                                        Option<f64>,
                                                        Option<std::string::String>,
                                                    ),
                                                >,
                                            >,
                                            std::string::String,
                                            Array<std::string::String>,
                                            Array<std::string::String>,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                            u64,
                                            Array<std::string::String>,
                                            Array<(
                                                std::string::String,
                                                std::string::String,
                                                std::string::String,
                                            )>,
                                            u8,
                                            Array<std::string::String>,
                                            std::collections::HashMap<
                                                std::string::String,
                                                std::string::String,
                                            >,
                                            Option<std::string::String>,
                                            Array<(std::string::String, std::string::String)>,
                                        )>,
                                    )>,
                                    Option<(
                                        std::string::String,
                                        std::string::String,
                                        Option<(
                                            Option<std::string::String>,
                                            Option<std::string::String>,
                                        )>,
                                        i32,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Option<std::string::String>,
                                )>,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method159(
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2159 = v2159.clone();
                                move || Dice_ui::closure115(v2159.clone(), ())
                            })()
                        }),
                        Func1::new(move |v_8: crate::model::near::rpc::RpcResponse| {
                            Dice_ui::closure119((), v_8)
                        }),
                    );
                    let v2171: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!("{:?}", v2164.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v2173: bool = true;
                    leptos::logging::log!("{}", v2171);
                    let v2176: bool = true;
                    let _func1_from_v2174 = Func1::from(move |value| {
                        //;
                        let v2183: string = append(
                            (append(
                                string("dice_view.render (2) / set_max_action / value: "),
                                sprintf!("{:?}", value),
                            )),
                            string(""),
                        );
                        let v2185: bool = true;
                        leptos::logging::log!("{}", v2183);
                        let v2187: bool = true;
                        let __future_init = Box::pin(
                            /*;
                            let v2189: bool = */
                            async move {
                                /*;
                                let v2191: bool = */
                                ();
                                let v2201: &str = &*string("2.0");
                                let v2234: std::string::String = String::from(v2201);
                                let v2268: &str = &*string("dontcare");
                                let v2301: std::string::String = String::from(v2268);
                                let v2335: &str = &*string("EXPERIMENTAL_tx_status");
                                let v2368: std::string::String = String::from(v2335);
                                let v2402: &str =
                                    &*string("9JgptZpFQGtUvusnoF9ysVqHXD8fXCri8mFxPTMnt3kS");
                                let v2435: std::string::String = String::from(v2402);
                                let v2469: &str = &*string("bowen");
                                let v2527: Array<std::string::String> =
                                    new_array(&[v2435, String::from(v2469)]);
                                let v2529: Vec<std::string::String> = v2527.to_vec();
                                let v2531: crate::model::near::rpc::RpcInput =
                                    crate::model::near::rpc::RpcInput {
                                        jsonrpc: v2234,
                                        id: v2301,
                                        method: v2368,
                                        params: v2529,
                                    };
                                let v2532: string = Dice_ui::method167();
                                let v2541: &str = &*v2532;
                                let v2599: std::string::String =
                                    Dice_ui::method92(String::from(v2541));
                                let v2601: reqwest_wasm::RequestBuilder =
                                    reqwest_wasm::Client::builder()
                                        .build()
                                        .map_err(|err| err.to_string())?
                                        .post(v2599);
                                let v2604: reqwest_wasm::RequestBuilder = Dice_ui::method94(
                                    reqwest_wasm::RequestBuilder::json(v2601, &v2531),
                                );
                                let v2606: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                reqwest_wasm::Response,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::RequestBuilder::send(v2604));
                                let v2608: Result<reqwest_wasm::Response, reqwest_wasm::Error> =
                                    v2606.await;
                                let v2609 = Dice_ui::method95();
                                let v2615: Result<reqwest_wasm::Response, std::string::String> =
                                    v2608.map_err(|x| v2609(x));
                                let v2626: reqwest_wasm::Response = v2615?;
                                let v2628: std::pin::Pin<
                                    Box<
                                        dyn std::future::Future<
                                            Output = Result<
                                                std::string::String,
                                                reqwest_wasm::Error,
                                            >,
                                        >,
                                    >,
                                > = Box::pin(reqwest_wasm::Response::text(v2626));
                                let v2630: Result<std::string::String, reqwest_wasm::Error> =
                                    v2628.await;
                                let v2631 = Dice_ui::method95();
                                let v2637: Result<std::string::String, std::string::String> =
                                    v2630.map_err(|x| v2631(x));
                                let v2652: Result<Dice_ui::US14, std::string::String> =
                                    Ok::<Dice_ui::US14, std::string::String>(
                                        Dice_ui::US14::US14_0(v2637?),
                                    );
                                let v2662: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result1 / result: "),
                                                            sprintf!("{:?}",
                                                                     v2652.clone()))),
                                                    string("")));
                                let v2664: bool = true;
                                leptos::logging::log!("{}", v2662);
                                let v2665 = Dice_ui::method168();
                                let v2666 = Dice_ui::method169();
                                let v2668: Dice_ui::US57 = match &v2652 {
                                    Err(v2652_1_0) => v2666(v2652_1_0.clone()),
                                    Ok(v2652_0_0) => v2665(v2652_0_0.clone()),
                                };
                                let v2999: Dice_ui::US58 = if let Dice_ui::US57::US57_0(v2668_0_0) =
                                    &v2668
                                {
                                    let v2671: Dice_ui::US14 = v2668_0_0.clone();
                                    if let Dice_ui::US14::US14_0(v2671_0_0) = &v2671 {
                                        let v2675: string = Dice_ui::method41(
                                            fable_library_rust::String_::fromString(
                                                v2671_0_0.clone(),
                                            ),
                                        );
                                        let v2684: &str = &*v2675;
                                        let v2710: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            serde_json::Error,
                                        > = serde_json::from_str(&v2684);
                                        let v2711 = Dice_ui::method42();
                                        let v2724: Result<
                                            crate::model::near::rpc::RpcResponse,
                                            std::string::String,
                                        > = v2710.map_err(|x| v2711(x));
                                        let v2727 = Dice_ui::method170();
                                        let v2728 = Dice_ui::method171();
                                        let v2730: Dice_ui::US60 = match &v2724 {
                                            Err(v2724_1_0) => v2728(v2724_1_0.clone()),
                                            Ok(v2724_0_0) => v2727(v2724_0_0.clone()),
                                        };
                                        let v2983: Dice_ui::US61 = match &v2730 {
                                            Dice_ui::US60::US60_0(v2730_0_0) => {
                                                let v2733: crate::model::near::rpc::RpcResponse =
                                                    v2730_0_0.clone();
                                                let v2735: std::string::String =
                                                    v2733.clone().jsonrpc;
                                                let v2737: Option<
                                                    crate::model::near::rpc::TransactionStatus,
                                                > = v2733.clone().result;
                                                let v2741: Option<(
                                                    Array<(
                                                        std::string::String,
                                                        Array<
                                                            std::collections::HashMap<
                                                                std::string::String,
                                                                (
                                                                    std::string::String,
                                                                    Option<std::string::String>,
                                                                    Option<f64>,
                                                                    Option<std::string::String>,
                                                                ),
                                                            >,
                                                        >,
                                                        std::string::String,
                                                        Array<std::string::String>,
                                                        Array<std::string::String>,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                    )>,
                                                    Array<(
                                                        std::string::String,
                                                        std::string::String,
                                                        std::string::String,
                                                        u64,
                                                        Array<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                        u8,
                                                        Array<std::string::String>,
                                                        std::collections::HashMap<
                                                            std::string::String,
                                                            std::string::String,
                                                        >,
                                                        Option<std::string::String>,
                                                        Array<(
                                                            std::string::String,
                                                            std::string::String,
                                                        )>,
                                                    )>,
                                                )> = map(Dice_ui::method150(), v2737);
                                                let v2930: Option<
                                                    crate::model::near::rpc::RpcError,
                                                > = v2733.clone().error;
                                                Dice_ui::US61::US61_0(
                                                    v2735,
                                                    v2741,
                                                    map(Dice_ui::method157(), v2930),
                                                    v2733.id,
                                                )
                                            }
                                            Dice_ui::US60::US60_1(v2730_1_0) => {
                                                Dice_ui::US61::US61_1(v2730_1_0.clone())
                                            }
                                        };
                                        match &v2983 {
                                            Dice_ui::US61::US61_0(
                                                v2983_0_0,
                                                v2983_0_1,
                                                v2983_0_2,
                                                v2983_0_3,
                                            ) => Dice_ui::US58::US58_0(Dice_ui::US59::US59_0(
                                                v2983_0_0.clone(),
                                                v2983_0_1.clone(),
                                                v2983_0_2.clone(),
                                                v2983_0_3.clone(),
                                            )),
                                            Dice_ui::US61::US61_1(v2983_1_0) => {
                                                Dice_ui::US58::US58_1(v2983_1_0.clone())
                                            }
                                        }
                                    } else {
                                        Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                    }
                                } else {
                                    Dice_ui::US58::US58_0(Dice_ui::US59::US59_1)
                                };
                                let v3011: Result<Dice_ui::US59, std::string::String> = match &v2999
                                {
                                    Dice_ui::US58::US58_0(v2999_0_0) => {
                                        Ok::<Dice_ui::US59, std::string::String>(v2999_0_0.clone())
                                    }
                                    Dice_ui::US58::US58_1(v2999_1_0) => {
                                        Err::<Dice_ui::US59, std::string::String>(v2999_1_0.clone())
                                    }
                                };
                                let v3018: string =
                            Dice_ui::method8(200_i64,
                                             append((append(string("dice_view.render (x) / roll_action new_arc_action / result2 / result: "),
                                                            sprintf!("{:?}",
                                                                     v3011.clone()))),
                                                    string("")));
                                let v3020: bool = true;
                                leptos::logging::log!("{}", v3018);
                                let v3021: string = string("}");
                                let v3028: bool = true;
                                let _fix_closure_v3023 = v3011;
                                let v3033: string = append(
                                    (append(
                                        (append(
                                            (append(string("true; _fix_closure_v3023 "), (v3021))),
                                            string("); "),
                                        )),
                                        string(""),
                                    )),
                                    string(" // rust.fix_closure\'"),
                                );
                                let v3034: bool = true;
                                _fix_closure_v3023
                            },
                        ); // rust.fix_closure';
                        let v3036 = __future_init;
                        let v3038: std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Dice_ui::US59, std::string::String>,
                                >,
                            >,
                        > = v3036;
                        let v3041: bool = true;
                        v3038 /*;
                              let v3043: bool = */
                    }); //;
                    let v3045: Func1<
                        LrcPtr<Dice_ui::Heap6>,
                        std::pin::Pin<
                            Box<
                                dyn std::future::Future<
                                    Output = Result<Dice_ui::US59, std::string::String>,
                                >,
                            >,
                        >,
                    > = _func1_from_v2174;
                    let v3048: leptos::prelude::ArcAction<
                        LrcPtr<Dice_ui::Heap6>,
                        Result<Dice_ui::US59, std::string::String>,
                    > = leptos::prelude::ArcAction::new(move |value: &std::sync::Arc<Heap6>| {
                        Func1::new({
                            let v3045 = v3045.clone();
                            move |v_9: LrcPtr<Dice_ui::Heap6>| {
                                Dice_ui::closure141(v3045.clone(), v_9)
                            }
                        })(value.clone())
                    });
                    let v3051: leptos::prelude::ArcMemo<
                        Result<
                            Option<(
                                std::string::String,
                                Option<(
                                    Array<(
                                        std::string::String,
                                        Array<
                                            std::collections::HashMap<
                                                std::string::String,
                                                (
                                                    std::string::String,
                                                    Option<std::string::String>,
                                                    Option<f64>,
                                                    Option<std::string::String>,
                                                ),
                                            >,
                                        >,
                                        std::string::String,
                                        Array<std::string::String>,
                                        Array<std::string::String>,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                    )>,
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u64,
                                        Array<std::string::String>,
                                        Array<(
                                            std::string::String,
                                            std::string::String,
                                            std::string::String,
                                        )>,
                                        u8,
                                        Array<std::string::String>,
                                        std::collections::HashMap<
                                            std::string::String,
                                            std::string::String,
                                        >,
                                        Option<std::string::String>,
                                        Array<(std::string::String, std::string::String)>,
                                    )>,
                                )>,
                                Option<(
                                    std::string::String,
                                    std::string::String,
                                    Option<(
                                        Option<std::string::String>,
                                        Option<std::string::String>,
                                    )>,
                                    i32,
                                    std::string::String,
                                    std::string::String,
                                )>,
                                Option<std::string::String>,
                            )>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3048 = v3048.clone();
                            move || Dice_ui::closure142(v3048.clone(), ())
                        })()
                    });
                    let v3054: leptos::prelude::ArcMemo<Option<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3051 = v3051.clone();
                                move || Dice_ui::closure147(v3051.clone(), ())
                            })()
                        });
                    let v3057: leptos::prelude::ArcMemo<Dice_ui::US31> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v2124 = v2124.clone();
                                move || Dice_ui::closure152(v2124.clone(), ())
                            })()
                        });
                    let v3060: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<std::string::String>,
                                    leptos::prelude::WriteSignal<std::string::String>,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v2124 = v2124.clone();
                            move || Dice_ui::closure153(v2124.clone(), ())
                        })()
                    });
                    let v3063: leptos::prelude::ArcMemo<
                        Vec<(i32, leptos::prelude::ReadSignal<std::string::String>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3060 = v3060.clone();
                            move || Dice_ui::closure158(v3060.clone(), ())
                        })()
                    });
                    let v3064: string = string("vec![]");
                    let v3065: Vec<leptos::prelude::AnyView> = vec![];
                    let v3067: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3065);
                    let v3069: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v3071() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v3072 = {
                        let clo = Func0::from(v3071);
                        Func1::new({
                            let clo = clo.clone();
                            move |arg: ()| clo()
                        })
                    };
                    fn v3074() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v3075 = {
                        let clo_1 = Func0::from(v3074);
                        Func1::new({
                            let clo_1 = clo_1.clone();
                            move |arg_1: ()| clo_1()
                        })
                    };
                    let v3077: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3081: string = string("vec![v3067]");
                    let v3082: Vec<leptos::prelude::AnyView> = vec![v3067];
                    let v3084: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3082);
                    let v3086: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3084);
                    let v3089: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3077))),
                                        string(">move || { v3086 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3091: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3086 }</div> };
                    let v3093: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3091);
                    let v3094: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3072(())");
                    let v3097: string = append(
                        (append(
                            string(" open=move || v3075(())"),
                            (append(
                                (append((append(string(" "), (v3094))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3100 = {
                        let clo_2 = Func0::new(move || Dice_ui::closure163((), ()));
                        Func1::new({
                            let clo_2 = clo_2.clone();
                            move |arg_2: ()| clo_2()
                        })
                    };
                    let v3103 = {
                        let clo_3 = Func0::new(move || Dice_ui::closure164((), ()));
                        Func1::new({
                            let clo_3 = clo_3.clone();
                            move |arg_3: ()| clo_3()
                        })
                    };
                    let v3104: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3103(()) + \" \" + &v3100(())");
                    let v3105: string = append(
                        (append((append(string(" "), (v3104))), string(""))),
                        string(""),
                    );
                    let v3107: string = string(" class=\"flex items-center gap-2\"");
                    let v3110: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3111: string = (Dice_ui::method187())();
                    let v3120: &str = &*v3111;
                    let v3153: std::string::String = String::from(v3120);
                    let v3179: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3153),
                    );
                    let v3183: string = string("vec![v3179]");
                    let v3184: Vec<leptos::prelude::AnyView> = vec![v3179];
                    let v3186: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3184);
                    let v3188: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3186);
                    let v3191: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3110))),
                                        string(">move || { v3188 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3193: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3188 }</span> };
                    let v3195: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3193);
                    let v3199: string = string("vec![v3195]");
                    let v3200: Vec<leptos::prelude::AnyView> = vec![v3195];
                    let v3202: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3200);
                    let v3204: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3202);
                    let v3206: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3107))),
                                        string(">move || { v3204 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3208: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3204 }</div> };
                    let v3210: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3208);
                    let v3212: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v3214() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v3215 = {
                        let clo_4 = Func0::from(v3214);
                        Func1::new({
                            let clo_4 = clo_4.clone();
                            move |arg_4: ()| clo_4()
                        })
                    };
                    let v3223: string =
                            string(" class=move || \" \".to_owned() + &v3215(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v3225: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v3229: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3225))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3230: string = string("vec![]");
                    let v3231: Vec<leptos::prelude::AnyView> = vec![];
                    let v3233: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3231);
                    let v3235: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3233);
                    let v3238: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3229))),
                                        string(">move || { v3235 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3240: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3235 }</path> };
                    let v3242: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3240);
                    let v3246: string = string("vec![v3242]");
                    let v3247: Vec<leptos::prelude::AnyView> = vec![v3242];
                    let v3249: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3247);
                    let v3251: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3249);
                    let v3254: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3223))),
                                        string(">move || { v3251 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3256: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3215(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3251 }</svg> };
                    let v3258: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3256);
                    let v3262: string = string("vec![v3258]");
                    let v3263: Vec<leptos::prelude::AnyView> = vec![v3258];
                    let v3265: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3263);
                    let v3267: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3265);
                    let v3269: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3212))),
                                        string(">move || { v3267 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3271: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3267 }</span> };
                    let v3273: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3271);
                    let v3281: string = string("vec![v3210, v3273]");
                    let v3282: Vec<leptos::prelude::AnyView> = vec![v3210, v3273];
                    let v3284: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3282);
                    let v3286: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3284);
                    let v3289: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3105))),
                                        string(">move || { v3286 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3291: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3103(()) + " " + &v3100(())>move || { v3286 }</summary> };
                    let v3293: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3291);
                    let v3295: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3299: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2124 = v2124.clone();
                                let v3048 = v3048.clone();
                                let v3054 = v3054.clone();
                                let v3057 = v3057.clone();
                                let v3063 = v3063.clone();
                                move || {
                                    Dice_ui::closure167(
                                        v2124.clone(),
                                        v3048.clone(),
                                        v3054.clone(),
                                        v3057.clone(),
                                        v3063.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3301: leptos::prelude::Fragment = (move || v3299())();
                    let v3303: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3301);
                    let v3305: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3295))),
                                        string(">move || { v3303 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3307: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3303 }</div> };
                    let v3309: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3307);
                    let v3316: string = string("vec![v3293, v3309]");
                    let v3317: Vec<leptos::prelude::AnyView> = vec![v3293, v3309];
                    let v3319: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3317);
                    let v3321: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3319);
                    let v3324: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3097))),
                                        string(">move || { v3321 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3326: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v3075(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3072(())>move || { v3321 }</details> };
                    let v3328: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3326);
                    let v3335: string = string("vec![v3093, v3328]");
                    let v3336: Vec<leptos::prelude::AnyView> = vec![v3093, v3328];
                    let v3338: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3336);
                    let v3340: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3338);
                    let v3342: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3069))),
                                        string(">move || { v3340 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3344: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3340 }</div> };
                    let v3346: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3344);
                    let v3347: string = string("vec![]");
                    let v3348: Vec<leptos::prelude::AnyView> = vec![];
                    let v3350: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3348);
                    let v3352: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v3354 = {
                        let clo_5 = Func0::from(v3071);
                        Func1::new({
                            let clo_5 = clo_5.clone();
                            move |arg_5: ()| clo_5()
                        })
                    };
                    let v3356 = {
                        let clo_6 = Func0::from(v3074);
                        Func1::new({
                            let clo_6 = clo_6.clone();
                            move |arg_6: ()| clo_6()
                        })
                    };
                    let v3358: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v3362: string = string("vec![v3350]");
                    let v3363: Vec<leptos::prelude::AnyView> = vec![v3350];
                    let v3365: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3363);
                    let v3367: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3365);
                    let v3369: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3358))),
                                        string(">move || { v3367 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3371: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3367 }</div> };
                    let v3373: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3371);
                    let v3374: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3354(())");
                    let v3377: string = append(
                        (append(
                            string(" open=move || v3356(())"),
                            (append(
                                (append((append(string(" "), (v3374))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3380 = {
                        let clo_7 = Func0::new(move || Dice_ui::closure183((), ()));
                        Func1::new({
                            let clo_7 = clo_7.clone();
                            move |arg_7: ()| clo_7()
                        })
                    };
                    let v3383 = {
                        let clo_8 = Func0::new(move || Dice_ui::closure184((), ()));
                        Func1::new({
                            let clo_8 = clo_8.clone();
                            move |arg_8: ()| clo_8()
                        })
                    };
                    let v3384: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3383(()) + \" \" + &v3380(())");
                    let v3385: string = append(
                        (append((append(string(" "), (v3384))), string(""))),
                        string(""),
                    );
                    let v3387: string = string(" class=\"flex items-center gap-2\"");
                    let v3390: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v3391: string = (Dice_ui::method198())();
                    let v3400: &str = &*v3391;
                    let v3433: std::string::String = String::from(v3400);
                    let v3459: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3433),
                    );
                    let v3463: string = string("vec![v3459]");
                    let v3464: Vec<leptos::prelude::AnyView> = vec![v3459];
                    let v3466: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3464);
                    let v3468: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3466);
                    let v3470: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3390))),
                                        string(">move || { v3468 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3472: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3468 }</span> };
                    let v3474: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3472);
                    let v3478: string = string("vec![v3474]");
                    let v3479: Vec<leptos::prelude::AnyView> = vec![v3474];
                    let v3481: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3479);
                    let v3483: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3481);
                    let v3485: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3387))),
                                        string(">move || { v3483 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3487: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v3483 }</div> };
                    let v3489: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3487);
                    let v3491: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v3493 = {
                        let clo_9 = Func0::from(v3214);
                        Func1::new({
                            let clo_9 = clo_9.clone();
                            move |arg_9: ()| clo_9()
                        })
                    };
                    let v3501: string =
                            string(" class=move || \" \".to_owned() + &v3493(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v3503: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v3507: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v3503))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v3508: string = string("vec![]");
                    let v3509: Vec<leptos::prelude::AnyView> = vec![];
                    let v3511: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3509);
                    let v3513: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3511);
                    let v3515: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v3507))),
                                        string(">move || { v3513 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3517: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v3513 }</path> };
                    let v3519: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3517);
                    let v3523: string = string("vec![v3519]");
                    let v3524: Vec<leptos::prelude::AnyView> = vec![v3519];
                    let v3526: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3524);
                    let v3528: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3526);
                    let v3530: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v3501))),
                                        string(">move || { v3528 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3532: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3493(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v3528 }</svg> };
                    let v3534: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3532);
                    let v3538: string = string("vec![v3534]");
                    let v3539: Vec<leptos::prelude::AnyView> = vec![v3534];
                    let v3541: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3539);
                    let v3543: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3541);
                    let v3545: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v3491))),
                                        string(">move || { v3543 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3547: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v3543 }</span> };
                    let v3549: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3547);
                    let v3556: string = string("vec![v3489, v3549]");
                    let v3557: Vec<leptos::prelude::AnyView> = vec![v3489, v3549];
                    let v3559: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3557);
                    let v3561: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3559);
                    let v3563: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v3385))),
                                        string(">move || { v3561 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3565: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3383(()) + " " + &v3380(())>move || { v3561 }</summary> };
                    let v3567: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3565);
                    let v3569: string = string(" class=\"flex flex-1 flex-col\"");
                    let v3573: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v2136 = v2136.clone();
                                let v2156 = v2156.clone();
                                let v2164 = v2164.clone();
                                move || {
                                    Dice_ui::closure186(
                                        v2164.clone(),
                                        v2156.clone(),
                                        v2136.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v3575: leptos::prelude::Fragment = (move || v3573())();
                    let v3577: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3575);
                    let v3579: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3569))),
                                        string(">move || { v3577 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3581: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v3577 }</div> };
                    let v3583: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3581);
                    let v3590: string = string("vec![v3567, v3583]");
                    let v3591: Vec<leptos::prelude::AnyView> = vec![v3567, v3583];
                    let v3593: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3591);
                    let v3595: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3593);
                    let v3597: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v3377))),
                                        string(">move || { v3595 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3599: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v3356(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3354(())>move || { v3595 }</details> };
                    let v3601: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3599);
                    let v3608: string = string("vec![v3373, v3601]");
                    let v3609: Vec<leptos::prelude::AnyView> = vec![v3373, v3601];
                    let v3611: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v3609);
                    let v3613: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3611);
                    let v3615: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v3352))),
                                        string(">move || { v3613 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v3617: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v3613 }</div> };
                    let v3619: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v3617);
                    let v3626: string = string("vec![v3346, v3619]");
                    let v3627: Vec<leptos::prelude::AnyView> = vec![v3346, v3619];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3627))
                }
                Dice_ui::US18::US18_2 => {
                    let v3633: bool = true;
                    leptos::logging::log!("{}", string("lists_view.render ()"));
                    let v3635: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3637: LrcPtr<Dice_ui::Heap2> = v3635.unwrap();
                    let v3647: &str = &*string("???");
                    let v3680: std::string::String = String::from(v3647);
                    let v3706: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v3680),
                    );
                    let v3710: string = string("vec![v3706]");
                    let v3711: Vec<leptos::prelude::AnyView> = vec![v3706];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v3711))
                }
                Dice_ui::US18::US18_4 => {
                    let v4452: bool = true;
                    leptos::logging::log!("{}", string("settings_view.render ()"));
                    let v4454: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v4456: LrcPtr<Dice_ui::Heap2> = v4454.unwrap();
                    let v4459: leptos::prelude::ArcMemo<
                        Vec<
                            LrcPtr<(
                                i32,
                                (
                                    leptos::prelude::ReadSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                    leptos::prelude::WriteSignal<
                                        LrcPtr<(bool, std::string::String)>,
                                    >,
                                ),
                            )>,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v4456 = v4456.clone();
                            move || Dice_ui::closure192(v4456.clone(), ())
                        })()
                    });
                    let patternInput_3: (
                        leptos::prelude::ReadSignal<i32>,
                        leptos::prelude::WriteSignal<i32>,
                    ) = leptos::prelude::signal(0_i32);
                    let v4462: leptos::prelude::WriteSignal<i32> = patternInput_3.1.clone();
                    let v4465: leptos::prelude::ArcMemo<
                        Vec<(
                            i32,
                            i32,
                            leptos::prelude::ReadSignal<LrcPtr<(bool, std::string::String)>>,
                        )>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let patternInput_3 = patternInput_3.clone();
                            let v4459 = v4459.clone();
                            move || Dice_ui::closure195(v4459.clone(), patternInput_3.0.clone(), ())
                        })()
                    });
                    let v4468: leptos::prelude::ArcMemo<i32> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v4465 = v4465.clone();
                                move || Dice_ui::closure198(v4465.clone(), ())
                            })()
                        });
                    let v4471: bool = true;
                    let _func0_from_v4469 = Func0::from(move || {
                        //;
                        let v4474: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v4456.l0.clone());
                        let v4476: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4474);
                        let v4479: bool = true;
                        leptos::prelude::ArcRwSignal::update(
                            &v4476.l3.clone(),
                            |x: &mut /*;
                             let v4481: */
                             LrcPtr<Dice_ui::Heap0> /* =
                                                        fable_library_rust::Native_::getZero::<()>();
                                                    let v4486: bool =
                                                        */| {
                                *x = Func1::new({
                                    let v4459 = v4459.clone();
                                    move |v_10: LrcPtr<Dice_ui::Heap0>| {
                                        Dice_ui::closure199(v4459.clone(), v_10)
                                    }
                                })(x.clone())
                            },
                        ); //;
                        let v4488: bool = true;
                        leptos::prelude::WriteSignal::update(
                            &v4462.clone(),
                            |x: &mut /*;
                             let v4490: */
                             i32 /* = fable_library_rust::Native_::getZero();
                                 let v4495: bool =
                                     */| {
                                *x = Func1::new(move |v_11: i32| Dice_ui::closure201((), v_11))(
                                    x.clone(),
                                )
                            },
                        ); //;
                        let v4497: bool = true; /*;
                                                let v4499: bool = */
                    }); //;
                    let v4501: Func0<()> = _func0_from_v4469;
                    let v4504 = {
                        let clo_10 = Func0::new(move || Dice_ui::closure202((), ()));
                        Func1::new({
                            let clo_10 = clo_10.clone();
                            move |arg_10: ()| clo_10()
                        })
                    };
                    let v4516: string =
                            string(" class=move || \" \".to_owned() + &v4504(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4522: string = string(
                        " d=\"M12 6v12m6-6H6\" stroke-linejoin=\"round\" stroke-linecap=\"round\"",
                    );
                    let v4523: string = string("vec![]");
                    let v4524: Vec<leptos::prelude::AnyView> = vec![];
                    let v4526: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4524);
                    let v4528: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4526);
                    let v4531: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4522))),
                                        string(">move || { v4528 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4533: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M12 6v12m6-6H6" stroke-linejoin="round" stroke-linecap="round">move || { v4528 }</path> };
                    let v4535: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4533);
                    let v4539: string = string("vec![v4535]");
                    let v4540: Vec<leptos::prelude::AnyView> = vec![v4535];
                    let v4542: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4540);
                    let v4544: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4542);
                    let v4547: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4516))),
                                        string(">move || { v4544 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4549: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4504(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v4544 }</svg> };
                    let v4554 = {
                        let clo_11 = Func0::new(move || Dice_ui::closure203((), ()));
                        Func1::new({
                            let clo_11 = clo_11.clone();
                            move |arg_11: ()| clo_11()
                        })
                    };
                    let v4555: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v4554(())");
                    let v4558: string = append(
                        (append(
                            string(" aria-label=\"Add\""),
                            (append(
                                (append(
                                    string(" on:click=move |_| v4501()"),
                                    (append(
                                        (append((append(string(" "), (v4555))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4560: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4549);
                    let v4564: string = string("vec![v4560]");
                    let v4565: Vec<leptos::prelude::AnyView> = vec![v4560];
                    let v4567: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4565);
                    let v4569: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4567);
                    let v4572: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<button "), (v4558))),
                                        string(">move || { v4569 }</"),
                                    )),
                                    string("button"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4574: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Button, _, _>,
                    > = leptos::prelude::view! { <button  aria-label="Add" on:click=move |_| v4501() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v4554(())>move || { v4569 }</button> };
                    let v4576: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4574);
                    let v4577: string = string("vec![]");
                    let v4578: Vec<leptos::prelude::AnyView> = vec![];
                    let v4580: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4578);
                    let v4582: string = string(" class=\"flex flex-col [position:relative]\"");
                    fn v4584() -> string {
                        Dice_ui::closure161((), ())
                    }
                    let v4585 = {
                        let clo_12 = Func0::from(v4584);
                        Func1::new({
                            let clo_12 = clo_12.clone();
                            move |arg_12: ()| clo_12()
                        })
                    };
                    fn v4587() -> bool {
                        Dice_ui::closure162((), ())
                    }
                    let v4588 = {
                        let clo_13 = Func0::from(v4587);
                        Func1::new({
                            let clo_13 = clo_13.clone();
                            move |arg_13: ()| clo_13()
                        })
                    };
                    let v4590: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4594: string = string("vec![v4576]");
                    let v4595: Vec<leptos::prelude::AnyView> = vec![v4576];
                    let v4597: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4595);
                    let v4599: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4597);
                    let v4602: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4590))),
                                        string(">move || { v4599 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4604: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4599 }</div> };
                    let v4606: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4604);
                    let v4607: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4585(())");
                    let v4610: string = append(
                        (append(
                            string(" open=move || v4588(())"),
                            (append(
                                (append((append(string(" "), (v4607))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4613 = {
                        let clo_14 = Func0::new(move || Dice_ui::closure204((), ()));
                        Func1::new({
                            let clo_14 = clo_14.clone();
                            move |arg_14: ()| clo_14()
                        })
                    };
                    let v4616 = {
                        let clo_15 = Func0::new({
                            let v4576 = v4576.clone();
                            move || Dice_ui::closure205(v4576.clone(), ())
                        });
                        Func1::new({
                            let clo_15 = clo_15.clone();
                            move |arg_15: ()| clo_15()
                        })
                    };
                    let v4617: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4616(()) + \" \" + &v4613(())");
                    let v4618: string = append(
                        (append((append(string(" "), (v4617))), string(""))),
                        string(""),
                    );
                    let v4620: string = string(" class=\"flex items-center gap-2\"");
                    let v4623: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4624: string = (Dice_ui::method214(v4576.clone()))();
                    let v4633: &str = &*v4624;
                    let v4666: std::string::String = String::from(v4633);
                    let v4692: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4666),
                    );
                    let v4696: string = string("vec![v4692]");
                    let v4697: Vec<leptos::prelude::AnyView> = vec![v4692];
                    let v4699: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4697);
                    let v4701: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4699);
                    let v4704: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4623))),
                                        string(">move || { v4701 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4706: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4701 }</span> };
                    let v4708: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4706);
                    let v4712: string = string("vec![v4708]");
                    let v4713: Vec<leptos::prelude::AnyView> = vec![v4708];
                    let v4715: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4713);
                    let v4717: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4715);
                    let v4719: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4620))),
                                        string(">move || { v4717 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4721: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4717 }</div> };
                    let v4723: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4721);
                    let v4725: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    fn v4727() -> string {
                        Dice_ui::closure166((), ())
                    }
                    let v4728 = {
                        let clo_16 = Func0::from(v4727);
                        Func1::new({
                            let clo_16 = clo_16.clone();
                            move |arg_16: ()| clo_16()
                        })
                    };
                    let v4736: string =
                            string(" class=move || \" \".to_owned() + &v4728(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v4738: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v4742: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v4738))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4743: string = string("vec![]");
                    let v4744: Vec<leptos::prelude::AnyView> = vec![];
                    let v4746: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4744);
                    let v4748: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4746);
                    let v4750: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v4742))),
                                        string(">move || { v4748 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4752: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4748 }</path> };
                    let v4754: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4752);
                    let v4758: string = string("vec![v4754]");
                    let v4759: Vec<leptos::prelude::AnyView> = vec![v4754];
                    let v4761: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4759);
                    let v4763: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4761);
                    let v4765: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v4736))),
                                        string(">move || { v4763 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4767: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4728(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4763 }</svg> };
                    let v4769: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4767);
                    let v4773: string = string("vec![v4769]");
                    let v4774: Vec<leptos::prelude::AnyView> = vec![v4769];
                    let v4776: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4774);
                    let v4778: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4776);
                    let v4780: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4725))),
                                        string(">move || { v4778 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4782: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4778 }</span> };
                    let v4784: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4782);
                    let v4792: string = string("vec![v4723, v4784]");
                    let v4793: Vec<leptos::prelude::AnyView> = vec![v4723, v4784];
                    let v4795: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4793);
                    let v4797: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4795);
                    let v4800: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4618))),
                                        string(">move || { v4797 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4802: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4616(()) + " " + &v4613(())>move || { v4797 }</summary> };
                    let v4804: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4802);
                    let v4806: string = string(" class=\"flex flex-1 flex-col\"");
                    let v4810: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4456 = v4456.clone();
                                let v4459 = v4459.clone();
                                let v4462 = v4462.clone();
                                let v4465 = v4465.clone();
                                let v4468 = v4468.clone();
                                move || {
                                    Dice_ui::closure207(
                                        v4456.clone(),
                                        v4465.clone(),
                                        v4468.clone(),
                                        v4459.clone(),
                                        v4462.clone(),
                                        (),
                                    )
                                }
                            })()
                        }));
                    let v4812: leptos::prelude::Fragment = (move || v4810())();
                    let v4814: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4812);
                    let v4816: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4806))),
                                        string(">move || { v4814 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4818: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4814 }</div> };
                    let v4820: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4818);
                    let v4827: string = string("vec![v4804, v4820]");
                    let v4828: Vec<leptos::prelude::AnyView> = vec![v4804, v4820];
                    let v4830: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4828);
                    let v4832: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4830);
                    let v4835: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4610))),
                                        string(">move || { v4832 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4837: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4588(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4585(())>move || { v4832 }</details> };
                    let v4839: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4837);
                    let v4846: string = string("vec![v4606, v4839]");
                    let v4847: Vec<leptos::prelude::AnyView> = vec![v4606, v4839];
                    let v4849: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4847);
                    let v4851: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4849);
                    let v4853: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4582))),
                                        string(">move || { v4851 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4855: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4851 }</div> };
                    let v4857: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4855);
                    let v4858: string = string("vec![]");
                    let v4859: Vec<leptos::prelude::AnyView> = vec![];
                    let v4861: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4859);
                    let v4863: string = string(" class=\"flex flex-col [position:relative]\"");
                    let v4865 = {
                        let clo_17 = Func0::from(v4584);
                        Func1::new({
                            let clo_17 = clo_17.clone();
                            move |arg_17: ()| clo_17()
                        })
                    };
                    let v4867 = {
                        let clo_18 = Func0::from(v4587);
                        Func1::new({
                            let clo_18 = clo_18.clone();
                            move |arg_18: ()| clo_18()
                        })
                    };
                    let v4869: string = string(" class=\"[position:absolute] [right:0] [top:0]\"");
                    let v4873: string = string("vec![v4861]");
                    let v4874: Vec<leptos::prelude::AnyView> = vec![v4861];
                    let v4876: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4874);
                    let v4878: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4876);
                    let v4880: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4869))),
                                        string(">move || { v4878 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4882: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4878 }</div> };
                    let v4884: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4882);
                    let v4885: string =
                            string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4865(())");
                    let v4888: string = append(
                        (append(
                            string(" open=move || v4867(())"),
                            (append(
                                (append((append(string(" "), (v4885))), string(""))),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v4891 = {
                        let clo_19 = Func0::new(move || Dice_ui::closure223((), ()));
                        Func1::new({
                            let clo_19 = clo_19.clone();
                            move |arg_19: ()| clo_19()
                        })
                    };
                    let v4894 = {
                        let clo_20 = Func0::new(move || Dice_ui::closure224((), ()));
                        Func1::new({
                            let clo_20 = clo_20.clone();
                            move |arg_20: ()| clo_20()
                        })
                    };
                    let v4895: string =
                            string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4894(()) + \" \" + &v4891(())");
                    let v4896: string = append(
                        (append((append(string(" "), (v4895))), string(""))),
                        string(""),
                    );
                    let v4898: string = string(" class=\"flex items-center gap-2\"");
                    let v4901: string = string(
                        " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                    );
                    let v4902: string = (Dice_ui::method228())();
                    let v4911: &str = &*v4902;
                    let v4944: std::string::String = String::from(v4911);
                    let v4970: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v4944),
                    );
                    let v4974: string = string("vec![v4970]");
                    let v4975: Vec<leptos::prelude::AnyView> = vec![v4970];
                    let v4977: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4975);
                    let v4979: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4977);
                    let v4981: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v4901))),
                                        string(">move || { v4979 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4983: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4979 }</span> };
                    let v4985: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4983);
                    let v4989: string = string("vec![v4985]");
                    let v4990: Vec<leptos::prelude::AnyView> = vec![v4985];
                    let v4992: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v4990);
                    let v4994: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4992);
                    let v4996: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4898))),
                                        string(">move || { v4994 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v4998: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4994 }</div> };
                    let v5000: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v4998);
                    let v5002: string =
                        string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                    let v5004 = {
                        let clo_21 = Func0::from(v4727);
                        Func1::new({
                            let clo_21 = clo_21.clone();
                            move |arg_21: ()| clo_21()
                        })
                    };
                    let v5012: string =
                            string(" class=move || \" \".to_owned() + &v5004(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v5014: string =
                            string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                    let v5018: string = append(
                        (append(
                            string(" clip-rule=\"evenodd\""),
                            (append(
                                (append(
                                    (append(string(" "), (v5014))),
                                    string(" fill-rule=\"evenodd\""),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v5019: string = string("vec![]");
                    let v5020: Vec<leptos::prelude::AnyView> = vec![];
                    let v5022: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5020);
                    let v5024: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5022);
                    let v5026: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v5018))),
                                        string(">move || { v5024 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5028: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5024 }</path> };
                    let v5030: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5028);
                    let v5034: string = string("vec![v5030]");
                    let v5035: Vec<leptos::prelude::AnyView> = vec![v5030];
                    let v5037: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5035);
                    let v5039: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5037);
                    let v5041: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v5012))),
                                        string(">move || { v5039 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5043: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5004(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5039 }</svg> };
                    let v5045: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5043);
                    let v5049: string = string("vec![v5045]");
                    let v5050: Vec<leptos::prelude::AnyView> = vec![v5045];
                    let v5052: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5050);
                    let v5054: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5052);
                    let v5056: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<span "), (v5002))),
                                        string(">move || { v5054 }</"),
                                    )),
                                    string("span"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5058: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Span, _, _>,
                    > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5054 }</span> };
                    let v5060: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5058);
                    let v5067: string = string("vec![v5000, v5060]");
                    let v5068: Vec<leptos::prelude::AnyView> = vec![v5000, v5060];
                    let v5070: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5068);
                    let v5072: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5070);
                    let v5074: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<summary "), (v4896))),
                                        string(">move || { v5072 }</"),
                                    )),
                                    string("summary"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5076: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                    > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4894(()) + " " + &v4891(())>move || { v5072 }</summary> };
                    let v5078: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5076);
                    let v5080: string = string(" class=\"flex flex-1 flex-col\"");
                    let v5084: Func0<leptos::prelude::Fragment> =
                        Dice_ui::method195(Func0::new(move || {
                            Func0::new({
                                let v4456 = v4456.clone();
                                move || Dice_ui::closure226(v4456.clone(), ())
                            })()
                        }));
                    let v5086: leptos::prelude::Fragment = (move || v5084())();
                    let v5088: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5086);
                    let v5090: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5080))),
                                        string(">move || { v5088 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5092: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5088 }</div> };
                    let v5094: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5092);
                    let v5101: string = string("vec![v5078, v5094]");
                    let v5102: Vec<leptos::prelude::AnyView> = vec![v5078, v5094];
                    let v5104: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5102);
                    let v5106: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5104);
                    let v5108: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<details "), (v4888))),
                                        string(">move || { v5106 }</"),
                                    )),
                                    string("details"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5110: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Details, _, _>,
                    > = leptos::prelude::view! { <details  open=move || v4867(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4865(())>move || { v5106 }</details> };
                    let v5112: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5110);
                    let v5119: string = string("vec![v4884, v5112]");
                    let v5120: Vec<leptos::prelude::AnyView> = vec![v4884, v5112];
                    let v5122: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5120);
                    let v5124: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5122);
                    let v5126: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v4863))),
                                        string(">move || { v5124 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5128: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5124 }</div> };
                    let v5130: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5128);
                    let v5133: std::pin::Pin<
                        Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                    > = Box::pin(v4456.l0.clone());
                    let v5135: LrcPtr<Dice_ui::Heap1> =
                        leptos::prelude::ArcRwSignal::get_untracked(&v5133);
                    let v5416: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                        &v5135.l1.clone(),
                    ) {
                        let v5139: string = string("vec![]");
                        let v5140: Vec<leptos::prelude::AnyView> = vec![];
                        let v5142: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5140);
                        let v5144: string = string(" class=\"flex flex-col [position:relative]\"");
                        let v5146 = {
                            let clo_22 = Func0::from(v4584);
                            Func1::new({
                                let clo_22 = clo_22.clone();
                                move |arg_22: ()| clo_22()
                            })
                        };
                        let v5148 = {
                            let clo_23 = Func0::from(v4587);
                            Func1::new({
                                let clo_23 = clo_23.clone();
                                move |arg_23: ()| clo_23()
                            })
                        };
                        let v5150: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v5154: string = string("vec![v5142]");
                        let v5155: Vec<leptos::prelude::AnyView> = vec![v5142];
                        let v5157: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5155);
                        let v5159: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5157);
                        let v5161: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5150))),
                                            string(">move || { v5159 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5163: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v5159 }</div> };
                        let v5165: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5163);
                        let v5166: string =
                                    string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v5146(())");
                        let v5169: string = append(
                            (append(
                                string(" open=move || v5148(())"),
                                (append(
                                    (append((append(string(" "), (v5166))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5172 = {
                            let clo_24 = Func0::new(move || Dice_ui::closure243((), ()));
                            Func1::new({
                                let clo_24 = clo_24.clone();
                                move |arg_24: ()| clo_24()
                            })
                        };
                        let v5175 = {
                            let clo_25 = Func0::new(move || Dice_ui::closure244((), ()));
                            Func1::new({
                                let clo_25 = clo_25.clone();
                                move |arg_25: ()| clo_25()
                            })
                        };
                        let v5176: string =
                                    string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v5175(()) + \" \" + &v5172(())");
                        let v5177: string = append(
                            (append((append(string(" "), (v5176))), string(""))),
                            string(""),
                        );
                        let v5179: string = string(" class=\"flex items-center gap-2\"");
                        let v5182: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v5183: string = (Dice_ui::method237())();
                        let v5192: &str = &*v5183;
                        let v5225: std::string::String = String::from(v5192);
                        let v5251: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v5225),
                        );
                        let v5255: string = string("vec![v5251]");
                        let v5256: Vec<leptos::prelude::AnyView> = vec![v5251];
                        let v5258: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5256);
                        let v5260: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5258);
                        let v5262: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5182))),
                                            string(">move || { v5260 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5264: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v5260 }</span> };
                        let v5266: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5264);
                        let v5270: string = string("vec![v5266]");
                        let v5271: Vec<leptos::prelude::AnyView> = vec![v5266];
                        let v5273: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5271);
                        let v5275: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5273);
                        let v5277: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5179))),
                                            string(">move || { v5275 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5279: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v5275 }</div> };
                        let v5281: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5279);
                        let v5283: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        let v5285 = {
                            let clo_26 = Func0::from(v4727);
                            Func1::new({
                                let clo_26 = clo_26.clone();
                                move |arg_26: ()| clo_26()
                            })
                        };
                        let v5293: string =
                                    string(" class=move || \" \".to_owned() + &v5285(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v5295: string =
                                    string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v5299: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v5295))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v5300: string = string("vec![]");
                        let v5301: Vec<leptos::prelude::AnyView> = vec![];
                        let v5303: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5301);
                        let v5305: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5303);
                        let v5307: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v5299))),
                                            string(">move || { v5305 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5309: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v5305 }</path> };
                        let v5311: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5309);
                        let v5315: string = string("vec![v5311]");
                        let v5316: Vec<leptos::prelude::AnyView> = vec![v5311];
                        let v5318: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5316);
                        let v5320: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5318);
                        let v5322: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v5293))),
                                            string(">move || { v5320 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5324: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5285(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v5320 }</svg> };
                        let v5326: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5324);
                        let v5330: string = string("vec![v5326]");
                        let v5331: Vec<leptos::prelude::AnyView> = vec![v5326];
                        let v5333: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5331);
                        let v5335: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5333);
                        let v5337: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v5283))),
                                            string(">move || { v5335 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5339: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v5335 }</span> };
                        let v5341: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5339);
                        let v5348: string = string("vec![v5281, v5341]");
                        let v5349: Vec<leptos::prelude::AnyView> = vec![v5281, v5341];
                        let v5351: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5349);
                        let v5353: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5351);
                        let v5355: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v5177))),
                                            string(">move || { v5353 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5357: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v5175(()) + " " + &v5172(())>move || { v5353 }</summary> };
                        let v5359: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5357);
                        let v5361: string = string(" class=\"flex flex-1 flex-col\"");
                        let v5365: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new(move || Dice_ui::closure246((), ()))()
                            }));
                        let v5367: leptos::prelude::Fragment = (move || v5365())();
                        let v5369: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5367);
                        let v5371: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5361))),
                                            string(">move || { v5369 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5373: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v5369 }</div> };
                        let v5375: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5373);
                        let v5382: string = string("vec![v5359, v5375]");
                        let v5383: Vec<leptos::prelude::AnyView> = vec![v5359, v5375];
                        let v5385: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5383);
                        let v5387: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5385);
                        let v5389: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v5169))),
                                            string(">move || { v5387 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5391: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v5148(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v5146(())>move || { v5387 }</details> };
                        let v5393: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v5391);
                        let v5400: string = string("vec![v5165, v5393]");
                        let v5401: Vec<leptos::prelude::AnyView> = vec![v5165, v5393];
                        let v5403: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v5401);
                        let v5405: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5403);
                        let v5407: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v5144))),
                                            string(">move || { v5405 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v5409: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v5405 }</div> };
                        leptos::prelude::IntoAny::into_any(v5409)
                    } else {
                        let v5412: string = string("vec![]");
                        let v5413: Vec<leptos::prelude::AnyView> = vec![];
                        leptos::prelude::IntoAny::into_any(v5413)
                    };
                    let v5426: string = string("vec![v4857, v5130, v5416]");
                    let v5427: Vec<leptos::prelude::AnyView> = vec![v4857, v5130, v5416];
                    Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v5427))
                }
                Dice_ui::US18::US18_3 => {
                    let v3717: bool = true;
                    leptos::logging::log!("{}", string("transactions_view.render (1)"));
                    let v3719: Option<LrcPtr<Dice_ui::Heap2>> =
                        leptos::context::use_context::<std::sync::Arc<Heap2>>();
                    let v3721: LrcPtr<Dice_ui::Heap2> = v3719.unwrap();
                    let v3724: bool = true;
                    leptos::logging::log!("{}", string("use_transactions.render (1)"));
                    let v3727: leptos::prelude::ArcMemo<Vec<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3721 = v3721.clone();
                                move || Dice_ui::closure44(v3721.clone(), ())
                            })()
                        });
                    let v3730: leptos::prelude::ArcMemo<
                        Array<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3727 = v3727.clone();
                            move || Dice_ui::closure46(v3727.clone(), ())
                        })()
                    });
                    let v3733: leptos::prelude::ArcMemo<
                        Vec<(string, Vec<(string, Dice_ui::US23, string, bool, bool)>)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3721 = v3721.clone();
                            let v3727 = v3727.clone();
                            move || Dice_ui::closure48(v3721.clone(), v3727.clone(), ())
                        })()
                    });
                    let v3736: leptos::prelude::ArcMemo<
                        Vec<(string, Dice_ui::US23, string, bool, bool)>,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3733 = v3733.clone();
                            move || Dice_ui::closure51(v3733.clone(), ())
                        })()
                    });
                    let v3739: leptos::prelude::ArcMemo<Array<string>> =
                        leptos::prelude::ArcMemo::new(move |_| {
                            Func0::new({
                                let v3733 = v3733.clone();
                                move || Dice_ui::closure55(v3733.clone(), ())
                            })()
                        });
                    let v3741: leptos::prelude::ArcMemo<
                        Vec<
                            Result<
                                Option<
                                    Array<(
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        std::string::String,
                                        u32,
                                        Array<(std::string::String, Option<std::string::String>)>,
                                        f64,
                                        bool,
                                        f64,
                                        Array<std::string::String>,
                                    )>,
                                >,
                                std::string::String,
                            >,
                        >,
                    > = Dice_ui::method78(
                        v3736,
                        Func1::new(move |v_12: crate::model::near::nearblocks::Root| {
                            Dice_ui::closure60((), v_12)
                        }),
                    );
                    let v3748: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string("use_transactions.render (7) / root func0 / result: "),
                                sprintf!("{:?}", v3741.clone()),
                            )),
                            string(""),
                        ),
                    );
                    let v3750: bool = true;
                    leptos::logging::log!("{}", v3748);
                    let v3753: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, usize, LrcPtr<Dice_ui::Heap5>)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3739 = v3739.clone();
                            let v3741 = v3741.clone();
                            move || Dice_ui::closure90(v3739.clone(), v3741.clone(), ())
                        })()
                    });
                    let v3756: leptos::prelude::ArcMemo<
                        Result<
                            Option<Array<(string, Dice_ui::US23, string, bool, bool)>>,
                            std::string::String,
                        >,
                    > = leptos::prelude::ArcMemo::new(move |_| {
                        Func0::new({
                            let v3753 = v3753.clone();
                            move || Dice_ui::closure107(v3753.clone(), ())
                        })()
                    });
                    let v3768: string = Dice_ui::method8(
                        200_i64,
                        append(
                            (append(
                                string(
                                    "use_transactions.render (12) / rpc_response func0 / result: ",
                                ),
                                sprintf!(
                                    "{:?}",
                                    Dice_ui::method159(
                                        leptos::prelude::ArcMemo::new(move |_| {
                                            Func0::new({
                                                let v3756 = v3756.clone();
                                                move || Dice_ui::closure115(v3756.clone(), ())
                                            })()
                                        }),
                                        Func1::new(
                                            move |v_13: crate::model::near::rpc::RpcResponse| {
                                                Dice_ui::closure119((), v_13)
                                            }
                                        )
                                    )
                                ),
                            )),
                            string(""),
                        ),
                    );
                    let v3770: bool = true;
                    leptos::logging::log!("{}", v3768);
                    let patternInput_4: (
                        leptos::prelude::ReadSignal<bool>,
                        leptos::prelude::WriteSignal<bool>,
                    ) = leptos::prelude::signal(false);
                    let v3772: leptos::prelude::ReadSignal<bool> = patternInput_4.0.clone();
                    let v3774 = Func0::new({
                        let patternInput_4 = patternInput_4.clone();
                        move || Dice_ui::closure254(patternInput_4.1.clone(), ())
                    });
                    {
                        let v3778 = {
                            let clo_27 = Func0::new(move || Dice_ui::closure255((), ()));
                            Func1::new({
                                let clo_27 = clo_27.clone();
                                move |arg_27: ()| clo_27()
                            })
                        };
                        let v3790: string =
                                string(" class=move || \" \".to_owned() + &v3778(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v3793: string =
                                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
                        let v3796: string = append(
                            (append(
                                (append(string(" "), (v3793))),
                                string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                            )),
                            string(""),
                        );
                        let v3797: string = string("vec![]");
                        let v3798: Vec<leptos::prelude::AnyView> = vec![];
                        let v3800: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3798);
                        let v3802: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3800);
                        let v3805: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3796))),
                                            string(">move || { v3802 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3807: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v3802 }</path> };
                        let v3809: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3807);
                        let v3815: string =
                                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                        let v3816: string = string("vec![]");
                        let v3817: Vec<leptos::prelude::AnyView> = vec![];
                        let v3819: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3817);
                        let v3821: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3819);
                        let v3823: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v3815))),
                                            string(">move || { v3821 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3825: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v3821 }</path> };
                        let v3827: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3825);
                        let v3835: string = string("vec![v3809, v3827]");
                        let v3836: Vec<leptos::prelude::AnyView> = vec![v3809, v3827];
                        let v3838: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3836);
                        let v3840: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3838);
                        let v3843: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v3790))),
                                            string(">move || { v3840 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3845: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v3778(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v3840 }</svg> };
                        let v3850 = {
                            let clo_28 = Func0::new({
                                let v3772 = v3772.clone();
                                move || Dice_ui::closure256(v3772.clone(), ())
                            });
                            Func1::new({
                                let clo_28 = clo_28.clone();
                                move |arg_28: ()| clo_28()
                            })
                        };
                        let v3851: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] \".to_owned() + &v3850(())");
                        let v3854: string = append(
                            (append(
                                string(" aria-label=\"Settings\""),
                                (append(
                                    (append(
                                        string(" on:click=move |_| v3774()"),
                                        (append(
                                            (append((append(string(" "), (v3851))), string(""))),
                                            string(""),
                                        )),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3856: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3845);
                        let v3860: string = string("vec![v3856]");
                        let v3861: Vec<leptos::prelude::AnyView> = vec![v3856];
                        let v3863: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3861);
                        let v3865: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3863);
                        let v3868: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<button "), (v3854))),
                                            string(">move || { v3865 }</"),
                                        )),
                                        string("button"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3870: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Button, _, _>,
                        > = leptos::prelude::view! { <button  aria-label="Settings" on:click=move |_| v3774() class=move || "inline-flex shrink-0 items-center [justify-content:center] pb-[8px] pt-[8px] px-[12px] ".to_owned() + &v3850(())>move || { v3865 }</button> };
                        let v3872: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3870);
                        let v3873: string = string("vec![]");
                        let v3874: Vec<leptos::prelude::AnyView> = vec![];
                        let v3876: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3874);
                        let v3878: string = string(" class=\"flex flex-col [position:relative]\"");
                        fn v3880() -> string {
                            Dice_ui::closure161((), ())
                        }
                        let v3881 = {
                            let clo_29 = Func0::from(v3880);
                            Func1::new({
                                let clo_29 = clo_29.clone();
                                move |arg_29: ()| clo_29()
                            })
                        };
                        fn v3883() -> bool {
                            Dice_ui::closure162((), ())
                        }
                        let v3884 = {
                            let clo_30 = Func0::from(v3883);
                            Func1::new({
                                let clo_30 = clo_30.clone();
                                move |arg_30: ()| clo_30()
                            })
                        };
                        let v3886: string =
                            string(" class=\"[position:absolute] [right:0] [top:0]\"");
                        let v3890: string = string("vec![v3872]");
                        let v3891: Vec<leptos::prelude::AnyView> = vec![v3872];
                        let v3893: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3891);
                        let v3895: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3893);
                        let v3898: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3886))),
                                            string(">move || { v3895 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v3900: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v3895 }</div> };
                        let v3902: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v3900);
                        let v3903: string =
                                string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v3881(())");
                        let v3906: string = append(
                            (append(
                                string(" open=move || v3884(())"),
                                (append(
                                    (append((append(string(" "), (v3903))), string(""))),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v3909 = {
                            let clo_31 = Func0::new(move || Dice_ui::closure257((), ()));
                            Func1::new({
                                let clo_31 = clo_31.clone();
                                move |arg_31: ()| clo_31()
                            })
                        };
                        let v3912 = {
                            let clo_32 = Func0::new({
                                let v3872 = v3872.clone();
                                move || Dice_ui::closure258(v3872.clone(), ())
                            });
                            Func1::new({
                                let clo_32 = clo_32.clone();
                                move |arg_32: ()| clo_32()
                            })
                        };
                        let v3913: string =
                                string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v3912(()) + \" \" + &v3909(())");
                        let v3914: string = append(
                            (append((append(string(" "), (v3913))), string(""))),
                            string(""),
                        );
                        let v3916: string = string(" class=\"flex items-center gap-2\"");
                        let v3919: string = string(
                            " class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"",
                        );
                        let v3920: string = (Dice_ui::method243(v3872.clone()))();
                        let v3929: &str = &*v3920;
                        let v3962: std::string::String = String::from(v3929);
                        let v3988: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v3962),
                        );
                        let v3992: string = string("vec![v3988]");
                        let v3993: Vec<leptos::prelude::AnyView> = vec![v3988];
                        let v3995: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v3993);
                        let v3997: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v3995);
                        let v4000: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v3919))),
                                            string(">move || { v3997 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4002: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v3997 }</span> };
                        let v4004: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4002);
                        let v4008: string = string("vec![v4004]");
                        let v4009: Vec<leptos::prelude::AnyView> = vec![v4004];
                        let v4011: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4009);
                        let v4013: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4011);
                        let v4015: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3916))),
                                            string(">move || { v4013 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4017: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4013 }</div> };
                        let v4019: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4017);
                        let v4021: string =
                            string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                        fn v4023() -> string {
                            Dice_ui::closure166((), ())
                        }
                        let v4024 = {
                            let clo_33 = Func0::from(v4023);
                            Func1::new({
                                let clo_33 = clo_33.clone();
                                move |arg_33: ()| clo_33()
                            })
                        };
                        let v4032: string =
                                string(" class=move || \" \".to_owned() + &v4024(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v4034: string =
                                string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                        let v4038: string = append(
                            (append(
                                string(" clip-rule=\"evenodd\""),
                                (append(
                                    (append(
                                        (append(string(" "), (v4034))),
                                        string(" fill-rule=\"evenodd\""),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v4039: string = string("vec![]");
                        let v4040: Vec<leptos::prelude::AnyView> = vec![];
                        let v4042: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4040);
                        let v4044: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4042);
                        let v4046: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<path "), (v4038))),
                                            string(">move || { v4044 }</"),
                                        )),
                                        string("path"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4048: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                        > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4044 }</path> };
                        let v4050: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4048);
                        let v4054: string = string("vec![v4050]");
                        let v4055: Vec<leptos::prelude::AnyView> = vec![v4050];
                        let v4057: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4055);
                        let v4059: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4057);
                        let v4061: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v4032))),
                                            string(">move || { v4059 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4063: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4024(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4059 }</svg> };
                        let v4065: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4063);
                        let v4069: string = string("vec![v4065]");
                        let v4070: Vec<leptos::prelude::AnyView> = vec![v4065];
                        let v4072: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4070);
                        let v4074: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4072);
                        let v4076: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<span "), (v4021))),
                                            string(">move || { v4074 }</"),
                                        )),
                                        string("span"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4078: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Span, _, _>,
                        > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4074 }</span> };
                        let v4080: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4078);
                        let v4087: string = string("vec![v4019, v4080]");
                        let v4088: Vec<leptos::prelude::AnyView> = vec![v4019, v4080];
                        let v4090: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4088);
                        let v4092: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4090);
                        let v4095: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<summary "), (v3914))),
                                            string(">move || { v4092 }</"),
                                        )),
                                        string("summary"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4097: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                        > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v3912(()) + " " + &v3909(())>move || { v4092 }</summary> };
                        let v4099: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4097);
                        let v4101: string = string(" class=\"flex flex-1 flex-col\"");
                        let v4105: Func0<leptos::prelude::Fragment> =
                            Dice_ui::method195(Func0::new(move || {
                                Func0::new({
                                    let v3721 = v3721.clone();
                                    let v3733 = v3733.clone();
                                    let v3753 = v3753.clone();
                                    let v3772 = v3772.clone();
                                    move || {
                                        Dice_ui::closure260(
                                            v3721.clone(),
                                            v3753.clone(),
                                            v3733.clone(),
                                            v3772.clone(),
                                            (),
                                        )
                                    }
                                })()
                            }));
                        let v4107: leptos::prelude::Fragment = (move || v4105())();
                        let v4109: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4107);
                        let v4111: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v4101))),
                                            string(">move || { v4109 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4113: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4109 }</div> };
                        let v4115: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4113);
                        let v4122: string = string("vec![v4099, v4115]");
                        let v4123: Vec<leptos::prelude::AnyView> = vec![v4099, v4115];
                        let v4125: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4123);
                        let v4127: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4125);
                        let v4130: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<details "), (v3906))),
                                            string(">move || { v4127 }</"),
                                        )),
                                        string("details"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4132: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Details, _, _>,
                        > = leptos::prelude::view! { <details  open=move || v3884(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v3881(())>move || { v4127 }</details> };
                        let v4134: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4132);
                        let v4141: string = string("vec![v3902, v4134]");
                        let v4142: Vec<leptos::prelude::AnyView> = vec![v3902, v4134];
                        let v4144: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v4142);
                        let v4146: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v4144);
                        let v4148: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<div "), (v3878))),
                                            string(">move || { v4146 }</"),
                                        )),
                                        string("div"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v4150: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::Div, _, _>,
                        > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4146 }</div> };
                        let v4152: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v4150);
                        let v4155: std::pin::Pin<
                            Box<leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>>>,
                        > = Box::pin(v3721.l0.clone());
                        let v4157: LrcPtr<Dice_ui::Heap1> =
                            leptos::prelude::ArcRwSignal::get_untracked(&v4155);
                        let v4438: leptos::prelude::AnyView = if leptos::prelude::ArcRwSignal::get(
                            &v4157.l1.clone(),
                        ) {
                            let v4161: string = string("vec![]");
                            let v4162: Vec<leptos::prelude::AnyView> = vec![];
                            let v4164: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4162);
                            let v4166: string =
                                string(" class=\"flex flex-col [position:relative]\"");
                            let v4168 = {
                                let clo_34 = Func0::from(v3880);
                                Func1::new({
                                    let clo_34 = clo_34.clone();
                                    move |arg_34: ()| clo_34()
                                })
                            };
                            let v4170 = {
                                let clo_35 = Func0::from(v3883);
                                Func1::new({
                                    let clo_35 = clo_35.clone();
                                    move |arg_35: ()| clo_35()
                                })
                            };
                            let v4172: string =
                                string(" class=\"[position:absolute] [right:0] [top:0]\"");
                            let v4176: string = string("vec![v4164]");
                            let v4177: Vec<leptos::prelude::AnyView> = vec![v4164];
                            let v4179: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4177);
                            let v4181: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4179);
                            let v4183: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4172))),
                                                string(">move || { v4181 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4185: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="[position:absolute] [right:0] [top:0]">move || { v4181 }</div> };
                            let v4187: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4185);
                            let v4188: string =
                                        string("class=move || \"flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 \".to_owned() + &v4168(())");
                            let v4191: string = append(
                                (append(
                                    string(" open=move || v4170(())"),
                                    (append(
                                        (append((append(string(" "), (v4188))), string(""))),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4194 = {
                                let clo_36 = Func0::new(move || Dice_ui::closure337((), ()));
                                Func1::new({
                                    let clo_36 = clo_36.clone();
                                    move |arg_36: ()| clo_36()
                                })
                            };
                            let v4197 = {
                                let clo_37 = Func0::new(move || Dice_ui::closure338((), ()));
                                Func1::new({
                                    let clo_37 = clo_37.clone();
                                    move |arg_37: ()| clo_37()
                                })
                            };
                            let v4198: string =
                                        string("class=move || \"flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 \".to_owned() + v4197(()) + \" \" + &v4194(())");
                            let v4199: string = append(
                                (append((append(string(" "), (v4198))), string(""))),
                                string(""),
                            );
                            let v4201: string = string(" class=\"flex items-center gap-2\"");
                            let v4204: string =
                                        string(" class=\"[font-size:14px] [line-height:21px] [padding-right:11px]\"");
                            let v4205: string = (Dice_ui::method282())();
                            let v4214: &str = &*v4205;
                            let v4247: std::string::String = String::from(v4214);
                            let v4273: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v4247),
                                );
                            let v4277: string = string("vec![v4273]");
                            let v4278: Vec<leptos::prelude::AnyView> = vec![v4273];
                            let v4280: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4278);
                            let v4282: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4280);
                            let v4284: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4204))),
                                                string(">move || { v4282 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4286: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="[font-size:14px] [line-height:21px] [padding-right:11px]">move || { v4282 }</span> };
                            let v4288: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4286);
                            let v4292: string = string("vec![v4288]");
                            let v4293: Vec<leptos::prelude::AnyView> = vec![v4288];
                            let v4295: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4293);
                            let v4297: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4295);
                            let v4299: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4201))),
                                                string(">move || { v4297 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4301: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex items-center gap-2">move || { v4297 }</div> };
                            let v4303: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4301);
                            let v4305: string =
                                string(" class=\"shrink-0 transition duration-300 pt-[2px]\"");
                            let v4307 = {
                                let clo_38 = Func0::from(v4023);
                                Func1::new({
                                    let clo_38 = clo_38.clone();
                                    move |arg_38: ()| clo_38()
                                })
                            };
                            let v4315: string =
                                        string(" class=move || \" \".to_owned() + &v4307(()) fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"");
                            let v4317: string =
                                        string("d=\"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\"");
                            let v4321: string = append(
                                (append(
                                    string(" clip-rule=\"evenodd\""),
                                    (append(
                                        (append(
                                            (append(string(" "), (v4317))),
                                            string(" fill-rule=\"evenodd\""),
                                        )),
                                        string(""),
                                    )),
                                )),
                                string(""),
                            );
                            let v4322: string = string("vec![]");
                            let v4323: Vec<leptos::prelude::AnyView> = vec![];
                            let v4325: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4323);
                            let v4327: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4325);
                            let v4329: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<path "), (v4321))),
                                                string(">move || { v4327 }</"),
                                            )),
                                            string("path"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4331: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                            > = leptos::prelude::view! { <path  clip-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" fill-rule="evenodd">move || { v4327 }</path> };
                            let v4333: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4331);
                            let v4337: string = string("vec![v4333]");
                            let v4338: Vec<leptos::prelude::AnyView> = vec![v4333];
                            let v4340: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4338);
                            let v4342: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4340);
                            let v4344: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<svg "), (v4315))),
                                                string(">move || { v4342 }</"),
                                            )),
                                            string("svg"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4346: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                            > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v4307(()) fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">move || { v4342 }</svg> };
                            let v4348: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4346);
                            let v4352: string = string("vec![v4348]");
                            let v4353: Vec<leptos::prelude::AnyView> = vec![v4348];
                            let v4355: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4353);
                            let v4357: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4355);
                            let v4359: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<span "), (v4305))),
                                                string(">move || { v4357 }</"),
                                            )),
                                            string("span"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4361: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Span, _, _>,
                            > = leptos::prelude::view! { <span  class="shrink-0 transition duration-300 pt-[2px]">move || { v4357 }</span> };
                            let v4363: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4361);
                            let v4370: string = string("vec![v4303, v4363]");
                            let v4371: Vec<leptos::prelude::AnyView> = vec![v4303, v4363];
                            let v4373: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4371);
                            let v4375: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4373);
                            let v4377: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<summary "), (v4199))),
                                                string(">move || { v4375 }</"),
                                            )),
                                            string("summary"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4379: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Summary, _, _>,
                            > = leptos::prelude::view! { <summary  class=move || "flex flex-1 items-center justify-between px-4 cursor-pointer text-gray-600 hover:text-gray-700 bg-gray-300 hover:bg-gray-200 ".to_owned() + v4197(()) + " " + &v4194(())>move || { v4375 }</summary> };
                            let v4381: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4379);
                            let v4383: string = string(" class=\"flex flex-1 flex-col\"");
                            let v4387: Func0<leptos::prelude::Fragment> =
                                Dice_ui::method195(Func0::new(move || {
                                    Func0::new({
                                        let v3753 = v3753.clone();
                                        move || Dice_ui::closure340(v3753.clone(), ())
                                    })()
                                }));
                            let v4389: leptos::prelude::Fragment = (move || v4387())();
                            let v4391: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4389);
                            let v4393: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4383))),
                                                string(">move || { v4391 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4395: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col">move || { v4391 }</div> };
                            let v4397: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4395);
                            let v4404: string = string("vec![v4381, v4397]");
                            let v4405: Vec<leptos::prelude::AnyView> = vec![v4381, v4397];
                            let v4407: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4405);
                            let v4409: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4407);
                            let v4411: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<details "), (v4191))),
                                                string(">move || { v4409 }</"),
                                            )),
                                            string("details"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4413: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Details, _, _>,
                            > = leptos::prelude::view! { <details  open=move || v4170(()) class=move || "flex flex-1 [&_summary::-webkit-details-marker]:hidden [&>summary>span]:open:-rotate-180 ".to_owned() + &v4168(())>move || { v4409 }</details> };
                            let v4415: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v4413);
                            let v4422: string = string("vec![v4187, v4415]");
                            let v4423: Vec<leptos::prelude::AnyView> = vec![v4187, v4415];
                            let v4425: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v4423);
                            let v4427: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v4425);
                            let v4429: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v4166))),
                                                string(">move || { v4427 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v4431: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-col [position:relative]">move || { v4427 }</div> };
                            leptos::prelude::IntoAny::into_any(v4431)
                        } else {
                            let v4434: string = string("vec![]");
                            let v4435: Vec<leptos::prelude::AnyView> = vec![];
                            leptos::prelude::IntoAny::into_any(v4435)
                        };
                        let v4445: string = string("vec![v4152, v4438]");
                        let v4446: Vec<leptos::prelude::AnyView> = vec![v4152, v4438];
                        Dice_ui::US22::US22_0(leptos::prelude::Fragment::new(v4446))
                    }
                }
                _ => Dice_ui::US22::US22_1,
            };
            let v5453: leptos::prelude::AnyView = match &v5435 {
                Dice_ui::US22::US22_0(v5435_0_0) => {
                    let v5438: string = string(" class=\"flex flex-1 flex-col [overflow-y:auto]\"");
                    let v5440: leptos::prelude::AnyView = leptos::prelude::AnyView::from(
                        match &v5435 {
                            Dice_ui::US22::US22_0(x) => x.clone(),
                            _ => unreachable!(),
                        }
                        .clone(),
                    );
                    let v5443: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<div "), (v5438))),
                                        string(">move || { v5440 }</"),
                                    )),
                                    string("div"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v5445: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::Div, _, _>,
                    > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [overflow-y:auto]">move || { v5440 }</div> };
                    leptos::prelude::IntoAny::into_any(v5445)
                }
                _ => {
                    let v5448: string = string("vec![]");
                    let v5449: Vec<leptos::prelude::AnyView> = vec![];
                    leptos::prelude::IntoAny::into_any(v5449)
                }
            };
            let v5457: string = string("vec![v5453]");
            let v5458: Vec<leptos::prelude::AnyView> = vec![v5453];
            let v5460: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5458);
            let v5462: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5460);
            let v5465: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<main "), (v2114))),
                                string(">move || { v5462 }</"),
                            )),
                            string("main"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5467: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Main, _, _>> = leptos::prelude::view! { <main  class="flex flex-1 flex-col [overflow:hidden]">move || { v5462 }</main> };
            let v5469: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5467);
            let v5471: string = string(" class=\"flex\"");
            let v5474: bool = true;
            leptos::logging::log!("{}", string("menu_tabs.render ()"));
            let v5476: leptos_router::location::Location = leptos_router::hooks::use_location();
            let v5479: leptos::prelude::ArcMemo<string> =
                leptos::prelude::ArcMemo::new(move |_| {
                    Func0::new({
                        let v5476 = v5476.clone();
                        move || Dice_ui::closure41(v5476.clone(), ())
                    })()
                });
            let v5481: string = string(" class=\"hidden\"");
            let v5485: string = string(" class=\"sr-only\" for=\"Tab\"");
            let v5495: &str = &*string("Tab");
            let v5528: std::string::String = String::from(v5495);
            let v5554: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5528));
            let v5558: string = string("vec![v5554]");
            let v5559: Vec<leptos::prelude::AnyView> = vec![v5554];
            let v5561: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5559);
            let v5563: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5561);
            let v5566: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<label "), (v5485))),
                                string(">move || { v5563 }</"),
                            )),
                            string("label"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5568: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Label, _, _>> = leptos::prelude::view! { <label  class="sr-only" for="Tab">move || { v5563 }</label> };
            let v5570: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5568);
            let v5574: string = string(" class=\"w-full rounded-md border-gray-200\" id=\"Tab\"");
            let v5575 = Dice_ui::method285(v1751.clone());
            let v5577: string = string(" selected=v5575()");
            let v5587: &str = &*string("Settings");
            let v5620: std::string::String = String::from(v5587);
            let v5646: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5620));
            let v5650: string = string("vec![v5646]");
            let v5651: Vec<leptos::prelude::AnyView> = vec![v5646];
            let v5653: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5651);
            let v5655: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5653);
            let v5658: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5577))),
                                string(">move || { v5655 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5660: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5575()>move || { v5655 }</option> };
            let v5662: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5660);
            let v5663 = Dice_ui::method286(v1751.clone());
            let v5665: string = string(" selected=v5663()");
            let v5675: &str = &*string("Transactions");
            let v5708: std::string::String = String::from(v5675);
            let v5734: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5708));
            let v5738: string = string("vec![v5734]");
            let v5739: Vec<leptos::prelude::AnyView> = vec![v5734];
            let v5741: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5739);
            let v5743: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5741);
            let v5745: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5665))),
                                string(">move || { v5743 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5747: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5663()>move || { v5743 }</option> };
            let v5749: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5747);
            let v5750 = Dice_ui::method287(v1751.clone());
            let v5752: string = string(" selected=v5750()");
            let v5762: &str = &*string("Lists");
            let v5795: std::string::String = String::from(v5762);
            let v5821: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5795));
            let v5825: string = string("vec![v5821]");
            let v5826: Vec<leptos::prelude::AnyView> = vec![v5821];
            let v5828: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5826);
            let v5830: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5828);
            let v5832: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5752))),
                                string(">move || { v5830 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5834: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5750()>move || { v5830 }</option> };
            let v5836: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5834);
            let v5837 = Dice_ui::method288(v1751.clone());
            let v5839: string = string(" selected=v5837()");
            let v5849: &str = &*string("Dice");
            let v5882: std::string::String = String::from(v5849);
            let v5908: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v5882));
            let v5912: string = string("vec![v5908]");
            let v5913: Vec<leptos::prelude::AnyView> = vec![v5908];
            let v5915: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5913);
            let v5917: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5915);
            let v5919: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<option "), (v5839))),
                                string(">move || { v5917 }</"),
                            )),
                            string("option"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5921: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Option_, _, _>,
            > = leptos::prelude::view! { <option  selected=v5837()>move || { v5917 }</option> };
            let v5923: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5921);
            let v5937: string = string("vec![v5923, v5836, v5749, v5662]");
            let v5938: Vec<leptos::prelude::AnyView> = vec![v5923, v5836, v5749, v5662];
            let v5940: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5938);
            let v5942: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5940);
            let v5945: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<select "), (v5574))),
                                string(">move || { v5942 }</"),
                            )),
                            string("select"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5947: leptos::prelude::View<
                leptos::html::HtmlElement<leptos::html::Select, _, _>,
            > = leptos::prelude::view! { <select  class="w-full rounded-md border-gray-200" id="Tab">move || { v5942 }</select> };
            let v5949: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v5947);
            let v5956: string = string("vec![v5570, v5949]");
            let v5957: Vec<leptos::prelude::AnyView> = vec![v5570, v5949];
            let v5959: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5957);
            let v5961: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5959);
            let v5964: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<div "), (v5481))),
                                string(">move || { v5961 }</"),
                            )),
                            string("div"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v5966: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                leptos::prelude::view! { <div  class="hidden">move || { v5961 }</div> };
            let v5968: string =
                string(" class=\"flex flex-1 [overflow-x:auto] [overflow-y:hidden]\"");
            let v5970: string = string(" class=\"flex flex-1 border-t border-gray-200\"");
            let v5971: string =
                string("class=\"-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]\"");
            let v5974: string = append(
                (append(
                    string(" aria-label=\"Tabs\""),
                    (append(
                        (append((append(string(" "), (v5971))), string(""))),
                        string(""),
                    )),
                )),
                string(""),
            );
            fn v5976() -> string {
                Dice_ui::closure348((), ())
            }
            let v5977 = {
                let clo_39 = Func0::from(v5976);
                Func1::new({
                    let clo_39 = clo_39.clone();
                    move |arg_39: ()| clo_39()
                })
            };
            let v5989: string =
                string(" class=move || \" \".to_owned() + &v5977(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
            let v5992: string =
                string("d=\"M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z\"");
            let v5995: string = append(
                (append(
                    (append(string(" "), (v5992))),
                    string(" stroke-linejoin=\"round\" stroke-linecap=\"round\""),
                )),
                string(""),
            );
            let v5996: string = string("vec![]");
            let v5997: Vec<leptos::prelude::AnyView> = vec![];
            let v5999: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v5997);
            let v6001: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v5999);
            let v6004: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v5995))),
                                string(">move || { v6001 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6006: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M10.343 3.94c.09-.542.56-.94 1.11-.94h1.093c.55 0 1.02.398 1.11.94l.149.894c.07.424.384.764.78.93.398.164.855.142 1.205-.108l.737-.527a1.125 1.125 0 011.45.12l.773.774c.39.389.44 1.002.12 1.45l-.527.737c-.25.35-.272.806-.107 1.204.165.397.505.71.93.78l.893.15c.543.09.94.56.94 1.109v1.094c0 .55-.397 1.02-.94 1.11l-.893.149c-.425.07-.765.383-.93.78-.165.398-.143.854.107 1.204l.527.738c.32.447.269 1.06-.12 1.45l-.774.773a1.125 1.125 0 01-1.449.12l-.738-.527c-.35-.25-.806-.272-1.203-.107-.397.165-.71.505-.781.929l-.149.894c-.09.542-.56.94-1.11.94h-1.094c-.55 0-1.019-.398-1.11-.94l-.148-.894c-.071-.424-.384-.764-.781-.93-.398-.164-.854-.142-1.204.108l-.738.527c-.447.32-1.06.269-1.45-.12l-.773-.774a1.125 1.125 0 01-.12-1.45l.527-.737c.25-.35.273-.806.108-1.204-.165-.397-.505-.71-.93-.78l-.894-.15c-.542-.09-.94-.56-.94-1.109v-1.094c0-.55.398-1.02.94-1.11l.894-.149c.424-.07.765-.383.93-.78.165-.398.143-.854-.107-1.204l-.527-.738a1.125 1.125 0 01.12-1.45l.773-.773a1.125 1.125 0 011.45-.12l.737.527c.35.25.807.272 1.204.107.397-.165.71-.505.78-.929l.15-.894z" stroke-linejoin="round" stroke-linecap="round">move || { v6001 }</path> };
            let v6008: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6006);
            let v6014: string =
                string(" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
            let v6015: string = string("vec![]");
            let v6016: Vec<leptos::prelude::AnyView> = vec![];
            let v6018: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6016);
            let v6020: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6018);
            let v6022: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<path "), (v6014))),
                                string(">move || { v6020 }</"),
                            )),
                            string("path"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6024: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Path, _, _>> = leptos::prelude::view! { <path  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" stroke-linejoin="round" stroke-linecap="round">move || { v6020 }</path> };
            let v6026: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6024);
            let v6033: string = string("vec![v6008, v6026]");
            let v6034: Vec<leptos::prelude::AnyView> = vec![v6008, v6026];
            let v6036: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6034);
            let v6038: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6036);
            let v6041: string = append(
                (append(
                    string("leptos::prelude::view! { "),
                    (append(
                        (append(
                            (append(
                                (append(string("<svg "), (v5989))),
                                string(">move || { v6038 }</"),
                            )),
                            string("svg"),
                        )),
                        string(">"),
                    )),
                )),
                string(" }"),
            );
            let v6043: leptos::prelude::View<leptos::html::HtmlElement<leptos::svg::Svg, _, _>> = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v5977(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6038 }</svg> };
            let v6045: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6043);
            let v6049: string = string("vec![v6045]");
            let v6050: Vec<leptos::prelude::AnyView> = vec![v6045];
            let v6052: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6050);
            let v6053 = Func0::new({
                let v5479 = v5479.clone();
                move || Dice_ui::closure349(v5479.clone(), ())
            });
            {
                let v6057 = {
                    let clo_40 = Func0::new({
                        let v1751 = v1751.clone();
                        move || Dice_ui::closure350(v1751.clone(), ())
                    });
                    Func1::new({
                        let clo_40 = clo_40.clone();
                        move |arg_40: ()| clo_40()
                    })
                };
                let v6060 = {
                    let clo_41 = Func0::new({
                        let v1751 = v1751.clone();
                        move || Dice_ui::closure351(v1751.clone(), ())
                    });
                    Func1::new({
                        let clo_41 = clo_41.clone();
                        move |arg_41: ()| clo_41()
                    })
                };
                let v6062: string =
                    string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6060(())");
                let v6066: string = append(
                    (append(
                        string(" aria-current=move || if v6057(()) { \"page\" } else { \"\" }"),
                        (append(
                            (append(
                                (append(string(" "), (v6062))),
                                string(" href=move || v6053()"),
                            )),
                            string(""),
                        )),
                    )),
                    string(""),
                );
                let v6068: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6052);
                let v6077: &str = &*string("Settings");
                let v6110: std::string::String = String::from(v6077);
                let v6136: leptos::prelude::AnyView =
                    leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v6110));
                let v6143: string = string("vec![v6068, v6136]");
                let v6144: Vec<leptos::prelude::AnyView> = vec![v6068, v6136];
                let v6146: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6144);
                let v6148: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6146);
                let v6151: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<a "), (v6066))),
                                    string(">move || { v6148 }</"),
                                )),
                                string("a"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6153: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::A, _, _>> = leptos::prelude::view! { <a  aria-current=move || if v6057(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6060(()) href=move || v6053()>move || { v6148 }</a> };
                let v6155: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6153);
                let v6157 = {
                    let clo_42 = Func0::from(v5976);
                    Func1::new({
                        let clo_42 = clo_42.clone();
                        move |arg_42: ()| clo_42()
                    })
                };
                let v6171: string =
                    string(" class=move || \"text-gray-700 \".to_owned() + &v6157(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                let v6177: string =
                    string(" d=\"M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                let v6178: string = string("vec![]");
                let v6179: Vec<leptos::prelude::AnyView> = vec![];
                let v6181: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6179);
                let v6183: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6181);
                let v6185: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<path "), (v6177))),
                                    string(">move || { v6183 }</"),
                                )),
                                string("path"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6187: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                > = leptos::prelude::view! { <path  d="M4 12h16m-7-7l7 7-7 7m-2-14l-7 7 7 7" stroke-linejoin="round" stroke-linecap="round">move || { v6183 }</path> };
                let v6189: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6187);
                let v6193: string = string("vec![v6189]");
                let v6194: Vec<leptos::prelude::AnyView> = vec![v6189];
                let v6196: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6194);
                let v6198: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6196);
                let v6200: string = append(
                    (append(
                        string("leptos::prelude::view! { "),
                        (append(
                            (append(
                                (append(
                                    (append(string("<svg "), (v6171))),
                                    string(">move || { v6198 }</"),
                                )),
                                string("svg"),
                            )),
                            string(">"),
                        )),
                    )),
                    string(" }"),
                );
                let v6202: leptos::prelude::View<
                    leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6157(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6198 }</svg> };
                let v6204: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6202);
                let v6208: string = string("vec![v6204]");
                let v6209: Vec<leptos::prelude::AnyView> = vec![v6204];
                let v6211: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6209);
                let v6212 = Func0::new({
                    let v5479 = v5479.clone();
                    move || Dice_ui::closure352(v5479.clone(), ())
                });
                {
                    let v6216 = {
                        let clo_43 = Func0::new({
                            let v1751 = v1751.clone();
                            move || Dice_ui::closure353(v1751.clone(), ())
                        });
                        Func1::new({
                            let clo_43 = clo_43.clone();
                            move |arg_43: ()| clo_43()
                        })
                    };
                    let v6219 = {
                        let clo_44 = Func0::new({
                            let v1751 = v1751.clone();
                            move || Dice_ui::closure354(v1751.clone(), ())
                        });
                        Func1::new({
                            let clo_44 = clo_44.clone();
                            move |arg_44: ()| clo_44()
                        })
                    };
                    let v6221: string =
                        string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6219(())");
                    let v6225: string = append(
                        (append(
                            string(" aria-current=move || if v6216(()) { \"page\" } else { \"\" }"),
                            (append(
                                (append(
                                    (append(string(" "), (v6221))),
                                    string(" href=move || v6212()"),
                                )),
                                string(""),
                            )),
                        )),
                        string(""),
                    );
                    let v6227: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6211);
                    let v6236: &str = &*string("Transactions");
                    let v6269: std::string::String = String::from(v6236);
                    let v6295: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                        leptos::prelude::IntoView::into_view(v6269),
                    );
                    let v6302: string = string("vec![v6227, v6295]");
                    let v6303: Vec<leptos::prelude::AnyView> = vec![v6227, v6295];
                    let v6305: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6303);
                    let v6307: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6305);
                    let v6309: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<a "), (v6225))),
                                        string(">move || { v6307 }</"),
                                    )),
                                    string("a"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6311: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::html::A, _, _>,
                    > = leptos::prelude::view! { <a  aria-current=move || if v6216(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6219(()) href=move || v6212()>move || { v6307 }</a> };
                    let v6313: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6311);
                    let v6315 = {
                        let clo_45 = Func0::from(v5976);
                        Func1::new({
                            let clo_45 = clo_45.clone();
                            move |arg_45: ()| clo_45()
                        })
                    };
                    let v6329: string =
                        string(" class=move || \"text-gray-700 \".to_owned() + &v6315(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" height=\"100%\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                    let v6335: string =
                        string(" d=\"M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5\" stroke-linejoin=\"round\" stroke-linecap=\"round\"");
                    let v6336: string = string("vec![]");
                    let v6337: Vec<leptos::prelude::AnyView> = vec![];
                    let v6339: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6337);
                    let v6341: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6339);
                    let v6343: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<path "), (v6335))),
                                        string(">move || { v6341 }</"),
                                    )),
                                    string("path"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6345: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Path, _, _>,
                    > = leptos::prelude::view! { <path  d="M4.75 6.75h14.5M4.75 12h14.5M4.75 17.25h14.5" stroke-linejoin="round" stroke-linecap="round">move || { v6341 }</path> };
                    let v6347: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6345);
                    let v6355: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"6.75\" cx=\"3\"");
                    let v6356: string = string("vec![]");
                    let v6357: Vec<leptos::prelude::AnyView> = vec![];
                    let v6359: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6357);
                    let v6361: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6359);
                    let v6364: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6355))),
                                        string(">move || { v6361 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6366: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="6.75" cx="3">move || { v6361 }</circle> };
                    let v6368: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6366);
                    let v6376: string = string(" fill=\"currentColor\" r=\"1\" cy=\"12\" cx=\"3\"");
                    let v6377: string = string("vec![]");
                    let v6378: Vec<leptos::prelude::AnyView> = vec![];
                    let v6380: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6378);
                    let v6382: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6380);
                    let v6384: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6376))),
                                        string(">move || { v6382 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6386: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="12" cx="3">move || { v6382 }</circle> };
                    let v6388: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6386);
                    let v6396: string =
                        string(" fill=\"currentColor\" r=\"1\" cy=\"17.25\" cx=\"3\"");
                    let v6397: string = string("vec![]");
                    let v6398: Vec<leptos::prelude::AnyView> = vec![];
                    let v6400: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6398);
                    let v6402: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6400);
                    let v6404: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<circle "), (v6396))),
                                        string(">move || { v6402 }</"),
                                    )),
                                    string("circle"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6406: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                    > = leptos::prelude::view! { <circle  fill="currentColor" r="1" cy="17.25" cx="3">move || { v6402 }</circle> };
                    let v6408: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6406);
                    let v6421: string = string("vec![v6347, v6368, v6388, v6408]");
                    let v6422: Vec<leptos::prelude::AnyView> = vec![v6347, v6368, v6388, v6408];
                    let v6424: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6422);
                    let v6426: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6424);
                    let v6428: string = append(
                        (append(
                            string("leptos::prelude::view! { "),
                            (append(
                                (append(
                                    (append(
                                        (append(string("<svg "), (v6329))),
                                        string(">move || { v6426 }</"),
                                    )),
                                    string("svg"),
                                )),
                                string(">"),
                            )),
                        )),
                        string(" }"),
                    );
                    let v6430: leptos::prelude::View<
                        leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                    > = leptos::prelude::view! { <svg  class=move || "text-gray-700 ".to_owned() + &v6315(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" height="100%" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6426 }</svg> };
                    let v6432: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v6430);
                    let v6436: string = string("vec![v6432]");
                    let v6437: Vec<leptos::prelude::AnyView> = vec![v6432];
                    let v6439: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v6437);
                    let v6440 = Func0::new({
                        let v5479 = v5479.clone();
                        move || Dice_ui::closure355(v5479.clone(), ())
                    });
                    {
                        let v6444 = {
                            let clo_46 = Func0::new({
                                let v1751 = v1751.clone();
                                move || Dice_ui::closure356(v1751.clone(), ())
                            });
                            Func1::new({
                                let clo_46 = clo_46.clone();
                                move |arg_46: ()| clo_46()
                            })
                        };
                        let v6447 = {
                            let clo_47 = Func0::new({
                                let v1751 = v1751.clone();
                                move || Dice_ui::closure357(v1751.clone(), ())
                            });
                            Func1::new({
                                let clo_47 = clo_47.clone();
                                move |arg_47: ()| clo_47()
                            })
                        };
                        let v6449: string =
                            string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6447(())");
                        let v6453: string = append(
                            (append(
                                string(
                                    " aria-current=move || if v6444(()) { \"page\" } else { \"\" }",
                                ),
                                (append(
                                    (append(
                                        (append(string(" "), (v6449))),
                                        string(" href=move || v6440()"),
                                    )),
                                    string(""),
                                )),
                            )),
                            string(""),
                        );
                        let v6455: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6439);
                        let v6464: &str = &*string("Lists");
                        let v6497: std::string::String = String::from(v6464);
                        let v6523: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(
                            leptos::prelude::IntoView::into_view(v6497),
                        );
                        let v6530: string = string("vec![v6455, v6523]");
                        let v6531: Vec<leptos::prelude::AnyView> = vec![v6455, v6523];
                        let v6533: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6531);
                        let v6535: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6533);
                        let v6537: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<a "), (v6453))),
                                            string(">move || { v6535 }</"),
                                        )),
                                        string("a"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6539: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::html::A, _, _>,
                        > = leptos::prelude::view! { <a  aria-current=move || if v6444(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6447(()) href=move || v6440()>move || { v6535 }</a> };
                        let v6541: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6539);
                        let v6543 = {
                            let clo_48 = Func0::from(v5976);
                            Func1::new({
                                let clo_48 = clo_48.clone();
                                move |arg_48: ()| clo_48()
                            })
                        };
                        let v6555: string =
                            string(" class=move || \" \".to_owned() + &v6543(()) stroke=\"currentColor\" stroke-width=\"1.5\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"");
                        let v6569: string =
                            string(" stroke-linejoin=\"round\" stroke-linecap=\"round\" rx=\"2\" height=\"18\" width=\"18\" y=\"3\" x=\"3\"");
                        let v6570: string = string("vec![]");
                        let v6571: Vec<leptos::prelude::AnyView> = vec![];
                        let v6573: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6571);
                        let v6575: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6573);
                        let v6578: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<rect "), (v6569))),
                                            string(">move || { v6575 }</"),
                                        )),
                                        string("rect"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6580: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Rect, _, _>,
                        > = leptos::prelude::view! { <rect  stroke-linejoin="round" stroke-linecap="round" rx="2" height="18" width="18" y="3" x="3">move || { v6575 }</rect> };
                        let v6582: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6580);
                        let v6590: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"7.5\"");
                        let v6591: string = string("vec![]");
                        let v6592: Vec<leptos::prelude::AnyView> = vec![];
                        let v6594: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6592);
                        let v6596: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6594);
                        let v6598: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6590))),
                                            string(">move || { v6596 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6600: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="7.5">move || { v6596 }</circle> };
                        let v6602: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6600);
                        let v6610: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"7.5\" cx=\"16.5\"");
                        let v6611: string = string("vec![]");
                        let v6612: Vec<leptos::prelude::AnyView> = vec![];
                        let v6614: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6612);
                        let v6616: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6614);
                        let v6618: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6610))),
                                            string(">move || { v6616 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6620: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="7.5" cx="16.5">move || { v6616 }</circle> };
                        let v6622: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6620);
                        let v6630: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"12\" cx=\"12\"");
                        let v6631: string = string("vec![]");
                        let v6632: Vec<leptos::prelude::AnyView> = vec![];
                        let v6634: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6632);
                        let v6636: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6634);
                        let v6638: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6630))),
                                            string(">move || { v6636 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6640: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="12" cx="12">move || { v6636 }</circle> };
                        let v6642: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6640);
                        let v6650: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"7.5\"");
                        let v6651: string = string("vec![]");
                        let v6652: Vec<leptos::prelude::AnyView> = vec![];
                        let v6654: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6652);
                        let v6656: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6654);
                        let v6658: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6650))),
                                            string(">move || { v6656 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6660: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="7.5">move || { v6656 }</circle> };
                        let v6662: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6660);
                        let v6670: string =
                            string(" fill=\"currentColor\" r=\"1.5\" cy=\"16.5\" cx=\"16.5\"");
                        let v6671: string = string("vec![]");
                        let v6672: Vec<leptos::prelude::AnyView> = vec![];
                        let v6674: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6672);
                        let v6676: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6674);
                        let v6678: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<circle "), (v6670))),
                                            string(">move || { v6676 }</"),
                                        )),
                                        string("circle"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6680: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Circle, _, _>,
                        > = leptos::prelude::view! { <circle  fill="currentColor" r="1.5" cy="16.5" cx="16.5">move || { v6676 }</circle> };
                        let v6682: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6680);
                        let v6701: string =
                            string("vec![v6582, v6602, v6622, v6642, v6662, v6682]");
                        let v6702: Vec<leptos::prelude::AnyView> =
                            vec![v6582, v6602, v6622, v6642, v6662, v6682];
                        let v6704: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6702);
                        let v6706: leptos::prelude::AnyView = leptos::prelude::AnyView::from(v6704);
                        let v6708: string = append(
                            (append(
                                string("leptos::prelude::view! { "),
                                (append(
                                    (append(
                                        (append(
                                            (append(string("<svg "), (v6555))),
                                            string(">move || { v6706 }</"),
                                        )),
                                        string("svg"),
                                    )),
                                    string(">"),
                                )),
                            )),
                            string(" }"),
                        );
                        let v6710: leptos::prelude::View<
                            leptos::html::HtmlElement<leptos::svg::Svg, _, _>,
                        > = leptos::prelude::view! { <svg  class=move || " ".to_owned() + &v6543(()) stroke="currentColor" stroke-width="1.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">move || { v6706 }</svg> };
                        let v6712: leptos::prelude::AnyView =
                            leptos::prelude::IntoAny::into_any(v6710);
                        let v6716: string = string("vec![v6712]");
                        let v6717: Vec<leptos::prelude::AnyView> = vec![v6712];
                        let v6719: leptos::prelude::Fragment =
                            leptos::prelude::Fragment::new(v6717);
                        let v6720 = Func0::new({
                            let v5479 = v5479.clone();
                            move || Dice_ui::closure358(v5479.clone(), ())
                        });
                        {
                            let v6724 = {
                                let clo_49 = Func0::new({
                                    let v1751 = v1751.clone();
                                    move || Dice_ui::closure359(v1751.clone(), ())
                                });
                                Func1::new({
                                    let clo_49 = clo_49.clone();
                                    move |arg_49: ()| clo_49()
                                })
                            };
                            let v6727 = {
                                let clo_50 = Func0::new({
                                    let v1751 = v1751.clone();
                                    move || Dice_ui::closure360(v1751.clone(), ())
                                });
                                Func1::new({
                                    let clo_50 = clo_50.clone();
                                    move |arg_50: ()| clo_50()
                                })
                            };
                            let v6729: string =
                                string("class=move || \"inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium \".to_owned() + v6727(())");
                            let v6733: string =
                                append((append(string(" aria-current=move || if v6724(()) { \"page\" } else { \"\" }"),
                                               (append((append((append(string(" "),
                                                                       (v6729))),
                                                               string(" href=move || v6720()"))),
                                                       string(""))))),
                                       string(""));
                            let v6735: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6719);
                            let v6744: &str = &*string("Dice");
                            let v6777: std::string::String = String::from(v6744);
                            let v6803: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(
                                    leptos::prelude::IntoView::into_view(v6777),
                                );
                            let v6810: string = string("vec![v6735, v6803]");
                            let v6811: Vec<leptos::prelude::AnyView> = vec![v6735, v6803];
                            let v6813: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6811);
                            let v6815: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6813);
                            let v6817: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<a "), (v6733))),
                                                string(">move || { v6815 }</"),
                                            )),
                                            string("a"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6819: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::A, _, _>,
                            > = leptos::prelude::view! { <a  aria-current=move || if v6724(()) { "page" } else { "" } class=move || "inline-flex shrink-0 items-center [justify-content:center] flex-1 gap-2 border-t-2 [white-space:nowrap] mb-[11px] pt-[8px] pr-[15px] pl-[15px] text-sm font-medium ".to_owned() + v6727(()) href=move || v6720()>move || { v6815 }</a> };
                            let v6821: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6819);
                            let v6834: string = string("vec![v6821, v6541, v6313, v6155]");
                            let v6835: Vec<leptos::prelude::AnyView> =
                                vec![v6821, v6541, v6313, v6155];
                            let v6837: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6835);
                            let v6839: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6837);
                            let v6842: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<nav "), (v5974))),
                                                string(">move || { v6839 }</"),
                                            )),
                                            string("nav"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6844: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Nav, _, _>,
                            > = leptos::prelude::view! { <nav  aria-label="Tabs" class="-mb-px flex [flex-flow:wrap] [flex-grow:1] [flex-shrink:0] gap-[3px] [overflow-wrap:anywhere]">move || { v6839 }</nav> };
                            let v6846: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6844);
                            let v6850: string = string("vec![v6846]");
                            let v6851: Vec<leptos::prelude::AnyView> = vec![v6846];
                            let v6853: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6851);
                            let v6855: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6853);
                            let v6857: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5970))),
                                                string(">move || { v6855 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6859: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 border-t border-gray-200">move || { v6855 }</div> };
                            let v6861: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6859);
                            let v6865: string = string("vec![v6861]");
                            let v6866: Vec<leptos::prelude::AnyView> = vec![v6861];
                            let v6868: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6866);
                            let v6870: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6868);
                            let v6872: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5968))),
                                                string(">move || { v6870 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6874: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 [overflow-x:auto] [overflow-y:hidden]">move || { v6870 }</div> };
                            let v6876: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6874);
                            let v6878: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v5966);
                            let v6885: string = string("vec![v6878, v6876]");
                            let v6886: Vec<leptos::prelude::AnyView> = vec![v6878, v6876];
                            let v6888: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6886);
                            let v6890: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6888);
                            let v6892: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v5471))),
                                                string(">move || { v6890 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6894: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex">move || { v6890 }</div> };
                            let v6896: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6894);
                            let v6903: string = string("vec![v5469, v6896]");
                            let v6904: Vec<leptos::prelude::AnyView> = vec![v5469, v6896];
                            let v6906: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6904);
                            let v6908: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6906);
                            let v6910: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2112))),
                                                string(">move || { v6908 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6912: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 flex-col [width:100vw] [max-width:100vw] max-[100px]:[min-width:800px] [height:100vh] [max-height:100dvh] [max-height:-webkit-fill-available] max-[60px]:[min-height:600px] bg-gray-50 text-gray-700 text-sm">move || { v6908 }</div> };
                            let v6914: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6912);
                            let v6918: string = string("vec![v6914]");
                            let v6919: Vec<leptos::prelude::AnyView> = vec![v6914];
                            let v6921: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6919);
                            let v6923: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6921);
                            let v6925: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v2110))),
                                                string(">move || { v6923 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            let v6927: leptos::prelude::View<
                                leptos::html::HtmlElement<leptos::html::Div, _, _>,
                            > = leptos::prelude::view! { <div  class="flex flex-1 max-[100px]:[overflow-x:auto]">move || { v6923 }</div> };
                            let v6929: leptos::prelude::AnyView =
                                leptos::prelude::IntoAny::into_any(v6927);
                            let v6933: string = string("vec![v6929]");
                            let v6934: Vec<leptos::prelude::AnyView> = vec![v6929];
                            let v6936: leptos::prelude::Fragment =
                                leptos::prelude::Fragment::new(v6934);
                            let v6938: leptos::prelude::AnyView =
                                leptos::prelude::AnyView::from(v6936);
                            let v6940: string = append(
                                (append(
                                    string("leptos::prelude::view! { "),
                                    (append(
                                        (append(
                                            (append(
                                                (append(string("<div "), (v1732))),
                                                string(">move || { v6938 }</"),
                                            )),
                                            string("div"),
                                        )),
                                        string(">"),
                                    )),
                                )),
                                string(" }"),
                            );
                            leptos::prelude::view! { <div  class:dark={move || v1728()} class="flex flex-1">move || { v6938 }</div> }
                        }
                    }
                }
            }
        }
        pub fn method5(
        ) -> Func1<i32, leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>>
        {
            Func1::new(move |v: i32| Dice_ui::closure5((), v))
        }
        pub fn method289(v0_1: std::string::String) -> std::string::String {
            v0_1
        }
        pub fn closure361(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(1_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method290(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure361(v0_1.clone(), ())
            })
        }
        pub fn closure362(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1: string = string("vec![]");
            let v2: Vec<leptos::prelude::AnyView> = vec![];
            leptos::prelude::Fragment::new(v2)
        }
        pub fn closure363(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(2_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method291(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure363(v0_1.clone(), ())
            })
        }
        pub fn closure364(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(3_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method292(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure364(v0_1.clone(), ())
            })
        }
        pub fn closure365(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
            unitVar: (),
        ) -> leptos::prelude::AnyView {
            let v1: leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>> =
                v0_1(4_i32);
            let v3: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v1);
            let v8: string = string("vec![v3]");
            let v9: Vec<leptos::prelude::AnyView> = vec![v3];
            let v11: leptos::prelude::Fragment = leptos::prelude::Fragment::new(v9);
            leptos::prelude::AnyView::from(v11)
        }
        pub fn method293(
            v0_1: Func1<
                i32,
                leptos::prelude::View<leptos::html::HtmlElement<leptos::html::Div, _, _>>,
            >,
        ) -> Func0<leptos::prelude::AnyView> {
            Func0::new({
                let v0_1 = v0_1.clone();
                move || Dice_ui::closure365(v0_1.clone(), ())
            })
        }
        pub fn closure4(
            unitVar: (),
            unitVar_1: (),
        ) -> Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>> {
            let v0_1 = Dice_ui::method5();
            let v10: &str = &*string("");
            let v68: std::string::String = Dice_ui::method289(String::from(v10));
            let v69 = Dice_ui::method290(v0_1.clone());
            let v79: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v69() path=leptos_router::path!(v68) /> })");
            let v80: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v69() path=leptos_router::path!(v68) /> },
                );
            let v90: &str = &*string("/");
            let v148: std::string::String = Dice_ui::method289(String::from(v90));
            let v149 = Dice_ui::method291(v0_1.clone());
            let v157: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v149() path=leptos_router::path!(v148) /> })");
            let v158: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v149() path=leptos_router::path!(v148) /> },
                );
            let v168: &str = &*string("/*");
            let v226: std::string::String = Dice_ui::method289(String::from(v168));
            let v227 = Dice_ui::method292(v0_1.clone());
            let v235: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v227() path=leptos_router::path!(v226) /> })");
            let v236: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v227() path=leptos_router::path!(v226) /> },
                );
            let v246: &str = &*string("*");
            let v304: std::string::String = Dice_ui::method289(String::from(v246));
            let v305 = Dice_ui::method293(v0_1);
            let v313: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v305() path=leptos_router::path!(v304) /> })");
            let v314: leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>> =
                leptos::IntoView::into_view(
                    leptos::prelude::view! { <leptos_router::components::ParentRoute  children=Box::new(move || v72()) view= move || v305() path=leptos_router::path!(v304) /> },
                );
            let v328: string = string("vec![v80, v158, v236, v314]");
            vec![v80, v158, v236, v314]
        }
        pub fn method4() -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>
        {
            Func0::new(move || Dice_ui::closure4((), ()))
        }
        pub fn method294(
            v0_1: Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>>,
        ) -> Func0<Vec<leptos::prelude::View<leptos_router::NestedRoute<_, _, _, _>>>> {
            v0_1
        }
        pub fn closure3(unitVar: (), unitVar_1: ()) -> leptos::prelude::Fragment {
            let v1 = Dice_ui::method294(Dice_ui::method4());
            let v11: &str = &*string("leptos.routes / fallback");
            let v44: std::string::String = String::from(v11);
            let v70: leptos::prelude::AnyView =
                leptos::prelude::IntoAny::into_any(leptos::prelude::IntoView::into_view(v44));
            let v78: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v70 /> })");
            let v79 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Routes  children=leptos::children::ToChildren::to_children(move || v1()) fallback=move || v70 /> },
            );
            let v81: leptos::prelude::AnyView = leptos::prelude::IntoAny::into_any(v79);
            let v85: string = string("vec![v81]");
            let v86: Vec<leptos::prelude::AnyView> = vec![v81];
            leptos::prelude::Fragment::new(v86)
        }
        pub fn closure2(unitVar: (), unitVar_1: ()) -> impl leptos::IntoView {
            let v2: bool = true;
            leptos::logging::log!("{}", string("app.render ()"));
            let v4: bool = true;
            leptos_meta::provide_meta_context();
            let v6: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v8: leptos::prelude::ArcRwSignal<bool> = leptos::prelude::ArcRwSignal::new(false);
            let v18: &str = &*string("");
            let v51: std::string::String = String::from(v18);
            let v77: leptos::prelude::ArcRwSignal<std::string::String> =
                leptos::prelude::ArcRwSignal::new(v51);
            let v87: &str = &*string("i574n.near");
            let v120: std::string::String = String::from(v87);
            let v158: &str = &*string("luckier.near");
            let v220: Array<LrcPtr<(bool, std::string::String)>> = new_array(&[
                LrcPtr::new((true, v120)),
                LrcPtr::new((true, String::from(v158))),
            ]);
            let v225: LrcPtr<Dice_ui::Heap0> = LrcPtr::new(Dice_ui::Heap0 {
                l0: v220.to_vec(),
                l1: None::<std::string::String>,
                l2: 1_i32,
                l3: 1_i32,
                l4: Dice_ui::US1::US1_0,
            });
            let v228: LrcPtr<Dice_ui::Heap1> = LrcPtr::new(Dice_ui::Heap1 {
                l0: v6,
                l1: v8,
                l2: v77,
                l3: leptos::prelude::ArcRwSignal::new(v225),
            });
            let v230: leptos::prelude::ArcRwSignal<LrcPtr<Dice_ui::Heap1>> =
                leptos::prelude::ArcRwSignal::new(v228);
            let v232: std::collections::HashMap<
                std::string::String,
                leptos::prelude::ArcRwSignal<bool>,
            > = std::collections::HashMap::new();
            let v235: LrcPtr<Dice_ui::Heap2> = LrcPtr::new(Dice_ui::Heap2 {
                l0: v230,
                l1: leptos::prelude::ArcRwSignal::new(v232),
            });
            let v237: bool = true;
            leptos::context::provide_context::<std::sync::Arc<Heap2>>(v235);
            let v243: string =
                string("leptos::IntoView::into_view(leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v238()) /> })");
            let v244 = leptos::IntoView::into_view(
                leptos::prelude::view! { <leptos_router::components::Router  children=Box::new(move || v238()) /> },
            );
            leptos::prelude::IntoAny::into_any(v244)
        }
        pub fn method3() {
            let v2: bool = true;
            leptos::prelude::mount_to_body(|| Func0::new(move || Dice_ui::closure2((), ()))()); //;
            ()
        }
        pub fn closure366(unitVar: (), unitVar_1: ()) {
            Dice_ui::method3();
        }
        pub fn method295() -> Func0<()> {
            Func0::new(move || Dice_ui::closure366((), ()))
        }
        pub fn method296(v0_1: Box<dyn Fn()>) -> Box<dyn Fn()> {
            v0_1
        }
        pub fn closure0(unitVar: (), v0_1: Array<string>) -> i32 {
            let v1: string = append(
                (append(string("main / args: "), (toString(v0_1)))),
                string(""),
            );
            let v3: bool = true;
            leptos::logging::log!("{}", v1);
            let _ = console_log::init_with_level(log::Level::Debug);
            console_error_panic_hook::set_once();
            {
                let v7: Option<web_sys::HtmlElement> = leptos::prelude::document().body();
                let v26: Dice_ui::US0 =
                    defaultValue(Dice_ui::US0::US0_1, map(Dice_ui::method0(), v7));
                let v34: string = append(
                    (append(
                        string("main / mount_to_body / body: "),
                        sprintf!("{:?}", v26.clone()),
                    )),
                    string(""),
                );
                let v36: bool = true;
                leptos::logging::log!("{}", v34);
                if let Dice_ui::US0::US0_0(v26_0_0) = &v26 {
                    let v38: string = Dice_ui::method1();
                    let v47: &str = &*v38;
                    let v72: web_sys::HtmlElement = Dice_ui::method2(v26_0_0.clone());
                    v72.set_inner_html(v47);
                    Dice_ui::method3()
                } else {
                    let v74 = Dice_ui::method295();
                    let v77: Box<dyn Fn()> = Dice_ui::method296(Box::new(move || v74()));
                    let v79: wasm_bindgen::closure::Closure<dyn Fn()> =
                        wasm_bindgen::closure::Closure::wrap(v77);
                    let v81: &wasm_bindgen::JsValue = wasm_bindgen::closure::Closure::as_ref(&v79);
                    let v83: &js_sys::Function = wasm_bindgen::JsCast::unchecked_ref(v81);
                    leptos::prelude::document()
                        .add_event_listener_with_callback("DOMContentLoaded", v83)
                        .unwrap();
                    v79.forget();
                    ()
                }
                0_i32
            }
        }
        pub fn v0() -> Func1<Array<string>, i32> {
            static v0: OnceInit<Func1<Array<string>, i32>> = OnceInit::new();
            v0.get_or_init(|| Func1::new(move |v: Array<string>| Dice_ui::closure0((), v)))
                .clone()
        }
        pub fn main(args: Array<string>) -> i32 {
            (Dice_ui::v0())(args)
        }
    }
}
pub use module_9c940d83::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/async__wasm.rs"]
mod module_763b9e6c;
pub use module_763b9e6c::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/common_wasm.rs"]
mod module_18f1c018;
pub use module_18f1c018::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/crypto_wasm.rs"]
mod module_c0301e36;
pub use module_c0301e36::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/date_time_wasm.rs"]
mod module_e5abed0b;
pub use module_e5abed0b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/file_system_wasm.rs"]
mod module_336d1dc9;
pub use module_336d1dc9::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/lib_wasm.rs"]
mod module_12dde172;
pub use module_12dde172::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/networking_wasm.rs"]
mod module_7e35832b;
pub use module_7e35832b::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/platform_wasm.rs"]
mod module_afd02cca;
pub use module_afd02cca::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/runtime_wasm.rs"]
mod module_a3c64389;
pub use module_a3c64389::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/sm_wasm.rs"]
mod module_8f227ecb;
pub use module_8f227ecb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/threading_wasm.rs"]
mod module_e08c16fb;
pub use module_e08c16fb::*;
#[path = "../../deps/polyglot/deps/spiral/lib/spiral/trace_wasm.rs"]
mod module_702ddcb4;
pub use module_702ddcb4::*;
#[path = "../../deps/polyglot/lib/fsharp/Common_wasm.rs"]
mod module_eb7e4788;
pub use module_eb7e4788::*;
pub mod Polyglot {
    // pub use crate::module_eb7e4788::Polyglot::*;
}
pub fn main() {
    let args = std::env::args().skip(1).map(fromString).collect();
    Dice_ui::main(array_from(args));
}
